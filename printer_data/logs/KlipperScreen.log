2024-02-24 17:47:18,226 [printer.py:reinit()] - Klipper version: v0.12.0-103-g6ce6fbbc-dirty
2024-02-24 17:47:18,226 [printer.py:reinit()] - # Extruders: 1
2024-02-24 17:47:18,226 [printer.py:reinit()] - # Temperature devices: 2
2024-02-24 17:47:18,226 [printer.py:reinit()] - # Fans: 4
2024-02-24 17:47:18,226 [printer.py:reinit()] - # Output pins: 1
2024-02-24 17:47:18,226 [printer.py:reinit()] - # Leds: 1
2024-02-24 17:47:18,233 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-02-24 17:47:18,234 [functions.py:log_start()] - KlipperScreen Version: v0.3.8-89-g2a5e9b3
2024-02-24 17:47:18,234 [functions.py:log_start()] - Python version: 3.9
2024-02-24 17:47:18,244 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2024-02-24 17:47:18,246 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-02-24 17:47:18,512 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor chamber_temp&fan&controller_fan controller_fan&heater_fan hotend_fan&heater_fan exhaust_fan&output_pin caselight&neopixel headlight
2024-02-24 17:47:18,521 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-02-24 17:47:18,521 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-02-24 17:47:18,529 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-02-24 17:47:18,530 [screen.py:init_klipper()] - Printer initialized
2024-02-24 17:47:18,530 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2024-02-24 17:47:18,530 [printer.py:change_state()] - Adding callback for state: ready
2024-02-24 17:47:18,541 [screen.py:show_panel()] - Reinitializing panel
2024-02-24 17:47:18,603 [main_menu.py:__init__()] - ### Making MainMenu
2024-02-24 17:47:18,608 [main_menu.py:add_device()] - Adding device: extruder
2024-02-24 17:47:18,612 [main_menu.py:add_device()] - Adding device: heater_bed
2024-02-24 17:47:18,617 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber_temp
2024-02-24 17:47:18,639 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-02-24 17:47:18,650 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-02-24 17:47:18,658 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'temperature_sensor chamber_temp', 'extruder']
2024-02-24 17:47:18,670 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2024-02-24 17:47:18,671 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-02-24 17:47:21,096 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-24 17:47:21,097 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'octoprint_compat', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-310-g67c98f6', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-02-24 17:47:21,106 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2024-02-24 17:47:21,215 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2024-02-24 17:47:21,218 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_28003C001150535556323420-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '^PG6', 'position_min': '0', 'position_endstop': '299', 'position_max': '299', 'homing_speed': '25', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'PG9', 'position_min': '0', 'position_endstop': '300', 'position_max': '303.5', 'homing_speed': '25', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': '!PG3', 'enable_pin': '!PG5', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '290', 'position_min': '-4.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA0', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': '!PF10', 'enable_pin': '!PG2', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PC13', 'dir_pin': 'PF0', 'enable_pin': '!PF1', 'rotation_distance': '21.9459674016', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.75', 'heater_pin': 'PA1', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF4', 'min_temp': '10', 'max_temp': '270', 'max_power': '1.0', 'min_extrude_temp': '170', 'pressure_advance': '0.05', 'pressure_advance_smooth_time': '0.040', 'control': 'pid', 'pid_kp': '26.572', 'pid_ki': '2.036', 'pid_kd': '86.691'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.5', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PA2', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF3', 'max_power': '1', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '55.196', 'pid_ki': '2.091', 'pid_kd': '364.295'}, 'probe': {'pin': 'PG15', 'x_offset': '0', 'y_offset': '0', 'speed': '10.0', 'samples': '5', 'samples_result': 'median', 'sample_retract_dist': '3.0', 'samples_tolerance': '0.006', 'samples_tolerance_retries': '6', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-1.500'}, 'fan': {'pin': 'PA8', 'kick_start_time': '0.5', 'off_below': '0.10'}, 'heater_fan hotend_fan': {'pin': 'PE5', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'controller_fan controller_fan': {'pin': 'PD12', 'kick_start_time': '0.5', 'heater': 'heater_bed'}, 'heater_fan exhaust_fan': {'pin': 'PD13', 'max_power': '1.0', 'shutdown_speed': '0.0', 'kick_start_time': '5.0', 'heater': 'heater_bed', 'heater_temp': '60', 'fan_speed': '1.0'}, 'output_pin caselight': {'pin': 'PD15', 'pwm': 'true', 'shutdown_value': '0', 'value': '1', 'cycle_time': '0.01'}, 'neopixel headlight': {'pin': 'PB0', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '0.0', 'initial_green': '0.2157', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'temperature_sensor chamber_temp': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF5', 'min_temp': '0', 'max_temp': '100', 'gcode_id': 'chamber_th'}, 'idle_timeout': {'timeout': '1800'}, 'safe_z_home': {'home_xy_position': '150,150', 'speed': '100', 'z_hop': '10'}, 'z_tilt': {'z_positions': '\n-50, 18\n150, 348\n350, 18', 'points': '\n30, 5\n150, 245\n270, 5', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'gcode_macro PRINT_START': {'gcode': '\nM117 Homing...\nG28\nATTACH_PROBE\nZ_TILT_ADJUST\nDOCK_PROBE\nG28\nM117 Printing...\n\n\n\n\n\n\n\nG0 X150 Y150 Z30 F3600'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_28003C001150535556323420-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': '^PG6', 'position_endstop': 299.0, 'position_min': 0.0, 'position_max': 299.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'PG9', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 303.5, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PF11', 'dir_pin': '!PG3', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG5', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -4.5, 'position_max': 290.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA0'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PF9', 'dir_pin': '!PF10', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG2'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF4', 'min_temp': 10.0, 'max_temp': 270.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 26.572, 'pid_ki': 2.036, 'pid_kd': 86.691, 'heater_pin': 'PA1', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PC13', 'pressure_advance': 0.05, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'PF0', 'rotation_distance': 21.9459674016, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 55.196, 'pid_ki': 2.091, 'pid_kd': 364.295, 'heater_pin': 'PA2', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'probe': {'z_offset': -1.5, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': 'PG15', 'speed': 10.0, 'lift_speed': 10.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 5, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.006, 'samples_tolerance_retries': 6}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE5', 'fan_speed': 1.0}, 'controller_fan controller_fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD12', 'fan_speed': 1.0, 'idle_speed': 1.0, 'idle_timeout': 30, 'heater': ['heater_bed']}, 'heater_fan exhaust_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 5.0, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13', 'fan_speed': 1.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PD15', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 1.0, 'maximum_mcu_duration': 0.0, 'value': 1.0, 'shutdown_value': 0.0}, 'neopixel headlight': {'pin': 'PB0', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 0.0, 'initial_green': 0.2157, 'initial_blue': 1.0, 'initial_white': 0.0}, 'temperature_sensor chamber_temp': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF5', 'min_temp': 0.0, 'max_temp': 100.0, 'gcode_id': 'chamber_th'}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'safe_z_home': {'home_xy_position': [150.0, 150.0], 'z_hop': 10.0, 'z_hop_speed': 15.0, 'speed': 100.0, 'move_to_previous': False}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [150.0, 348.0], [350.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 5.0], [150.0, 245.0], [270.0, 5.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'gcode_macro print_start': {'gcode': '\nM117 Homing...\nG28\nATTACH_PROBE\nZ_TILT_ADJUST\nDOCK_PROBE\nG28\nM117 Printing...\n\n\n\n\n\n\n\nG0 X150 Y150 Z30 F3600', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1500.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-02-24 17:47:21,219 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-24 17:47:21,223 [printer.py:reinit()] - Klipper version: v0.12.0-103-g6ce6fbbc-dirty
2024-02-24 17:47:21,223 [printer.py:reinit()] - # Extruders: 1
2024-02-24 17:47:21,223 [printer.py:reinit()] - # Temperature devices: 2
2024-02-24 17:47:21,223 [printer.py:reinit()] - # Fans: 4
2024-02-24 17:47:21,223 [printer.py:reinit()] - # Output pins: 1
2024-02-24 17:47:21,224 [printer.py:reinit()] - # Leds: 1
2024-02-24 17:47:21,235 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2024-02-24 17:47:21,236 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-02-24 17:47:21,480 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor chamber_temp&fan&controller_fan controller_fan&heater_fan hotend_fan&heater_fan exhaust_fan&output_pin caselight&neopixel headlight
2024-02-24 17:47:21,487 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-02-24 17:47:21,487 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-02-24 17:47:21,489 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-02-24 17:47:21,490 [screen.py:init_klipper()] - Printer initialized
2024-02-24 17:47:21,495 [screen.py:show_panel()] - Reinitializing panel
2024-02-24 17:47:21,550 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-02-24 17:47:21,769 [KlippyGtk.py:remove_dialog()] - Cannot remove dialog <Gtk.Dialog object at 0x7f58bfb080 (GtkDialog at 0x3f4b4bc0)>
2024-02-24 17:47:21,780 [KlippyGtk.py:Dialog()] - Showing dialog KlipperScreen (width=800, height=480)
2024-02-24 17:47:22,977 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-02-24 17:47:24,913 [screen.py:show_panel()] - Reinitializing panel
2024-02-24 17:47:25,047 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move > menu
2024-02-24 17:47:25,056 [menu.py:arrangeMenuItems()] - X > homing quad_gantry_level
2024-02-24 17:48:05,029 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G28 X Y'}
2024-02-24 17:48:23,221 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G28 Z'}
2024-02-24 17:48:34,632 [screen.py:_menu_go_back()] - #### Menu go back
2024-02-24 17:48:34,680 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-02-24 17:48:36,722 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move > menu
2024-02-24 17:48:36,732 [menu.py:arrangeMenuItems()] - X > homing quad_gantry_level
2024-02-24 17:48:37,668 [screen.py:_send_action()] - printer.gcode.script: {'script': 'Z_TILT_ADJUST'}
2024-02-24 17:49:44,397 [screen.py:_menu_go_back()] - #### Menu go back
2024-02-24 17:49:44,436 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-02-24 17:50:08,532 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move > menu
2024-02-24 17:50:08,549 [menu.py:arrangeMenuItems()] - X > homing quad_gantry_level
2024-02-24 17:50:09,592 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G28 Z'}
2024-02-24 17:50:19,597 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G28 Z'}
2024-02-24 17:50:31,061 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G28 Z'}
2024-02-24 17:45:49,727 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-02-24 17:45:49,728 [functions.py:log_start()] - KlipperScreen Version: v0.3.8-89-g2a5e9b3
2024-02-24 17:45:49,728 [functions.py:log_start()] - Python version: 3.9
2024-02-24 17:45:49,885 [config.py:get_config_file_location()] - Passed config (-c): .
2024-02-24 17:45:49,885 [config.py:__init__()] - Config path location: /home/pi/printer_data/config/KlipperScreen.conf
2024-02-24 17:45:49,899 [config.py:log_config()] -  ===== Config File =====

=======================
2024-02-24 17:45:49,901 [config.py:__init__()] - ====== Saved Def ======

[graph Printer]
heater_bed = False
extruder = False
temperature_sensor chamber_temp = False

=======================
2024-02-24 17:45:49,901 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-02-24 17:45:50,000 [config.py:create_translations()] - Selected lang: None OS lang: en_GB
2024-02-24 17:45:50,000 [config.py:install_language()] - Using lang en
2024-02-24 17:45:50,022 [screen.py:__init__()] - Screen resolution: 800x480
2024-02-24 17:45:50,023 [KlippyGtk.py:__init__()] - Font size: 16.6 (medium)
2024-02-24 17:45:50,490 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2024-02-24 17:45:50,498 [screen.py:set_screenblanking_timeout()] - Using DPMS
2024-02-24 17:45:50,504 [screen.py:initial_connection()] - Default printer: None
2024-02-24 17:45:50,533 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-02-24 17:45:50,534 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-02-24 17:45:50,570 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-02-24 17:45:50,576 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-02-24 17:45:50,590 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-24 17:45:50,598 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/access/oneshot_token
2024-02-24 17:45:50,599 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-02-24 17:45:50,608 [_logging.py:info()] - Websocket connected
2024-02-24 17:45:50,608 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-02-24 17:45:50,640 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-24 17:45:50,650 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2024-02-24 17:45:50,650 [printer.py:configure_cameras()] - Cameras: []
2024-02-24 17:45:50,651 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'history', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-310-g67c98f6', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-02-24 17:45:50,668 [KlippyRest.py:_do_request()] - 404 Client Error>>Not Found for url>>http://127.0.0.1:7125/printer/info
2024-02-24 17:45:54,256 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-24 17:45:54,266 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2024-02-24 17:45:54,267 [printer.py:configure_cameras()] - Cameras: []
2024-02-24 17:45:54,268 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'history', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-310-g67c98f6', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-02-24 17:45:54,277 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2024-02-24 17:45:54,461 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2024-02-24 17:45:54,463 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_28003C001150535556323420-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '^PG6', 'position_min': '0', 'position_endstop': '299', 'position_max': '299', 'homing_speed': '25', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'PG9', 'position_min': '0', 'position_endstop': '300', 'position_max': '303.5', 'homing_speed': '25', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': '!PG3', 'enable_pin': '!PG5', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '290', 'position_min': '-4.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA0', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': '!PF10', 'enable_pin': '!PG2', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PC13', 'dir_pin': 'PF0', 'enable_pin': '!PF1', 'rotation_distance': '21.9459674016', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.75', 'heater_pin': 'PA1', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF4', 'min_temp': '10', 'max_temp': '270', 'max_power': '1.0', 'min_extrude_temp': '170', 'pressure_advance': '0.05', 'pressure_advance_smooth_time': '0.040', 'control': 'pid', 'pid_kp': '26.572', 'pid_ki': '2.036', 'pid_kd': '86.691'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.5', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PA2', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF3', 'max_power': '1', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '55.196', 'pid_ki': '2.091', 'pid_kd': '364.295'}, 'probe': {'pin': 'PG15', 'x_offset': '0', 'y_offset': '0', 'speed': '10.0', 'samples': '5', 'samples_result': 'median', 'sample_retract_dist': '3.0', 'samples_tolerance': '0.006', 'samples_tolerance_retries': '6', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-1.500'}, 'fan': {'pin': 'PA8', 'kick_start_time': '0.5', 'off_below': '0.10'}, 'heater_fan hotend_fan': {'pin': 'PE5', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'controller_fan controller_fan': {'pin': 'PD12', 'kick_start_time': '0.5', 'heater': 'heater_bed'}, 'heater_fan exhaust_fan': {'pin': 'PD13', 'max_power': '1.0', 'shutdown_speed': '0.0', 'kick_start_time': '5.0', 'heater': 'heater_bed', 'heater_temp': '60', 'fan_speed': '1.0'}, 'output_pin caselight': {'pin': 'PD15', 'pwm': 'true', 'shutdown_value': '0', 'value': '1', 'cycle_time': '0.01'}, 'neopixel headlight': {'pin': 'PB0', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '0.0', 'initial_green': '0.2157', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'temperature_sensor chamber_temp': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF5', 'min_temp': '0', 'max_temp': '100', 'gcode_id': 'chamber_th'}, 'idle_timeout': {'timeout': '1800'}, 'safe_z_home': {'home_xy_position': '150,150', 'speed': '100', 'z_hop': '10'}, 'z_tilt': {'z_positions': '\n-50, 18\n150, 348\n350, 18', 'points': '\n30, 5\n150, 245\n270, 5', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'gcode_macro PRINT_START': {'gcode': '\nM117 Homing...\nG28\nATTACH_PROBE\nZ_TILT_ADJUST\nDOCK_PROBE\nG28\nM117 Printing...\n\n\n\n\n\n\n\nG0 X150 Y150 Z30 F3600'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_28003C001150535556323420-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': '^PG6', 'position_endstop': 299.0, 'position_min': 0.0, 'position_max': 299.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'PG9', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 303.5, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PF11', 'dir_pin': '!PG3', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG5', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -4.5, 'position_max': 290.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA0'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PF9', 'dir_pin': '!PF10', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG2'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF4', 'min_temp': 10.0, 'max_temp': 270.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 26.572, 'pid_ki': 2.036, 'pid_kd': 86.691, 'heater_pin': 'PA1', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PC13', 'pressure_advance': 0.05, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'PF0', 'rotation_distance': 21.9459674016, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 55.196, 'pid_ki': 2.091, 'pid_kd': 364.295, 'heater_pin': 'PA2', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'probe': {'z_offset': -1.5, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': 'PG15', 'speed': 10.0, 'lift_speed': 10.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 5, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.006, 'samples_tolerance_retries': 6}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE5', 'fan_speed': 1.0}, 'controller_fan controller_fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD12', 'fan_speed': 1.0, 'idle_speed': 1.0, 'idle_timeout': 30, 'heater': ['heater_bed']}, 'heater_fan exhaust_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 5.0, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13', 'fan_speed': 1.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PD15', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 1.0, 'maximum_mcu_duration': 0.0, 'value': 1.0, 'shutdown_value': 0.0}, 'neopixel headlight': {'pin': 'PB0', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 0.0, 'initial_green': 0.2157, 'initial_blue': 1.0, 'initial_white': 0.0}, 'temperature_sensor chamber_temp': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF5', 'min_temp': 0.0, 'max_temp': 100.0, 'gcode_id': 'chamber_th'}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'safe_z_home': {'home_xy_position': [150.0, 150.0], 'z_hop': 10.0, 'z_hop_speed': 15.0, 'speed': 100.0, 'move_to_previous': False}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [150.0, 348.0], [350.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 5.0], [150.0, 245.0], [270.0, 5.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'gcode_macro print_start': {'gcode': '\nM117 Homing...\nG28\nATTACH_PROBE\nZ_TILT_ADJUST\nDOCK_PROBE\nG28\nM117 Printing...\n\n\n\n\n\n\n\nG0 X150 Y150 Z30 F3600', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1500.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-02-24 17:45:54,465 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-24 17:45:54,465 [printer.py:reinit()] - Klipper version: v0.12.0-103-g6ce6fbbc-dirty
2024-02-24 17:45:54,466 [printer.py:reinit()] - # Extruders: 1
2024-02-24 17:45:54,466 [printer.py:reinit()] - # Temperature devices: 2
2024-02-24 17:45:54,466 [printer.py:reinit()] - # Fans: 4
2024-02-24 17:45:54,466 [printer.py:reinit()] - # Output pins: 1
2024-02-24 17:45:54,466 [printer.py:reinit()] - # Leds: 1
2024-02-24 17:45:54,478 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2024-02-24 17:45:54,479 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-02-24 17:45:54,746 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor chamber_temp&fan&controller_fan controller_fan&heater_fan hotend_fan&heater_fan exhaust_fan&output_pin caselight&neopixel headlight
2024-02-24 17:45:54,749 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-02-24 17:45:54,749 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-02-24 17:45:54,751 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-02-24 17:45:54,763 [screen.py:init_klipper()] - Printer initialized
2024-02-24 17:45:54,763 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2024-02-24 17:45:54,764 [printer.py:change_state()] - Adding callback for state: ready
2024-02-24 17:45:54,789 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-24 17:45:54,789 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'history', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-310-g67c98f6', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-02-24 17:45:54,799 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2024-02-24 17:45:54,962 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2024-02-24 17:45:54,964 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_28003C001150535556323420-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '^PG6', 'position_min': '0', 'position_endstop': '299', 'position_max': '299', 'homing_speed': '25', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'PG9', 'position_min': '0', 'position_endstop': '300', 'position_max': '303.5', 'homing_speed': '25', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': '!PG3', 'enable_pin': '!PG5', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '290', 'position_min': '-4.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA0', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': '!PF10', 'enable_pin': '!PG2', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PC13', 'dir_pin': 'PF0', 'enable_pin': '!PF1', 'rotation_distance': '21.9459674016', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.75', 'heater_pin': 'PA1', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF4', 'min_temp': '10', 'max_temp': '270', 'max_power': '1.0', 'min_extrude_temp': '170', 'pressure_advance': '0.05', 'pressure_advance_smooth_time': '0.040', 'control': 'pid', 'pid_kp': '26.572', 'pid_ki': '2.036', 'pid_kd': '86.691'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.5', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PA2', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF3', 'max_power': '1', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '55.196', 'pid_ki': '2.091', 'pid_kd': '364.295'}, 'probe': {'pin': 'PG15', 'x_offset': '0', 'y_offset': '0', 'speed': '10.0', 'samples': '5', 'samples_result': 'median', 'sample_retract_dist': '3.0', 'samples_tolerance': '0.006', 'samples_tolerance_retries': '6', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-1.500'}, 'fan': {'pin': 'PA8', 'kick_start_time': '0.5', 'off_below': '0.10'}, 'heater_fan hotend_fan': {'pin': 'PE5', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'controller_fan controller_fan': {'pin': 'PD12', 'kick_start_time': '0.5', 'heater': 'heater_bed'}, 'heater_fan exhaust_fan': {'pin': 'PD13', 'max_power': '1.0', 'shutdown_speed': '0.0', 'kick_start_time': '5.0', 'heater': 'heater_bed', 'heater_temp': '60', 'fan_speed': '1.0'}, 'output_pin caselight': {'pin': 'PD15', 'pwm': 'true', 'shutdown_value': '0', 'value': '1', 'cycle_time': '0.01'}, 'neopixel headlight': {'pin': 'PB0', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '0.0', 'initial_green': '0.2157', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'temperature_sensor chamber_temp': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF5', 'min_temp': '0', 'max_temp': '100', 'gcode_id': 'chamber_th'}, 'idle_timeout': {'timeout': '1800'}, 'safe_z_home': {'home_xy_position': '150,150', 'speed': '100', 'z_hop': '10'}, 'z_tilt': {'z_positions': '\n-50, 18\n150, 348\n350, 18', 'points': '\n30, 5\n150, 245\n270, 5', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'gcode_macro PRINT_START': {'gcode': '\nM117 Homing...\nG28\nATTACH_PROBE\nZ_TILT_ADJUST\nDOCK_PROBE\nG28\nM117 Printing...\n\n\n\n\n\n\n\nG0 X150 Y150 Z30 F3600'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_28003C001150535556323420-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': '^PG6', 'position_endstop': 299.0, 'position_min': 0.0, 'position_max': 299.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'PG9', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 303.5, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PF11', 'dir_pin': '!PG3', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG5', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -4.5, 'position_max': 290.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA0'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PF9', 'dir_pin': '!PF10', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG2'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF4', 'min_temp': 10.0, 'max_temp': 270.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 26.572, 'pid_ki': 2.036, 'pid_kd': 86.691, 'heater_pin': 'PA1', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PC13', 'pressure_advance': 0.05, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'PF0', 'rotation_distance': 21.9459674016, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 55.196, 'pid_ki': 2.091, 'pid_kd': 364.295, 'heater_pin': 'PA2', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'probe': {'z_offset': -1.5, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': 'PG15', 'speed': 10.0, 'lift_speed': 10.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 5, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.006, 'samples_tolerance_retries': 6}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE5', 'fan_speed': 1.0}, 'controller_fan controller_fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD12', 'fan_speed': 1.0, 'idle_speed': 1.0, 'idle_timeout': 30, 'heater': ['heater_bed']}, 'heater_fan exhaust_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 5.0, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13', 'fan_speed': 1.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PD15', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 1.0, 'maximum_mcu_duration': 0.0, 'value': 1.0, 'shutdown_value': 0.0}, 'neopixel headlight': {'pin': 'PB0', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 0.0, 'initial_green': 0.2157, 'initial_blue': 1.0, 'initial_white': 0.0}, 'temperature_sensor chamber_temp': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF5', 'min_temp': 0.0, 'max_temp': 100.0, 'gcode_id': 'chamber_th'}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'safe_z_home': {'home_xy_position': [150.0, 150.0], 'z_hop': 10.0, 'z_hop_speed': 15.0, 'speed': 100.0, 'move_to_previous': False}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [150.0, 348.0], [350.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 5.0], [150.0, 245.0], [270.0, 5.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'gcode_macro print_start': {'gcode': '\nM117 Homing...\nG28\nATTACH_PROBE\nZ_TILT_ADJUST\nDOCK_PROBE\nG28\nM117 Printing...\n\n\n\n\n\n\n\nG0 X150 Y150 Z30 F3600', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1500.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-02-24 17:45:54,965 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-24 17:45:54,966 [printer.py:reinit()] - Klipper version: v0.12.0-103-g6ce6fbbc-dirty
2024-02-24 17:45:54,966 [printer.py:reinit()] - # Extruders: 1
2024-02-24 17:45:54,966 [printer.py:reinit()] - # Temperature devices: 2
2024-02-24 17:45:54,966 [printer.py:reinit()] - # Fans: 4
2024-02-24 17:45:54,966 [printer.py:reinit()] - # Output pins: 1
2024-02-24 17:45:54,966 [printer.py:reinit()] - # Leds: 1
2024-02-24 17:45:54,975 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2024-02-24 17:45:54,977 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-02-24 17:45:55,233 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor chamber_temp&fan&controller_fan controller_fan&heater_fan hotend_fan&heater_fan exhaust_fan&output_pin caselight&neopixel headlight
2024-02-24 17:45:55,235 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-02-24 17:45:55,235 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-02-24 17:45:55,236 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-02-24 17:45:55,237 [screen.py:init_klipper()] - Printer initialized
2024-02-24 17:45:55,240 [screen.py:_load_panel()] - Loading panel: main_menu
2024-02-24 17:45:55,301 [main_menu.py:__init__()] - ### Making MainMenu
2024-02-24 17:45:55,306 [main_menu.py:add_device()] - Adding device: extruder
2024-02-24 17:45:55,312 [main_menu.py:add_device()] - Adding device: heater_bed
2024-02-24 17:45:55,318 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber_temp
2024-02-24 17:45:55,342 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-02-24 17:45:55,350 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-02-24 17:45:55,360 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'temperature_sensor chamber_temp', 'extruder']
2024-02-24 17:45:55,369 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2024-02-24 17:45:55,370 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-02-24 18:45:33,614 [screen.py:_load_panel()] - Loading panel: move
2024-02-24 18:45:33,673 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-02-24 18:45:34,598 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 X+25 F3000'}
2024-02-24 18:45:34,600 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-24 18:45:34,660 [screen.py:show_popup_message()] - error: Must home axis first: 25.000 0.000 0.000 [0.000]
2024-02-24 18:45:37,869 [screen.py:_load_panel()] - Loading panel: menu
2024-02-24 18:45:37,965 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move > menu
2024-02-24 18:45:37,974 [menu.py:arrangeMenuItems()] - X > homing quad_gantry_level
2024-02-24 18:45:40,793 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G28'}
2024-02-24 18:46:09,946 [screen.py:_menu_go_back()] - #### Menu go back
2024-02-24 18:46:09,974 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-02-24 18:46:11,777 [move.py:change_distance()] - ### Distance 10
2024-02-24 18:46:12,790 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y-10 F3000'}
2024-02-24 18:46:12,792 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-24 18:46:15,610 [move.py:change_distance()] - ### Distance .5
2024-02-24 18:46:16,120 [move.py:change_distance()] - ### Distance 1
2024-02-24 18:46:16,526 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y-1 F3000'}
2024-02-24 18:46:16,531 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-24 18:46:17,439 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y-1 F3000'}
2024-02-24 18:46:17,443 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-24 18:46:20,158 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+1 F3000'}
2024-02-24 18:46:20,163 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-24 18:47:36,455 [screen.py:_menu_go_back()] - #### Menu go back
2024-02-24 18:47:36,491 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-02-24 18:47:40,910 [main_menu.py:verify_max_temp()] - 250/270
2024-02-24 18:47:40,910 [KlippyWebsocket.py:set_tool_temp()] - Sending set_tool_temp: M104 T0 S250
2024-02-24 18:47:44,498 [main_menu.py:verify_max_temp()] - 110/120
2024-02-24 18:47:44,498 [KlippyWebsocket.py:set_bed_temp()] - Sending set_bed_temp: M140 S110
2024-02-24 18:49:05,752 [screen.py:_load_panel()] - Loading panel: extrude
2024-02-24 18:49:05,832 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > extrude
2024-02-24 18:49:07,889 [extrude.py:change_distance()] - ### Distance 25
2024-02-24 18:49:09,769 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M83
2024-02-24 18:49:09,770 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G1 E+25 F120'}
2024-02-24 18:49:25,387 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M83
2024-02-24 18:49:25,389 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G1 E+25 F120'}
2024-02-24 18:49:29,970 [extrude.py:change_speed()] - ### Speed 5
2024-02-24 18:49:47,346 [screen.py:_menu_go_back()] - #### Menu go back
2024-02-24 18:49:47,377 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-02-24 18:49:48,542 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-02-24 18:49:50,927 [move.py:change_distance()] - ### Distance 25
2024-02-24 18:49:51,358 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z+25 F600'}
2024-02-24 18:49:51,362 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-24 18:49:55,443 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z+25 F600'}
2024-02-24 18:49:55,446 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-24 18:50:02,583 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z+25 F600'}
2024-02-24 18:50:02,585 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-24 18:50:03,614 [screen.py:_menu_go_back()] - #### Menu go back
2024-02-24 18:50:03,642 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-02-24 18:50:04,563 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > extrude
2024-02-24 18:50:06,170 [extrude.py:change_speed()] - ### Speed 25
2024-02-24 18:50:07,250 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M83
2024-02-24 18:50:07,251 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G1 E+25 F1500'}
2024-02-24 18:50:13,350 [extrude.py:change_distance()] - ### Distance 15
2024-02-24 18:50:13,974 [extrude.py:change_distance()] - ### Distance 25
2024-02-24 18:50:14,602 [extrude.py:change_speed()] - ### Speed 5
2024-02-24 18:50:15,178 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M83
2024-02-24 18:50:15,180 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G1 E+25 F300'}
2024-02-24 18:50:22,966 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M83
2024-02-24 18:50:22,967 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G1 E+25 F300'}
2024-02-24 18:50:30,858 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M83
2024-02-24 18:50:30,859 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G1 E+25 F300'}
2024-02-24 18:50:31,694 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M83
2024-02-24 18:50:31,696 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G1 E+25 F300'}
2024-02-24 18:50:34,698 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M83
2024-02-24 18:50:34,700 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G1 E+25 F300'}
2024-02-24 18:50:47,679 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M83
2024-02-24 18:50:47,680 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G1 E+25 F300'}
2024-02-24 18:51:21,694 [screen.py:_menu_go_back()] - #### Menu go back
2024-02-24 18:51:21,733 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-02-24 18:54:07,884 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-02-24 18:54:09,734 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 X+25 F3000'}
2024-02-24 18:54:09,738 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-24 18:54:11,102 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 X+25 F3000'}
2024-02-24 18:54:11,104 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-24 18:54:12,161 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 X+25 F3000'}
2024-02-24 18:54:12,163 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-24 18:54:13,366 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 X+25 F3000'}
2024-02-24 18:54:13,368 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-24 18:54:14,542 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 X+25 F3000'}
2024-02-24 18:54:14,545 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-24 18:56:05,446 [screen.py:_menu_go_back()] - #### Menu go back
2024-02-24 18:56:05,477 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-02-24 18:59:54,108 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-02-24 18:59:55,536 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move > menu
2024-02-24 18:59:55,546 [menu.py:arrangeMenuItems()] - X > homing quad_gantry_level
2024-02-24 18:59:57,085 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G28'}
2024-02-24 19:00:25,070 [screen.py:_menu_go_back()] - #### Menu go back
2024-02-24 19:00:25,098 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-02-24 19:00:27,509 [screen.py:_menu_go_back()] - #### Menu go home
2024-02-24 19:00:27,525 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-02-24 19:00:28,706 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-02-24 19:00:29,211 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move > menu
2024-02-24 19:00:29,220 [menu.py:arrangeMenuItems()] - X > homing quad_gantry_level
2024-02-24 19:00:36,338 [screen.py:_menu_go_back()] - #### Menu go back
2024-02-24 19:00:36,371 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-02-24 19:00:37,233 [screen.py:_menu_go_back()] - #### Menu go back
2024-02-24 19:00:37,249 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-02-24 19:01:16,210 [screen.py:_go_to_submenu()] - #### Go to submenu more
2024-02-24 19:01:16,210 [screen.py:_go_to_submenu()] - #### Menu __main
2024-02-24 19:01:16,218 [screen.py:_load_panel()] - Loading panel: menu
2024-02-24 19:01:16,442 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more
2024-02-24 19:01:16,446 [menu.py:arrangeMenuItems()] - X > more bedlevel
2024-02-24 19:01:16,448 [menu.py:arrangeMenuItems()] - X > more bedmesh
2024-02-24 19:01:16,452 [menu.py:arrangeMenuItems()] - X > more retraction
2024-02-24 19:01:16,465 [menu.py:arrangeMenuItems()] - X > more power
2024-02-24 19:01:16,467 [menu.py:arrangeMenuItems()] - X > more camera
2024-02-24 19:01:16,471 [menu.py:arrangeMenuItems()] - X > more input_shaper
2024-02-24 19:01:16,478 [menu.py:arrangeMenuItems()] - X > more spoolman
2024-02-24 19:01:19,318 [screen.py:_load_panel()] - Loading panel: limits
2024-02-24 19:01:19,322 [limits.py:add_option()] - Adding option: max_accel
2024-02-24 19:01:19,326 [limits.py:add_option()] - Adding option: max_accel_to_decel
2024-02-24 19:01:19,331 [limits.py:add_option()] - Adding option: max_velocity
2024-02-24 19:01:19,336 [limits.py:add_option()] - Adding option: square_corner_velocity
2024-02-24 19:01:19,358 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more > limits
2024-02-24 19:01:22,067 [screen.py:_menu_go_back()] - #### Menu go back
2024-02-24 19:01:22,113 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more
2024-02-24 19:01:22,121 [menu.py:arrangeMenuItems()] - X > more bedlevel
2024-02-24 19:01:22,126 [menu.py:arrangeMenuItems()] - X > more bedmesh
2024-02-24 19:01:22,134 [menu.py:arrangeMenuItems()] - X > more retraction
2024-02-24 19:01:22,156 [menu.py:arrangeMenuItems()] - X > more power
2024-02-24 19:01:22,161 [menu.py:arrangeMenuItems()] - X > more camera
2024-02-24 19:01:22,170 [menu.py:arrangeMenuItems()] - X > more input_shaper
2024-02-24 19:01:22,179 [menu.py:arrangeMenuItems()] - X > more spoolman
2024-02-24 19:01:24,830 [screen.py:_load_panel()] - Loading panel: pins
2024-02-24 19:01:24,838 [pins.py:add_pin()] - Adding pin: output_pin caselight
2024-02-24 19:01:24,856 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more > pins
2024-02-24 19:01:26,077 [screen.py:_menu_go_back()] - #### Menu go back
2024-02-24 19:01:26,095 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more
2024-02-24 19:01:26,100 [menu.py:arrangeMenuItems()] - X > more bedlevel
2024-02-24 19:01:26,102 [menu.py:arrangeMenuItems()] - X > more bedmesh
2024-02-24 19:01:26,106 [menu.py:arrangeMenuItems()] - X > more retraction
2024-02-24 19:01:26,118 [menu.py:arrangeMenuItems()] - X > more power
2024-02-24 19:01:26,120 [menu.py:arrangeMenuItems()] - X > more camera
2024-02-24 19:01:26,125 [menu.py:arrangeMenuItems()] - X > more input_shaper
2024-02-24 19:01:26,131 [menu.py:arrangeMenuItems()] - X > more spoolman
2024-02-24 19:01:27,643 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more > pins
2024-02-24 19:01:28,223 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: SET_PIN PIN=caselight VALUE=0.35
2024-02-24 19:01:29,910 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: SET_PIN PIN=caselight VALUE=1.0
2024-02-24 19:01:30,466 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: SET_PIN PIN=caselight VALUE=0.0
2024-02-24 19:01:32,082 [screen.py:_menu_go_back()] - #### Menu go back
2024-02-24 19:01:32,121 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more
2024-02-24 19:01:32,130 [menu.py:arrangeMenuItems()] - X > more bedlevel
2024-02-24 19:01:32,135 [menu.py:arrangeMenuItems()] - X > more bedmesh
2024-02-24 19:01:32,143 [menu.py:arrangeMenuItems()] - X > more retraction
2024-02-24 19:01:32,163 [menu.py:arrangeMenuItems()] - X > more power
2024-02-24 19:01:32,165 [menu.py:arrangeMenuItems()] - X > more camera
2024-02-24 19:01:32,169 [menu.py:arrangeMenuItems()] - X > more input_shaper
2024-02-24 19:01:32,176 [menu.py:arrangeMenuItems()] - X > more spoolman
2024-02-24 19:01:32,621 [screen.py:_menu_go_back()] - #### Menu go back
2024-02-24 19:01:32,636 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-02-24 19:02:29,837 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-02-24 19:02:30,515 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move > menu
2024-02-24 19:02:30,526 [menu.py:arrangeMenuItems()] - X > homing quad_gantry_level
2024-02-24 19:02:31,897 [screen.py:_send_action()] - printer.gcode.script: {'script': 'Z_TILT_ADJUST'}
2024-02-24 19:02:32,669 [screen.py:_menu_go_back()] - #### Menu go back
2024-02-24 19:02:32,686 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-02-24 19:02:33,317 [screen.py:_menu_go_back()] - #### Menu go back
2024-02-24 19:02:33,332 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-02-24 19:03:26,228 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-02-24 19:03:27,401 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move > menu
2024-02-24 19:03:27,418 [menu.py:arrangeMenuItems()] - X > homing quad_gantry_level
2024-02-24 19:03:29,085 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G28'}
2024-02-24 19:03:53,978 [screen.py:_menu_go_back()] - #### Menu go back
2024-02-24 19:03:54,012 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-02-24 19:03:55,465 [screen.py:_menu_go_back()] - #### Menu go back
2024-02-24 19:03:55,481 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-02-24 19:03:58,162 [screen.py:_load_panel()] - Loading panel: print
2024-02-24 19:03:58,167 [print.py:__init__()] - 24h time is True
2024-02-24 19:03:58,193 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > print
2024-02-24 19:03:58,194 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-02-24 19:03:58,195 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-02-24 19:04:02,743 [KlippyGtk.py:Dialog()] - Showing dialog Print Voron_Design_Cube_v7_ASA_34m47s.gcode (width=800, height=480)
2024-02-24 19:04:04,093 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-02-24 19:04:04,093 [print.py:confirm_print_response()] - Starting print: Voron_Design_Cube_v7_ASA_34m47s.gcode
2024-02-24 19:04:04,094 [KlippyWebsocket.py:print_start()] - Sending printer.print.start
2024-02-24 19:04:04,119 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_DEFINE"
2024-02-24 19:04:04,191 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2024-02-24 19:04:04,192 [printer.py:change_state()] - Adding callback for state: printing
2024-02-24 19:04:04,199 [screen.py:_load_panel()] - Loading panel: job_status
2024-02-24 19:04:04,345 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-02-24 19:04:04,349 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-02-24 19:04:04,358 [job_status.py:update_file_metadata()] - Update Metadata. File: Voron_Design_Cube_v7_ASA_34m47s.gcode Size: 2898590
2024-02-24 19:04:04,364 [job_status.py:show_file_thumbnail()] - Voron_Design_Cube_v7_ASA_34m47s.gcode
2024-02-24 19:04:09,125 [screen.py:_go_to_submenu()] - #### Go to submenu 
2024-02-24 19:04:09,126 [screen.py:_go_to_submenu()] - #### Menu __print
2024-02-24 19:04:09,129 [files.py:remove_file_callback()] - callback not found <bound method Panel._callback_metadata of <panels.job_status.Panel object at 0x7f6c274520>>
2024-02-24 19:04:09,130 [screen.py:_load_panel()] - Loading panel: menu
2024-02-24 19:04:09,266 [screen.py:attach_panel()] - Current panel hierarchy: job_status > 
2024-02-24 19:04:09,277 [menu.py:arrangeMenuItems()] - X > move
2024-02-24 19:04:09,282 [menu.py:arrangeMenuItems()] - X > power
2024-02-24 19:04:09,291 [menu.py:arrangeMenuItems()] - X > camera
2024-02-24 19:04:09,297 [menu.py:arrangeMenuItems()] - X > retraction
2024-02-24 19:04:09,300 [menu.py:arrangeMenuItems()] - X > spoolman
2024-02-24 19:04:10,023 [screen.py:_load_panel()] - Loading panel: temperature
2024-02-24 19:04:10,040 [temperature.py:add_device()] - Adding device: extruder
2024-02-24 19:04:10,050 [temperature.py:add_device()] - Adding device: heater_bed
2024-02-24 19:04:10,060 [temperature.py:add_device()] - Adding device: temperature_sensor chamber_temp
2024-02-24 19:04:10,108 [screen.py:attach_panel()] - Current panel hierarchy: job_status >  > temperature
2024-02-24 19:04:10,766 [temperature.py:select_heater()] - Selecting extruder
2024-02-24 19:04:13,373 [temperature.py:verify_max_temp()] - 150/270
2024-02-24 19:04:13,373 [KlippyWebsocket.py:set_tool_temp()] - Sending set_tool_temp: M104 T0 S150
2024-02-24 19:04:16,037 [screen.py:_menu_go_back()] - #### Menu go back
2024-02-24 19:04:16,054 [screen.py:attach_panel()] - Current panel hierarchy: job_status > 
2024-02-24 19:04:16,066 [menu.py:arrangeMenuItems()] - X > move
2024-02-24 19:04:16,070 [menu.py:arrangeMenuItems()] - X > power
2024-02-24 19:04:16,077 [menu.py:arrangeMenuItems()] - X > camera
2024-02-24 19:04:16,083 [menu.py:arrangeMenuItems()] - X > retraction
2024-02-24 19:04:16,086 [menu.py:arrangeMenuItems()] - X > spoolman
2024-02-24 19:04:16,737 [screen.py:_menu_go_back()] - #### Menu go back
2024-02-24 19:04:16,756 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-02-24 19:04:16,763 [job_status.py:update_file_metadata()] - Update Metadata. File: Voron_Design_Cube_v7_ASA_34m47s.gcode Size: 2898590
2024-02-24 19:04:16,769 [job_status.py:show_file_thumbnail()] - Voron_Design_Cube_v7_ASA_34m47s.gcode
2024-02-24 19:05:01,590 [files.py:remove_file_callback()] - callback not found <bound method Panel._callback_metadata of <panels.job_status.Panel object at 0x7f6c274520>>
2024-02-24 19:05:01,590 [screen.py:_load_panel()] - Loading panel: fine_tune
2024-02-24 19:05:01,683 [screen.py:attach_panel()] - Current panel hierarchy: job_status > fine_tune
2024-02-24 19:05:03,274 [fine_tune.py:change_percent_delta()] - ### Delta 5
2024-02-24 19:05:04,363 [screen.py:_send_action()] - printer.gcode.script: {'script': 'M220 S95'}
2024-02-24 19:05:05,328 [screen.py:_menu_go_back()] - #### Menu go back
2024-02-24 19:05:05,368 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-02-24 19:05:05,386 [job_status.py:update_file_metadata()] - Update Metadata. File: Voron_Design_Cube_v7_ASA_34m47s.gcode Size: 2898590
2024-02-24 19:05:05,398 [job_status.py:show_file_thumbnail()] - Voron_Design_Cube_v7_ASA_34m47s.gcode
2024-02-24 19:06:57,750 [screen.py:show_popup_message()] - error: // Unknown command:"ATTACH_PROBE"
2024-02-24 19:07:49,534 [screen.py:show_popup_message()] - error: // Unknown command:"DOCK_PROBE"
2024-02-24 19:08:11,766 [screen.py:_go_to_submenu()] - #### Go to submenu 
2024-02-24 19:08:11,766 [screen.py:_go_to_submenu()] - #### Menu __print
2024-02-24 19:08:11,773 [files.py:remove_file_callback()] - callback not found <bound method Panel._callback_metadata of <panels.job_status.Panel object at 0x7f6c274520>>
2024-02-24 19:08:11,805 [screen.py:attach_panel()] - Current panel hierarchy: job_status > 
2024-02-24 19:08:11,828 [menu.py:arrangeMenuItems()] - X > move
2024-02-24 19:08:11,837 [menu.py:arrangeMenuItems()] - X > power
2024-02-24 19:08:11,852 [menu.py:arrangeMenuItems()] - X > camera
2024-02-24 19:08:11,860 [menu.py:arrangeMenuItems()] - X > retraction
2024-02-24 19:08:11,863 [menu.py:arrangeMenuItems()] - X > spoolman
2024-02-24 19:08:12,498 [screen.py:show_popup_message()] - error: Extrude below minimum temp
2024-02-24 19:08:12,689 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2024-02-24 19:08:12,689 [printer.py:change_state()] - Adding callback for state: ready
2024-02-24 19:08:13,278 [screen.py:attach_panel()] - Current panel hierarchy: job_status >  > temperature
2024-02-24 19:08:14,965 [screen.py:_menu_go_back()] - #### Menu go back
2024-02-24 19:08:14,982 [screen.py:attach_panel()] - Current panel hierarchy: job_status > 
2024-02-24 19:08:14,993 [menu.py:arrangeMenuItems()] - X > move
2024-02-24 19:08:14,998 [menu.py:arrangeMenuItems()] - X > power
2024-02-24 19:08:15,009 [menu.py:arrangeMenuItems()] - X > camera
2024-02-24 19:08:15,015 [menu.py:arrangeMenuItems()] - X > retraction
2024-02-24 19:08:15,019 [menu.py:arrangeMenuItems()] - X > spoolman
2024-02-24 19:08:15,569 [screen.py:_menu_go_back()] - #### Menu go back
2024-02-24 19:08:15,586 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-02-24 19:08:15,591 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'cancelled'
2024-02-24 19:08:15,594 [job_status.py:update_file_metadata()] - Update Metadata. File: Voron_Design_Cube_v7_ASA_34m47s.gcode Size: 2898590
2024-02-24 19:08:15,599 [job_status.py:show_file_thumbnail()] - Voron_Design_Cube_v7_ASA_34m47s.gcode
2024-02-24 19:08:23,906 [job_status.py:close_panel()] - Closing job_status panel
2024-02-24 19:08:23,911 [files.py:remove_file_callback()] - callback not found <bound method Panel._callback_metadata of <panels.job_status.Panel object at 0x7f6c274520>>
2024-02-24 19:08:23,911 [screen.py:show_panel()] - Reinitializing panel
2024-02-24 19:08:24,006 [main_menu.py:__init__()] - ### Making MainMenu
2024-02-24 19:08:24,011 [main_menu.py:add_device()] - Adding device: extruder
2024-02-24 19:08:24,016 [main_menu.py:add_device()] - Adding device: heater_bed
2024-02-24 19:08:24,021 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber_temp
2024-02-24 19:08:24,044 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-02-24 19:08:26,445 [screen.py:_go_to_submenu()] - #### Go to submenu more
2024-02-24 19:08:26,446 [screen.py:_go_to_submenu()] - #### Menu __main
2024-02-24 19:08:26,450 [screen.py:show_panel()] - Reinitializing panel
2024-02-24 19:08:26,626 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more
2024-02-24 19:08:26,628 [menu.py:arrangeMenuItems()] - X > more bedlevel
2024-02-24 19:08:26,631 [menu.py:arrangeMenuItems()] - X > more bedmesh
2024-02-24 19:08:26,635 [menu.py:arrangeMenuItems()] - X > more retraction
2024-02-24 19:08:26,647 [menu.py:arrangeMenuItems()] - X > more power
2024-02-24 19:08:26,649 [menu.py:arrangeMenuItems()] - X > more camera
2024-02-24 19:08:26,654 [menu.py:arrangeMenuItems()] - X > more input_shaper
2024-02-24 19:08:26,661 [menu.py:arrangeMenuItems()] - X > more spoolman
2024-02-24 19:08:27,614 [screen.py:_load_panel()] - Loading panel: console
2024-02-24 19:08:27,651 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more > console
2024-02-24 19:12:58,391 [screen.py:show_popup_message()] - error: The value 'exhaust_fan' is not valid for PIN
2024-02-24 19:15:56,564 [screen.py:show_popup_message()] - error: // Unknown command:"STATUS_HEATING"
2024-02-24 19:18:27,287 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-02-24 19:18:27,287 [printer.py:change_state()] - Adding callback for state: disconnected
2024-02-24 19:18:27,309 [screen.py:state_disconnected()] - ### Going to disconnected
2024-02-24 19:18:27,309 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-24 19:18:27,315 [files.py:remove_file_callback()] - callback not found <bound method Panel._callback_metadata of <panels.job_status.Panel object at 0x7f6c274520>>
2024-02-24 19:18:27,315 [screen.py:show_panel()] - Reinitializing panel
2024-02-24 19:18:27,370 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-02-24 19:18:31,003 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-24 19:18:31,013 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2024-02-24 19:18:31,014 [printer.py:configure_cameras()] - Cameras: []
2024-02-24 19:18:31,014 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'history', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-310-g67c98f6', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-02-24 19:18:31,023 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2024-02-24 19:18:31,037 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2024-02-24 19:18:31,040 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_28003C001150535556323420-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '^PG6', 'position_min': '0', 'position_endstop': '299', 'position_max': '299', 'homing_speed': '25', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'PG9', 'position_min': '0', 'position_endstop': '300', 'position_max': '303.5', 'homing_speed': '25', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': '!PG3', 'enable_pin': '!PG5', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '290', 'position_min': '-4.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA0', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': '!PF10', 'enable_pin': '!PG2', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PC13', 'dir_pin': 'PF0', 'enable_pin': '!PF1', 'rotation_distance': '21.9459674016', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.75', 'heater_pin': 'PA1', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF4', 'min_temp': '10', 'max_temp': '270', 'max_power': '1.0', 'min_extrude_temp': '170', 'pressure_advance': '0.05', 'pressure_advance_smooth_time': '0.040', 'control': 'pid', 'pid_kp': '26.572', 'pid_ki': '2.036', 'pid_kd': '86.691'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.5', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PA2', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF3', 'max_power': '1', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '55.196', 'pid_ki': '2.091', 'pid_kd': '364.295'}, 'probe': {'pin': 'PG15', 'x_offset': '0', 'y_offset': '0', 'speed': '10.0', 'samples': '5', 'samples_result': 'median', 'sample_retract_dist': '3.0', 'samples_tolerance': '0.006', 'samples_tolerance_retries': '6', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-1.500'}, 'fan': {'pin': 'PA8', 'kick_start_time': '0.5', 'off_below': '0.10'}, 'heater_fan hotend_fan': {'pin': 'PE5', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'controller_fan controller_fan': {'pin': 'PD12', 'kick_start_time': '0.5', 'heater': 'heater_bed'}, 'heater_fan exhaust_fan': {'pin': 'PD13', 'max_power': '1.0', 'shutdown_speed': '0.0', 'kick_start_time': '5.0', 'heater': 'heater_bed', 'heater_temp': '60', 'fan_speed': '1.0'}, 'output_pin caselight': {'pin': 'PD15', 'pwm': 'true', 'shutdown_value': '0', 'value': '1', 'cycle_time': '0.01'}, 'neopixel sb_leads': {'pin': 'PB0', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '0.0', 'initial_green': '0.2157', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'temperature_sensor chamber_temp': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF5', 'min_temp': '0', 'max_temp': '100', 'gcode_id': 'chamber_th'}, 'idle_timeout': {'timeout': '1800'}, 'safe_z_home': {'home_xy_position': '150,150', 'speed': '100', 'z_hop': '10'}, 'z_tilt': {'z_positions': '\n-50, 18\n150, 348\n350, 18', 'points': '\n30, 5\n150, 245\n270, 5', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'variable_thermal_config': "{\n'extruder': {\n'cool_temp': 40,\n'leds': 'logo',\n},\n'heater_bed': {\n'cool_temp': 40,\n'leds': 'nozzle',\n},\n}", 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nbed_mesh_calibrate\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_28003C001150535556323420-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': '^PG6', 'position_endstop': 299.0, 'position_min': 0.0, 'position_max': 299.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'PG9', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 303.5, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PF11', 'dir_pin': '!PG3', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG5', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -4.5, 'position_max': 290.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA0'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PF9', 'dir_pin': '!PF10', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG2'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF4', 'min_temp': 10.0, 'max_temp': 270.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 26.572, 'pid_ki': 2.036, 'pid_kd': 86.691, 'heater_pin': 'PA1', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PC13', 'pressure_advance': 0.05, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'PF0', 'rotation_distance': 21.9459674016, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 55.196, 'pid_ki': 2.091, 'pid_kd': 364.295, 'heater_pin': 'PA2', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'probe': {'z_offset': -1.5, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': 'PG15', 'speed': 10.0, 'lift_speed': 10.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 5, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.006, 'samples_tolerance_retries': 6}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE5', 'fan_speed': 1.0}, 'controller_fan controller_fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD12', 'fan_speed': 1.0, 'idle_speed': 1.0, 'idle_timeout': 30, 'heater': ['heater_bed']}, 'heater_fan exhaust_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 5.0, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13', 'fan_speed': 1.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PD15', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 1.0, 'maximum_mcu_duration': 0.0, 'value': 1.0, 'shutdown_value': 0.0}, 'neopixel sb_leads': {'pin': 'PB0', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 0.0, 'initial_green': 0.2157, 'initial_blue': 1.0, 'initial_white': 0.0}, 'temperature_sensor chamber_temp': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF5', 'min_temp': 0.0, 'max_temp': 100.0, 'gcode_id': 'chamber_th'}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'safe_z_home': {'home_xy_position': [150.0, 150.0], 'z_hop': 10.0, 'z_hop_speed': 15.0, 'speed': 100.0, 'move_to_previous': False}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [150.0, 348.0], [350.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 5.0], [150.0, 245.0], [270.0, 5.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'variable_thermal_config': "{\n'extruder': {\n'cool_temp': 40,\n'leds': 'logo',\n},\n'heater_bed': {\n'cool_temp': 40,\n'leds': 'nozzle',\n},\n}"}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nbed_mesh_calibrate\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1500.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-02-24 19:18:31,042 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-24 19:18:31,042 [printer.py:reinit()] - Klipper version: v0.12.0-103-g6ce6fbbc-dirty
2024-02-24 19:18:31,042 [printer.py:reinit()] - # Extruders: 1
2024-02-24 19:18:31,042 [printer.py:reinit()] - # Temperature devices: 2
2024-02-24 19:18:31,043 [printer.py:reinit()] - # Fans: 4
2024-02-24 19:18:31,043 [printer.py:reinit()] - # Output pins: 1
2024-02-24 19:18:31,043 [printer.py:reinit()] - # Leds: 1
2024-02-24 19:18:31,054 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2024-02-24 19:18:31,055 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-02-24 19:18:31,310 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor chamber_temp&fan&controller_fan controller_fan&heater_fan hotend_fan&heater_fan exhaust_fan&output_pin caselight&neopixel sb_leads
2024-02-24 19:18:31,312 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-02-24 19:18:31,312 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-02-24 19:18:31,313 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-02-24 19:18:31,313 [screen.py:init_klipper()] - Printer initialized
2024-02-24 19:18:31,313 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-02-24 19:18:31,313 [printer.py:change_state()] - Adding callback for state: startup
2024-02-24 19:18:35,049 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-02-24 19:18:35,050 [printer.py:change_state()] - Adding callback for state: ready
2024-02-24 19:18:35,055 [files.py:remove_file_callback()] - callback not found <bound method Panel._callback_metadata of <panels.job_status.Panel object at 0x7f6c274520>>
2024-02-24 19:18:35,055 [screen.py:show_panel()] - Reinitializing panel
2024-02-24 19:18:35,142 [main_menu.py:__init__()] - ### Making MainMenu
2024-02-24 19:18:35,151 [main_menu.py:add_device()] - Adding device: extruder
2024-02-24 19:18:35,157 [main_menu.py:add_device()] - Adding device: heater_bed
2024-02-24 19:18:35,164 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber_temp
2024-02-24 19:18:35,198 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-02-24 19:18:35,216 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-02-24 19:18:35,219 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'temperature_sensor chamber_temp', 'extruder']
2024-02-24 19:18:35,228 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2024-02-24 19:18:35,229 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-02-24 19:18:41,987 [screen.py:show_popup_message()] - error: The value 'sb_leds' is not valid for LED
2024-02-24 19:19:10,809 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-02-24 19:19:10,809 [printer.py:change_state()] - Adding callback for state: disconnected
2024-02-24 19:19:10,811 [screen.py:state_disconnected()] - ### Going to disconnected
2024-02-24 19:19:10,811 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-24 19:19:10,815 [files.py:remove_file_callback()] - callback not found <bound method Panel._callback_metadata of <panels.job_status.Panel object at 0x7f6c274520>>
2024-02-24 19:19:10,815 [screen.py:show_panel()] - Reinitializing panel
2024-02-24 19:19:10,885 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-02-24 19:19:14,006 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-24 19:19:14,015 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2024-02-24 19:19:14,016 [printer.py:configure_cameras()] - Cameras: []
2024-02-24 19:19:14,016 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'history', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-310-g67c98f6', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-02-24 19:19:14,025 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2024-02-24 19:19:14,040 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2024-02-24 19:19:14,042 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_28003C001150535556323420-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '^PG6', 'position_min': '0', 'position_endstop': '299', 'position_max': '299', 'homing_speed': '25', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'PG9', 'position_min': '0', 'position_endstop': '300', 'position_max': '303.5', 'homing_speed': '25', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': '!PG3', 'enable_pin': '!PG5', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '290', 'position_min': '-4.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA0', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': '!PF10', 'enable_pin': '!PG2', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PC13', 'dir_pin': 'PF0', 'enable_pin': '!PF1', 'rotation_distance': '21.9459674016', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.75', 'heater_pin': 'PA1', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF4', 'min_temp': '10', 'max_temp': '270', 'max_power': '1.0', 'min_extrude_temp': '170', 'pressure_advance': '0.05', 'pressure_advance_smooth_time': '0.040', 'control': 'pid', 'pid_kp': '26.572', 'pid_ki': '2.036', 'pid_kd': '86.691'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.5', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PA2', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF3', 'max_power': '1', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '55.196', 'pid_ki': '2.091', 'pid_kd': '364.295'}, 'probe': {'pin': 'PG15', 'x_offset': '0', 'y_offset': '0', 'speed': '10.0', 'samples': '5', 'samples_result': 'median', 'sample_retract_dist': '3.0', 'samples_tolerance': '0.006', 'samples_tolerance_retries': '6', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-1.500'}, 'fan': {'pin': 'PA8', 'kick_start_time': '0.5', 'off_below': '0.10'}, 'heater_fan hotend_fan': {'pin': 'PE5', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'controller_fan controller_fan': {'pin': 'PD12', 'kick_start_time': '0.5', 'heater': 'heater_bed'}, 'heater_fan exhaust_fan': {'pin': 'PD13', 'max_power': '1.0', 'shutdown_speed': '0.0', 'kick_start_time': '5.0', 'heater': 'heater_bed', 'heater_temp': '60', 'fan_speed': '1.0'}, 'output_pin caselight': {'pin': 'PD15', 'pwm': 'true', 'shutdown_value': '0', 'value': '1', 'cycle_time': '0.01'}, 'neopixel sb_leds': {'pin': 'PB0', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '0.0', 'initial_green': '0.2157', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'temperature_sensor chamber_temp': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF5', 'min_temp': '0', 'max_temp': '100', 'gcode_id': 'chamber_th'}, 'idle_timeout': {'timeout': '1800'}, 'safe_z_home': {'home_xy_position': '150,150', 'speed': '100', 'z_hop': '10'}, 'z_tilt': {'z_positions': '\n-50, 18\n150, 348\n350, 18', 'points': '\n30, 5\n150, 245\n270, 5', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'variable_thermal_config': "{\n'extruder': {\n'cool_temp': 40,\n'leds': 'logo',\n},\n'heater_bed': {\n'cool_temp': 40,\n'leds': 'nozzle',\n},\n}", 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nbed_mesh_calibrate\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_28003C001150535556323420-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': '^PG6', 'position_endstop': 299.0, 'position_min': 0.0, 'position_max': 299.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'PG9', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 303.5, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PF11', 'dir_pin': '!PG3', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG5', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -4.5, 'position_max': 290.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA0'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PF9', 'dir_pin': '!PF10', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG2'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF4', 'min_temp': 10.0, 'max_temp': 270.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 26.572, 'pid_ki': 2.036, 'pid_kd': 86.691, 'heater_pin': 'PA1', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PC13', 'pressure_advance': 0.05, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'PF0', 'rotation_distance': 21.9459674016, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 55.196, 'pid_ki': 2.091, 'pid_kd': 364.295, 'heater_pin': 'PA2', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'probe': {'z_offset': -1.5, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': 'PG15', 'speed': 10.0, 'lift_speed': 10.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 5, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.006, 'samples_tolerance_retries': 6}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE5', 'fan_speed': 1.0}, 'controller_fan controller_fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD12', 'fan_speed': 1.0, 'idle_speed': 1.0, 'idle_timeout': 30, 'heater': ['heater_bed']}, 'heater_fan exhaust_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 5.0, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13', 'fan_speed': 1.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PD15', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 1.0, 'maximum_mcu_duration': 0.0, 'value': 1.0, 'shutdown_value': 0.0}, 'neopixel sb_leds': {'pin': 'PB0', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 0.0, 'initial_green': 0.2157, 'initial_blue': 1.0, 'initial_white': 0.0}, 'temperature_sensor chamber_temp': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF5', 'min_temp': 0.0, 'max_temp': 100.0, 'gcode_id': 'chamber_th'}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'safe_z_home': {'home_xy_position': [150.0, 150.0], 'z_hop': 10.0, 'z_hop_speed': 15.0, 'speed': 100.0, 'move_to_previous': False}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [150.0, 348.0], [350.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 5.0], [150.0, 245.0], [270.0, 5.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'variable_thermal_config': "{\n'extruder': {\n'cool_temp': 40,\n'leds': 'logo',\n},\n'heater_bed': {\n'cool_temp': 40,\n'leds': 'nozzle',\n},\n}"}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nbed_mesh_calibrate\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1500.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-02-24 19:19:14,045 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-24 19:19:14,045 [printer.py:reinit()] - Klipper version: v0.12.0-103-g6ce6fbbc-dirty
2024-02-24 19:19:14,045 [printer.py:reinit()] - # Extruders: 1
2024-02-24 19:19:14,045 [printer.py:reinit()] - # Temperature devices: 2
2024-02-24 19:19:14,045 [printer.py:reinit()] - # Fans: 4
2024-02-24 19:19:14,045 [printer.py:reinit()] - # Output pins: 1
2024-02-24 19:19:14,045 [printer.py:reinit()] - # Leds: 1
2024-02-24 19:19:14,055 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2024-02-24 19:19:14,057 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-02-24 19:19:14,312 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor chamber_temp&fan&controller_fan controller_fan&heater_fan hotend_fan&heater_fan exhaust_fan&output_pin caselight&neopixel sb_leds
2024-02-24 19:19:14,313 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-02-24 19:19:14,314 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-02-24 19:19:14,314 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-02-24 19:19:14,314 [screen.py:init_klipper()] - Printer initialized
2024-02-24 19:19:14,314 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-02-24 19:19:14,314 [printer.py:change_state()] - Adding callback for state: startup
2024-02-24 19:19:18,558 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-02-24 19:19:18,558 [printer.py:change_state()] - Adding callback for state: ready
2024-02-24 19:19:18,562 [files.py:remove_file_callback()] - callback not found <bound method Panel._callback_metadata of <panels.job_status.Panel object at 0x7f6c274520>>
2024-02-24 19:19:18,563 [screen.py:show_panel()] - Reinitializing panel
2024-02-24 19:19:18,654 [main_menu.py:__init__()] - ### Making MainMenu
2024-02-24 19:19:18,660 [main_menu.py:add_device()] - Adding device: extruder
2024-02-24 19:19:18,664 [main_menu.py:add_device()] - Adding device: heater_bed
2024-02-24 19:19:18,669 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber_temp
2024-02-24 19:19:18,693 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-02-24 19:19:18,709 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-02-24 19:19:18,712 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'temperature_sensor chamber_temp', 'extruder']
2024-02-24 19:19:18,721 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2024-02-24 19:19:18,722 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-02-24 19:20:43,272 [files.py:add_file()] - File already exists: Voron_Design_Cube_v7_ASA_34m47s.gcode
2024-02-24 19:20:43,278 [print.py:_callback()] - updating Voron_Design_Cube_v7_ASA_34m47s.gcode
2024-02-24 19:20:43,281 [files.py:_callback()] - Error in getting metadata for .thumbs/Voron_Design_Cube_v7_ASA_34m47s-300x300.png. Retrying in 6 seconds
2024-02-24 19:20:43,284 [files.py:_callback()] - Error in getting metadata for .thumbs/Voron_Design_Cube_v7_ASA_34m47s-32x32.png. Retrying in 6 seconds
2024-02-24 19:20:49,837 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2024-02-24 19:20:49,837 [printer.py:change_state()] - Adding callback for state: printing
2024-02-24 19:20:49,847 [files.py:remove_file_callback()] - callback not found <bound method Panel._callback_metadata of <panels.job_status.Panel object at 0x7f6c274520>>
2024-02-24 19:20:49,848 [screen.py:show_panel()] - Reinitializing panel
2024-02-24 19:20:49,950 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-02-24 19:20:49,954 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-02-24 19:20:49,962 [job_status.py:update_file_metadata()] - Update Metadata. File: Voron_Design_Cube_v7_ASA_34m47s.gcode Size: 2883522
2024-02-24 19:20:49,966 [job_status.py:show_file_thumbnail()] - Voron_Design_Cube_v7_ASA_34m47s.gcode
2024-02-24 19:21:14,926 [screen.py:show_popup_message()] - error: // Unknown command:"BED_MESH_CLEAR"
2024-02-24 19:21:17,926 [screen.py:show_popup_message()] - error: Unknown sensor 'temperature_sensor chamber'
2024-02-24 19:21:18,159 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2024-02-24 19:21:18,159 [printer.py:change_state()] - Adding callback for state: ready
2024-02-24 19:21:18,165 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'cancelled'
2024-02-24 19:23:44,514 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-02-24 19:23:44,515 [printer.py:change_state()] - Adding callback for state: disconnected
2024-02-24 19:23:44,516 [screen.py:state_disconnected()] - ### Going to disconnected
2024-02-24 19:23:44,516 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-24 19:23:44,519 [files.py:remove_file_callback()] - callback not found <bound method Panel._callback_metadata of <panels.job_status.Panel object at 0x7f6c274520>>
2024-02-24 19:23:44,520 [screen.py:show_panel()] - Reinitializing panel
2024-02-24 19:23:44,585 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-02-24 19:23:48,003 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-24 19:23:48,011 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2024-02-24 19:23:48,013 [printer.py:configure_cameras()] - Cameras: []
2024-02-24 19:23:48,013 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'history', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-310-g67c98f6', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-02-24 19:23:48,022 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2024-02-24 19:23:48,036 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2024-02-24 19:23:48,038 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_28003C001150535556323420-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '^PG6', 'position_min': '0', 'position_endstop': '299', 'position_max': '299', 'homing_speed': '25', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'PG9', 'position_min': '0', 'position_endstop': '300', 'position_max': '303.5', 'homing_speed': '25', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': '!PG3', 'enable_pin': '!PG5', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '290', 'position_min': '-4.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA0', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': '!PF10', 'enable_pin': '!PG2', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PC13', 'dir_pin': 'PF0', 'enable_pin': '!PF1', 'rotation_distance': '21.9459674016', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.75', 'heater_pin': 'PA1', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF4', 'min_temp': '10', 'max_temp': '270', 'max_power': '1.0', 'min_extrude_temp': '170', 'pressure_advance': '0.05', 'pressure_advance_smooth_time': '0.040', 'control': 'pid', 'pid_kp': '26.572', 'pid_ki': '2.036', 'pid_kd': '86.691'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.5', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PA2', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF3', 'max_power': '1', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '55.196', 'pid_ki': '2.091', 'pid_kd': '364.295'}, 'probe': {'pin': 'PG15', 'x_offset': '0', 'y_offset': '0', 'speed': '10.0', 'samples': '5', 'samples_result': 'median', 'sample_retract_dist': '3.0', 'samples_tolerance': '0.006', 'samples_tolerance_retries': '6', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-1.500'}, 'fan': {'pin': 'PA8', 'kick_start_time': '0.5', 'off_below': '0.10'}, 'heater_fan hotend_fan': {'pin': 'PE5', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'controller_fan controller_fan': {'pin': 'PD12', 'kick_start_time': '0.5', 'heater': 'heater_bed'}, 'heater_fan exhaust_fan': {'pin': 'PD13', 'max_power': '1.0', 'shutdown_speed': '0.0', 'kick_start_time': '5.0', 'heater': 'heater_bed', 'heater_temp': '60', 'fan_speed': '1.0'}, 'output_pin caselight': {'pin': 'PD15', 'pwm': 'true', 'shutdown_value': '0', 'value': '1', 'cycle_time': '0.01'}, 'neopixel sb_leds': {'pin': 'PB0', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '0.0', 'initial_green': '0.2157', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'temperature_sensor chamber_temp': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF5', 'min_temp': '0', 'max_temp': '100', 'gcode_id': 'chamber_th'}, 'idle_timeout': {'timeout': '1800'}, 'safe_z_home': {'home_xy_position': '150,150', 'speed': '100', 'z_hop': '10'}, 'z_tilt': {'z_positions': '\n-50, 18\n150, 348\n350, 18', 'points': '\n30, 5\n150, 245\n270, 5', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'variable_thermal_config': "{\n'extruder': {\n'cool_temp': 40,\n'leds': 'logo',\n},\n'heater_bed': {\n'cool_temp': 40,\n'leds': 'nozzle',\n},\n}", 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nbed_mesh_calibrate\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END'}, 'bed_mesh': {'speed': '300', 'horizontal_move_z': '10', 'mesh_min': '40, 40', 'mesh_max': '260,260', 'fade_start': '0.6', 'fade_end': '10.0', 'probe_count': '5,5', 'algorithm': 'bicubic'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_28003C001150535556323420-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': '^PG6', 'position_endstop': 299.0, 'position_min': 0.0, 'position_max': 299.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'PG9', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 303.5, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PF11', 'dir_pin': '!PG3', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG5', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -4.5, 'position_max': 290.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA0'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PF9', 'dir_pin': '!PF10', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG2'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF4', 'min_temp': 10.0, 'max_temp': 270.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 26.572, 'pid_ki': 2.036, 'pid_kd': 86.691, 'heater_pin': 'PA1', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PC13', 'pressure_advance': 0.05, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'PF0', 'rotation_distance': 21.9459674016, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 55.196, 'pid_ki': 2.091, 'pid_kd': 364.295, 'heater_pin': 'PA2', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'probe': {'z_offset': -1.5, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': 'PG15', 'speed': 10.0, 'lift_speed': 10.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 5, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.006, 'samples_tolerance_retries': 6}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE5', 'fan_speed': 1.0}, 'controller_fan controller_fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD12', 'fan_speed': 1.0, 'idle_speed': 1.0, 'idle_timeout': 30, 'heater': ['heater_bed']}, 'heater_fan exhaust_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 5.0, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13', 'fan_speed': 1.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PD15', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 1.0, 'maximum_mcu_duration': 0.0, 'value': 1.0, 'shutdown_value': 0.0}, 'neopixel sb_leds': {'pin': 'PB0', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 0.0, 'initial_green': 0.2157, 'initial_blue': 1.0, 'initial_white': 0.0}, 'temperature_sensor chamber_temp': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF5', 'min_temp': 0.0, 'max_temp': 100.0, 'gcode_id': 'chamber_th'}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'safe_z_home': {'home_xy_position': [150.0, 150.0], 'z_hop': 10.0, 'z_hop_speed': 15.0, 'speed': 100.0, 'move_to_previous': False}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [150.0, 348.0], [350.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 5.0], [150.0, 245.0], [270.0, 5.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'variable_thermal_config': "{\n'extruder': {\n'cool_temp': 40,\n'leds': 'logo',\n},\n'heater_bed': {\n'cool_temp': 40,\n'leds': 'nozzle',\n},\n}"}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nbed_mesh_calibrate\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END', 'description': 'G-Code macro'}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [5, 5], 'mesh_min': [40.0, 40.0], 'mesh_max': [260.0, 260.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 10.0, 'speed': 300.0, 'fade_start': 0.6, 'fade_end': 10.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1500.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-02-24 19:23:48,040 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-24 19:23:48,041 [printer.py:reinit()] - Klipper version: v0.12.0-103-g6ce6fbbc-dirty
2024-02-24 19:23:48,041 [printer.py:reinit()] - # Extruders: 1
2024-02-24 19:23:48,041 [printer.py:reinit()] - # Temperature devices: 2
2024-02-24 19:23:48,041 [printer.py:reinit()] - # Fans: 4
2024-02-24 19:23:48,041 [printer.py:reinit()] - # Output pins: 1
2024-02-24 19:23:48,041 [printer.py:reinit()] - # Leds: 1
2024-02-24 19:23:48,051 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2024-02-24 19:23:48,052 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-02-24 19:23:48,310 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor chamber_temp&fan&controller_fan controller_fan&heater_fan hotend_fan&heater_fan exhaust_fan&output_pin caselight&neopixel sb_leds
2024-02-24 19:23:48,312 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-02-24 19:23:48,312 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-02-24 19:23:48,313 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-02-24 19:23:48,313 [screen.py:init_klipper()] - Printer initialized
2024-02-24 19:23:48,313 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-02-24 19:23:48,314 [printer.py:change_state()] - Adding callback for state: startup
2024-02-24 19:23:52,296 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-02-24 19:23:52,296 [printer.py:change_state()] - Adding callback for state: ready
2024-02-24 19:23:52,299 [files.py:remove_file_callback()] - callback not found <bound method Panel._callback_metadata of <panels.job_status.Panel object at 0x7f6c274520>>
2024-02-24 19:23:52,299 [screen.py:show_panel()] - Reinitializing panel
2024-02-24 19:23:52,351 [main_menu.py:__init__()] - ### Making MainMenu
2024-02-24 19:23:52,357 [main_menu.py:add_device()] - Adding device: extruder
2024-02-24 19:23:52,362 [main_menu.py:add_device()] - Adding device: heater_bed
2024-02-24 19:23:52,366 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber_temp
2024-02-24 19:23:52,391 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-02-24 19:23:52,408 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-02-24 19:23:52,411 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'temperature_sensor chamber_temp', 'extruder']
2024-02-24 19:23:52,420 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2024-02-24 19:23:52,421 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-02-24 19:24:27,829 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-02-24 19:24:27,829 [printer.py:change_state()] - Adding callback for state: disconnected
2024-02-24 19:24:27,831 [screen.py:state_disconnected()] - ### Going to disconnected
2024-02-24 19:24:27,832 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-24 19:24:27,835 [files.py:remove_file_callback()] - callback not found <bound method Panel._callback_metadata of <panels.job_status.Panel object at 0x7f6c274520>>
2024-02-24 19:24:27,836 [screen.py:show_panel()] - Reinitializing panel
2024-02-24 19:24:27,908 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-02-24 19:24:31,002 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-24 19:24:31,011 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2024-02-24 19:24:31,012 [printer.py:configure_cameras()] - Cameras: []
2024-02-24 19:24:31,013 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'history', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-310-g67c98f6', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-02-24 19:24:31,022 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2024-02-24 19:24:31,040 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2024-02-24 19:24:31,042 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_28003C001150535556323420-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '^PG6', 'position_min': '0', 'position_endstop': '299', 'position_max': '299', 'homing_speed': '25', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'PG9', 'position_min': '0', 'position_endstop': '300', 'position_max': '303.5', 'homing_speed': '25', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': '!PG3', 'enable_pin': '!PG5', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '290', 'position_min': '-4.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA0', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': '!PF10', 'enable_pin': '!PG2', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PC13', 'dir_pin': 'PF0', 'enable_pin': '!PF1', 'rotation_distance': '21.9459674016', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.75', 'heater_pin': 'PA1', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF4', 'min_temp': '10', 'max_temp': '270', 'max_power': '1.0', 'min_extrude_temp': '170', 'pressure_advance': '0.05', 'pressure_advance_smooth_time': '0.040', 'control': 'pid', 'pid_kp': '26.572', 'pid_ki': '2.036', 'pid_kd': '86.691'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.5', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PA2', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF3', 'max_power': '1', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '55.196', 'pid_ki': '2.091', 'pid_kd': '364.295'}, 'probe': {'pin': 'PG15', 'x_offset': '0', 'y_offset': '0', 'speed': '10.0', 'samples': '5', 'samples_result': 'median', 'sample_retract_dist': '3.0', 'samples_tolerance': '0.006', 'samples_tolerance_retries': '6', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-1.500'}, 'fan': {'pin': 'PA8', 'kick_start_time': '0.5', 'off_below': '0.10'}, 'heater_fan hotend_fan': {'pin': 'PE5', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'controller_fan controller_fan': {'pin': 'PD12', 'kick_start_time': '0.5', 'heater': 'heater_bed'}, 'heater_fan exhaust_fan': {'pin': 'PD13', 'max_power': '1.0', 'shutdown_speed': '0.0', 'kick_start_time': '5.0', 'heater': 'heater_bed', 'heater_temp': '60', 'fan_speed': '1.0'}, 'output_pin caselight': {'pin': 'PD15', 'pwm': 'true', 'shutdown_value': '0', 'value': '1', 'cycle_time': '0.01'}, 'neopixel sb_leds': {'pin': 'PB0', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '0.0', 'initial_green': '0.2157', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'temperature_sensor chamber': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF5', 'min_temp': '0', 'max_temp': '100', 'gcode_id': 'chamber_th'}, 'idle_timeout': {'timeout': '1800'}, 'safe_z_home': {'home_xy_position': '150,150', 'speed': '100', 'z_hop': '10'}, 'z_tilt': {'z_positions': '\n-50, 18\n150, 348\n350, 18', 'points': '\n30, 5\n150, 245\n270, 5', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'variable_thermal_config': "{\n'extruder': {\n'cool_temp': 40,\n'leds': 'logo',\n},\n'heater_bed': {\n'cool_temp': 40,\n'leds': 'nozzle',\n},\n}", 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nbed_mesh_calibrate\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END'}, 'bed_mesh': {'speed': '300', 'horizontal_move_z': '10', 'mesh_min': '40, 40', 'mesh_max': '260,260', 'fade_start': '0.6', 'fade_end': '10.0', 'probe_count': '5,5', 'algorithm': 'bicubic'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_28003C001150535556323420-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': '^PG6', 'position_endstop': 299.0, 'position_min': 0.0, 'position_max': 299.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'PG9', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 303.5, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PF11', 'dir_pin': '!PG3', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG5', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -4.5, 'position_max': 290.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA0'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PF9', 'dir_pin': '!PF10', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG2'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF4', 'min_temp': 10.0, 'max_temp': 270.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 26.572, 'pid_ki': 2.036, 'pid_kd': 86.691, 'heater_pin': 'PA1', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PC13', 'pressure_advance': 0.05, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'PF0', 'rotation_distance': 21.9459674016, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 55.196, 'pid_ki': 2.091, 'pid_kd': 364.295, 'heater_pin': 'PA2', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'probe': {'z_offset': -1.5, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': 'PG15', 'speed': 10.0, 'lift_speed': 10.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 5, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.006, 'samples_tolerance_retries': 6}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE5', 'fan_speed': 1.0}, 'controller_fan controller_fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD12', 'fan_speed': 1.0, 'idle_speed': 1.0, 'idle_timeout': 30, 'heater': ['heater_bed']}, 'heater_fan exhaust_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 5.0, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13', 'fan_speed': 1.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PD15', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 1.0, 'maximum_mcu_duration': 0.0, 'value': 1.0, 'shutdown_value': 0.0}, 'neopixel sb_leds': {'pin': 'PB0', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 0.0, 'initial_green': 0.2157, 'initial_blue': 1.0, 'initial_white': 0.0}, 'temperature_sensor chamber': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF5', 'min_temp': 0.0, 'max_temp': 100.0, 'gcode_id': 'chamber_th'}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'safe_z_home': {'home_xy_position': [150.0, 150.0], 'z_hop': 10.0, 'z_hop_speed': 15.0, 'speed': 100.0, 'move_to_previous': False}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [150.0, 348.0], [350.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 5.0], [150.0, 245.0], [270.0, 5.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'variable_thermal_config': "{\n'extruder': {\n'cool_temp': 40,\n'leds': 'logo',\n},\n'heater_bed': {\n'cool_temp': 40,\n'leds': 'nozzle',\n},\n}"}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nbed_mesh_calibrate\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END', 'description': 'G-Code macro'}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [5, 5], 'mesh_min': [40.0, 40.0], 'mesh_max': [260.0, 260.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 10.0, 'speed': 300.0, 'fade_start': 0.6, 'fade_end': 10.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1500.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-02-24 19:24:31,045 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-24 19:24:31,045 [printer.py:reinit()] - Klipper version: v0.12.0-103-g6ce6fbbc-dirty
2024-02-24 19:24:31,045 [printer.py:reinit()] - # Extruders: 1
2024-02-24 19:24:31,045 [printer.py:reinit()] - # Temperature devices: 2
2024-02-24 19:24:31,045 [printer.py:reinit()] - # Fans: 4
2024-02-24 19:24:31,045 [printer.py:reinit()] - # Output pins: 1
2024-02-24 19:24:31,046 [printer.py:reinit()] - # Leds: 1
2024-02-24 19:24:31,058 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2024-02-24 19:24:31,059 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-02-24 19:24:31,311 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor chamber&fan&controller_fan controller_fan&heater_fan hotend_fan&heater_fan exhaust_fan&output_pin caselight&neopixel sb_leds
2024-02-24 19:24:31,313 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-02-24 19:24:31,313 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-02-24 19:24:31,314 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-02-24 19:24:31,315 [screen.py:init_klipper()] - Printer initialized
2024-02-24 19:24:31,316 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-02-24 19:24:31,316 [printer.py:change_state()] - Adding callback for state: startup
2024-02-24 19:24:35,545 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-02-24 19:24:35,545 [printer.py:change_state()] - Adding callback for state: ready
2024-02-24 19:24:35,549 [files.py:remove_file_callback()] - callback not found <bound method Panel._callback_metadata of <panels.job_status.Panel object at 0x7f6c274520>>
2024-02-24 19:24:35,549 [screen.py:show_panel()] - Reinitializing panel
2024-02-24 19:24:35,658 [main_menu.py:__init__()] - ### Making MainMenu
2024-02-24 19:24:35,664 [main_menu.py:add_device()] - Adding device: extruder
2024-02-24 19:24:35,669 [main_menu.py:add_device()] - Adding device: heater_bed
2024-02-24 19:24:35,674 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber
2024-02-24 19:24:35,699 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-02-24 19:24:35,717 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-02-24 19:24:35,721 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'temperature_sensor chamber_temp', 'extruder']
2024-02-24 19:24:35,730 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2024-02-24 19:24:35,731 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-02-24 19:24:48,163 [screen.py:show_popup_message()] - error: Must home axis first: 0.000 0.000 10.000 [0.000]
2024-02-24 19:29:52,902 [KlippyGtk.py:Dialog()] - Showing dialog KlipperScreen (width=800, height=480)
2024-02-24 19:30:43,860 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2024-02-24 19:30:43,861 [printer.py:change_state()] - Adding callback for state: printing
2024-02-24 19:30:43,873 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-02-24 19:30:43,875 [files.py:remove_file_callback()] - callback not found <bound method Panel._callback_metadata of <panels.job_status.Panel object at 0x7f6c274520>>
2024-02-24 19:30:43,876 [screen.py:show_panel()] - Reinitializing panel
2024-02-24 19:30:43,994 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-02-24 19:30:43,999 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-02-24 19:30:44,007 [job_status.py:update_file_metadata()] - Update Metadata. File: Voron_Design_Cube_v7_ASA_34m47s.gcode Size: 2883522
2024-02-24 19:30:44,011 [job_status.py:show_file_thumbnail()] - Voron_Design_Cube_v7_ASA_34m47s.gcode
2024-02-24 19:36:16,218 [screen.py:_go_to_submenu()] - #### Go to submenu 
2024-02-24 19:36:16,218 [screen.py:_go_to_submenu()] - #### Menu __print
2024-02-24 19:36:16,224 [files.py:remove_file_callback()] - callback not found <bound method Panel._callback_metadata of <panels.job_status.Panel object at 0x7f6c274520>>
2024-02-24 19:36:16,224 [screen.py:show_panel()] - Reinitializing panel
2024-02-24 19:36:16,422 [screen.py:attach_panel()] - Current panel hierarchy: job_status > 
2024-02-24 19:36:16,433 [menu.py:arrangeMenuItems()] - X > move
2024-02-24 19:36:16,438 [menu.py:arrangeMenuItems()] - X > power
2024-02-24 19:36:16,445 [menu.py:arrangeMenuItems()] - X > camera
2024-02-24 19:36:16,450 [menu.py:arrangeMenuItems()] - X > retraction
2024-02-24 19:36:16,453 [menu.py:arrangeMenuItems()] - X > spoolman
2024-02-24 19:36:17,242 [screen.py:show_panel()] - Reinitializing panel
2024-02-24 19:36:17,252 [temperature.py:add_device()] - Adding device: extruder
2024-02-24 19:36:17,257 [temperature.py:add_device()] - Adding device: heater_bed
2024-02-24 19:36:17,262 [temperature.py:add_device()] - Adding device: temperature_sensor chamber
2024-02-24 19:36:17,293 [screen.py:attach_panel()] - Current panel hierarchy: job_status >  > temperature
2024-02-24 19:36:18,397 [screen.py:_menu_go_back()] - #### Menu go back
2024-02-24 19:36:18,416 [screen.py:attach_panel()] - Current panel hierarchy: job_status > 
2024-02-24 19:36:18,428 [menu.py:arrangeMenuItems()] - X > move
2024-02-24 19:36:18,432 [menu.py:arrangeMenuItems()] - X > power
2024-02-24 19:36:18,439 [menu.py:arrangeMenuItems()] - X > camera
2024-02-24 19:36:18,445 [menu.py:arrangeMenuItems()] - X > retraction
2024-02-24 19:36:18,448 [menu.py:arrangeMenuItems()] - X > spoolman
2024-02-24 19:36:18,589 [screen.py:_menu_go_back()] - #### Menu go back
2024-02-24 19:36:18,608 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-02-24 19:36:18,615 [job_status.py:update_file_metadata()] - Update Metadata. File: Voron_Design_Cube_v7_ASA_34m47s.gcode Size: 2883522
2024-02-24 19:36:18,620 [job_status.py:show_file_thumbnail()] - Voron_Design_Cube_v7_ASA_34m47s.gcode
2024-02-24 19:51:23,450 [screen.py:_go_to_submenu()] - #### Go to submenu 
2024-02-24 19:51:23,450 [screen.py:_go_to_submenu()] - #### Menu __print
2024-02-24 19:51:23,458 [files.py:remove_file_callback()] - callback not found <bound method Panel._callback_metadata of <panels.job_status.Panel object at 0x7f6c274520>>
2024-02-24 19:51:23,498 [screen.py:attach_panel()] - Current panel hierarchy: job_status > 
2024-02-24 19:51:23,532 [menu.py:arrangeMenuItems()] - X > move
2024-02-24 19:51:23,537 [menu.py:arrangeMenuItems()] - X > power
2024-02-24 19:51:23,545 [menu.py:arrangeMenuItems()] - X > camera
2024-02-24 19:51:23,552 [menu.py:arrangeMenuItems()] - X > retraction
2024-02-24 19:51:23,555 [menu.py:arrangeMenuItems()] - X > spoolman
2024-02-24 19:51:25,465 [screen.py:_menu_go_back()] - #### Menu go back
2024-02-24 19:51:25,485 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-02-24 19:51:25,493 [job_status.py:update_file_metadata()] - Update Metadata. File: Voron_Design_Cube_v7_ASA_34m47s.gcode Size: 2883522
2024-02-24 19:51:25,497 [job_status.py:show_file_thumbnail()] - Voron_Design_Cube_v7_ASA_34m47s.gcode
2024-02-24 19:51:26,191 [files.py:remove_file_callback()] - callback not found <bound method Panel._callback_metadata of <panels.job_status.Panel object at 0x7f6c274520>>
2024-02-24 19:51:26,191 [screen.py:show_panel()] - Reinitializing panel
2024-02-24 19:51:26,242 [screen.py:attach_panel()] - Current panel hierarchy: job_status > fine_tune
2024-02-24 19:51:27,753 [fine_tune.py:change_percent_delta()] - ### Delta 5
2024-02-24 19:51:28,378 [screen.py:_send_action()] - printer.gcode.script: {'script': 'M220 S95'}
2024-02-24 19:51:29,512 [screen.py:_send_action()] - printer.gcode.script: {'script': 'M220 S90'}
2024-02-24 19:51:30,254 [screen.py:_menu_go_back()] - #### Menu go back
2024-02-24 19:51:30,294 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-02-24 19:51:30,310 [job_status.py:update_file_metadata()] - Update Metadata. File: Voron_Design_Cube_v7_ASA_34m47s.gcode Size: 2883522
2024-02-24 19:51:30,319 [job_status.py:show_file_thumbnail()] - Voron_Design_Cube_v7_ASA_34m47s.gcode
2024-02-24 19:51:41,216 [files.py:remove_file_callback()] - callback not found <bound method Panel._callback_metadata of <panels.job_status.Panel object at 0x7f6c274520>>
2024-02-24 19:51:41,249 [screen.py:attach_panel()] - Current panel hierarchy: job_status > fine_tune
2024-02-24 19:51:43,233 [screen.py:_menu_go_back()] - #### Menu go back
2024-02-24 19:51:43,252 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-02-24 19:51:43,260 [job_status.py:update_file_metadata()] - Update Metadata. File: Voron_Design_Cube_v7_ASA_34m47s.gcode Size: 2883522
2024-02-24 19:51:43,265 [job_status.py:show_file_thumbnail()] - Voron_Design_Cube_v7_ASA_34m47s.gcode
2024-02-24 20:10:55,060 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2024-02-24 20:10:55,060 [printer.py:change_state()] - Adding callback for state: ready
2024-02-24 20:10:55,078 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'complete'
2024-02-24 20:27:32,660 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-02-24 20:27:32,661 [functions.py:log_start()] - KlipperScreen Version: v0.3.8-89-g2a5e9b3
2024-02-24 20:27:32,661 [functions.py:log_start()] - Python version: 3.9
2024-02-24 20:27:32,829 [config.py:get_config_file_location()] - Passed config (-c): .
2024-02-24 20:27:32,830 [config.py:__init__()] - Config path location: /home/pi/printer_data/config/KlipperScreen.conf
2024-02-24 20:27:32,845 [config.py:log_config()] -  ===== Config File =====

=======================
2024-02-24 20:27:32,847 [config.py:__init__()] - ====== Saved Def ======

[graph Printer]
heater_bed = False
extruder = False
temperature_sensor chamber_temp = False

=======================
2024-02-24 20:27:32,847 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-02-24 20:27:32,956 [config.py:create_translations()] - Selected lang: None OS lang: en_GB
2024-02-24 20:27:32,956 [config.py:install_language()] - Using lang en
2024-02-24 20:27:32,973 [screen.py:__init__()] - Screen resolution: 800x480
2024-02-24 20:27:32,974 [KlippyGtk.py:__init__()] - Font size: 16.6 (medium)
2024-02-24 20:27:33,467 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2024-02-24 20:27:33,475 [screen.py:set_screenblanking_timeout()] - Using DPMS
2024-02-24 20:27:33,481 [screen.py:initial_connection()] - Default printer: None
2024-02-24 20:27:33,511 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-02-24 20:27:33,511 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-02-24 20:27:33,547 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-02-24 20:27:33,552 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-02-24 20:27:33,566 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-24 20:27:33,575 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/access/oneshot_token
2024-02-24 20:27:33,576 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-02-24 20:27:33,585 [_logging.py:info()] - Websocket connected
2024-02-24 20:27:33,585 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-02-24 20:27:33,615 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-24 20:27:33,623 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2024-02-24 20:27:33,624 [printer.py:configure_cameras()] - Cameras: []
2024-02-24 20:27:33,624 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'update_manager', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-310-g67c98f6', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-02-24 20:27:33,641 [KlippyRest.py:_do_request()] - 404 Client Error>>Not Found for url>>http://127.0.0.1:7125/printer/info
2024-02-24 20:27:36,408 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-24 20:27:36,416 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2024-02-24 20:27:36,416 [printer.py:configure_cameras()] - Cameras: []
2024-02-24 20:27:36,417 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'update_manager', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-310-g67c98f6', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-02-24 20:27:36,426 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2024-02-24 20:27:36,674 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2024-02-24 20:27:36,676 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_28003C001150535556323420-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '^PG6', 'position_min': '0', 'position_endstop': '299', 'position_max': '299', 'homing_speed': '25', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'PG9', 'position_min': '0', 'position_endstop': '300', 'position_max': '303.5', 'homing_speed': '25', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': '!PG3', 'enable_pin': '!PG5', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '290', 'position_min': '-4.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA0', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': '!PF10', 'enable_pin': '!PG2', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PC13', 'dir_pin': 'PF0', 'enable_pin': '!PF1', 'rotation_distance': '21.9459674016', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.75', 'heater_pin': 'PA1', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF4', 'min_temp': '10', 'max_temp': '270', 'max_power': '1.0', 'min_extrude_temp': '170', 'pressure_advance': '0.05', 'pressure_advance_smooth_time': '0.040', 'control': 'pid', 'pid_kp': '26.572', 'pid_ki': '2.036', 'pid_kd': '86.691'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.5', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PA2', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF3', 'max_power': '1', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '55.196', 'pid_ki': '2.091', 'pid_kd': '364.295'}, 'probe': {'pin': 'PG15', 'x_offset': '0', 'y_offset': '0', 'speed': '10.0', 'samples': '5', 'samples_result': 'median', 'sample_retract_dist': '3.0', 'samples_tolerance': '0.006', 'samples_tolerance_retries': '6', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-1.500'}, 'fan': {'pin': 'PA8', 'kick_start_time': '0.5', 'off_below': '0.10'}, 'heater_fan hotend_fan': {'pin': 'PE5', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'controller_fan controller_fan': {'pin': 'PD12', 'kick_start_time': '0.5', 'heater': 'heater_bed'}, 'heater_fan exhaust_fan': {'pin': 'PD13', 'max_power': '1.0', 'shutdown_speed': '0.0', 'kick_start_time': '5.0', 'heater': 'heater_bed', 'heater_temp': '60', 'fan_speed': '1.0'}, 'output_pin caselight': {'pin': 'PD15', 'pwm': 'true', 'shutdown_value': '0', 'value': '1', 'cycle_time': '0.01'}, 'neopixel sb_leds': {'pin': 'PB0', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '0.0', 'initial_green': '0.2157', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'temperature_sensor chamber': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF5', 'min_temp': '0', 'max_temp': '100', 'gcode_id': 'chamber_th'}, 'idle_timeout': {'timeout': '1800'}, 'safe_z_home': {'home_xy_position': '150,150', 'speed': '100', 'z_hop': '10'}, 'z_tilt': {'z_positions': '\n-50, 18\n150, 348\n350, 18', 'points': '\n30, 5\n150, 245\n270, 5', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nbed_mesh_calibrate\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'variable_thermal_config': "{\n'extruder': {\n'cool_temp': 40,\n'leds': 'logo',\n},\n'heater_bed': {\n'cool_temp': 40,\n'leds': 'nozzle',\n},\n}", 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'bed_mesh': {'speed': '300', 'horizontal_move_z': '10', 'mesh_min': '40, 40', 'mesh_max': '260,260', 'fade_start': '0.6', 'fade_end': '10.0', 'probe_count': '5,5', 'algorithm': 'bicubic'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_28003C001150535556323420-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': '^PG6', 'position_endstop': 299.0, 'position_min': 0.0, 'position_max': 299.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'PG9', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 303.5, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PF11', 'dir_pin': '!PG3', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG5', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -4.5, 'position_max': 290.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA0'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PF9', 'dir_pin': '!PF10', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG2'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF4', 'min_temp': 10.0, 'max_temp': 270.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 26.572, 'pid_ki': 2.036, 'pid_kd': 86.691, 'heater_pin': 'PA1', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PC13', 'pressure_advance': 0.05, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'PF0', 'rotation_distance': 21.9459674016, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 55.196, 'pid_ki': 2.091, 'pid_kd': 364.295, 'heater_pin': 'PA2', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'probe': {'z_offset': -1.5, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': 'PG15', 'speed': 10.0, 'lift_speed': 10.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 5, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.006, 'samples_tolerance_retries': 6}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE5', 'fan_speed': 1.0}, 'controller_fan controller_fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD12', 'fan_speed': 1.0, 'idle_speed': 1.0, 'idle_timeout': 30, 'heater': ['heater_bed']}, 'heater_fan exhaust_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 5.0, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13', 'fan_speed': 1.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PD15', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 1.0, 'maximum_mcu_duration': 0.0, 'value': 1.0, 'shutdown_value': 0.0}, 'neopixel sb_leds': {'pin': 'PB0', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 0.0, 'initial_green': 0.2157, 'initial_blue': 1.0, 'initial_white': 0.0}, 'temperature_sensor chamber': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF5', 'min_temp': 0.0, 'max_temp': 100.0, 'gcode_id': 'chamber_th'}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'safe_z_home': {'home_xy_position': [150.0, 150.0], 'z_hop': 10.0, 'z_hop_speed': 15.0, 'speed': 100.0, 'move_to_previous': False}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [150.0, 348.0], [350.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 5.0], [150.0, 245.0], [270.0, 5.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nbed_mesh_calibrate\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END', 'description': 'G-Code macro'}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'variable_thermal_config': "{\n'extruder': {\n'cool_temp': 40,\n'leds': 'logo',\n},\n'heater_bed': {\n'cool_temp': 40,\n'leds': 'nozzle',\n},\n}"}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [5, 5], 'mesh_min': [40.0, 40.0], 'mesh_max': [260.0, 260.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 10.0, 'speed': 300.0, 'fade_start': 0.6, 'fade_end': 10.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1500.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-02-24 20:27:36,677 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-24 20:27:36,678 [printer.py:reinit()] - Klipper version: v0.12.0-103-g6ce6fbbc-dirty
2024-02-24 20:27:36,678 [printer.py:reinit()] - # Extruders: 1
2024-02-24 20:27:36,678 [printer.py:reinit()] - # Temperature devices: 2
2024-02-24 20:27:36,678 [printer.py:reinit()] - # Fans: 4
2024-02-24 20:27:36,678 [printer.py:reinit()] - # Output pins: 1
2024-02-24 20:27:36,678 [printer.py:reinit()] - # Leds: 1
2024-02-24 20:27:36,689 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2024-02-24 20:27:36,690 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-02-24 20:27:36,955 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor chamber&fan&controller_fan controller_fan&heater_fan hotend_fan&heater_fan exhaust_fan&output_pin caselight&neopixel sb_leds
2024-02-24 20:27:36,958 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-02-24 20:27:36,958 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-02-24 20:27:36,959 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-02-24 20:27:36,960 [screen.py:init_klipper()] - Printer initialized
2024-02-24 20:27:36,960 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2024-02-24 20:27:36,960 [printer.py:change_state()] - Adding callback for state: ready
2024-02-24 20:27:36,964 [screen.py:_load_panel()] - Loading panel: main_menu
2024-02-24 20:27:37,036 [main_menu.py:__init__()] - ### Making MainMenu
2024-02-24 20:27:37,043 [main_menu.py:add_device()] - Adding device: extruder
2024-02-24 20:27:37,050 [main_menu.py:add_device()] - Adding device: heater_bed
2024-02-24 20:27:37,056 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber
2024-02-24 20:27:37,087 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-02-24 20:27:37,103 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-02-24 20:27:37,115 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'temperature_sensor chamber', 'extruder']
2024-02-24 20:27:37,129 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2024-02-24 20:27:37,132 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-02-24 20:27:37,410 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-24 20:27:37,413 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'update_manager', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-310-g67c98f6', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-02-24 20:27:37,425 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2024-02-24 20:27:37,679 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2024-02-24 20:27:37,681 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_28003C001150535556323420-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '^PG6', 'position_min': '0', 'position_endstop': '299', 'position_max': '299', 'homing_speed': '25', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'PG9', 'position_min': '0', 'position_endstop': '300', 'position_max': '303.5', 'homing_speed': '25', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': '!PG3', 'enable_pin': '!PG5', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '290', 'position_min': '-4.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA0', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': '!PF10', 'enable_pin': '!PG2', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PC13', 'dir_pin': 'PF0', 'enable_pin': '!PF1', 'rotation_distance': '21.9459674016', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.75', 'heater_pin': 'PA1', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF4', 'min_temp': '10', 'max_temp': '270', 'max_power': '1.0', 'min_extrude_temp': '170', 'pressure_advance': '0.05', 'pressure_advance_smooth_time': '0.040', 'control': 'pid', 'pid_kp': '26.572', 'pid_ki': '2.036', 'pid_kd': '86.691'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.5', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PA2', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF3', 'max_power': '1', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '55.196', 'pid_ki': '2.091', 'pid_kd': '364.295'}, 'probe': {'pin': 'PG15', 'x_offset': '0', 'y_offset': '0', 'speed': '10.0', 'samples': '5', 'samples_result': 'median', 'sample_retract_dist': '3.0', 'samples_tolerance': '0.006', 'samples_tolerance_retries': '6', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-1.500'}, 'fan': {'pin': 'PA8', 'kick_start_time': '0.5', 'off_below': '0.10'}, 'heater_fan hotend_fan': {'pin': 'PE5', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'controller_fan controller_fan': {'pin': 'PD12', 'kick_start_time': '0.5', 'heater': 'heater_bed'}, 'heater_fan exhaust_fan': {'pin': 'PD13', 'max_power': '1.0', 'shutdown_speed': '0.0', 'kick_start_time': '5.0', 'heater': 'heater_bed', 'heater_temp': '60', 'fan_speed': '1.0'}, 'output_pin caselight': {'pin': 'PD15', 'pwm': 'true', 'shutdown_value': '0', 'value': '1', 'cycle_time': '0.01'}, 'neopixel sb_leds': {'pin': 'PB0', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '0.0', 'initial_green': '0.2157', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'temperature_sensor chamber': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF5', 'min_temp': '0', 'max_temp': '100', 'gcode_id': 'chamber_th'}, 'idle_timeout': {'timeout': '1800'}, 'safe_z_home': {'home_xy_position': '150,150', 'speed': '100', 'z_hop': '10'}, 'z_tilt': {'z_positions': '\n-50, 18\n150, 348\n350, 18', 'points': '\n30, 5\n150, 245\n270, 5', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nbed_mesh_calibrate\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'variable_thermal_config': "{\n'extruder': {\n'cool_temp': 40,\n'leds': 'logo',\n},\n'heater_bed': {\n'cool_temp': 40,\n'leds': 'nozzle',\n},\n}", 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'bed_mesh': {'speed': '300', 'horizontal_move_z': '10', 'mesh_min': '40, 40', 'mesh_max': '260,260', 'fade_start': '0.6', 'fade_end': '10.0', 'probe_count': '5,5', 'algorithm': 'bicubic'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_28003C001150535556323420-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': '^PG6', 'position_endstop': 299.0, 'position_min': 0.0, 'position_max': 299.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'PG9', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 303.5, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PF11', 'dir_pin': '!PG3', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG5', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -4.5, 'position_max': 290.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA0'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PF9', 'dir_pin': '!PF10', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG2'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF4', 'min_temp': 10.0, 'max_temp': 270.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 26.572, 'pid_ki': 2.036, 'pid_kd': 86.691, 'heater_pin': 'PA1', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PC13', 'pressure_advance': 0.05, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'PF0', 'rotation_distance': 21.9459674016, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 55.196, 'pid_ki': 2.091, 'pid_kd': 364.295, 'heater_pin': 'PA2', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'probe': {'z_offset': -1.5, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': 'PG15', 'speed': 10.0, 'lift_speed': 10.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 5, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.006, 'samples_tolerance_retries': 6}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE5', 'fan_speed': 1.0}, 'controller_fan controller_fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD12', 'fan_speed': 1.0, 'idle_speed': 1.0, 'idle_timeout': 30, 'heater': ['heater_bed']}, 'heater_fan exhaust_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 5.0, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13', 'fan_speed': 1.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PD15', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 1.0, 'maximum_mcu_duration': 0.0, 'value': 1.0, 'shutdown_value': 0.0}, 'neopixel sb_leds': {'pin': 'PB0', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 0.0, 'initial_green': 0.2157, 'initial_blue': 1.0, 'initial_white': 0.0}, 'temperature_sensor chamber': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF5', 'min_temp': 0.0, 'max_temp': 100.0, 'gcode_id': 'chamber_th'}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'safe_z_home': {'home_xy_position': [150.0, 150.0], 'z_hop': 10.0, 'z_hop_speed': 15.0, 'speed': 100.0, 'move_to_previous': False}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [150.0, 348.0], [350.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 5.0], [150.0, 245.0], [270.0, 5.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nbed_mesh_calibrate\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END', 'description': 'G-Code macro'}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'variable_thermal_config': "{\n'extruder': {\n'cool_temp': 40,\n'leds': 'logo',\n},\n'heater_bed': {\n'cool_temp': 40,\n'leds': 'nozzle',\n},\n}"}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [5, 5], 'mesh_min': [40.0, 40.0], 'mesh_max': [260.0, 260.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 10.0, 'speed': 300.0, 'fade_start': 0.6, 'fade_end': 10.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1500.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-02-24 20:27:37,684 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-24 20:27:37,686 [printer.py:reinit()] - Klipper version: v0.12.0-103-g6ce6fbbc-dirty
2024-02-24 20:27:37,686 [printer.py:reinit()] - # Extruders: 1
2024-02-24 20:27:37,686 [printer.py:reinit()] - # Temperature devices: 2
2024-02-24 20:27:37,687 [printer.py:reinit()] - # Fans: 4
2024-02-24 20:27:37,687 [printer.py:reinit()] - # Output pins: 1
2024-02-24 20:27:37,687 [printer.py:reinit()] - # Leds: 1
2024-02-24 20:27:37,698 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2024-02-24 20:27:37,699 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-02-24 20:27:37,960 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor chamber&fan&controller_fan controller_fan&heater_fan hotend_fan&heater_fan exhaust_fan&output_pin caselight&neopixel sb_leds
2024-02-24 20:27:37,962 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-02-24 20:27:37,963 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-02-24 20:27:37,965 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-02-24 20:27:37,966 [screen.py:init_klipper()] - Printer initialized
2024-02-24 20:27:42,404 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-24 20:27:47,402 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-24 20:27:52,402 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-24 20:27:57,401 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-24 20:28:02,401 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-27 20:16:20,052 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-27 20:16:25,050 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-27 20:16:30,050 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-27 20:16:35,050 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-27 20:16:40,050 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-27 20:16:45,054 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-27 20:16:50,054 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-27 20:16:55,053 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-27 20:17:00,063 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-27 20:17:05,053 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-27 20:17:10,054 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-27 20:17:15,053 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-27 20:17:20,054 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-27 20:17:25,053 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-27 20:17:30,053 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-27 20:17:35,052 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-27 20:17:40,053 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-27 20:17:45,053 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-27 20:17:50,053 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-27 20:17:55,053 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-27 20:18:00,054 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-27 20:18:05,054 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-27 20:18:10,053 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-27 20:18:15,054 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-27 20:18:20,054 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-27 20:18:25,063 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-27 20:18:30,056 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-27 20:18:35,054 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-27 20:18:40,053 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-27 20:18:45,053 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-27 20:18:50,054 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-27 20:18:55,053 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-27 20:19:00,055 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-27 20:19:05,052 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-27 20:19:10,053 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-27 20:19:15,054 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-27 20:19:20,052 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-27 20:19:25,052 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-27 20:19:30,052 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-27 20:19:35,054 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-27 20:19:40,053 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-27 20:19:45,053 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-27 20:19:50,052 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-27 20:19:55,053 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-27 20:20:00,054 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-27 20:20:05,054 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-27 20:20:10,054 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-27 20:20:15,054 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-27 20:20:20,054 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-27 20:20:25,053 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-27 20:20:30,053 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-27 20:20:35,054 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-27 20:20:40,053 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-27 20:20:45,053 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-27 20:20:50,052 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-27 20:20:55,053 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-27 20:21:00,054 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-27 20:21:05,054 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-27 20:21:10,053 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-27 20:21:15,055 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-27 20:21:20,053 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-27 20:21:25,052 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-27 20:21:30,053 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-27 20:21:35,053 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-27 20:21:40,054 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-27 20:21:45,054 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-27 20:21:50,053 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-27 20:21:55,052 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-27 20:22:00,052 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-27 20:22:05,052 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-27 20:22:10,053 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-27 20:22:15,052 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-27 20:22:20,052 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-27 20:22:25,052 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-27 20:22:30,054 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-27 20:22:35,052 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-27 20:22:40,057 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-27 20:22:45,053 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-27 20:22:50,052 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-27 20:22:55,054 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-27 20:23:00,054 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-27 20:23:05,054 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-27 20:23:10,054 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-27 20:23:15,053 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-27 20:23:20,052 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-27 20:23:25,052 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-27 20:23:30,054 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-27 20:23:35,051 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-27 20:23:40,052 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-27 20:23:45,053 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-27 20:23:50,052 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-27 20:23:55,054 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-27 20:24:00,055 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-27 20:24:05,053 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-27 20:24:10,052 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-27 20:24:15,054 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-27 20:24:20,053 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-27 20:24:25,053 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-27 20:24:30,054 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-27 20:24:35,053 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-27 20:24:40,053 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-27 20:24:45,054 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-27 20:24:50,053 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-27 20:24:55,052 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-27 20:24:55,617 [screen.py:_go_to_submenu()] - #### Go to submenu more
2024-02-27 20:24:55,617 [screen.py:_go_to_submenu()] - #### Menu __main
2024-02-27 20:24:55,625 [screen.py:_load_panel()] - Loading panel: menu
2024-02-27 20:24:55,845 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more
2024-02-27 20:24:55,850 [menu.py:arrangeMenuItems()] - X > more bedlevel
2024-02-27 20:24:55,858 [menu.py:arrangeMenuItems()] - X > more retraction
2024-02-27 20:24:55,874 [menu.py:arrangeMenuItems()] - X > more power
2024-02-27 20:24:55,876 [menu.py:arrangeMenuItems()] - X > more camera
2024-02-27 20:24:55,881 [menu.py:arrangeMenuItems()] - X > more input_shaper
2024-02-27 20:24:55,888 [menu.py:arrangeMenuItems()] - X > more spoolman
2024-02-27 20:24:57,396 [screen.py:_menu_go_back()] - #### Menu go back
2024-02-27 20:24:57,413 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-02-27 20:24:57,426 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-02-27 20:24:57,436 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'temperature_sensor chamber', 'extruder']
2024-02-27 20:24:57,445 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2024-02-27 20:24:57,446 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-02-27 20:24:57,997 [screen.py:_load_panel()] - Loading panel: extrude
2024-02-27 20:24:58,046 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > extrude
2024-02-27 20:24:59,937 [screen.py:show_popup_message()] - error: Macro UNLOAD_FILAMENT not found
2024-02-27 20:25:01,438 [screen.py:show_popup_message()] - error: Macro LOAD_FILAMENT not found
2024-02-27 20:26:54,810 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-02-27 20:26:54,811 [printer.py:change_state()] - Adding callback for state: disconnected
2024-02-27 20:26:54,812 [screen.py:state_disconnected()] - ### Going to disconnected
2024-02-27 20:26:54,812 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-27 20:26:54,815 [screen.py:show_panel()] - Reinitializing panel
2024-02-27 20:26:54,875 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-02-27 20:26:58,057 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-27 20:26:58,065 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2024-02-27 20:26:58,065 [printer.py:configure_cameras()] - Cameras: []
2024-02-27 20:26:58,066 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'update_manager', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-310-g67c98f6', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-02-27 20:26:58,074 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2024-02-27 20:26:58,089 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2024-02-27 20:26:58,091 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_28003C001150535556323420-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '^PG6', 'position_min': '0', 'position_endstop': '299', 'position_max': '299', 'homing_speed': '25', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'PG9', 'position_min': '0', 'position_endstop': '300', 'position_max': '303.5', 'homing_speed': '25', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': '!PG3', 'enable_pin': '!PG5', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '290', 'position_min': '-4.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA0', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': '!PF10', 'enable_pin': '!PG2', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PC13', 'dir_pin': 'PF0', 'enable_pin': '!PF1', 'rotation_distance': '21.9459674016', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.75', 'heater_pin': 'PA1', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF4', 'min_temp': '10', 'max_temp': '270', 'max_power': '1.0', 'min_extrude_temp': '170', 'pressure_advance': '0.05', 'pressure_advance_smooth_time': '0.040', 'control': 'pid', 'pid_kp': '26.572', 'pid_ki': '2.036', 'pid_kd': '86.691'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.5', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PA2', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF3', 'max_power': '1', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '55.196', 'pid_ki': '2.091', 'pid_kd': '364.295'}, 'probe': {'pin': 'PG15', 'x_offset': '0', 'y_offset': '0', 'speed': '10.0', 'samples': '5', 'samples_result': 'median', 'sample_retract_dist': '3.0', 'samples_tolerance': '0.006', 'samples_tolerance_retries': '6', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-1.500'}, 'fan': {'pin': 'PA8', 'kick_start_time': '0.5', 'off_below': '0.10'}, 'heater_fan hotend_fan': {'pin': 'PE5', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'controller_fan controller_fan': {'pin': 'PD12', 'kick_start_time': '0.5', 'heater': 'heater_bed'}, 'heater_fan exhaust_fan': {'pin': 'PD13', 'max_power': '1.0', 'shutdown_speed': '0.0', 'kick_start_time': '5.0', 'heater': 'heater_bed', 'heater_temp': '60', 'fan_speed': '1.0'}, 'output_pin caselight': {'pin': 'PD15', 'pwm': 'true', 'shutdown_value': '0', 'value': '1', 'cycle_time': '0.01'}, 'neopixel sb_leds': {'pin': 'PB0', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '0.0', 'initial_green': '0.2157', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'temperature_sensor chamber': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF5', 'min_temp': '0', 'max_temp': '100', 'gcode_id': 'chamber_th'}, 'idle_timeout': {'timeout': '1800'}, 'safe_z_home': {'home_xy_position': '150,150', 'speed': '100', 'z_hop': '10'}, 'z_tilt': {'z_positions': '\n-50, 18\n150, 348\n350, 18', 'points': '\n30, 5\n150, 245\n270, 5', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nbed_mesh_calibrate\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'variable_thermal_config': "{\n'extruder': {\n'cool_temp': 40,\n'leds': 'logo',\n},\n'heater_bed': {\n'cool_temp': 40,\n'leds': 'nozzle',\n},\n}", 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro LOAD_FILAMENT': {'variable_load_distance': '50', 'variable_purge_distance': '25', 'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}\nSAVE_GCODE_STATE NAME=load_state\nG91\nG92 E0\nG1 E{load_distance} F{max_velocity}\nG1 E{purge_distance} F{speed}\nRESTORE_GCODE_STATE NAME=load_state"}, 'gcode_macro UNLOAD_FILAMENT': {'variable_unload_distance': '50', 'variable_purge_distance': '25', 'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}\nSAVE_GCODE_STATE NAME=unload_state\nG91\nG92 E0\nG1 E{purge_distance} F{speed}\nG1 E-{unload_distance} F{max_velocity}\nRESTORE_GCODE_STATE NAME=unload_state"}, 'bed_mesh': {'speed': '300', 'horizontal_move_z': '10', 'mesh_min': '40, 40', 'mesh_max': '260,260', 'fade_start': '0.6', 'fade_end': '10.0', 'probe_count': '5,5', 'algorithm': 'bicubic'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_28003C001150535556323420-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': '^PG6', 'position_endstop': 299.0, 'position_min': 0.0, 'position_max': 299.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'PG9', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 303.5, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PF11', 'dir_pin': '!PG3', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG5', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -4.5, 'position_max': 290.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA0'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PF9', 'dir_pin': '!PF10', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG2'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF4', 'min_temp': 10.0, 'max_temp': 270.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 26.572, 'pid_ki': 2.036, 'pid_kd': 86.691, 'heater_pin': 'PA1', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PC13', 'pressure_advance': 0.05, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'PF0', 'rotation_distance': 21.9459674016, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 55.196, 'pid_ki': 2.091, 'pid_kd': 364.295, 'heater_pin': 'PA2', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'probe': {'z_offset': -1.5, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': 'PG15', 'speed': 10.0, 'lift_speed': 10.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 5, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.006, 'samples_tolerance_retries': 6}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE5', 'fan_speed': 1.0}, 'controller_fan controller_fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD12', 'fan_speed': 1.0, 'idle_speed': 1.0, 'idle_timeout': 30, 'heater': ['heater_bed']}, 'heater_fan exhaust_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 5.0, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13', 'fan_speed': 1.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PD15', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 1.0, 'maximum_mcu_duration': 0.0, 'value': 1.0, 'shutdown_value': 0.0}, 'neopixel sb_leds': {'pin': 'PB0', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 0.0, 'initial_green': 0.2157, 'initial_blue': 1.0, 'initial_white': 0.0}, 'temperature_sensor chamber': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF5', 'min_temp': 0.0, 'max_temp': 100.0, 'gcode_id': 'chamber_th'}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'safe_z_home': {'home_xy_position': [150.0, 150.0], 'z_hop': 10.0, 'z_hop_speed': 15.0, 'speed': 100.0, 'move_to_previous': False}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [150.0, 348.0], [350.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 5.0], [150.0, 245.0], [270.0, 5.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nbed_mesh_calibrate\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END', 'description': 'G-Code macro'}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'variable_thermal_config': "{\n'extruder': {\n'cool_temp': 40,\n'leds': 'logo',\n},\n'heater_bed': {\n'cool_temp': 40,\n'leds': 'nozzle',\n},\n}"}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}\nSAVE_GCODE_STATE NAME=load_state\nG91\nG92 E0\nG1 E{load_distance} F{max_velocity}\nG1 E{purge_distance} F{speed}\nRESTORE_GCODE_STATE NAME=load_state", 'description': 'G-Code macro', 'variable_load_distance': '50', 'variable_purge_distance': '25'}, 'gcode_macro unload_filament': {'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}\nSAVE_GCODE_STATE NAME=unload_state\nG91\nG92 E0\nG1 E{purge_distance} F{speed}\nG1 E-{unload_distance} F{max_velocity}\nRESTORE_GCODE_STATE NAME=unload_state", 'description': 'G-Code macro', 'variable_unload_distance': '50', 'variable_purge_distance': '25'}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [5, 5], 'mesh_min': [40.0, 40.0], 'mesh_max': [260.0, 260.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 10.0, 'speed': 300.0, 'fade_start': 0.6, 'fade_end': 10.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1500.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-02-27 20:26:58,092 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-27 20:26:58,093 [printer.py:reinit()] - Klipper version: v0.12.0-103-g6ce6fbbc-dirty
2024-02-27 20:26:58,093 [printer.py:reinit()] - # Extruders: 1
2024-02-27 20:26:58,093 [printer.py:reinit()] - # Temperature devices: 2
2024-02-27 20:26:58,093 [printer.py:reinit()] - # Fans: 4
2024-02-27 20:26:58,093 [printer.py:reinit()] - # Output pins: 1
2024-02-27 20:26:58,093 [printer.py:reinit()] - # Leds: 1
2024-02-27 20:26:58,104 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2024-02-27 20:26:58,105 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-02-27 20:26:58,364 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor chamber&fan&controller_fan controller_fan&heater_fan hotend_fan&heater_fan exhaust_fan&output_pin caselight&neopixel sb_leds
2024-02-27 20:26:58,366 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-02-27 20:26:58,367 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-02-27 20:26:58,368 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-02-27 20:26:58,369 [screen.py:init_klipper()] - Printer initialized
2024-02-27 20:26:58,369 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-02-27 20:26:58,369 [printer.py:change_state()] - Adding callback for state: startup
2024-02-27 20:27:02,600 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-02-27 20:27:02,601 [printer.py:change_state()] - Adding callback for state: ready
2024-02-27 20:27:02,603 [screen.py:show_panel()] - Reinitializing panel
2024-02-27 20:27:02,655 [main_menu.py:__init__()] - ### Making MainMenu
2024-02-27 20:27:02,661 [main_menu.py:add_device()] - Adding device: extruder
2024-02-27 20:27:02,666 [main_menu.py:add_device()] - Adding device: heater_bed
2024-02-27 20:27:02,671 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber
2024-02-27 20:27:02,696 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-02-27 20:27:02,707 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-02-27 20:27:02,715 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'temperature_sensor chamber', 'extruder']
2024-02-27 20:27:02,724 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2024-02-27 20:27:02,725 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-02-27 20:27:05,356 [screen.py:_go_to_submenu()] - #### Go to submenu more
2024-02-27 20:27:05,357 [screen.py:_go_to_submenu()] - #### Menu __main
2024-02-27 20:27:05,361 [screen.py:show_panel()] - Reinitializing panel
2024-02-27 20:27:05,531 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more
2024-02-27 20:27:05,535 [menu.py:arrangeMenuItems()] - X > more bedlevel
2024-02-27 20:27:05,542 [menu.py:arrangeMenuItems()] - X > more retraction
2024-02-27 20:27:05,554 [menu.py:arrangeMenuItems()] - X > more power
2024-02-27 20:27:05,556 [menu.py:arrangeMenuItems()] - X > more camera
2024-02-27 20:27:05,561 [menu.py:arrangeMenuItems()] - X > more input_shaper
2024-02-27 20:27:05,568 [menu.py:arrangeMenuItems()] - X > more spoolman
2024-02-27 20:27:07,211 [screen.py:_load_panel()] - Loading panel: gcode_macros
2024-02-27 20:27:07,261 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more > gcode_macros
2024-02-27 20:27:09,152 [screen.py:_menu_go_back()] - #### Menu go back
2024-02-27 20:27:09,177 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more
2024-02-27 20:27:09,182 [menu.py:arrangeMenuItems()] - X > more bedlevel
2024-02-27 20:27:09,189 [menu.py:arrangeMenuItems()] - X > more retraction
2024-02-27 20:27:09,201 [menu.py:arrangeMenuItems()] - X > more power
2024-02-27 20:27:09,203 [menu.py:arrangeMenuItems()] - X > more camera
2024-02-27 20:27:09,208 [menu.py:arrangeMenuItems()] - X > more input_shaper
2024-02-27 20:27:09,215 [menu.py:arrangeMenuItems()] - X > more spoolman
2024-02-27 20:27:10,568 [screen.py:_menu_go_back()] - #### Menu go back
2024-02-27 20:27:10,585 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-02-27 20:27:11,273 [screen.py:show_panel()] - Reinitializing panel
2024-02-27 20:27:11,319 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > extrude
2024-02-27 20:27:12,694 [screen.py:_send_action()] - printer.gcode.script: {'script': 'UNLOAD_FILAMENT SPEED=120'}
2024-02-27 20:27:12,781 [screen.py:show_popup_message()] - error: Extrude below minimum temp
2024-02-27 20:27:17,835 [screen.py:_load_panel()] - Loading panel: temperature
2024-02-27 20:27:17,855 [temperature.py:add_device()] - Adding device: extruder
2024-02-27 20:27:17,865 [temperature.py:add_device()] - Adding device: heater_bed
2024-02-27 20:27:17,877 [temperature.py:add_device()] - Adding device: temperature_sensor chamber
2024-02-27 20:27:17,887 [temperature.py:select_heater()] - Selecting extruder
2024-02-27 20:27:17,889 [temperature.py:select_heater()] - Selecting heater_bed
2024-02-27 20:27:17,919 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > extrude > temperature
2024-02-27 20:27:21,820 [temperature.py:verify_max_temp()] - 260/270
2024-02-27 20:27:21,820 [KlippyWebsocket.py:set_tool_temp()] - Sending set_tool_temp: M104 T0 S260
2024-02-27 20:27:25,332 [temperature.py:verify_max_temp()] - 110/120
2024-02-27 20:27:25,332 [KlippyWebsocket.py:set_bed_temp()] - Sending set_bed_temp: M140 S110
2024-02-27 20:36:55,878 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-02-27 20:36:55,878 [printer.py:change_state()] - Adding callback for state: disconnected
2024-02-27 20:36:55,879 [screen.py:state_disconnected()] - ### Going to disconnected
2024-02-27 20:36:55,879 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-27 20:36:55,882 [screen.py:show_panel()] - Reinitializing panel
2024-02-27 20:36:55,953 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-02-27 20:36:59,059 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-27 20:36:59,068 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2024-02-27 20:36:59,069 [printer.py:configure_cameras()] - Cameras: []
2024-02-27 20:36:59,069 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'update_manager', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-310-g67c98f6', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-02-27 20:36:59,078 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2024-02-27 20:36:59,226 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2024-02-27 20:36:59,228 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_28003C001150535556323420-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '^PG6', 'position_min': '0', 'position_endstop': '299', 'position_max': '299', 'homing_speed': '25', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'PG9', 'position_min': '0', 'position_endstop': '300', 'position_max': '303.5', 'homing_speed': '25', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': '!PG3', 'enable_pin': '!PG5', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '290', 'position_min': '-4.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA0', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': '!PF10', 'enable_pin': '!PG2', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PC13', 'dir_pin': 'PF0', 'enable_pin': '!PF1', 'rotation_distance': '21.9459674016', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.75', 'heater_pin': 'PA1', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF4', 'min_temp': '10', 'max_temp': '270', 'max_power': '1.0', 'min_extrude_temp': '170', 'pressure_advance': '0.05', 'pressure_advance_smooth_time': '0.040', 'control': 'pid', 'pid_kp': '26.572', 'pid_ki': '2.036', 'pid_kd': '86.691'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.5', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PA2', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF3', 'max_power': '1', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '55.196', 'pid_ki': '2.091', 'pid_kd': '364.295'}, 'probe': {'pin': 'PG15', 'x_offset': '0', 'y_offset': '0', 'speed': '10.0', 'samples': '5', 'samples_result': 'median', 'sample_retract_dist': '3.0', 'samples_tolerance': '0.006', 'samples_tolerance_retries': '6', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-1.500'}, 'fan': {'pin': 'PA8', 'kick_start_time': '0.5', 'off_below': '0.10'}, 'heater_fan hotend_fan': {'pin': 'PE5', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'controller_fan controller_fan': {'pin': 'PD12', 'kick_start_time': '0.5', 'heater': 'heater_bed'}, 'heater_fan exhaust_fan': {'pin': 'PD13', 'max_power': '1.0', 'shutdown_speed': '0.0', 'kick_start_time': '5.0', 'heater': 'heater_bed', 'heater_temp': '60', 'fan_speed': '1.0'}, 'output_pin caselight': {'pin': 'PD15', 'pwm': 'true', 'shutdown_value': '0', 'value': '1', 'cycle_time': '0.01'}, 'neopixel sb_leds': {'pin': 'PB0', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '0.0', 'initial_green': '0.2157', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'temperature_sensor chamber': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF5', 'min_temp': '0', 'max_temp': '100', 'gcode_id': 'chamber_th'}, 'idle_timeout': {'timeout': '1800'}, 'safe_z_home': {'home_xy_position': '150,150', 'speed': '100', 'z_hop': '10'}, 'z_tilt': {'z_positions': '\n-50, 18\n150, 348\n350, 18', 'points': '\n30, 5\n150, 245\n270, 5', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nbed_mesh_calibrate\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'variable_thermal_config': "{\n'extruder': {\n'cool_temp': 40,\n'leds': 'logo',\n},\n'heater_bed': {\n'cool_temp': 40,\n'leds': 'nozzle',\n},\n}", 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro LOAD_FILAMENT': {'variable_load_distance': '50', 'variable_purge_distance': '25', 'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}\nSAVE_GCODE_STATE NAME=load_state\nG91\nG92 E0\nG1 E{load_distance} F{max_velocity}\nG1 E{purge_distance} F{speed}\nRESTORE_GCODE_STATE NAME=load_state"}, 'gcode_macro UNLOAD_FILAMENT': {'variable_unload_distance': '50', 'variable_purge_distance': '25', 'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}\nSAVE_GCODE_STATE NAME=unload_state\nG91\nG92 E0\nG1 E{purge_distance} F{speed}\nG1 E-{unload_distance} F{max_velocity}\nRESTORE_GCODE_STATE NAME=unload_state"}, 'bed_mesh': {'speed': '300', 'horizontal_move_z': '10', 'mesh_min': '40, 40', 'mesh_max': '260,260', 'fade_start': '0.6', 'fade_end': '10.0', 'probe_count': '5,5', 'algorithm': 'bicubic'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_28003C001150535556323420-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': '^PG6', 'position_endstop': 299.0, 'position_min': 0.0, 'position_max': 299.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'PG9', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 303.5, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PF11', 'dir_pin': '!PG3', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG5', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -4.5, 'position_max': 290.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA0'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PF9', 'dir_pin': '!PF10', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG2'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF4', 'min_temp': 10.0, 'max_temp': 270.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 26.572, 'pid_ki': 2.036, 'pid_kd': 86.691, 'heater_pin': 'PA1', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PC13', 'pressure_advance': 0.05, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'PF0', 'rotation_distance': 21.9459674016, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 55.196, 'pid_ki': 2.091, 'pid_kd': 364.295, 'heater_pin': 'PA2', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'probe': {'z_offset': -1.5, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': 'PG15', 'speed': 10.0, 'lift_speed': 10.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 5, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.006, 'samples_tolerance_retries': 6}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE5', 'fan_speed': 1.0}, 'controller_fan controller_fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD12', 'fan_speed': 1.0, 'idle_speed': 1.0, 'idle_timeout': 30, 'heater': ['heater_bed']}, 'heater_fan exhaust_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 5.0, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13', 'fan_speed': 1.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PD15', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 1.0, 'maximum_mcu_duration': 0.0, 'value': 1.0, 'shutdown_value': 0.0}, 'neopixel sb_leds': {'pin': 'PB0', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 0.0, 'initial_green': 0.2157, 'initial_blue': 1.0, 'initial_white': 0.0}, 'temperature_sensor chamber': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF5', 'min_temp': 0.0, 'max_temp': 100.0, 'gcode_id': 'chamber_th'}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'safe_z_home': {'home_xy_position': [150.0, 150.0], 'z_hop': 10.0, 'z_hop_speed': 15.0, 'speed': 100.0, 'move_to_previous': False}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [150.0, 348.0], [350.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 5.0], [150.0, 245.0], [270.0, 5.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nbed_mesh_calibrate\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END', 'description': 'G-Code macro'}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'variable_thermal_config': "{\n'extruder': {\n'cool_temp': 40,\n'leds': 'logo',\n},\n'heater_bed': {\n'cool_temp': 40,\n'leds': 'nozzle',\n},\n}"}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}\nSAVE_GCODE_STATE NAME=load_state\nG91\nG92 E0\nG1 E{load_distance} F{max_velocity}\nG1 E{purge_distance} F{speed}\nRESTORE_GCODE_STATE NAME=load_state", 'description': 'G-Code macro', 'variable_load_distance': '50', 'variable_purge_distance': '25'}, 'gcode_macro unload_filament': {'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}\nSAVE_GCODE_STATE NAME=unload_state\nG91\nG92 E0\nG1 E{purge_distance} F{speed}\nG1 E-{unload_distance} F{max_velocity}\nRESTORE_GCODE_STATE NAME=unload_state", 'description': 'G-Code macro', 'variable_unload_distance': '50', 'variable_purge_distance': '25'}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [5, 5], 'mesh_min': [40.0, 40.0], 'mesh_max': [260.0, 260.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 10.0, 'speed': 300.0, 'fade_start': 0.6, 'fade_end': 10.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1500.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-02-27 20:36:59,230 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-27 20:36:59,231 [printer.py:reinit()] - Klipper version: v0.12.0-103-g6ce6fbbc-dirty
2024-02-27 20:36:59,231 [printer.py:reinit()] - # Extruders: 1
2024-02-27 20:36:59,231 [printer.py:reinit()] - # Temperature devices: 2
2024-02-27 20:36:59,231 [printer.py:reinit()] - # Fans: 4
2024-02-27 20:36:59,231 [printer.py:reinit()] - # Output pins: 1
2024-02-27 20:36:59,231 [printer.py:reinit()] - # Leds: 1
2024-02-27 20:36:59,242 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2024-02-27 20:36:59,243 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-02-27 20:36:59,476 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor chamber&fan&controller_fan controller_fan&heater_fan hotend_fan&heater_fan exhaust_fan&output_pin caselight&neopixel sb_leds
2024-02-27 20:36:59,478 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-02-27 20:36:59,478 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-02-27 20:36:59,480 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-02-27 20:36:59,480 [screen.py:init_klipper()] - Printer initialized
2024-02-27 20:36:59,481 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2024-02-27 20:36:59,481 [printer.py:change_state()] - Adding callback for state: ready
2024-02-27 20:36:59,484 [screen.py:show_panel()] - Reinitializing panel
2024-02-27 20:36:59,542 [main_menu.py:__init__()] - ### Making MainMenu
2024-02-27 20:36:59,548 [main_menu.py:add_device()] - Adding device: extruder
2024-02-27 20:36:59,553 [main_menu.py:add_device()] - Adding device: heater_bed
2024-02-27 20:36:59,558 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber
2024-02-27 20:36:59,582 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-02-27 20:36:59,600 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-02-27 20:36:59,604 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'temperature_sensor chamber', 'extruder']
2024-02-27 20:36:59,614 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2024-02-27 20:36:59,616 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-02-27 20:37:02,065 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-27 20:37:02,066 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'update_manager', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-310-g67c98f6', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-02-27 20:37:02,082 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2024-02-27 20:37:02,233 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2024-02-27 20:37:02,236 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_28003C001150535556323420-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '^PG6', 'position_min': '0', 'position_endstop': '299', 'position_max': '299', 'homing_speed': '25', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'PG9', 'position_min': '0', 'position_endstop': '300', 'position_max': '303.5', 'homing_speed': '25', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': '!PG3', 'enable_pin': '!PG5', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '290', 'position_min': '-4.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA0', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': '!PF10', 'enable_pin': '!PG2', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PC13', 'dir_pin': 'PF0', 'enable_pin': '!PF1', 'rotation_distance': '21.9459674016', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.75', 'heater_pin': 'PA1', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF4', 'min_temp': '10', 'max_temp': '270', 'max_power': '1.0', 'min_extrude_temp': '170', 'pressure_advance': '0.05', 'pressure_advance_smooth_time': '0.040', 'control': 'pid', 'pid_kp': '26.572', 'pid_ki': '2.036', 'pid_kd': '86.691'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.5', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PA2', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF3', 'max_power': '1', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '55.196', 'pid_ki': '2.091', 'pid_kd': '364.295'}, 'probe': {'pin': 'PG15', 'x_offset': '0', 'y_offset': '0', 'speed': '10.0', 'samples': '5', 'samples_result': 'median', 'sample_retract_dist': '3.0', 'samples_tolerance': '0.006', 'samples_tolerance_retries': '6', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-1.500'}, 'fan': {'pin': 'PA8', 'kick_start_time': '0.5', 'off_below': '0.10'}, 'heater_fan hotend_fan': {'pin': 'PE5', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'controller_fan controller_fan': {'pin': 'PD12', 'kick_start_time': '0.5', 'heater': 'heater_bed'}, 'heater_fan exhaust_fan': {'pin': 'PD13', 'max_power': '1.0', 'shutdown_speed': '0.0', 'kick_start_time': '5.0', 'heater': 'heater_bed', 'heater_temp': '60', 'fan_speed': '1.0'}, 'output_pin caselight': {'pin': 'PD15', 'pwm': 'true', 'shutdown_value': '0', 'value': '1', 'cycle_time': '0.01'}, 'neopixel sb_leds': {'pin': 'PB0', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '0.0', 'initial_green': '0.2157', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'temperature_sensor chamber': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF5', 'min_temp': '0', 'max_temp': '100', 'gcode_id': 'chamber_th'}, 'idle_timeout': {'timeout': '1800'}, 'safe_z_home': {'home_xy_position': '150,150', 'speed': '100', 'z_hop': '10'}, 'z_tilt': {'z_positions': '\n-50, 18\n150, 348\n350, 18', 'points': '\n30, 5\n150, 245\n270, 5', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nbed_mesh_calibrate\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'variable_thermal_config': "{\n'extruder': {\n'cool_temp': 40,\n'leds': 'logo',\n},\n'heater_bed': {\n'cool_temp': 40,\n'leds': 'nozzle',\n},\n}", 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro LOAD_FILAMENT': {'variable_load_distance': '50', 'variable_purge_distance': '25', 'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}\nSAVE_GCODE_STATE NAME=load_state\nG91\nG92 E0\nG1 E{load_distance} F{max_velocity}\nG1 E{purge_distance} F{speed}\nRESTORE_GCODE_STATE NAME=load_state"}, 'gcode_macro UNLOAD_FILAMENT': {'variable_unload_distance': '50', 'variable_purge_distance': '25', 'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}\nSAVE_GCODE_STATE NAME=unload_state\nG91\nG92 E0\nG1 E{purge_distance} F{speed}\nG1 E-{unload_distance} F{max_velocity}\nRESTORE_GCODE_STATE NAME=unload_state"}, 'bed_mesh': {'speed': '300', 'horizontal_move_z': '10', 'mesh_min': '40, 40', 'mesh_max': '260,260', 'fade_start': '0.6', 'fade_end': '10.0', 'probe_count': '5,5', 'algorithm': 'bicubic'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_28003C001150535556323420-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': '^PG6', 'position_endstop': 299.0, 'position_min': 0.0, 'position_max': 299.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'PG9', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 303.5, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PF11', 'dir_pin': '!PG3', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG5', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -4.5, 'position_max': 290.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA0'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PF9', 'dir_pin': '!PF10', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG2'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF4', 'min_temp': 10.0, 'max_temp': 270.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 26.572, 'pid_ki': 2.036, 'pid_kd': 86.691, 'heater_pin': 'PA1', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PC13', 'pressure_advance': 0.05, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'PF0', 'rotation_distance': 21.9459674016, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 55.196, 'pid_ki': 2.091, 'pid_kd': 364.295, 'heater_pin': 'PA2', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'probe': {'z_offset': -1.5, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': 'PG15', 'speed': 10.0, 'lift_speed': 10.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 5, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.006, 'samples_tolerance_retries': 6}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE5', 'fan_speed': 1.0}, 'controller_fan controller_fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD12', 'fan_speed': 1.0, 'idle_speed': 1.0, 'idle_timeout': 30, 'heater': ['heater_bed']}, 'heater_fan exhaust_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 5.0, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13', 'fan_speed': 1.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PD15', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 1.0, 'maximum_mcu_duration': 0.0, 'value': 1.0, 'shutdown_value': 0.0}, 'neopixel sb_leds': {'pin': 'PB0', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 0.0, 'initial_green': 0.2157, 'initial_blue': 1.0, 'initial_white': 0.0}, 'temperature_sensor chamber': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF5', 'min_temp': 0.0, 'max_temp': 100.0, 'gcode_id': 'chamber_th'}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'safe_z_home': {'home_xy_position': [150.0, 150.0], 'z_hop': 10.0, 'z_hop_speed': 15.0, 'speed': 100.0, 'move_to_previous': False}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [150.0, 348.0], [350.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 5.0], [150.0, 245.0], [270.0, 5.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nbed_mesh_calibrate\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END', 'description': 'G-Code macro'}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'variable_thermal_config': "{\n'extruder': {\n'cool_temp': 40,\n'leds': 'logo',\n},\n'heater_bed': {\n'cool_temp': 40,\n'leds': 'nozzle',\n},\n}"}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}\nSAVE_GCODE_STATE NAME=load_state\nG91\nG92 E0\nG1 E{load_distance} F{max_velocity}\nG1 E{purge_distance} F{speed}\nRESTORE_GCODE_STATE NAME=load_state", 'description': 'G-Code macro', 'variable_load_distance': '50', 'variable_purge_distance': '25'}, 'gcode_macro unload_filament': {'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}\nSAVE_GCODE_STATE NAME=unload_state\nG91\nG92 E0\nG1 E{purge_distance} F{speed}\nG1 E-{unload_distance} F{max_velocity}\nRESTORE_GCODE_STATE NAME=unload_state", 'description': 'G-Code macro', 'variable_unload_distance': '50', 'variable_purge_distance': '25'}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [5, 5], 'mesh_min': [40.0, 40.0], 'mesh_max': [260.0, 260.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 10.0, 'speed': 300.0, 'fade_start': 0.6, 'fade_end': 10.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1500.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-02-27 20:37:02,240 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-27 20:37:02,241 [printer.py:reinit()] - Klipper version: v0.12.0-103-g6ce6fbbc-dirty
2024-02-27 20:37:02,241 [printer.py:reinit()] - # Extruders: 1
2024-02-27 20:37:02,241 [printer.py:reinit()] - # Temperature devices: 2
2024-02-27 20:37:02,242 [printer.py:reinit()] - # Fans: 4
2024-02-27 20:37:02,242 [printer.py:reinit()] - # Output pins: 1
2024-02-27 20:37:02,242 [printer.py:reinit()] - # Leds: 1
2024-02-27 20:37:02,260 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2024-02-27 20:37:02,262 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-02-27 20:37:02,524 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor chamber&fan&controller_fan controller_fan&heater_fan hotend_fan&heater_fan exhaust_fan&output_pin caselight&neopixel sb_leds
2024-02-27 20:37:02,534 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-02-27 20:37:02,534 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-02-27 20:37:02,540 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-02-27 20:37:02,547 [screen.py:init_klipper()] - Printer initialized
2024-02-27 20:37:05,050 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-27 20:37:10,052 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-27 20:37:15,053 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-27 20:37:20,053 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-27 20:37:25,056 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-27 20:37:53,069 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-02-27 20:37:53,070 [functions.py:log_start()] - KlipperScreen Version: v0.3.8-89-g2a5e9b3
2024-02-27 20:37:53,070 [functions.py:log_start()] - Python version: 3.9
2024-02-27 20:37:53,227 [config.py:get_config_file_location()] - Passed config (-c): .
2024-02-27 20:37:53,227 [config.py:__init__()] - Config path location: /home/pi/printer_data/config/KlipperScreen.conf
2024-02-27 20:37:53,244 [config.py:log_config()] -  ===== Config File =====

=======================
2024-02-27 20:37:53,246 [config.py:__init__()] - ====== Saved Def ======

[graph Printer]
heater_bed = False
extruder = False
temperature_sensor chamber_temp = False

=======================
2024-02-27 20:37:53,246 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-02-27 20:37:53,355 [config.py:create_translations()] - Selected lang: None OS lang: en_GB
2024-02-27 20:37:53,355 [config.py:install_language()] - Using lang en
2024-02-27 20:37:53,372 [screen.py:__init__()] - Screen resolution: 800x480
2024-02-27 20:37:53,374 [KlippyGtk.py:__init__()] - Font size: 16.6 (medium)
2024-02-27 20:37:53,825 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2024-02-27 20:37:53,833 [screen.py:set_screenblanking_timeout()] - Using DPMS
2024-02-27 20:37:53,840 [screen.py:initial_connection()] - Default printer: None
2024-02-27 20:37:53,869 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-02-27 20:37:53,870 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-02-27 20:37:53,914 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-02-27 20:37:53,920 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-02-27 20:37:53,929 [KlippyRest.py:_do_request()] - host=127.0.0.1, port=7125>>Max retries exceeded with url>>Failed to establish a new connection>>[Errno 111] Connection refused
2024-02-27 20:38:04,511 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-02-27 20:38:04,526 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-27 20:38:04,549 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/access/oneshot_token
2024-02-27 20:38:04,550 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-02-27 20:38:04,572 [_logging.py:info()] - Websocket connected
2024-02-27 20:38:04,573 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-02-27 20:38:04,597 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-27 20:38:04,619 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2024-02-27 20:38:04,620 [printer.py:configure_cameras()] - Cameras: []
2024-02-27 20:38:04,620 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'update_manager', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-310-g67c98f6', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-02-27 20:38:04,645 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2024-02-27 20:38:04,675 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2024-02-27 20:38:04,677 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_28003C001150535556323420-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '^PG6', 'position_min': '0', 'position_endstop': '299', 'position_max': '299', 'homing_speed': '25', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'PG9', 'position_min': '0', 'position_endstop': '300', 'position_max': '303.5', 'homing_speed': '25', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': '!PG3', 'enable_pin': '!PG5', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '290', 'position_min': '-4.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA0', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': '!PF10', 'enable_pin': '!PG2', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PC13', 'dir_pin': 'PF0', 'enable_pin': '!PF1', 'rotation_distance': '21.9459674016', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.75', 'heater_pin': 'PA1', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF4', 'min_temp': '10', 'max_temp': '270', 'max_power': '1.0', 'min_extrude_temp': '170', 'pressure_advance': '0.05', 'pressure_advance_smooth_time': '0.040', 'control': 'pid', 'pid_kp': '26.572', 'pid_ki': '2.036', 'pid_kd': '86.691'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.5', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PA2', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF3', 'max_power': '1', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '55.196', 'pid_ki': '2.091', 'pid_kd': '364.295'}, 'probe': {'pin': 'PG15', 'x_offset': '0', 'y_offset': '0', 'speed': '10.0', 'samples': '5', 'samples_result': 'median', 'sample_retract_dist': '3.0', 'samples_tolerance': '0.006', 'samples_tolerance_retries': '6', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-1.500'}, 'fan': {'pin': 'PA8', 'kick_start_time': '0.5', 'off_below': '0.10'}, 'heater_fan hotend_fan': {'pin': 'PE5', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'controller_fan controller_fan': {'pin': 'PD12', 'kick_start_time': '0.5', 'heater': 'heater_bed'}, 'heater_fan exhaust_fan': {'pin': 'PD13', 'max_power': '1.0', 'shutdown_speed': '0.0', 'kick_start_time': '5.0', 'heater': 'heater_bed', 'heater_temp': '60', 'fan_speed': '1.0'}, 'output_pin caselight': {'pin': 'PD15', 'pwm': 'true', 'shutdown_value': '0', 'value': '1', 'cycle_time': '0.01'}, 'neopixel sb_leds': {'pin': 'PB0', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '0.0', 'initial_green': '0.2157', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'temperature_sensor chamber': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF5', 'min_temp': '0', 'max_temp': '100', 'gcode_id': 'chamber_th'}, 'idle_timeout': {'timeout': '1800'}, 'safe_z_home': {'home_xy_position': '150,150', 'speed': '100', 'z_hop': '10'}, 'z_tilt': {'z_positions': '\n-50, 18\n150, 348\n350, 18', 'points': '\n30, 5\n150, 245\n270, 5', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'gcode_macro PRINT_START': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nbed_mesh_calibrate\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END'}, 'gcode_macro _sb_vars': {'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'variable_thermal_config': "{\n'extruder': {\n'cool_temp': 40,\n'leds': 'logo',\n},\n'heater_bed': {\n'cool_temp': 40,\n'leds': 'nozzle',\n},\n}", 'gcode': ''}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}"}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on'}, 'gcode_macro LOAD_FILAMENT': {'variable_load_distance': '50', 'variable_purge_distance': '25', 'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}\nSAVE_GCODE_STATE NAME=load_state\nG91\nG92 E0\nG1 E{load_distance} F{max_velocity}\nG1 E{purge_distance} F{speed}\nRESTORE_GCODE_STATE NAME=load_state"}, 'gcode_macro UNLOAD_FILAMENT': {'variable_unload_distance': '50', 'variable_purge_distance': '25', 'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}\nSAVE_GCODE_STATE NAME=unload_state\nG91\nG92 E0\nG1 E{purge_distance} F{speed}\nG1 E-{unload_distance} F{max_velocity}\nRESTORE_GCODE_STATE NAME=unload_state"}, 'bed_mesh': {'speed': '300', 'horizontal_move_z': '10', 'mesh_min': '40, 40', 'mesh_max': '260,260', 'fade_start': '0.6', 'fade_end': '10.0', 'probe_count': '5,5', 'algorithm': 'bicubic'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_28003C001150535556323420-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': '^PG6', 'position_endstop': 299.0, 'position_min': 0.0, 'position_max': 299.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'PG9', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 303.5, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PF11', 'dir_pin': '!PG3', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG5', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -4.5, 'position_max': 290.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA0'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PF9', 'dir_pin': '!PF10', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG2'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF4', 'min_temp': 10.0, 'max_temp': 270.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 26.572, 'pid_ki': 2.036, 'pid_kd': 86.691, 'heater_pin': 'PA1', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PC13', 'pressure_advance': 0.05, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'PF0', 'rotation_distance': 21.9459674016, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 55.196, 'pid_ki': 2.091, 'pid_kd': 364.295, 'heater_pin': 'PA2', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'probe': {'z_offset': -1.5, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': 'PG15', 'speed': 10.0, 'lift_speed': 10.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 5, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.006, 'samples_tolerance_retries': 6}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE5', 'fan_speed': 1.0}, 'controller_fan controller_fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD12', 'fan_speed': 1.0, 'idle_speed': 1.0, 'idle_timeout': 30, 'heater': ['heater_bed']}, 'heater_fan exhaust_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 5.0, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13', 'fan_speed': 1.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PD15', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 1.0, 'maximum_mcu_duration': 0.0, 'value': 1.0, 'shutdown_value': 0.0}, 'neopixel sb_leds': {'pin': 'PB0', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 0.0, 'initial_green': 0.2157, 'initial_blue': 1.0, 'initial_white': 0.0}, 'temperature_sensor chamber': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF5', 'min_temp': 0.0, 'max_temp': 100.0, 'gcode_id': 'chamber_th'}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'safe_z_home': {'home_xy_position': [150.0, 150.0], 'z_hop': 10.0, 'z_hop_speed': 15.0, 'speed': 100.0, 'move_to_previous': False}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [150.0, 348.0], [350.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 5.0], [150.0, 245.0], [270.0, 5.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'gcode_macro print_start': {'gcode': '\n\n{% set target_bed = params.BED|int %}\n{% set target_extruder = params.EXTRUDER|int %}\n{% set target_chamber = params.CHAMBER|default("40")|int %}\n{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}\n{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}\n\n\nSTATUS_HOMING\nG28\nG90\n\n\nBED_MESH_CLEAR\n\n\n{% if params.BED|int > 90 %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nM106 S255\n\n\n\n\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"\nTEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}\n\n\n{% else %}\nSET_DISPLAY_TEXT MSG="Bed: {target_bed}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM190 S{target_bed}\nSET_DISPLAY_TEXT MSG="Soak for 5min"\nG4 P300000\n{% endif %}\n\n\nSET_DISPLAY_TEXT MSG="Hotend: 150c"\nM109 S150\n\n\nSET_DISPLAY_TEXT MSG="Z-tilt adjust"\nSTATUS_LEVELING\nZ_TILT_ADJUST\nG28 Z\n\n\nSET_DISPLAY_TEXT MSG="Bed mesh"\nSTATUS_MESHING\nbed_mesh_calibrate\n\n\nSET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"\nSTATUS_HEATING\nG1 X{x_wait} Y{y_wait} Z15 F9000\nM107\nM109 S{target_extruder}\n\n\nSET_DISPLAY_TEXT MSG="Printer goes brr"\nSTATUS_PRINTING\nG0 X{x_wait - 50} Y4 F10000\nG0 Z0.4\nG91\nG1 X100 E20 F1000\nG90', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END', 'description': 'G-Code macro'}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'logo': {\n'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},\n'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},\n'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},\n'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},\n'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},\n'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},\n},\n'nozzle': {\n'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},\n'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},\n},\n'thermal': {\n'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}\n}\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'variable_thermal_config': "{\n'extruder': {\n'cool_temp': 40,\n'leds': 'logo',\n},\n'heater_bed': {\n'cool_temp': 40,\n'leds': 'nozzle',\n},\n}"}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nset_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro _set_sb_leds_by_name': {'gcode': '\n{% set leds_name = params.LEDS %}\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}\n{% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}\n{% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}\n{% set transmit = params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].logo_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].logo_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set red = params.RED|default(0)|float %}\n{% set green = params.GREEN|default(0)|float %}\n{% set blue = params.BLUE|default(0)|float %}\n{% set white = params.WHITE|default(0)|float %}\n{% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}\n{% set transmit=params.TRANSMIT|default(1) %}\n\n_set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_on': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_off': {'gcode': '\n{% set transmit=params.TRANSMIT|default(1) %}\n_set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}', 'description': 'G-Code macro'}, 'gcode_macro status_off': {'gcode': '\nset_logo_leds_off transmit=0\nset_nozzle_leds_off', 'description': 'G-Code macro'}, 'gcode_macro status_ready': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="standby" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="standby" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_busy': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="busy" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_heating': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="heating" transmit=0\n_set_sb_leds_by_name leds="nozzle" color="heating" transmit=1', 'description': 'G-Code macro'}, 'gcode_macro status_leveling': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="leveling" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_homing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="homing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_cleaning': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="cleaning" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_meshing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="meshing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_calibrating_z': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro status_printing': {'gcode': '\n_set_sb_leds_by_name leds="logo" color="printing" transmit=0\nset_nozzle_leds_on', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}\nSAVE_GCODE_STATE NAME=load_state\nG91\nG92 E0\nG1 E{load_distance} F{max_velocity}\nG1 E{purge_distance} F{speed}\nRESTORE_GCODE_STATE NAME=load_state", 'description': 'G-Code macro', 'variable_load_distance': '50', 'variable_purge_distance': '25'}, 'gcode_macro unload_filament': {'gcode': "\n{% set speed = params.SPEED|default(300) %}\n{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}\nSAVE_GCODE_STATE NAME=unload_state\nG91\nG92 E0\nG1 E{purge_distance} F{speed}\nG1 E-{unload_distance} F{max_velocity}\nRESTORE_GCODE_STATE NAME=unload_state", 'description': 'G-Code macro', 'variable_unload_distance': '50', 'variable_purge_distance': '25'}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [5, 5], 'mesh_min': [40.0, 40.0], 'mesh_max': [260.0, 260.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 10.0, 'speed': 300.0, 'fade_start': 0.6, 'fade_end': 10.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1500.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-02-27 20:38:04,678 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-27 20:38:04,679 [printer.py:reinit()] - Klipper version: v0.12.0-103-g6ce6fbbc-dirty
2024-02-27 20:38:04,679 [printer.py:reinit()] - # Extruders: 1
2024-02-27 20:38:04,679 [printer.py:reinit()] - # Temperature devices: 2
2024-02-27 20:38:04,679 [printer.py:reinit()] - # Fans: 4
2024-02-27 20:38:04,679 [printer.py:reinit()] - # Output pins: 1
2024-02-27 20:38:04,679 [printer.py:reinit()] - # Leds: 1
2024-02-27 20:38:04,694 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2024-02-27 20:38:04,695 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-02-27 20:38:04,954 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor chamber&fan&controller_fan controller_fan&heater_fan hotend_fan&heater_fan exhaust_fan&output_pin caselight&neopixel sb_leds
2024-02-27 20:38:04,957 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-02-27 20:38:04,957 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-02-27 20:38:04,958 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-02-27 20:38:04,960 [screen.py:init_klipper()] - Printer initialized
2024-02-27 20:38:04,961 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2024-02-27 20:38:04,961 [printer.py:change_state()] - Adding callback for state: ready
2024-02-27 20:38:04,963 [screen.py:_load_panel()] - Loading panel: main_menu
2024-02-27 20:38:05,030 [main_menu.py:__init__()] - ### Making MainMenu
2024-02-27 20:38:05,036 [main_menu.py:add_device()] - Adding device: extruder
2024-02-27 20:38:05,042 [main_menu.py:add_device()] - Adding device: heater_bed
2024-02-27 20:38:05,047 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber
2024-02-27 20:38:05,072 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-02-27 20:38:05,080 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-02-27 20:38:05,090 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'temperature_sensor chamber', 'extruder']
2024-02-27 20:38:05,099 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2024-02-27 20:38:05,100 [screen.py:init_tempstore()] - Temperature store size: 1200
