2024-02-15 20:17:56,355 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro _Probe_Variables': {'variable_probe_attached': 'False', 'variable_probe_state': 'False', 'variable_probe_lock': 'False', 'variable_probe_z_homed': 'False', 'variable_z_endstop_x': '0', 'variable_z_endstop_y': '0', 'gcode': ''}, 'gcode_macro _klicky_check_variables_version': {'gcode': '\n{% set version = printer["gcode_macro _User_Variables"].version|default(0) %}\n\n{% if version != 1 %}\n{ action_raise_error("Please update your klicky variables, there are some functionality changes") }\n{% endif %}'}, 'gcode_macro _KlickyDebug': {'gcode': '\n{% set message  = params.MSG %}\n{% set debug = printer["gcode_macro _User_Variables"].debug|default(False) %}\n\n{% if debug %}\n{ action_respond_info(message) }\n{% endif %}'}, 'gcode_macro _exit_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move  = params.MOVE|default(0) %}\n{% set speed = printer["gcode_macro _User_Variables"].travel_speed %}\n\n\nM400\nSET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\nRESTORE_GCODE_STATE NAME={function} MOVE={move} MOVE_SPEED={speed}'}, 'gcode_macro _entry_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move_accel = printer["gcode_macro _User_Variables"].move_accel|default(1000) %}\n\nM400\nSAVE_GCODE_STATE NAME={function}\n\nSET_GCODE_OFFSET Z=0\n\nG90\n\nSET_VELOCITY_LIMIT ACCEL={move_accel}'}, 'gcode_macro _Homing_Variables': {'gcode': '\n{% set reset  = params.RESET|default(0) %}\n{% if reset %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }\n{% endif %}'}, 'gcode_macro Attach_Probe_Lock': {'description': 'Attaches Klicky Probe, can only be docked after unlocking', 'gcode': '\nAttach_Probe\n_Probe_Lock'}, 'gcode_macro Dock_Probe_Unlock': {'description': 'Docks Klicky Probe even if it was locked', 'gcode': '\n_Probe_Unlock\nDock_Probe'}, 'gcode_macro _Probe_Unlock': {'description': 'Unlocks Klicky Probe state', 'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to False"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }'}, 'gcode_macro _Probe_Lock': {'description': 'Locks Klicky Probe state', 'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to True"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ True }'}, 'gcode_macro _DeployKlickyDock': {'description': 'Deploys Klicky servo-controlled dock', 'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_deploy = printer["gcode_macro _User_Variables"].servo_deploy|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_DeployKlickyDock Klicky servo configuration enabled"\n{% if servo_deploy == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo deploy angle specified") }\n{% endif %}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _DeployDock"] is defined %}\n_KlickyDebug msg="_DeployKlickyDock calling _DeployDock"\n_DeployDock\n{% endif %}'}, 'gcode_macro _RetractKlickyDock': {'description': 'Retracts Klicky servo-controlled dock', 'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_retract = printer["gcode_macro _User_Variables"].servo_retract|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_RetractKlickyDock Klicky servo configuration enabled"\n{% if servo_retract == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo retract angle specified") }\n{% endif %}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _RetractDock"] is defined %}\n_KlickyDebug msg="_RetractKlickyDock calling _RetractDock"\n_RetractDock\n{% endif %}'}, 'gcode_macro Attach_Probe': {'description': 'Attaches Klicky Probe', 'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set attachmove2_x = printer["gcode_macro _User_Variables"].attachmove2_x|default(0) %}\n{% set attachmove2_y = printer["gcode_macro _User_Variables"].attachmove2_y|default(0) %}\n{% set attachmove2_z = printer["gcode_macro _User_Variables"].attachmove2_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n_entry_point function=Attach_Probe\n\n{% if bypass_probe_docking == False %}\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n_KlickyDebug msg="Attach_Probe Axis homed"\n\n\n{% elif not probe_attached and not probe_lock %}\n_KlickyDebug msg="Attach_Probe going to attach probe"\n{% if verbose %}\n{ action_respond_info("Attaching Probe") }\n{% endif %}\n_KLICKY_STATUS_BUSY\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% if not enable_z_hop %}\n_KlickyDebug msg="Attach_Probe z_hop disabled"\n{% set safe_z = 0 %}\n{% endif %}\n{% endif %}\n\n\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero, duplicate?") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Umbilical_Path\n\n_entry_point function=Attach_Probe_intern\n\n\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n_DeployKlickyDock\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}"\nG0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}\n\n_RetractKlickyDock\n\n{% if ((printer.gcode_move.gcode_position.z < safe_z) or (docklocation_z != -128 and docklocation_z < safe_z ))%}\n_KlickyDebug msg="Attach_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\n_CheckProbe action=attach\n\n_exit_point function=Attach_Probe_intern move={goback}\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe locked not attaching probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already attached!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe already attached, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Attach_Probe\n{% else %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}'}, 'gcode_macro Dock_Probe': {'description': 'Docks Klicky Probe', 'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n{% if bypass_probe_docking == True %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}\n\n{% if bypass_probe_docking != True %}\n_entry_point function=Dock_Probe\n\n\n{% if probe_attached and not probe_lock %}\n_KLICKY_STATUS_BUSY\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Dock_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n_Umbilical_Path\n\n\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n\n_DeployKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\n\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}"\nG0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}\n{% endif %}\n\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}\n\n\n_RetractKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving away from the dock to G0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}\n\n\n{% if (printer.gcode_move.gcode_position.z < safe_z) %}\n_KlickyDebug msg="Dock_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\nG4 P1000\n_CheckProbe action=dock\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe locked not docking probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already docked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe already docked, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Dock_Probe move={goback}\n{% else %}\n_KlickyDebug msg="Dock_Probe probe docking bypassed, doing nothing"\n{% endif %}'}, 'gcode_macro PROBE_CALIBRATE': {'rename_existing': '_PROBE_CALIBRATE', 'description': 'Calibrate the probes z_offset with klicky automount', 'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_calibrate Axis homed"\n_KlickyDebug msg="probe_calibrate Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_CALIBRATE with the probe above the BED, check klicky_variables bed size!") }\n{% endif %}\n\n{% if bypass_probe_docking == False %}\n_CheckProbe action=query\nG90\nAttach_Probe back=1\n_KLICKY_STATUS_CALIBRATING_Z\n\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nM118 moving the toolhead 20 mm from the bed\n_KlickyDebug msg="probe_calibrate Moving Z up by 20mm"\nTESTZ Z=20\nM118 remove manually the probe and continue calibration\n_KLICKY_STATUS_READY\n{% else %}\n_KLICKY_STATUS_CALIBRATING_Z\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n_KLICKY_STATUS_READY\n{% endif %}'}, 'gcode_macro PROBE_ACCURACY': {'rename_existing': '_PROBE_ACCURACY', 'description': 'Probe Z-height accuracy at current XY position with klicky automount', 'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_accuracy Axis homed"\n_KlickyDebug msg="probe_accuracy Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n_entry_point function=PROBE_ACCURACY\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_ACCURACY with the probe above the BED, check klicky_variables bed size!") }\n{% endif%}\n\n_CheckProbe action=query\nAttach_Probe back=1\n\n_KlickyDebug msg="probe_accuracy calling klipper probe accuracy"\n_PROBE_ACCURACY {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nDock_Probe back=1\n\n_exit_point function=PROBE_ACCURACY move=1'}, 'force_move': {'enable_force_move': 'True'}, 'homing_override': {'axes': 'xyz', 'gcode': '\n\n_User_Variables\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n{% set kinematic_z = 0 %}\n{% set dock_on_zhome = printer["gcode_macro _User_Variables"].dock_on_zhome|default(True) %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set home_backoff_x = printer["gcode_macro _User_Variables"].home_backoff_x|default(0) %}\n{% set home_backoff_y = printer["gcode_macro _User_Variables"].home_backoff_y|default(0) %}\n{% set override_homing = printer["gcode_macro _User_Variables"].override_homing|default(\'\') %}\n\n\n_klicky_check_variables_version\n\n_CheckProbe action=query\n\n\n{% set home_x, home_y, home_z, leave_probe_attached = False, False, False, False %}\n\n{% if \'PROBE_LOCK\' in params%}\n{% if verbose %}\n{ action_respond_info("PROBE_LOCK = True") }\n{% endif %}\n{% set leave_probe_attached = True %}\n{% endif %}\n\n\n{% if not \'X\' in params\nand not \'Y\' in params\nand not \'Z\' in params %}\n\n{% set home_x, home_y, home_z = True, True, True %}\n_KlickyDebug msg="homing_override goint to home all axes"\n\n{% else %}\n{% if \'X\' in params %}\n{% set home_x = True %}\n_KlickyDebug msg="homing_override goint to home X"\n\n{% endif %}\n\n{% if \'Y\' in params %}\n{% set home_y = True %}\n_KlickyDebug msg="homing_override goint to home Y"\n{% endif %}\n\n{% if \'Z\' in params %}\n{% set home_z = True %}\n_KlickyDebug msg="homing_override goint to home Z"\n{% endif %}\n\n{% if \'X\' in params\nand \'Y\' in params\nand \'Z\' in params %}\n\n\n_Homing_Variables reset=1\n_KlickyDebug msg="homing_override goint to home all axes"\n{% endif %}\n\n{% endif %}\n\n_entry_point function=homing_override\n_KLICKY_STATUS_HOMING\n\n\n{% if \'z\' not in printer.toolhead.homed_axes %}\n{% if enable_z_hop == False %}\n_KlickyDebug msg="homing_override z_hop disabled"\n\n{% set kinematic_z = safe_z %}\n{% set safe_z = safe_z %}\n{% endif %}\n{% endif %}\n\n\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes and \'z\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("No axis homed") }\n{% endif %}\n_KlickyDebug msg="homing_override no axis homed, setting position as X=Y=0 Z={kinematic_z}"\nSET_KINEMATIC_POSITION X=0 Y=0 Z={kinematic_z}\nM400\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% if home_z != True %}\n_KlickyDebug msg="homing_override clearing axis homed state if not already homing Z"\nM84\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("X or Y not homed, forcing full G28") }\n{% endif %}\n{% set home_x, home_y, home_z = True, True, True %}\n{% endif %}\n{% endif %}\n\n\n{% if ((attachmove_y == 0 and override_homing == \'\' ) or (override_homing == \'Y\'))%}\n\n{% if home_y %}\n{% if override_homing == \'Y\' %}\n_KlickyDebug msg="homing_override Y homing first override, due to override_homing = Y"\n{% else %}\n_KlickyDebug msg="homing_override Y homing first override, due to attachmove_y = 0"\n{% endif %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y G28 Y0"\nG28 Y0\n\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop-home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n{% set home_y = False %}\n{% endif %}\n\n\n\n{% if home_x %}\n{% if verbose %}\n{ action_respond_info("Homing X") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in X homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_X"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_X external script to handle the X homing"\n_HOME_X\n{% else %}\n_KlickyDebug msg="homing_override Homing X, G28 X0"\nG28 X0\n\n{% if home_backoff_x != 0 %}\n{% if (printer.configfile.settings.stepper_x.position_endstop > (printer.configfile.settings.stepper_x.position_min|default(0) + printer.configfile.settings.stepper_x.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n\n{% if home_y %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y, G28 Y0"\nG28 Y0\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if verbose %}\n{ action_respond_info("Homing Z") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe configured as a virtual Z endstop attaching probe"\nAttach_Probe\n\n{% if leave_probe_attached %}\n_Probe_Lock\n{% endif %}\n{% elif dock_on_zhome == True %}\nDock_Probe\n{% endif %}\n\n_Home_Z_\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe no longer required, docking probe"\nDock_Probe\n{% elif dock_on_zhome == False %}\nDock_Probe\n{% endif %}\n{% endif %}\n_CheckProbe action=query\n\n\n_Park_Toolhead\n\n_exit_point function=homing_override\n_KLICKY_STATUS_READY'}, 'gcode_macro _Umbilical_Path': {'gcode': '\n{% set umbilical = printer["gcode_macro _User_Variables"].umbilical %}\n{% set umbilical_x = printer["gcode_macro _User_Variables"].umbilical_x %}\n{% set umbilical_y = printer["gcode_macro _User_Variables"].umbilical_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n\n{% if umbilical %}\n\n_entry_point function=Umbilical_Path\n\n_KlickyDebug msg="_Umbilical_Path moving to G0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}"\nG0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}\n\n_exit_point function=Umbilical_Path\n{% endif %}'}, 'gcode_macro _Home_Z_': {'gcode': '\n{% set z_endstop_x = printer["gcode_macro _Probe_Variables"].z_endstop_x %}\n{% set z_endstop_y = printer["gcode_macro _Probe_Variables"].z_endstop_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}    {% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Home_Z\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n{% else %}\n_KlickyDebug msg="_Home_Z_ XY Axis homed"\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="_Home_Z_ Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n\n\n_KlickyDebug msg="_Home_Z_ moving to Z endstop position G0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}"\nG0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}\n_KlickyDebug msg="_Home_Z_ Homing Z G28 Z"\nG28 Z0\n_KlickyDebug msg="_Home_Z_ toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_exit_point function=Home_Z'}, 'gcode_macro _CheckProbe': {'variable_probe_state': '0', 'gcode': '\nQuery_Probe\n_SetProbeState action={ params.ACTION }'}, 'gcode_macro _SetProbeState': {'gcode': '\n{% set query_probe_triggered = printer.probe.last_query %}\n{% set action  = params.ACTION|default(\'\') %}\n\n\n{% if query_probe_triggered %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ False }\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ True }\n{% endif %}\n\n{% if action == \'query\' %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_state VALUE={ query_probe_triggered }\n{% endif %}\n\n\n\n\n{% if not query_probe_triggered and action == \'dock\' %}\n{ action_raise_error("Probe dock failed!") }\n{% endif %}\n\n\n{% if query_probe_triggered and action == \'attach\' %}\n{ action_raise_error("Probe attach failed!") }\n{% endif %}'}, 'gcode_macro _Park_Toolhead': {'gcode': '\n{% set park_toolhead = printer["gcode_macro _User_Variables"].park_toolhead %}\n{% set parkposition_x = printer["gcode_macro _User_Variables"].parkposition_x %}\n{% set parkposition_y = printer["gcode_macro _User_Variables"].parkposition_y %}\n{% set parkposition_z = printer["gcode_macro _User_Variables"].parkposition_z %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Park_Toolhead\n\n{% if park_toolhead and \'xyz\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Parking Toolhead") }\n{% endif %}\n{% if parkposition_z == -128 %}\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}\n\n{% else %}\n\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}\n\n{% endif %}\n\n{% endif %}\n_exit_point function=Park_Toolhead'}, 'gcode_macro _klicky_status_ready': {'gcode': '\n{% if printer[\'gcode_macro status_ready\'] is defined %}\n_KlickyDebug msg="_klicky_status_ready activating the LED STATUS_READY"\nSTATUS_READY\n{% endif %}'}, 'gcode_macro _klicky_status_busy': {'gcode': '\n{% if printer[\'gcode_macro status_busy\'] is defined %}\n_KlickyDebug msg="_klicky_status_busy activating the LED STATUS_BUSY"\nSTATUS_BUSY\n{% endif %}'}, 'gcode_macro _klicky_status_leveling': {'gcode': '\n{% if printer[\'gcode_macro status_leveling\'] is defined %}\n_KlickyDebug msg="_klicky_status_leveling activating the LED STATUS_LEVELING"\nSTATUS_LEVELING\n{% endif %}'}, 'gcode_macro _klicky_status_homing': {'gcode': '\n{% if printer[\'gcode_macro status_homing\'] is defined %}\n_KlickyDebug msg="_klicky_status_homing activating the LED STATUS_HOMING"\nSTATUS_HOMING\n{% endif %}'}, 'gcode_macro _klicky_status_cleaning': {'gcode': '\n{% if printer[\'gcode_macro status_cleaning\'] is defined %}\n_KlickyDebug msg="_klicky_status_cleaning activating the LED STATUS_CLEANING"\nSTATUS_CLEANING\n{% endif %}'}, 'gcode_macro _klicky_status_meshing': {'gcode': '\n{% if printer[\'gcode_macro status_meshing\'] is defined %}\n_KlickyDebug msg="_klicky_status_meshing activating the LED STATUS_MESHING"\nSTATUS_MESHING\n{% endif %}'}, 'gcode_macro _klicky_status_calibrating_z': {'gcode': '\n{% if printer[\'gcode_macro status_calibrating_z\'] is defined %}\n_KlickyDebug msg="_klicky_status_calibrating_z activating the LED STATUS_CALIBRATING_Z"\nSTATUS_CALIBRATING_Z\n{% endif %}'}, 'z_calibration': {'nozzle_xy_position': '172, 301', 'switch_xy_position': '171.5, 282', 'bed_xy_position': '150, 150', 'switch_offset': '0.09', 'offset_margins': '-1.0,1.0', 'speed': '50', 'probing_first_fast': 'false', 'start_gcode': 'Attach_Probe', 'end_gcode': 'Dock_Probe'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_28003C001150535556323420-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '^PG6', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '25', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'PG9', 'position_min': '0', 'position_endstop': '300', 'position_max': '303.5', 'homing_speed': '25', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': '!PG3', 'enable_pin': '!PG5', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'PG10', 'position_endstop': '-0.5', 'position_max': '290', 'position_min': '-4.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA0', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': '!PF10', 'enable_pin': '!PG2', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PC13', 'dir_pin': 'PF0', 'enable_pin': '!PF1', 'rotation_distance': '22.6789511', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.75', 'heater_pin': 'PA1', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF4', 'min_temp': '10', 'max_temp': '270', 'max_power': '1.0', 'min_extrude_temp': '170', 'pressure_advance': '0.05', 'pressure_advance_smooth_time': '0.040', 'control': 'pid', 'pid_kp': '26.572', 'pid_ki': '2.036', 'pid_kd': '86.691'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.5', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PA2', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF3', 'max_power': '1', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '55.196', 'pid_ki': '2.091', 'pid_kd': '364.295'}, 'probe': {'pin': 'PG15', 'x_offset': '0', 'y_offset': '25.0', 'z_offset': '0', 'speed': '10.0', 'samples': '5', 'samples_result': 'median', 'sample_retract_dist': '3.0', 'samples_tolerance': '0.006', 'samples_tolerance_retries': '3'}, 'fan': {'pin': 'PA8', 'kick_start_time': '0.5', 'off_below': '0.10'}, 'heater_fan hotend_fan': {'pin': 'PE5', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'controller_fan controller_fan': {'pin': 'PD12', 'kick_start_time': '0.5', 'heater': 'heater_bed'}, 'heater_fan exhaust_fan': {'pin': 'PD13', 'max_power': '1.0', 'shutdown_speed': '0.0', 'kick_start_time': '5.0', 'heater': 'heater_bed', 'heater_temp': '60', 'fan_speed': '1.0'}, 'output_pin caselight': {'pin': 'PD15', 'pwm': 'true', 'shutdown_value': '0', 'value': '1', 'cycle_time': '0.01'}, 'neopixel headlight': {'pin': 'PB0', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '0.0', 'initial_green': '0.0', 'initial_blue': '0.0', 'initial_white': '0.0'}, 'temperature_sensor chamber_temp': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF5', 'min_temp': '0', 'max_temp': '100', 'gcode_id': 'chamber_th'}, 'idle_timeout': {'timeout': '1800'}, 'z_tilt': {'z_positions': '\n-50, 18\n150, 348\n350, 18', 'points': '\n30, 5\n150, 245\n270, 5', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'gcode_macro _User_Variables': {'variable_verbose': 'True', 'variable_debug': 'False', 'variable_travel_speed': '200', 'variable_move_accel': '1000', 'variable_dock_speed': '50', 'variable_release_speed': '75', 'variable_z_drop_speed': '20', 'variable_safe_z': '25', 'variable_enable_z_hop': 'True', 'variable_max_bed_y': '300', 'variable_max_bed_x': '300', 'variable_z_endstop_x': '172', 'variable_z_endstop_y': '301', 'variable_docklocation_x': '40.5', 'variable_docklocation_y': '303.5', 'variable_docklocation_z': '-128', 'variable_enable_dock_servo': 'False', 'variable_servo_name': "'NAME'", 'variable_servo_deploy': '10', 'variable_servo_retract': '11', 'variable_servo_delay': '250', 'variable_dockmove_x': '40', 'variable_dockmove_y': '0', 'variable_dockmove_z': '0', 'variable_attachmove_x': '0', 'variable_attachmove_y': '30', 'variable_attachmove_z': '0', 'variable_umbilical': 'False', 'variable_umbilical_x': '15', 'variable_umbilical_y': '15', 'variable_park_toolhead': 'False', 'variable_parkposition_x': '125', 'variable_parkposition_y': '125', 'variable_parkposition_z': '30', 'variable_version': '1', 'variable_attachmove2_x': '0', 'variable_attachmove2_y': '0', 'variable_attachmove2_z': '0', 'variable_home_backoff_x': '10', 'variable_home_backoff_y': '10', 'variable_override_homing': "''", 'variable_dock_on_zhome': 'True', 'gcode': '\n{% set Mx = printer[\'configfile\'].config["stepper_x"]["position_max"]|float %}\n{% set My = printer[\'configfile\'].config["stepper_y"]["position_max"]|float %}\n{% set Ox = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set Oy = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set Oz = printer[\'configfile\'].config["probe"]["z_offset"]|float %}\n\n\n{% if z_endstop_x != 0 or z_endstop_y != 0 %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ z_endstop_x }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ z_endstop_y }\n\n\n{% else %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ (Mx * 0.5) - Ox }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ (My * 0.5) - Oy }\n{% endif %}'}, 'gcode_macro PRINT_START': {'gcode': '\nM117 Homing...\nG28\nZ_TILT_ADJUST\nG28\n\n\n\n\n\n\n\nG0 X150 Y150 Z30 F3600'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_28003C001150535556323420-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro _probe_variables': {'gcode': '', 'description': 'G-Code macro', 'variable_probe_attached': 'False', 'variable_probe_state': 'False', 'variable_probe_lock': 'False', 'variable_probe_z_homed': 'False', 'variable_z_endstop_x': '0', 'variable_z_endstop_y': '0'}, 'gcode_macro _klicky_check_variables_version': {'gcode': '\n{% set version = printer["gcode_macro _User_Variables"].version|default(0) %}\n\n{% if version != 1 %}\n{ action_raise_error("Please update your klicky variables, there are some functionality changes") }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klickydebug': {'gcode': '\n{% set message  = params.MSG %}\n{% set debug = printer["gcode_macro _User_Variables"].debug|default(False) %}\n\n{% if debug %}\n{ action_respond_info(message) }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _exit_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move  = params.MOVE|default(0) %}\n{% set speed = printer["gcode_macro _User_Variables"].travel_speed %}\n\n\nM400\nSET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\nRESTORE_GCODE_STATE NAME={function} MOVE={move} MOVE_SPEED={speed}', 'description': 'G-Code macro'}, 'gcode_macro _entry_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move_accel = printer["gcode_macro _User_Variables"].move_accel|default(1000) %}\n\nM400\nSAVE_GCODE_STATE NAME={function}\n\nSET_GCODE_OFFSET Z=0\n\nG90\n\nSET_VELOCITY_LIMIT ACCEL={move_accel}', 'description': 'G-Code macro'}, 'gcode_macro _homing_variables': {'gcode': '\n{% set reset  = params.RESET|default(0) %}\n{% if reset %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro attach_probe_lock': {'gcode': '\nAttach_Probe\n_Probe_Lock', 'description': 'Attaches Klicky Probe, can only be docked after unlocking'}, 'gcode_macro dock_probe_unlock': {'gcode': '\n_Probe_Unlock\nDock_Probe', 'description': 'Docks Klicky Probe even if it was locked'}, 'gcode_macro _probe_unlock': {'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to False"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }', 'description': 'Unlocks Klicky Probe state'}, 'gcode_macro _probe_lock': {'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to True"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ True }', 'description': 'Locks Klicky Probe state'}, 'gcode_macro _deployklickydock': {'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_deploy = printer["gcode_macro _User_Variables"].servo_deploy|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_DeployKlickyDock Klicky servo configuration enabled"\n{% if servo_deploy == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo deploy angle specified") }\n{% endif %}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _DeployDock"] is defined %}\n_KlickyDebug msg="_DeployKlickyDock calling _DeployDock"\n_DeployDock\n{% endif %}', 'description': 'Deploys Klicky servo-controlled dock'}, 'gcode_macro _retractklickydock': {'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_retract = printer["gcode_macro _User_Variables"].servo_retract|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_RetractKlickyDock Klicky servo configuration enabled"\n{% if servo_retract == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo retract angle specified") }\n{% endif %}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _RetractDock"] is defined %}\n_KlickyDebug msg="_RetractKlickyDock calling _RetractDock"\n_RetractDock\n{% endif %}', 'description': 'Retracts Klicky servo-controlled dock'}, 'gcode_macro attach_probe': {'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set attachmove2_x = printer["gcode_macro _User_Variables"].attachmove2_x|default(0) %}\n{% set attachmove2_y = printer["gcode_macro _User_Variables"].attachmove2_y|default(0) %}\n{% set attachmove2_z = printer["gcode_macro _User_Variables"].attachmove2_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n_entry_point function=Attach_Probe\n\n{% if bypass_probe_docking == False %}\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n_KlickyDebug msg="Attach_Probe Axis homed"\n\n\n{% elif not probe_attached and not probe_lock %}\n_KlickyDebug msg="Attach_Probe going to attach probe"\n{% if verbose %}\n{ action_respond_info("Attaching Probe") }\n{% endif %}\n_KLICKY_STATUS_BUSY\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% if not enable_z_hop %}\n_KlickyDebug msg="Attach_Probe z_hop disabled"\n{% set safe_z = 0 %}\n{% endif %}\n{% endif %}\n\n\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero, duplicate?") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Umbilical_Path\n\n_entry_point function=Attach_Probe_intern\n\n\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n_DeployKlickyDock\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}"\nG0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}\n\n_RetractKlickyDock\n\n{% if ((printer.gcode_move.gcode_position.z < safe_z) or (docklocation_z != -128 and docklocation_z < safe_z ))%}\n_KlickyDebug msg="Attach_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\n_CheckProbe action=attach\n\n_exit_point function=Attach_Probe_intern move={goback}\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe locked not attaching probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already attached!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe already attached, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Attach_Probe\n{% else %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}', 'description': 'Attaches Klicky Probe'}, 'gcode_macro dock_probe': {'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n{% if bypass_probe_docking == True %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}\n\n{% if bypass_probe_docking != True %}\n_entry_point function=Dock_Probe\n\n\n{% if probe_attached and not probe_lock %}\n_KLICKY_STATUS_BUSY\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Dock_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n_Umbilical_Path\n\n\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n\n_DeployKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\n\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}"\nG0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}\n{% endif %}\n\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}\n\n\n_RetractKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving away from the dock to G0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}\n\n\n{% if (printer.gcode_move.gcode_position.z < safe_z) %}\n_KlickyDebug msg="Dock_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\nG4 P1000\n_CheckProbe action=dock\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe locked not docking probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already docked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe already docked, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Dock_Probe move={goback}\n{% else %}\n_KlickyDebug msg="Dock_Probe probe docking bypassed, doing nothing"\n{% endif %}', 'description': 'Docks Klicky Probe'}, 'gcode_macro probe_calibrate': {'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_calibrate Axis homed"\n_KlickyDebug msg="probe_calibrate Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_CALIBRATE with the probe above the BED, check klicky_variables bed size!") }\n{% endif %}\n\n{% if bypass_probe_docking == False %}\n_CheckProbe action=query\nG90\nAttach_Probe back=1\n_KLICKY_STATUS_CALIBRATING_Z\n\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nM118 moving the toolhead 20 mm from the bed\n_KlickyDebug msg="probe_calibrate Moving Z up by 20mm"\nTESTZ Z=20\nM118 remove manually the probe and continue calibration\n_KLICKY_STATUS_READY\n{% else %}\n_KLICKY_STATUS_CALIBRATING_Z\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n_KLICKY_STATUS_READY\n{% endif %}', 'rename_existing': '_PROBE_CALIBRATE', 'description': 'Calibrate the probes z_offset with klicky automount'}, 'gcode_macro probe_accuracy': {'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_accuracy Axis homed"\n_KlickyDebug msg="probe_accuracy Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n_entry_point function=PROBE_ACCURACY\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_ACCURACY with the probe above the BED, check klicky_variables bed size!") }\n{% endif%}\n\n_CheckProbe action=query\nAttach_Probe back=1\n\n_KlickyDebug msg="probe_accuracy calling klipper probe accuracy"\n_PROBE_ACCURACY {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nDock_Probe back=1\n\n_exit_point function=PROBE_ACCURACY move=1', 'rename_existing': '_PROBE_ACCURACY', 'description': 'Probe Z-height accuracy at current XY position with klicky automount'}, 'force_move': {'enable_force_move': True}, 'homing_override': {'axes': 'xyz', 'gcode': '\n\n_User_Variables\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n{% set kinematic_z = 0 %}\n{% set dock_on_zhome = printer["gcode_macro _User_Variables"].dock_on_zhome|default(True) %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set home_backoff_x = printer["gcode_macro _User_Variables"].home_backoff_x|default(0) %}\n{% set home_backoff_y = printer["gcode_macro _User_Variables"].home_backoff_y|default(0) %}\n{% set override_homing = printer["gcode_macro _User_Variables"].override_homing|default(\'\') %}\n\n\n_klicky_check_variables_version\n\n_CheckProbe action=query\n\n\n{% set home_x, home_y, home_z, leave_probe_attached = False, False, False, False %}\n\n{% if \'PROBE_LOCK\' in params%}\n{% if verbose %}\n{ action_respond_info("PROBE_LOCK = True") }\n{% endif %}\n{% set leave_probe_attached = True %}\n{% endif %}\n\n\n{% if not \'X\' in params\nand not \'Y\' in params\nand not \'Z\' in params %}\n\n{% set home_x, home_y, home_z = True, True, True %}\n_KlickyDebug msg="homing_override goint to home all axes"\n\n{% else %}\n{% if \'X\' in params %}\n{% set home_x = True %}\n_KlickyDebug msg="homing_override goint to home X"\n\n{% endif %}\n\n{% if \'Y\' in params %}\n{% set home_y = True %}\n_KlickyDebug msg="homing_override goint to home Y"\n{% endif %}\n\n{% if \'Z\' in params %}\n{% set home_z = True %}\n_KlickyDebug msg="homing_override goint to home Z"\n{% endif %}\n\n{% if \'X\' in params\nand \'Y\' in params\nand \'Z\' in params %}\n\n\n_Homing_Variables reset=1\n_KlickyDebug msg="homing_override goint to home all axes"\n{% endif %}\n\n{% endif %}\n\n_entry_point function=homing_override\n_KLICKY_STATUS_HOMING\n\n\n{% if \'z\' not in printer.toolhead.homed_axes %}\n{% if enable_z_hop == False %}\n_KlickyDebug msg="homing_override z_hop disabled"\n\n{% set kinematic_z = safe_z %}\n{% set safe_z = safe_z %}\n{% endif %}\n{% endif %}\n\n\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes and \'z\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("No axis homed") }\n{% endif %}\n_KlickyDebug msg="homing_override no axis homed, setting position as X=Y=0 Z={kinematic_z}"\nSET_KINEMATIC_POSITION X=0 Y=0 Z={kinematic_z}\nM400\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% if home_z != True %}\n_KlickyDebug msg="homing_override clearing axis homed state if not already homing Z"\nM84\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("X or Y not homed, forcing full G28") }\n{% endif %}\n{% set home_x, home_y, home_z = True, True, True %}\n{% endif %}\n{% endif %}\n\n\n{% if ((attachmove_y == 0 and override_homing == \'\' ) or (override_homing == \'Y\'))%}\n\n{% if home_y %}\n{% if override_homing == \'Y\' %}\n_KlickyDebug msg="homing_override Y homing first override, due to override_homing = Y"\n{% else %}\n_KlickyDebug msg="homing_override Y homing first override, due to attachmove_y = 0"\n{% endif %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y G28 Y0"\nG28 Y0\n\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop-home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n{% set home_y = False %}\n{% endif %}\n\n\n\n{% if home_x %}\n{% if verbose %}\n{ action_respond_info("Homing X") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in X homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_X"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_X external script to handle the X homing"\n_HOME_X\n{% else %}\n_KlickyDebug msg="homing_override Homing X, G28 X0"\nG28 X0\n\n{% if home_backoff_x != 0 %}\n{% if (printer.configfile.settings.stepper_x.position_endstop > (printer.configfile.settings.stepper_x.position_min|default(0) + printer.configfile.settings.stepper_x.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n\n{% if home_y %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y, G28 Y0"\nG28 Y0\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if verbose %}\n{ action_respond_info("Homing Z") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe configured as a virtual Z endstop attaching probe"\nAttach_Probe\n\n{% if leave_probe_attached %}\n_Probe_Lock\n{% endif %}\n{% elif dock_on_zhome == True %}\nDock_Probe\n{% endif %}\n\n_Home_Z_\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe no longer required, docking probe"\nDock_Probe\n{% elif dock_on_zhome == False %}\nDock_Probe\n{% endif %}\n{% endif %}\n_CheckProbe action=query\n\n\n_Park_Toolhead\n\n_exit_point function=homing_override\n_KLICKY_STATUS_READY'}, 'gcode_macro _umbilical_path': {'gcode': '\n{% set umbilical = printer["gcode_macro _User_Variables"].umbilical %}\n{% set umbilical_x = printer["gcode_macro _User_Variables"].umbilical_x %}\n{% set umbilical_y = printer["gcode_macro _User_Variables"].umbilical_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n\n{% if umbilical %}\n\n_entry_point function=Umbilical_Path\n\n_KlickyDebug msg="_Umbilical_Path moving to G0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}"\nG0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}\n\n_exit_point function=Umbilical_Path\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _home_z_': {'gcode': '\n{% set z_endstop_x = printer["gcode_macro _Probe_Variables"].z_endstop_x %}\n{% set z_endstop_y = printer["gcode_macro _Probe_Variables"].z_endstop_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}    {% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Home_Z\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n{% else %}\n_KlickyDebug msg="_Home_Z_ XY Axis homed"\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="_Home_Z_ Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n\n\n_KlickyDebug msg="_Home_Z_ moving to Z endstop position G0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}"\nG0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}\n_KlickyDebug msg="_Home_Z_ Homing Z G28 Z"\nG28 Z0\n_KlickyDebug msg="_Home_Z_ toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_exit_point function=Home_Z', 'description': 'G-Code macro'}, 'gcode_macro _checkprobe': {'gcode': '\nQuery_Probe\n_SetProbeState action={ params.ACTION }', 'description': 'G-Code macro', 'variable_probe_state': '0'}, 'gcode_macro _setprobestate': {'gcode': '\n{% set query_probe_triggered = printer.probe.last_query %}\n{% set action  = params.ACTION|default(\'\') %}\n\n\n{% if query_probe_triggered %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ False }\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ True }\n{% endif %}\n\n{% if action == \'query\' %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_state VALUE={ query_probe_triggered }\n{% endif %}\n\n\n\n\n{% if not query_probe_triggered and action == \'dock\' %}\n{ action_raise_error("Probe dock failed!") }\n{% endif %}\n\n\n{% if query_probe_triggered and action == \'attach\' %}\n{ action_raise_error("Probe attach failed!") }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _park_toolhead': {'gcode': '\n{% set park_toolhead = printer["gcode_macro _User_Variables"].park_toolhead %}\n{% set parkposition_x = printer["gcode_macro _User_Variables"].parkposition_x %}\n{% set parkposition_y = printer["gcode_macro _User_Variables"].parkposition_y %}\n{% set parkposition_z = printer["gcode_macro _User_Variables"].parkposition_z %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Park_Toolhead\n\n{% if park_toolhead and \'xyz\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Parking Toolhead") }\n{% endif %}\n{% if parkposition_z == -128 %}\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}\n\n{% else %}\n\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}\n\n{% endif %}\n\n{% endif %}\n_exit_point function=Park_Toolhead', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_ready': {'gcode': '\n{% if printer[\'gcode_macro status_ready\'] is defined %}\n_KlickyDebug msg="_klicky_status_ready activating the LED STATUS_READY"\nSTATUS_READY\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_busy': {'gcode': '\n{% if printer[\'gcode_macro status_busy\'] is defined %}\n_KlickyDebug msg="_klicky_status_busy activating the LED STATUS_BUSY"\nSTATUS_BUSY\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_leveling': {'gcode': '\n{% if printer[\'gcode_macro status_leveling\'] is defined %}\n_KlickyDebug msg="_klicky_status_leveling activating the LED STATUS_LEVELING"\nSTATUS_LEVELING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_homing': {'gcode': '\n{% if printer[\'gcode_macro status_homing\'] is defined %}\n_KlickyDebug msg="_klicky_status_homing activating the LED STATUS_HOMING"\nSTATUS_HOMING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_cleaning': {'gcode': '\n{% if printer[\'gcode_macro status_cleaning\'] is defined %}\n_KlickyDebug msg="_klicky_status_cleaning activating the LED STATUS_CLEANING"\nSTATUS_CLEANING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_meshing': {'gcode': '\n{% if printer[\'gcode_macro status_meshing\'] is defined %}\n_KlickyDebug msg="_klicky_status_meshing activating the LED STATUS_MESHING"\nSTATUS_MESHING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_calibrating_z': {'gcode': '\n{% if printer[\'gcode_macro status_calibrating_z\'] is defined %}\n_KlickyDebug msg="_klicky_status_calibrating_z activating the LED STATUS_CALIBRATING_Z"\nSTATUS_CALIBRATING_Z\n{% endif %}', 'description': 'G-Code macro'}, 'z_calibration': {'switch_offset': 0.09, 'offset_margins': '-1.0,1.0', 'speed': 50.0, 'samples_result': 'none', 'probing_first_fast': False, 'nozzle_xy_position': '172, 301', 'switch_xy_position': '171.5, 282', 'bed_xy_position': '150, 150', 'start_gcode': 'Attach_Probe', 'before_switch_gcode': '', 'end_gcode': 'Dock_Probe'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': '^PG6', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'PG9', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 303.5, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PF11', 'dir_pin': '!PG3', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG5', 'endstop_pin': 'PG10', 'position_endstop': -0.5, 'position_min': -4.5, 'position_max': 290.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA0'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PF9', 'dir_pin': '!PF10', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG2'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF4', 'min_temp': 10.0, 'max_temp': 270.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 26.572, 'pid_ki': 2.036, 'pid_kd': 86.691, 'heater_pin': 'PA1', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PC13', 'pressure_advance': 0.05, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'PF0', 'rotation_distance': 22.6789511, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 55.196, 'pid_ki': 2.091, 'pid_kd': 364.295, 'heater_pin': 'PA2', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'probe': {'z_offset': 0.0, 'deactivate_on_each_sample': True, 'activate_gcode': '', 'deactivate_gcode': '', 'pin': 'PG15', 'speed': 10.0, 'lift_speed': 10.0, 'x_offset': 0.0, 'y_offset': 25.0, 'samples': 5, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.006, 'samples_tolerance_retries': 3}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE5', 'fan_speed': 1.0}, 'controller_fan controller_fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD12', 'fan_speed': 1.0, 'idle_speed': 1.0, 'idle_timeout': 30, 'heater': ['heater_bed']}, 'heater_fan exhaust_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 5.0, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13', 'fan_speed': 1.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PD15', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 1.0, 'maximum_mcu_duration': 0.0, 'value': 1.0, 'shutdown_value': 0.0}, 'neopixel headlight': {'pin': 'PB0', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 0.0, 'initial_green': 0.0, 'initial_blue': 0.0, 'initial_white': 0.0}, 'temperature_sensor chamber_temp': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF5', 'min_temp': 0.0, 'max_temp': 100.0, 'gcode_id': 'chamber_th'}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [150.0, 348.0], [350.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 5.0], [150.0, 245.0], [270.0, 5.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'gcode_macro _user_variables': {'gcode': '\n{% set Mx = printer[\'configfile\'].config["stepper_x"]["position_max"]|float %}\n{% set My = printer[\'configfile\'].config["stepper_y"]["position_max"]|float %}\n{% set Ox = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set Oy = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set Oz = printer[\'configfile\'].config["probe"]["z_offset"]|float %}\n\n\n{% if z_endstop_x != 0 or z_endstop_y != 0 %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ z_endstop_x }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ z_endstop_y }\n\n\n{% else %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ (Mx * 0.5) - Ox }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ (My * 0.5) - Oy }\n{% endif %}', 'description': 'G-Code macro', 'variable_verbose': 'True', 'variable_debug': 'False', 'variable_travel_speed': '200', 'variable_move_accel': '1000', 'variable_dock_speed': '50', 'variable_release_speed': '75', 'variable_z_drop_speed': '20', 'variable_safe_z': '25', 'variable_enable_z_hop': 'True', 'variable_max_bed_y': '300', 'variable_max_bed_x': '300', 'variable_z_endstop_x': '172', 'variable_z_endstop_y': '301', 'variable_docklocation_x': '40.5', 'variable_docklocation_y': '303.5', 'variable_docklocation_z': '-128', 'variable_enable_dock_servo': 'False', 'variable_servo_name': "'NAME'", 'variable_servo_deploy': '10', 'variable_servo_retract': '11', 'variable_servo_delay': '250', 'variable_dockmove_x': '40', 'variable_dockmove_y': '0', 'variable_dockmove_z': '0', 'variable_attachmove_x': '0', 'variable_attachmove_y': '30', 'variable_attachmove_z': '0', 'variable_umbilical': 'False', 'variable_umbilical_x': '15', 'variable_umbilical_y': '15', 'variable_park_toolhead': 'False', 'variable_parkposition_x': '125', 'variable_parkposition_y': '125', 'variable_parkposition_z': '30', 'variable_version': '1', 'variable_attachmove2_x': '0', 'variable_attachmove2_y': '0', 'variable_attachmove2_z': '0', 'variable_home_backoff_x': '10', 'variable_home_backoff_y': '10', 'variable_override_homing': "''", 'variable_dock_on_zhome': 'True'}, 'gcode_macro print_start': {'gcode': '\nM117 Homing...\nG28\nZ_TILT_ADJUST\nG28\n\n\n\n\n\n\n\nG0 X150 Y150 Z30 F3600', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1500.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-02-15 20:17:56,358 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-15 20:17:56,359 [printer.py:reinit()] - Klipper version: v0.12.0-103-g6ce6fbbc-dirty
2024-02-15 20:17:56,359 [printer.py:reinit()] - # Extruders: 1
2024-02-15 20:17:56,359 [printer.py:reinit()] - # Temperature devices: 2
2024-02-15 20:17:56,359 [printer.py:reinit()] - # Fans: 4
2024-02-15 20:17:56,359 [printer.py:reinit()] - # Output pins: 1
2024-02-15 20:17:56,359 [printer.py:reinit()] - # Leds: 1
2024-02-15 20:17:56,365 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-02-15 20:17:56,365 [functions.py:log_start()] - KlipperScreen Version: v0.3.8-89-g2a5e9b3
2024-02-15 20:17:56,366 [functions.py:log_start()] - Python version: 3.9
2024-02-15 20:17:56,373 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2024-02-15 20:17:56,374 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-02-15 20:17:56,695 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor chamber_temp&fan&controller_fan controller_fan&heater_fan hotend_fan&heater_fan exhaust_fan&output_pin caselight&neopixel headlight
2024-02-15 20:17:56,703 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-02-15 20:17:56,704 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-02-15 20:17:56,722 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-02-15 20:17:56,726 [screen.py:init_klipper()] - Printer initialized
2024-02-15 20:17:56,726 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2024-02-15 20:17:56,726 [printer.py:change_state()] - Adding callback for state: ready
2024-02-15 20:17:56,741 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-15 20:17:56,744 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'octoprint_compat', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-310-g67c98f6', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-02-15 20:17:56,755 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2024-02-15 20:17:56,854 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2024-02-15 20:17:56,857 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro _Probe_Variables': {'variable_probe_attached': 'False', 'variable_probe_state': 'False', 'variable_probe_lock': 'False', 'variable_probe_z_homed': 'False', 'variable_z_endstop_x': '0', 'variable_z_endstop_y': '0', 'gcode': ''}, 'gcode_macro _klicky_check_variables_version': {'gcode': '\n{% set version = printer["gcode_macro _User_Variables"].version|default(0) %}\n\n{% if version != 1 %}\n{ action_raise_error("Please update your klicky variables, there are some functionality changes") }\n{% endif %}'}, 'gcode_macro _KlickyDebug': {'gcode': '\n{% set message  = params.MSG %}\n{% set debug = printer["gcode_macro _User_Variables"].debug|default(False) %}\n\n{% if debug %}\n{ action_respond_info(message) }\n{% endif %}'}, 'gcode_macro _exit_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move  = params.MOVE|default(0) %}\n{% set speed = printer["gcode_macro _User_Variables"].travel_speed %}\n\n\nM400\nSET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\nRESTORE_GCODE_STATE NAME={function} MOVE={move} MOVE_SPEED={speed}'}, 'gcode_macro _entry_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move_accel = printer["gcode_macro _User_Variables"].move_accel|default(1000) %}\n\nM400\nSAVE_GCODE_STATE NAME={function}\n\nSET_GCODE_OFFSET Z=0\n\nG90\n\nSET_VELOCITY_LIMIT ACCEL={move_accel}'}, 'gcode_macro _Homing_Variables': {'gcode': '\n{% set reset  = params.RESET|default(0) %}\n{% if reset %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }\n{% endif %}'}, 'gcode_macro Attach_Probe_Lock': {'description': 'Attaches Klicky Probe, can only be docked after unlocking', 'gcode': '\nAttach_Probe\n_Probe_Lock'}, 'gcode_macro Dock_Probe_Unlock': {'description': 'Docks Klicky Probe even if it was locked', 'gcode': '\n_Probe_Unlock\nDock_Probe'}, 'gcode_macro _Probe_Unlock': {'description': 'Unlocks Klicky Probe state', 'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to False"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }'}, 'gcode_macro _Probe_Lock': {'description': 'Locks Klicky Probe state', 'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to True"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ True }'}, 'gcode_macro _DeployKlickyDock': {'description': 'Deploys Klicky servo-controlled dock', 'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_deploy = printer["gcode_macro _User_Variables"].servo_deploy|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_DeployKlickyDock Klicky servo configuration enabled"\n{% if servo_deploy == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo deploy angle specified") }\n{% endif %}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _DeployDock"] is defined %}\n_KlickyDebug msg="_DeployKlickyDock calling _DeployDock"\n_DeployDock\n{% endif %}'}, 'gcode_macro _RetractKlickyDock': {'description': 'Retracts Klicky servo-controlled dock', 'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_retract = printer["gcode_macro _User_Variables"].servo_retract|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_RetractKlickyDock Klicky servo configuration enabled"\n{% if servo_retract == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo retract angle specified") }\n{% endif %}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _RetractDock"] is defined %}\n_KlickyDebug msg="_RetractKlickyDock calling _RetractDock"\n_RetractDock\n{% endif %}'}, 'gcode_macro Attach_Probe': {'description': 'Attaches Klicky Probe', 'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set attachmove2_x = printer["gcode_macro _User_Variables"].attachmove2_x|default(0) %}\n{% set attachmove2_y = printer["gcode_macro _User_Variables"].attachmove2_y|default(0) %}\n{% set attachmove2_z = printer["gcode_macro _User_Variables"].attachmove2_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n_entry_point function=Attach_Probe\n\n{% if bypass_probe_docking == False %}\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n_KlickyDebug msg="Attach_Probe Axis homed"\n\n\n{% elif not probe_attached and not probe_lock %}\n_KlickyDebug msg="Attach_Probe going to attach probe"\n{% if verbose %}\n{ action_respond_info("Attaching Probe") }\n{% endif %}\n_KLICKY_STATUS_BUSY\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% if not enable_z_hop %}\n_KlickyDebug msg="Attach_Probe z_hop disabled"\n{% set safe_z = 0 %}\n{% endif %}\n{% endif %}\n\n\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero, duplicate?") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Umbilical_Path\n\n_entry_point function=Attach_Probe_intern\n\n\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n_DeployKlickyDock\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}"\nG0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}\n\n_RetractKlickyDock\n\n{% if ((printer.gcode_move.gcode_position.z < safe_z) or (docklocation_z != -128 and docklocation_z < safe_z ))%}\n_KlickyDebug msg="Attach_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\n_CheckProbe action=attach\n\n_exit_point function=Attach_Probe_intern move={goback}\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe locked not attaching probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already attached!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe already attached, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Attach_Probe\n{% else %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}'}, 'gcode_macro Dock_Probe': {'description': 'Docks Klicky Probe', 'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n{% if bypass_probe_docking == True %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}\n\n{% if bypass_probe_docking != True %}\n_entry_point function=Dock_Probe\n\n\n{% if probe_attached and not probe_lock %}\n_KLICKY_STATUS_BUSY\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Dock_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n_Umbilical_Path\n\n\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n\n_DeployKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\n\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}"\nG0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}\n{% endif %}\n\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}\n\n\n_RetractKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving away from the dock to G0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}\n\n\n{% if (printer.gcode_move.gcode_position.z < safe_z) %}\n_KlickyDebug msg="Dock_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\nG4 P1000\n_CheckProbe action=dock\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe locked not docking probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already docked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe already docked, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Dock_Probe move={goback}\n{% else %}\n_KlickyDebug msg="Dock_Probe probe docking bypassed, doing nothing"\n{% endif %}'}, 'gcode_macro PROBE_CALIBRATE': {'rename_existing': '_PROBE_CALIBRATE', 'description': 'Calibrate the probes z_offset with klicky automount', 'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_calibrate Axis homed"\n_KlickyDebug msg="probe_calibrate Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_CALIBRATE with the probe above the BED, check klicky_variables bed size!") }\n{% endif %}\n\n{% if bypass_probe_docking == False %}\n_CheckProbe action=query\nG90\nAttach_Probe back=1\n_KLICKY_STATUS_CALIBRATING_Z\n\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nM118 moving the toolhead 20 mm from the bed\n_KlickyDebug msg="probe_calibrate Moving Z up by 20mm"\nTESTZ Z=20\nM118 remove manually the probe and continue calibration\n_KLICKY_STATUS_READY\n{% else %}\n_KLICKY_STATUS_CALIBRATING_Z\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n_KLICKY_STATUS_READY\n{% endif %}'}, 'gcode_macro PROBE_ACCURACY': {'rename_existing': '_PROBE_ACCURACY', 'description': 'Probe Z-height accuracy at current XY position with klicky automount', 'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_accuracy Axis homed"\n_KlickyDebug msg="probe_accuracy Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n_entry_point function=PROBE_ACCURACY\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_ACCURACY with the probe above the BED, check klicky_variables bed size!") }\n{% endif%}\n\n_CheckProbe action=query\nAttach_Probe back=1\n\n_KlickyDebug msg="probe_accuracy calling klipper probe accuracy"\n_PROBE_ACCURACY {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nDock_Probe back=1\n\n_exit_point function=PROBE_ACCURACY move=1'}, 'force_move': {'enable_force_move': 'True'}, 'homing_override': {'axes': 'xyz', 'gcode': '\n\n_User_Variables\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n{% set kinematic_z = 0 %}\n{% set dock_on_zhome = printer["gcode_macro _User_Variables"].dock_on_zhome|default(True) %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set home_backoff_x = printer["gcode_macro _User_Variables"].home_backoff_x|default(0) %}\n{% set home_backoff_y = printer["gcode_macro _User_Variables"].home_backoff_y|default(0) %}\n{% set override_homing = printer["gcode_macro _User_Variables"].override_homing|default(\'\') %}\n\n\n_klicky_check_variables_version\n\n_CheckProbe action=query\n\n\n{% set home_x, home_y, home_z, leave_probe_attached = False, False, False, False %}\n\n{% if \'PROBE_LOCK\' in params%}\n{% if verbose %}\n{ action_respond_info("PROBE_LOCK = True") }\n{% endif %}\n{% set leave_probe_attached = True %}\n{% endif %}\n\n\n{% if not \'X\' in params\nand not \'Y\' in params\nand not \'Z\' in params %}\n\n{% set home_x, home_y, home_z = True, True, True %}\n_KlickyDebug msg="homing_override goint to home all axes"\n\n{% else %}\n{% if \'X\' in params %}\n{% set home_x = True %}\n_KlickyDebug msg="homing_override goint to home X"\n\n{% endif %}\n\n{% if \'Y\' in params %}\n{% set home_y = True %}\n_KlickyDebug msg="homing_override goint to home Y"\n{% endif %}\n\n{% if \'Z\' in params %}\n{% set home_z = True %}\n_KlickyDebug msg="homing_override goint to home Z"\n{% endif %}\n\n{% if \'X\' in params\nand \'Y\' in params\nand \'Z\' in params %}\n\n\n_Homing_Variables reset=1\n_KlickyDebug msg="homing_override goint to home all axes"\n{% endif %}\n\n{% endif %}\n\n_entry_point function=homing_override\n_KLICKY_STATUS_HOMING\n\n\n{% if \'z\' not in printer.toolhead.homed_axes %}\n{% if enable_z_hop == False %}\n_KlickyDebug msg="homing_override z_hop disabled"\n\n{% set kinematic_z = safe_z %}\n{% set safe_z = safe_z %}\n{% endif %}\n{% endif %}\n\n\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes and \'z\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("No axis homed") }\n{% endif %}\n_KlickyDebug msg="homing_override no axis homed, setting position as X=Y=0 Z={kinematic_z}"\nSET_KINEMATIC_POSITION X=0 Y=0 Z={kinematic_z}\nM400\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% if home_z != True %}\n_KlickyDebug msg="homing_override clearing axis homed state if not already homing Z"\nM84\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("X or Y not homed, forcing full G28") }\n{% endif %}\n{% set home_x, home_y, home_z = True, True, True %}\n{% endif %}\n{% endif %}\n\n\n{% if ((attachmove_y == 0 and override_homing == \'\' ) or (override_homing == \'Y\'))%}\n\n{% if home_y %}\n{% if override_homing == \'Y\' %}\n_KlickyDebug msg="homing_override Y homing first override, due to override_homing = Y"\n{% else %}\n_KlickyDebug msg="homing_override Y homing first override, due to attachmove_y = 0"\n{% endif %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y G28 Y0"\nG28 Y0\n\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop-home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n{% set home_y = False %}\n{% endif %}\n\n\n\n{% if home_x %}\n{% if verbose %}\n{ action_respond_info("Homing X") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in X homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_X"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_X external script to handle the X homing"\n_HOME_X\n{% else %}\n_KlickyDebug msg="homing_override Homing X, G28 X0"\nG28 X0\n\n{% if home_backoff_x != 0 %}\n{% if (printer.configfile.settings.stepper_x.position_endstop > (printer.configfile.settings.stepper_x.position_min|default(0) + printer.configfile.settings.stepper_x.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n\n{% if home_y %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y, G28 Y0"\nG28 Y0\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if verbose %}\n{ action_respond_info("Homing Z") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe configured as a virtual Z endstop attaching probe"\nAttach_Probe\n\n{% if leave_probe_attached %}\n_Probe_Lock\n{% endif %}\n{% elif dock_on_zhome == True %}\nDock_Probe\n{% endif %}\n\n_Home_Z_\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe no longer required, docking probe"\nDock_Probe\n{% elif dock_on_zhome == False %}\nDock_Probe\n{% endif %}\n{% endif %}\n_CheckProbe action=query\n\n\n_Park_Toolhead\n\n_exit_point function=homing_override\n_KLICKY_STATUS_READY'}, 'gcode_macro _Umbilical_Path': {'gcode': '\n{% set umbilical = printer["gcode_macro _User_Variables"].umbilical %}\n{% set umbilical_x = printer["gcode_macro _User_Variables"].umbilical_x %}\n{% set umbilical_y = printer["gcode_macro _User_Variables"].umbilical_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n\n{% if umbilical %}\n\n_entry_point function=Umbilical_Path\n\n_KlickyDebug msg="_Umbilical_Path moving to G0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}"\nG0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}\n\n_exit_point function=Umbilical_Path\n{% endif %}'}, 'gcode_macro _Home_Z_': {'gcode': '\n{% set z_endstop_x = printer["gcode_macro _Probe_Variables"].z_endstop_x %}\n{% set z_endstop_y = printer["gcode_macro _Probe_Variables"].z_endstop_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}    {% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Home_Z\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n{% else %}\n_KlickyDebug msg="_Home_Z_ XY Axis homed"\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="_Home_Z_ Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n\n\n_KlickyDebug msg="_Home_Z_ moving to Z endstop position G0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}"\nG0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}\n_KlickyDebug msg="_Home_Z_ Homing Z G28 Z"\nG28 Z0\n_KlickyDebug msg="_Home_Z_ toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_exit_point function=Home_Z'}, 'gcode_macro _CheckProbe': {'variable_probe_state': '0', 'gcode': '\nQuery_Probe\n_SetProbeState action={ params.ACTION }'}, 'gcode_macro _SetProbeState': {'gcode': '\n{% set query_probe_triggered = printer.probe.last_query %}\n{% set action  = params.ACTION|default(\'\') %}\n\n\n{% if query_probe_triggered %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ False }\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ True }\n{% endif %}\n\n{% if action == \'query\' %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_state VALUE={ query_probe_triggered }\n{% endif %}\n\n\n\n\n{% if not query_probe_triggered and action == \'dock\' %}\n{ action_raise_error("Probe dock failed!") }\n{% endif %}\n\n\n{% if query_probe_triggered and action == \'attach\' %}\n{ action_raise_error("Probe attach failed!") }\n{% endif %}'}, 'gcode_macro _Park_Toolhead': {'gcode': '\n{% set park_toolhead = printer["gcode_macro _User_Variables"].park_toolhead %}\n{% set parkposition_x = printer["gcode_macro _User_Variables"].parkposition_x %}\n{% set parkposition_y = printer["gcode_macro _User_Variables"].parkposition_y %}\n{% set parkposition_z = printer["gcode_macro _User_Variables"].parkposition_z %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Park_Toolhead\n\n{% if park_toolhead and \'xyz\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Parking Toolhead") }\n{% endif %}\n{% if parkposition_z == -128 %}\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}\n\n{% else %}\n\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}\n\n{% endif %}\n\n{% endif %}\n_exit_point function=Park_Toolhead'}, 'gcode_macro _klicky_status_ready': {'gcode': '\n{% if printer[\'gcode_macro status_ready\'] is defined %}\n_KlickyDebug msg="_klicky_status_ready activating the LED STATUS_READY"\nSTATUS_READY\n{% endif %}'}, 'gcode_macro _klicky_status_busy': {'gcode': '\n{% if printer[\'gcode_macro status_busy\'] is defined %}\n_KlickyDebug msg="_klicky_status_busy activating the LED STATUS_BUSY"\nSTATUS_BUSY\n{% endif %}'}, 'gcode_macro _klicky_status_leveling': {'gcode': '\n{% if printer[\'gcode_macro status_leveling\'] is defined %}\n_KlickyDebug msg="_klicky_status_leveling activating the LED STATUS_LEVELING"\nSTATUS_LEVELING\n{% endif %}'}, 'gcode_macro _klicky_status_homing': {'gcode': '\n{% if printer[\'gcode_macro status_homing\'] is defined %}\n_KlickyDebug msg="_klicky_status_homing activating the LED STATUS_HOMING"\nSTATUS_HOMING\n{% endif %}'}, 'gcode_macro _klicky_status_cleaning': {'gcode': '\n{% if printer[\'gcode_macro status_cleaning\'] is defined %}\n_KlickyDebug msg="_klicky_status_cleaning activating the LED STATUS_CLEANING"\nSTATUS_CLEANING\n{% endif %}'}, 'gcode_macro _klicky_status_meshing': {'gcode': '\n{% if printer[\'gcode_macro status_meshing\'] is defined %}\n_KlickyDebug msg="_klicky_status_meshing activating the LED STATUS_MESHING"\nSTATUS_MESHING\n{% endif %}'}, 'gcode_macro _klicky_status_calibrating_z': {'gcode': '\n{% if printer[\'gcode_macro status_calibrating_z\'] is defined %}\n_KlickyDebug msg="_klicky_status_calibrating_z activating the LED STATUS_CALIBRATING_Z"\nSTATUS_CALIBRATING_Z\n{% endif %}'}, 'z_calibration': {'nozzle_xy_position': '172, 301', 'switch_xy_position': '171.5, 282', 'bed_xy_position': '150, 150', 'switch_offset': '0.09', 'offset_margins': '-1.0,1.0', 'speed': '50', 'probing_first_fast': 'false', 'start_gcode': 'Attach_Probe', 'end_gcode': 'Dock_Probe'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_28003C001150535556323420-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '^PG6', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '25', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'PG9', 'position_min': '0', 'position_endstop': '300', 'position_max': '303.5', 'homing_speed': '25', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': '!PG3', 'enable_pin': '!PG5', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'PG10', 'position_endstop': '-0.5', 'position_max': '290', 'position_min': '-4.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA0', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': '!PF10', 'enable_pin': '!PG2', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PC13', 'dir_pin': 'PF0', 'enable_pin': '!PF1', 'rotation_distance': '22.6789511', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.75', 'heater_pin': 'PA1', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF4', 'min_temp': '10', 'max_temp': '270', 'max_power': '1.0', 'min_extrude_temp': '170', 'pressure_advance': '0.05', 'pressure_advance_smooth_time': '0.040', 'control': 'pid', 'pid_kp': '26.572', 'pid_ki': '2.036', 'pid_kd': '86.691'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.5', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PA2', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF3', 'max_power': '1', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '55.196', 'pid_ki': '2.091', 'pid_kd': '364.295'}, 'probe': {'pin': 'PG15', 'x_offset': '0', 'y_offset': '25.0', 'z_offset': '0', 'speed': '10.0', 'samples': '5', 'samples_result': 'median', 'sample_retract_dist': '3.0', 'samples_tolerance': '0.006', 'samples_tolerance_retries': '3'}, 'fan': {'pin': 'PA8', 'kick_start_time': '0.5', 'off_below': '0.10'}, 'heater_fan hotend_fan': {'pin': 'PE5', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'controller_fan controller_fan': {'pin': 'PD12', 'kick_start_time': '0.5', 'heater': 'heater_bed'}, 'heater_fan exhaust_fan': {'pin': 'PD13', 'max_power': '1.0', 'shutdown_speed': '0.0', 'kick_start_time': '5.0', 'heater': 'heater_bed', 'heater_temp': '60', 'fan_speed': '1.0'}, 'output_pin caselight': {'pin': 'PD15', 'pwm': 'true', 'shutdown_value': '0', 'value': '1', 'cycle_time': '0.01'}, 'neopixel headlight': {'pin': 'PB0', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '0.0', 'initial_green': '0.0', 'initial_blue': '0.0', 'initial_white': '0.0'}, 'temperature_sensor chamber_temp': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF5', 'min_temp': '0', 'max_temp': '100', 'gcode_id': 'chamber_th'}, 'idle_timeout': {'timeout': '1800'}, 'z_tilt': {'z_positions': '\n-50, 18\n150, 348\n350, 18', 'points': '\n30, 5\n150, 245\n270, 5', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'gcode_macro _User_Variables': {'variable_verbose': 'True', 'variable_debug': 'False', 'variable_travel_speed': '200', 'variable_move_accel': '1000', 'variable_dock_speed': '50', 'variable_release_speed': '75', 'variable_z_drop_speed': '20', 'variable_safe_z': '25', 'variable_enable_z_hop': 'True', 'variable_max_bed_y': '300', 'variable_max_bed_x': '300', 'variable_z_endstop_x': '172', 'variable_z_endstop_y': '301', 'variable_docklocation_x': '40.5', 'variable_docklocation_y': '303.5', 'variable_docklocation_z': '-128', 'variable_enable_dock_servo': 'False', 'variable_servo_name': "'NAME'", 'variable_servo_deploy': '10', 'variable_servo_retract': '11', 'variable_servo_delay': '250', 'variable_dockmove_x': '40', 'variable_dockmove_y': '0', 'variable_dockmove_z': '0', 'variable_attachmove_x': '0', 'variable_attachmove_y': '30', 'variable_attachmove_z': '0', 'variable_umbilical': 'False', 'variable_umbilical_x': '15', 'variable_umbilical_y': '15', 'variable_park_toolhead': 'False', 'variable_parkposition_x': '125', 'variable_parkposition_y': '125', 'variable_parkposition_z': '30', 'variable_version': '1', 'variable_attachmove2_x': '0', 'variable_attachmove2_y': '0', 'variable_attachmove2_z': '0', 'variable_home_backoff_x': '10', 'variable_home_backoff_y': '10', 'variable_override_homing': "''", 'variable_dock_on_zhome': 'True', 'gcode': '\n{% set Mx = printer[\'configfile\'].config["stepper_x"]["position_max"]|float %}\n{% set My = printer[\'configfile\'].config["stepper_y"]["position_max"]|float %}\n{% set Ox = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set Oy = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set Oz = printer[\'configfile\'].config["probe"]["z_offset"]|float %}\n\n\n{% if z_endstop_x != 0 or z_endstop_y != 0 %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ z_endstop_x }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ z_endstop_y }\n\n\n{% else %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ (Mx * 0.5) - Ox }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ (My * 0.5) - Oy }\n{% endif %}'}, 'gcode_macro PRINT_START': {'gcode': '\nM117 Homing...\nG28\nZ_TILT_ADJUST\nG28\n\n\n\n\n\n\n\nG0 X150 Y150 Z30 F3600'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_28003C001150535556323420-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro _probe_variables': {'gcode': '', 'description': 'G-Code macro', 'variable_probe_attached': 'False', 'variable_probe_state': 'False', 'variable_probe_lock': 'False', 'variable_probe_z_homed': 'False', 'variable_z_endstop_x': '0', 'variable_z_endstop_y': '0'}, 'gcode_macro _klicky_check_variables_version': {'gcode': '\n{% set version = printer["gcode_macro _User_Variables"].version|default(0) %}\n\n{% if version != 1 %}\n{ action_raise_error("Please update your klicky variables, there are some functionality changes") }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klickydebug': {'gcode': '\n{% set message  = params.MSG %}\n{% set debug = printer["gcode_macro _User_Variables"].debug|default(False) %}\n\n{% if debug %}\n{ action_respond_info(message) }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _exit_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move  = params.MOVE|default(0) %}\n{% set speed = printer["gcode_macro _User_Variables"].travel_speed %}\n\n\nM400\nSET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\nRESTORE_GCODE_STATE NAME={function} MOVE={move} MOVE_SPEED={speed}', 'description': 'G-Code macro'}, 'gcode_macro _entry_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move_accel = printer["gcode_macro _User_Variables"].move_accel|default(1000) %}\n\nM400\nSAVE_GCODE_STATE NAME={function}\n\nSET_GCODE_OFFSET Z=0\n\nG90\n\nSET_VELOCITY_LIMIT ACCEL={move_accel}', 'description': 'G-Code macro'}, 'gcode_macro _homing_variables': {'gcode': '\n{% set reset  = params.RESET|default(0) %}\n{% if reset %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro attach_probe_lock': {'gcode': '\nAttach_Probe\n_Probe_Lock', 'description': 'Attaches Klicky Probe, can only be docked after unlocking'}, 'gcode_macro dock_probe_unlock': {'gcode': '\n_Probe_Unlock\nDock_Probe', 'description': 'Docks Klicky Probe even if it was locked'}, 'gcode_macro _probe_unlock': {'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to False"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }', 'description': 'Unlocks Klicky Probe state'}, 'gcode_macro _probe_lock': {'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to True"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ True }', 'description': 'Locks Klicky Probe state'}, 'gcode_macro _deployklickydock': {'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_deploy = printer["gcode_macro _User_Variables"].servo_deploy|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_DeployKlickyDock Klicky servo configuration enabled"\n{% if servo_deploy == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo deploy angle specified") }\n{% endif %}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _DeployDock"] is defined %}\n_KlickyDebug msg="_DeployKlickyDock calling _DeployDock"\n_DeployDock\n{% endif %}', 'description': 'Deploys Klicky servo-controlled dock'}, 'gcode_macro _retractklickydock': {'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_retract = printer["gcode_macro _User_Variables"].servo_retract|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_RetractKlickyDock Klicky servo configuration enabled"\n{% if servo_retract == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo retract angle specified") }\n{% endif %}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _RetractDock"] is defined %}\n_KlickyDebug msg="_RetractKlickyDock calling _RetractDock"\n_RetractDock\n{% endif %}', 'description': 'Retracts Klicky servo-controlled dock'}, 'gcode_macro attach_probe': {'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set attachmove2_x = printer["gcode_macro _User_Variables"].attachmove2_x|default(0) %}\n{% set attachmove2_y = printer["gcode_macro _User_Variables"].attachmove2_y|default(0) %}\n{% set attachmove2_z = printer["gcode_macro _User_Variables"].attachmove2_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n_entry_point function=Attach_Probe\n\n{% if bypass_probe_docking == False %}\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n_KlickyDebug msg="Attach_Probe Axis homed"\n\n\n{% elif not probe_attached and not probe_lock %}\n_KlickyDebug msg="Attach_Probe going to attach probe"\n{% if verbose %}\n{ action_respond_info("Attaching Probe") }\n{% endif %}\n_KLICKY_STATUS_BUSY\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% if not enable_z_hop %}\n_KlickyDebug msg="Attach_Probe z_hop disabled"\n{% set safe_z = 0 %}\n{% endif %}\n{% endif %}\n\n\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero, duplicate?") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Umbilical_Path\n\n_entry_point function=Attach_Probe_intern\n\n\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n_DeployKlickyDock\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}"\nG0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}\n\n_RetractKlickyDock\n\n{% if ((printer.gcode_move.gcode_position.z < safe_z) or (docklocation_z != -128 and docklocation_z < safe_z ))%}\n_KlickyDebug msg="Attach_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\n_CheckProbe action=attach\n\n_exit_point function=Attach_Probe_intern move={goback}\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe locked not attaching probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already attached!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe already attached, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Attach_Probe\n{% else %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}', 'description': 'Attaches Klicky Probe'}, 'gcode_macro dock_probe': {'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n{% if bypass_probe_docking == True %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}\n\n{% if bypass_probe_docking != True %}\n_entry_point function=Dock_Probe\n\n\n{% if probe_attached and not probe_lock %}\n_KLICKY_STATUS_BUSY\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Dock_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n_Umbilical_Path\n\n\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n\n_DeployKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\n\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}"\nG0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}\n{% endif %}\n\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}\n\n\n_RetractKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving away from the dock to G0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}\n\n\n{% if (printer.gcode_move.gcode_position.z < safe_z) %}\n_KlickyDebug msg="Dock_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\nG4 P1000\n_CheckProbe action=dock\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe locked not docking probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already docked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe already docked, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Dock_Probe move={goback}\n{% else %}\n_KlickyDebug msg="Dock_Probe probe docking bypassed, doing nothing"\n{% endif %}', 'description': 'Docks Klicky Probe'}, 'gcode_macro probe_calibrate': {'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_calibrate Axis homed"\n_KlickyDebug msg="probe_calibrate Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_CALIBRATE with the probe above the BED, check klicky_variables bed size!") }\n{% endif %}\n\n{% if bypass_probe_docking == False %}\n_CheckProbe action=query\nG90\nAttach_Probe back=1\n_KLICKY_STATUS_CALIBRATING_Z\n\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nM118 moving the toolhead 20 mm from the bed\n_KlickyDebug msg="probe_calibrate Moving Z up by 20mm"\nTESTZ Z=20\nM118 remove manually the probe and continue calibration\n_KLICKY_STATUS_READY\n{% else %}\n_KLICKY_STATUS_CALIBRATING_Z\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n_KLICKY_STATUS_READY\n{% endif %}', 'rename_existing': '_PROBE_CALIBRATE', 'description': 'Calibrate the probes z_offset with klicky automount'}, 'gcode_macro probe_accuracy': {'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_accuracy Axis homed"\n_KlickyDebug msg="probe_accuracy Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n_entry_point function=PROBE_ACCURACY\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_ACCURACY with the probe above the BED, check klicky_variables bed size!") }\n{% endif%}\n\n_CheckProbe action=query\nAttach_Probe back=1\n\n_KlickyDebug msg="probe_accuracy calling klipper probe accuracy"\n_PROBE_ACCURACY {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nDock_Probe back=1\n\n_exit_point function=PROBE_ACCURACY move=1', 'rename_existing': '_PROBE_ACCURACY', 'description': 'Probe Z-height accuracy at current XY position with klicky automount'}, 'force_move': {'enable_force_move': True}, 'homing_override': {'axes': 'xyz', 'gcode': '\n\n_User_Variables\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n{% set kinematic_z = 0 %}\n{% set dock_on_zhome = printer["gcode_macro _User_Variables"].dock_on_zhome|default(True) %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set home_backoff_x = printer["gcode_macro _User_Variables"].home_backoff_x|default(0) %}\n{% set home_backoff_y = printer["gcode_macro _User_Variables"].home_backoff_y|default(0) %}\n{% set override_homing = printer["gcode_macro _User_Variables"].override_homing|default(\'\') %}\n\n\n_klicky_check_variables_version\n\n_CheckProbe action=query\n\n\n{% set home_x, home_y, home_z, leave_probe_attached = False, False, False, False %}\n\n{% if \'PROBE_LOCK\' in params%}\n{% if verbose %}\n{ action_respond_info("PROBE_LOCK = True") }\n{% endif %}\n{% set leave_probe_attached = True %}\n{% endif %}\n\n\n{% if not \'X\' in params\nand not \'Y\' in params\nand not \'Z\' in params %}\n\n{% set home_x, home_y, home_z = True, True, True %}\n_KlickyDebug msg="homing_override goint to home all axes"\n\n{% else %}\n{% if \'X\' in params %}\n{% set home_x = True %}\n_KlickyDebug msg="homing_override goint to home X"\n\n{% endif %}\n\n{% if \'Y\' in params %}\n{% set home_y = True %}\n_KlickyDebug msg="homing_override goint to home Y"\n{% endif %}\n\n{% if \'Z\' in params %}\n{% set home_z = True %}\n_KlickyDebug msg="homing_override goint to home Z"\n{% endif %}\n\n{% if \'X\' in params\nand \'Y\' in params\nand \'Z\' in params %}\n\n\n_Homing_Variables reset=1\n_KlickyDebug msg="homing_override goint to home all axes"\n{% endif %}\n\n{% endif %}\n\n_entry_point function=homing_override\n_KLICKY_STATUS_HOMING\n\n\n{% if \'z\' not in printer.toolhead.homed_axes %}\n{% if enable_z_hop == False %}\n_KlickyDebug msg="homing_override z_hop disabled"\n\n{% set kinematic_z = safe_z %}\n{% set safe_z = safe_z %}\n{% endif %}\n{% endif %}\n\n\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes and \'z\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("No axis homed") }\n{% endif %}\n_KlickyDebug msg="homing_override no axis homed, setting position as X=Y=0 Z={kinematic_z}"\nSET_KINEMATIC_POSITION X=0 Y=0 Z={kinematic_z}\nM400\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% if home_z != True %}\n_KlickyDebug msg="homing_override clearing axis homed state if not already homing Z"\nM84\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("X or Y not homed, forcing full G28") }\n{% endif %}\n{% set home_x, home_y, home_z = True, True, True %}\n{% endif %}\n{% endif %}\n\n\n{% if ((attachmove_y == 0 and override_homing == \'\' ) or (override_homing == \'Y\'))%}\n\n{% if home_y %}\n{% if override_homing == \'Y\' %}\n_KlickyDebug msg="homing_override Y homing first override, due to override_homing = Y"\n{% else %}\n_KlickyDebug msg="homing_override Y homing first override, due to attachmove_y = 0"\n{% endif %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y G28 Y0"\nG28 Y0\n\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop-home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n{% set home_y = False %}\n{% endif %}\n\n\n\n{% if home_x %}\n{% if verbose %}\n{ action_respond_info("Homing X") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in X homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_X"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_X external script to handle the X homing"\n_HOME_X\n{% else %}\n_KlickyDebug msg="homing_override Homing X, G28 X0"\nG28 X0\n\n{% if home_backoff_x != 0 %}\n{% if (printer.configfile.settings.stepper_x.position_endstop > (printer.configfile.settings.stepper_x.position_min|default(0) + printer.configfile.settings.stepper_x.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n\n{% if home_y %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y, G28 Y0"\nG28 Y0\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if verbose %}\n{ action_respond_info("Homing Z") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe configured as a virtual Z endstop attaching probe"\nAttach_Probe\n\n{% if leave_probe_attached %}\n_Probe_Lock\n{% endif %}\n{% elif dock_on_zhome == True %}\nDock_Probe\n{% endif %}\n\n_Home_Z_\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe no longer required, docking probe"\nDock_Probe\n{% elif dock_on_zhome == False %}\nDock_Probe\n{% endif %}\n{% endif %}\n_CheckProbe action=query\n\n\n_Park_Toolhead\n\n_exit_point function=homing_override\n_KLICKY_STATUS_READY'}, 'gcode_macro _umbilical_path': {'gcode': '\n{% set umbilical = printer["gcode_macro _User_Variables"].umbilical %}\n{% set umbilical_x = printer["gcode_macro _User_Variables"].umbilical_x %}\n{% set umbilical_y = printer["gcode_macro _User_Variables"].umbilical_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n\n{% if umbilical %}\n\n_entry_point function=Umbilical_Path\n\n_KlickyDebug msg="_Umbilical_Path moving to G0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}"\nG0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}\n\n_exit_point function=Umbilical_Path\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _home_z_': {'gcode': '\n{% set z_endstop_x = printer["gcode_macro _Probe_Variables"].z_endstop_x %}\n{% set z_endstop_y = printer["gcode_macro _Probe_Variables"].z_endstop_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}    {% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Home_Z\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n{% else %}\n_KlickyDebug msg="_Home_Z_ XY Axis homed"\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="_Home_Z_ Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n\n\n_KlickyDebug msg="_Home_Z_ moving to Z endstop position G0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}"\nG0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}\n_KlickyDebug msg="_Home_Z_ Homing Z G28 Z"\nG28 Z0\n_KlickyDebug msg="_Home_Z_ toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_exit_point function=Home_Z', 'description': 'G-Code macro'}, 'gcode_macro _checkprobe': {'gcode': '\nQuery_Probe\n_SetProbeState action={ params.ACTION }', 'description': 'G-Code macro', 'variable_probe_state': '0'}, 'gcode_macro _setprobestate': {'gcode': '\n{% set query_probe_triggered = printer.probe.last_query %}\n{% set action  = params.ACTION|default(\'\') %}\n\n\n{% if query_probe_triggered %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ False }\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ True }\n{% endif %}\n\n{% if action == \'query\' %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_state VALUE={ query_probe_triggered }\n{% endif %}\n\n\n\n\n{% if not query_probe_triggered and action == \'dock\' %}\n{ action_raise_error("Probe dock failed!") }\n{% endif %}\n\n\n{% if query_probe_triggered and action == \'attach\' %}\n{ action_raise_error("Probe attach failed!") }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _park_toolhead': {'gcode': '\n{% set park_toolhead = printer["gcode_macro _User_Variables"].park_toolhead %}\n{% set parkposition_x = printer["gcode_macro _User_Variables"].parkposition_x %}\n{% set parkposition_y = printer["gcode_macro _User_Variables"].parkposition_y %}\n{% set parkposition_z = printer["gcode_macro _User_Variables"].parkposition_z %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Park_Toolhead\n\n{% if park_toolhead and \'xyz\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Parking Toolhead") }\n{% endif %}\n{% if parkposition_z == -128 %}\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}\n\n{% else %}\n\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}\n\n{% endif %}\n\n{% endif %}\n_exit_point function=Park_Toolhead', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_ready': {'gcode': '\n{% if printer[\'gcode_macro status_ready\'] is defined %}\n_KlickyDebug msg="_klicky_status_ready activating the LED STATUS_READY"\nSTATUS_READY\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_busy': {'gcode': '\n{% if printer[\'gcode_macro status_busy\'] is defined %}\n_KlickyDebug msg="_klicky_status_busy activating the LED STATUS_BUSY"\nSTATUS_BUSY\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_leveling': {'gcode': '\n{% if printer[\'gcode_macro status_leveling\'] is defined %}\n_KlickyDebug msg="_klicky_status_leveling activating the LED STATUS_LEVELING"\nSTATUS_LEVELING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_homing': {'gcode': '\n{% if printer[\'gcode_macro status_homing\'] is defined %}\n_KlickyDebug msg="_klicky_status_homing activating the LED STATUS_HOMING"\nSTATUS_HOMING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_cleaning': {'gcode': '\n{% if printer[\'gcode_macro status_cleaning\'] is defined %}\n_KlickyDebug msg="_klicky_status_cleaning activating the LED STATUS_CLEANING"\nSTATUS_CLEANING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_meshing': {'gcode': '\n{% if printer[\'gcode_macro status_meshing\'] is defined %}\n_KlickyDebug msg="_klicky_status_meshing activating the LED STATUS_MESHING"\nSTATUS_MESHING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_calibrating_z': {'gcode': '\n{% if printer[\'gcode_macro status_calibrating_z\'] is defined %}\n_KlickyDebug msg="_klicky_status_calibrating_z activating the LED STATUS_CALIBRATING_Z"\nSTATUS_CALIBRATING_Z\n{% endif %}', 'description': 'G-Code macro'}, 'z_calibration': {'switch_offset': 0.09, 'offset_margins': '-1.0,1.0', 'speed': 50.0, 'samples_result': 'none', 'probing_first_fast': False, 'nozzle_xy_position': '172, 301', 'switch_xy_position': '171.5, 282', 'bed_xy_position': '150, 150', 'start_gcode': 'Attach_Probe', 'before_switch_gcode': '', 'end_gcode': 'Dock_Probe'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': '^PG6', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'PG9', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 303.5, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PF11', 'dir_pin': '!PG3', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG5', 'endstop_pin': 'PG10', 'position_endstop': -0.5, 'position_min': -4.5, 'position_max': 290.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA0'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PF9', 'dir_pin': '!PF10', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG2'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF4', 'min_temp': 10.0, 'max_temp': 270.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 26.572, 'pid_ki': 2.036, 'pid_kd': 86.691, 'heater_pin': 'PA1', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PC13', 'pressure_advance': 0.05, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'PF0', 'rotation_distance': 22.6789511, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 55.196, 'pid_ki': 2.091, 'pid_kd': 364.295, 'heater_pin': 'PA2', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'probe': {'z_offset': 0.0, 'deactivate_on_each_sample': True, 'activate_gcode': '', 'deactivate_gcode': '', 'pin': 'PG15', 'speed': 10.0, 'lift_speed': 10.0, 'x_offset': 0.0, 'y_offset': 25.0, 'samples': 5, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.006, 'samples_tolerance_retries': 3}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE5', 'fan_speed': 1.0}, 'controller_fan controller_fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD12', 'fan_speed': 1.0, 'idle_speed': 1.0, 'idle_timeout': 30, 'heater': ['heater_bed']}, 'heater_fan exhaust_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 5.0, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13', 'fan_speed': 1.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PD15', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 1.0, 'maximum_mcu_duration': 0.0, 'value': 1.0, 'shutdown_value': 0.0}, 'neopixel headlight': {'pin': 'PB0', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 0.0, 'initial_green': 0.0, 'initial_blue': 0.0, 'initial_white': 0.0}, 'temperature_sensor chamber_temp': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF5', 'min_temp': 0.0, 'max_temp': 100.0, 'gcode_id': 'chamber_th'}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [150.0, 348.0], [350.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 5.0], [150.0, 245.0], [270.0, 5.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'gcode_macro _user_variables': {'gcode': '\n{% set Mx = printer[\'configfile\'].config["stepper_x"]["position_max"]|float %}\n{% set My = printer[\'configfile\'].config["stepper_y"]["position_max"]|float %}\n{% set Ox = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set Oy = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set Oz = printer[\'configfile\'].config["probe"]["z_offset"]|float %}\n\n\n{% if z_endstop_x != 0 or z_endstop_y != 0 %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ z_endstop_x }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ z_endstop_y }\n\n\n{% else %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ (Mx * 0.5) - Ox }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ (My * 0.5) - Oy }\n{% endif %}', 'description': 'G-Code macro', 'variable_verbose': 'True', 'variable_debug': 'False', 'variable_travel_speed': '200', 'variable_move_accel': '1000', 'variable_dock_speed': '50', 'variable_release_speed': '75', 'variable_z_drop_speed': '20', 'variable_safe_z': '25', 'variable_enable_z_hop': 'True', 'variable_max_bed_y': '300', 'variable_max_bed_x': '300', 'variable_z_endstop_x': '172', 'variable_z_endstop_y': '301', 'variable_docklocation_x': '40.5', 'variable_docklocation_y': '303.5', 'variable_docklocation_z': '-128', 'variable_enable_dock_servo': 'False', 'variable_servo_name': "'NAME'", 'variable_servo_deploy': '10', 'variable_servo_retract': '11', 'variable_servo_delay': '250', 'variable_dockmove_x': '40', 'variable_dockmove_y': '0', 'variable_dockmove_z': '0', 'variable_attachmove_x': '0', 'variable_attachmove_y': '30', 'variable_attachmove_z': '0', 'variable_umbilical': 'False', 'variable_umbilical_x': '15', 'variable_umbilical_y': '15', 'variable_park_toolhead': 'False', 'variable_parkposition_x': '125', 'variable_parkposition_y': '125', 'variable_parkposition_z': '30', 'variable_version': '1', 'variable_attachmove2_x': '0', 'variable_attachmove2_y': '0', 'variable_attachmove2_z': '0', 'variable_home_backoff_x': '10', 'variable_home_backoff_y': '10', 'variable_override_homing': "''", 'variable_dock_on_zhome': 'True'}, 'gcode_macro print_start': {'gcode': '\nM117 Homing...\nG28\nZ_TILT_ADJUST\nG28\n\n\n\n\n\n\n\nG0 X150 Y150 Z30 F3600', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1500.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-02-15 20:17:56,860 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-15 20:17:56,861 [printer.py:reinit()] - Klipper version: v0.12.0-103-g6ce6fbbc-dirty
2024-02-15 20:17:56,861 [printer.py:reinit()] - # Extruders: 1
2024-02-15 20:17:56,861 [printer.py:reinit()] - # Temperature devices: 2
2024-02-15 20:17:56,861 [printer.py:reinit()] - # Fans: 4
2024-02-15 20:17:56,861 [printer.py:reinit()] - # Output pins: 1
2024-02-15 20:17:56,861 [printer.py:reinit()] - # Leds: 1
2024-02-15 20:17:56,874 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2024-02-15 20:17:56,876 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-02-15 20:17:57,137 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor chamber_temp&fan&controller_fan controller_fan&heater_fan hotend_fan&heater_fan exhaust_fan&output_pin caselight&neopixel headlight
2024-02-15 20:17:57,144 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-02-15 20:17:57,145 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-02-15 20:17:57,150 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-02-15 20:17:57,156 [screen.py:init_klipper()] - Printer initialized
2024-02-15 20:17:57,171 [screen.py:_load_panel()] - Loading panel: main_menu
2024-02-15 20:17:57,229 [main_menu.py:__init__()] - ### Making MainMenu
2024-02-15 20:17:57,234 [main_menu.py:add_device()] - Adding device: extruder
2024-02-15 20:17:57,240 [main_menu.py:add_device()] - Adding device: heater_bed
2024-02-15 20:17:57,245 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber_temp
2024-02-15 20:17:57,268 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-02-15 20:17:57,276 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-02-15 20:17:57,285 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'temperature_sensor chamber_temp', 'extruder']
2024-02-15 20:17:57,294 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2024-02-15 20:17:57,295 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-02-15 20:48:19,315 [screen.py:_go_to_submenu()] - #### Go to submenu more
2024-02-15 20:48:19,316 [screen.py:_go_to_submenu()] - #### Menu __main
2024-02-15 20:48:19,320 [screen.py:_load_panel()] - Loading panel: menu
2024-02-15 20:48:19,544 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more
2024-02-15 20:48:19,548 [menu.py:arrangeMenuItems()] - X > more bedlevel
2024-02-15 20:48:19,550 [menu.py:arrangeMenuItems()] - X > more bedmesh
2024-02-15 20:48:19,554 [menu.py:arrangeMenuItems()] - X > more retraction
2024-02-15 20:48:19,566 [menu.py:arrangeMenuItems()] - X > more power
2024-02-15 20:48:19,568 [menu.py:arrangeMenuItems()] - X > more camera
2024-02-15 20:48:19,573 [menu.py:arrangeMenuItems()] - X > more input_shaper
2024-02-15 20:48:19,580 [menu.py:arrangeMenuItems()] - X > more spoolman
2024-02-15 20:48:20,598 [screen.py:_load_panel()] - Loading panel: led
2024-02-15 20:48:20,604 [led.py:color_selector()] - neopixel headlight
2024-02-15 20:48:20,643 [KlippyRest.py:_do_request()] - 404 Client Error>>Key miscellaneous in namespace mainsail not found for url>>http://127.0.0.1:7125/server/database/item?namespace=mainsail&key=miscellaneous.entries
2024-02-15 20:48:20,644 [led.py:color_selector()] - Adding preset: off
2024-02-15 20:48:20,646 [led.py:color_selector()] - Adding preset: on
2024-02-15 20:48:20,677 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more > led
2024-02-15 20:48:22,156 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_LED LED="headlight" RED=1.0 GREEN=0.0 BLUE=0.0 WHITE=0.0 SYNC=0 TRANSMIT=1'}
2024-02-15 20:48:23,903 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_LED LED="headlight" RED=1.0 GREEN=0.0 BLUE=0.0 WHITE=0.0 SYNC=0 TRANSMIT=1'}
2024-02-15 20:48:24,407 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_LED LED="headlight" RED=1.0 GREEN=0.0 BLUE=0.0 WHITE=0.0 SYNC=0 TRANSMIT=1'}
2024-02-15 20:48:25,515 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_LED LED="headlight" RED=1.0 GREEN=1.0 BLUE=0.0 WHITE=0.0 SYNC=0 TRANSMIT=1'}
2024-02-15 20:48:27,248 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_LED LED="headlight" RED=1.0 GREEN=1.0 BLUE=0.0 WHITE=0.0 SYNC=0 TRANSMIT=1'}
2024-02-15 20:48:27,780 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_LED LED="headlight" RED=1.0 GREEN=1.0 BLUE=0.0 WHITE=0.0 SYNC=0 TRANSMIT=1'}
2024-02-15 20:48:28,256 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_LED LED="headlight" RED=1.0 GREEN=1.0 BLUE=0.0 WHITE=0.0 SYNC=0 TRANSMIT=1'}
2024-02-15 20:48:28,740 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_LED LED="headlight" RED=1.0 GREEN=1.0 BLUE=0.0 WHITE=0.0 SYNC=0 TRANSMIT=1'}
2024-02-15 20:48:29,467 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_LED LED="headlight" RED=1.0 GREEN=1.0 BLUE=1.0 WHITE=0.0 SYNC=0 TRANSMIT=1'}
2024-02-15 20:48:30,579 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_LED LED="headlight" RED=0.0 GREEN=1.0 BLUE=1.0 WHITE=0.0 SYNC=0 TRANSMIT=1'}
2024-02-15 20:48:33,288 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_LED LED="headlight" RED=0.0 GREEN=0.0784313725490196 BLUE=1.0 WHITE=0.0 SYNC=0 TRANSMIT=1'}
                                                                                                                                                                                       2024-02-15 20:48:35,884 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-02-15 20:48:35,885 [functions.py:log_start()] - KlipperScreen Version: v0.3.8-89-g2a5e9b3
2024-02-15 20:48:35,885 [functions.py:log_start()] - Python version: 3.9
2024-02-15 20:48:36,078 [config.py:get_config_file_location()] - Passed config (-c): .
2024-02-15 20:48:36,079 [config.py:__init__()] - Config path location: /home/pi/printer_data/config/KlipperScreen.conf
2024-02-15 20:48:36,090 [config.py:log_config()] -  ===== Config File =====

=======================
2024-02-15 20:48:36,092 [config.py:__init__()] - ====== Saved Def ======

[graph Printer]
heater_bed = False
extruder = False

=======================
2024-02-15 20:48:36,092 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-02-15 20:48:36,184 [config.py:create_translations()] - Selected lang: None OS lang: en_GB
2024-02-15 20:48:36,184 [config.py:install_language()] - Using lang en
2024-02-15 20:48:36,198 [screen.py:__init__()] - Screen resolution: 800x480
2024-02-15 20:48:36,199 [KlippyGtk.py:__init__()] - Font size: 16.6 (medium)
2024-02-15 20:48:36,640 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2024-02-15 20:48:36,649 [screen.py:set_screenblanking_timeout()] - Using DPMS
2024-02-15 20:48:36,655 [screen.py:initial_connection()] - Default printer: None
2024-02-15 20:48:36,685 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-02-15 20:48:36,685 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-02-15 20:48:36,722 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-02-15 20:48:36,728 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-02-15 20:48:36,743 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-15 20:48:36,751 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/access/oneshot_token
2024-02-15 20:48:36,753 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-02-15 20:48:36,766 [_logging.py:info()] - Websocket connected
2024-02-15 20:48:36,766 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-02-15 20:48:36,797 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-15 20:48:36,805 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2024-02-15 20:48:36,806 [printer.py:configure_cameras()] - Cameras: []
2024-02-15 20:48:36,806 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'octoprint_compat', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-310-g67c98f6', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-02-15 20:48:36,816 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2024-02-15 20:48:37,040 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2024-02-15 20:48:37,043 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro _Probe_Variables': {'variable_probe_attached': 'False', 'variable_probe_state': 'False', 'variable_probe_lock': 'False', 'variable_probe_z_homed': 'False', 'variable_z_endstop_x': '0', 'variable_z_endstop_y': '0', 'gcode': ''}, 'gcode_macro _klicky_check_variables_version': {'gcode': '\n{% set version = printer["gcode_macro _User_Variables"].version|default(0) %}\n\n{% if version != 1 %}\n{ action_raise_error("Please update your klicky variables, there are some functionality changes") }\n{% endif %}'}, 'gcode_macro _KlickyDebug': {'gcode': '\n{% set message  = params.MSG %}\n{% set debug = printer["gcode_macro _User_Variables"].debug|default(False) %}\n\n{% if debug %}\n{ action_respond_info(message) }\n{% endif %}'}, 'gcode_macro _exit_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move  = params.MOVE|default(0) %}\n{% set speed = printer["gcode_macro _User_Variables"].travel_speed %}\n\n\nM400\nSET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\nRESTORE_GCODE_STATE NAME={function} MOVE={move} MOVE_SPEED={speed}'}, 'gcode_macro _entry_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move_accel = printer["gcode_macro _User_Variables"].move_accel|default(1000) %}\n\nM400\nSAVE_GCODE_STATE NAME={function}\n\nSET_GCODE_OFFSET Z=0\n\nG90\n\nSET_VELOCITY_LIMIT ACCEL={move_accel}'}, 'gcode_macro _Homing_Variables': {'gcode': '\n{% set reset  = params.RESET|default(0) %}\n{% if reset %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }\n{% endif %}'}, 'gcode_macro Attach_Probe_Lock': {'description': 'Attaches Klicky Probe, can only be docked after unlocking', 'gcode': '\nAttach_Probe\n_Probe_Lock'}, 'gcode_macro Dock_Probe_Unlock': {'description': 'Docks Klicky Probe even if it was locked', 'gcode': '\n_Probe_Unlock\nDock_Probe'}, 'gcode_macro _Probe_Unlock': {'description': 'Unlocks Klicky Probe state', 'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to False"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }'}, 'gcode_macro _Probe_Lock': {'description': 'Locks Klicky Probe state', 'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to True"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ True }'}, 'gcode_macro _DeployKlickyDock': {'description': 'Deploys Klicky servo-controlled dock', 'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_deploy = printer["gcode_macro _User_Variables"].servo_deploy|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_DeployKlickyDock Klicky servo configuration enabled"\n{% if servo_deploy == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo deploy angle specified") }\n{% endif %}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _DeployDock"] is defined %}\n_KlickyDebug msg="_DeployKlickyDock calling _DeployDock"\n_DeployDock\n{% endif %}'}, 'gcode_macro _RetractKlickyDock': {'description': 'Retracts Klicky servo-controlled dock', 'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_retract = printer["gcode_macro _User_Variables"].servo_retract|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_RetractKlickyDock Klicky servo configuration enabled"\n{% if servo_retract == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo retract angle specified") }\n{% endif %}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _RetractDock"] is defined %}\n_KlickyDebug msg="_RetractKlickyDock calling _RetractDock"\n_RetractDock\n{% endif %}'}, 'gcode_macro Attach_Probe': {'description': 'Attaches Klicky Probe', 'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set attachmove2_x = printer["gcode_macro _User_Variables"].attachmove2_x|default(0) %}\n{% set attachmove2_y = printer["gcode_macro _User_Variables"].attachmove2_y|default(0) %}\n{% set attachmove2_z = printer["gcode_macro _User_Variables"].attachmove2_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n_entry_point function=Attach_Probe\n\n{% if bypass_probe_docking == False %}\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n_KlickyDebug msg="Attach_Probe Axis homed"\n\n\n{% elif not probe_attached and not probe_lock %}\n_KlickyDebug msg="Attach_Probe going to attach probe"\n{% if verbose %}\n{ action_respond_info("Attaching Probe") }\n{% endif %}\n_KLICKY_STATUS_BUSY\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% if not enable_z_hop %}\n_KlickyDebug msg="Attach_Probe z_hop disabled"\n{% set safe_z = 0 %}\n{% endif %}\n{% endif %}\n\n\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero, duplicate?") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Umbilical_Path\n\n_entry_point function=Attach_Probe_intern\n\n\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n_DeployKlickyDock\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}"\nG0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}\n\n_RetractKlickyDock\n\n{% if ((printer.gcode_move.gcode_position.z < safe_z) or (docklocation_z != -128 and docklocation_z < safe_z ))%}\n_KlickyDebug msg="Attach_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\n_CheckProbe action=attach\n\n_exit_point function=Attach_Probe_intern move={goback}\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe locked not attaching probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already attached!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe already attached, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Attach_Probe\n{% else %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}'}, 'gcode_macro Dock_Probe': {'description': 'Docks Klicky Probe', 'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n{% if bypass_probe_docking == True %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}\n\n{% if bypass_probe_docking != True %}\n_entry_point function=Dock_Probe\n\n\n{% if probe_attached and not probe_lock %}\n_KLICKY_STATUS_BUSY\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Dock_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n_Umbilical_Path\n\n\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n\n_DeployKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\n\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}"\nG0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}\n{% endif %}\n\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}\n\n\n_RetractKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving away from the dock to G0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}\n\n\n{% if (printer.gcode_move.gcode_position.z < safe_z) %}\n_KlickyDebug msg="Dock_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\nG4 P1000\n_CheckProbe action=dock\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe locked not docking probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already docked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe already docked, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Dock_Probe move={goback}\n{% else %}\n_KlickyDebug msg="Dock_Probe probe docking bypassed, doing nothing"\n{% endif %}'}, 'gcode_macro PROBE_CALIBRATE': {'rename_existing': '_PROBE_CALIBRATE', 'description': 'Calibrate the probes z_offset with klicky automount', 'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_calibrate Axis homed"\n_KlickyDebug msg="probe_calibrate Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_CALIBRATE with the probe above the BED, check klicky_variables bed size!") }\n{% endif %}\n\n{% if bypass_probe_docking == False %}\n_CheckProbe action=query\nG90\nAttach_Probe back=1\n_KLICKY_STATUS_CALIBRATING_Z\n\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nM118 moving the toolhead 20 mm from the bed\n_KlickyDebug msg="probe_calibrate Moving Z up by 20mm"\nTESTZ Z=20\nM118 remove manually the probe and continue calibration\n_KLICKY_STATUS_READY\n{% else %}\n_KLICKY_STATUS_CALIBRATING_Z\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n_KLICKY_STATUS_READY\n{% endif %}'}, 'gcode_macro PROBE_ACCURACY': {'rename_existing': '_PROBE_ACCURACY', 'description': 'Probe Z-height accuracy at current XY position with klicky automount', 'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_accuracy Axis homed"\n_KlickyDebug msg="probe_accuracy Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n_entry_point function=PROBE_ACCURACY\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_ACCURACY with the probe above the BED, check klicky_variables bed size!") }\n{% endif%}\n\n_CheckProbe action=query\nAttach_Probe back=1\n\n_KlickyDebug msg="probe_accuracy calling klipper probe accuracy"\n_PROBE_ACCURACY {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nDock_Probe back=1\n\n_exit_point function=PROBE_ACCURACY move=1'}, 'force_move': {'enable_force_move': 'True'}, 'homing_override': {'axes': 'xyz', 'gcode': '\n\n_User_Variables\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n{% set kinematic_z = 0 %}\n{% set dock_on_zhome = printer["gcode_macro _User_Variables"].dock_on_zhome|default(True) %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set home_backoff_x = printer["gcode_macro _User_Variables"].home_backoff_x|default(0) %}\n{% set home_backoff_y = printer["gcode_macro _User_Variables"].home_backoff_y|default(0) %}\n{% set override_homing = printer["gcode_macro _User_Variables"].override_homing|default(\'\') %}\n\n\n_klicky_check_variables_version\n\n_CheckProbe action=query\n\n\n{% set home_x, home_y, home_z, leave_probe_attached = False, False, False, False %}\n\n{% if \'PROBE_LOCK\' in params%}\n{% if verbose %}\n{ action_respond_info("PROBE_LOCK = True") }\n{% endif %}\n{% set leave_probe_attached = True %}\n{% endif %}\n\n\n{% if not \'X\' in params\nand not \'Y\' in params\nand not \'Z\' in params %}\n\n{% set home_x, home_y, home_z = True, True, True %}\n_KlickyDebug msg="homing_override goint to home all axes"\n\n{% else %}\n{% if \'X\' in params %}\n{% set home_x = True %}\n_KlickyDebug msg="homing_override goint to home X"\n\n{% endif %}\n\n{% if \'Y\' in params %}\n{% set home_y = True %}\n_KlickyDebug msg="homing_override goint to home Y"\n{% endif %}\n\n{% if \'Z\' in params %}\n{% set home_z = True %}\n_KlickyDebug msg="homing_override goint to home Z"\n{% endif %}\n\n{% if \'X\' in params\nand \'Y\' in params\nand \'Z\' in params %}\n\n\n_Homing_Variables reset=1\n_KlickyDebug msg="homing_override goint to home all axes"\n{% endif %}\n\n{% endif %}\n\n_entry_point function=homing_override\n_KLICKY_STATUS_HOMING\n\n\n{% if \'z\' not in printer.toolhead.homed_axes %}\n{% if enable_z_hop == False %}\n_KlickyDebug msg="homing_override z_hop disabled"\n\n{% set kinematic_z = safe_z %}\n{% set safe_z = safe_z %}\n{% endif %}\n{% endif %}\n\n\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes and \'z\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("No axis homed") }\n{% endif %}\n_KlickyDebug msg="homing_override no axis homed, setting position as X=Y=0 Z={kinematic_z}"\nSET_KINEMATIC_POSITION X=0 Y=0 Z={kinematic_z}\nM400\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% if home_z != True %}\n_KlickyDebug msg="homing_override clearing axis homed state if not already homing Z"\nM84\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("X or Y not homed, forcing full G28") }\n{% endif %}\n{% set home_x, home_y, home_z = True, True, True %}\n{% endif %}\n{% endif %}\n\n\n{% if ((attachmove_y == 0 and override_homing == \'\' ) or (override_homing == \'Y\'))%}\n\n{% if home_y %}\n{% if override_homing == \'Y\' %}\n_KlickyDebug msg="homing_override Y homing first override, due to override_homing = Y"\n{% else %}\n_KlickyDebug msg="homing_override Y homing first override, due to attachmove_y = 0"\n{% endif %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y G28 Y0"\nG28 Y0\n\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop-home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n{% set home_y = False %}\n{% endif %}\n\n\n\n{% if home_x %}\n{% if verbose %}\n{ action_respond_info("Homing X") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in X homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_X"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_X external script to handle the X homing"\n_HOME_X\n{% else %}\n_KlickyDebug msg="homing_override Homing X, G28 X0"\nG28 X0\n\n{% if home_backoff_x != 0 %}\n{% if (printer.configfile.settings.stepper_x.position_endstop > (printer.configfile.settings.stepper_x.position_min|default(0) + printer.configfile.settings.stepper_x.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n\n{% if home_y %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y, G28 Y0"\nG28 Y0\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if verbose %}\n{ action_respond_info("Homing Z") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe configured as a virtual Z endstop attaching probe"\nAttach_Probe\n\n{% if leave_probe_attached %}\n_Probe_Lock\n{% endif %}\n{% elif dock_on_zhome == True %}\nDock_Probe\n{% endif %}\n\n_Home_Z_\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe no longer required, docking probe"\nDock_Probe\n{% elif dock_on_zhome == False %}\nDock_Probe\n{% endif %}\n{% endif %}\n_CheckProbe action=query\n\n\n_Park_Toolhead\n\n_exit_point function=homing_override\n_KLICKY_STATUS_READY'}, 'gcode_macro _Umbilical_Path': {'gcode': '\n{% set umbilical = printer["gcode_macro _User_Variables"].umbilical %}\n{% set umbilical_x = printer["gcode_macro _User_Variables"].umbilical_x %}\n{% set umbilical_y = printer["gcode_macro _User_Variables"].umbilical_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n\n{% if umbilical %}\n\n_entry_point function=Umbilical_Path\n\n_KlickyDebug msg="_Umbilical_Path moving to G0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}"\nG0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}\n\n_exit_point function=Umbilical_Path\n{% endif %}'}, 'gcode_macro _Home_Z_': {'gcode': '\n{% set z_endstop_x = printer["gcode_macro _Probe_Variables"].z_endstop_x %}\n{% set z_endstop_y = printer["gcode_macro _Probe_Variables"].z_endstop_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}    {% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Home_Z\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n{% else %}\n_KlickyDebug msg="_Home_Z_ XY Axis homed"\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="_Home_Z_ Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n\n\n_KlickyDebug msg="_Home_Z_ moving to Z endstop position G0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}"\nG0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}\n_KlickyDebug msg="_Home_Z_ Homing Z G28 Z"\nG28 Z0\n_KlickyDebug msg="_Home_Z_ toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_exit_point function=Home_Z'}, 'gcode_macro _CheckProbe': {'variable_probe_state': '0', 'gcode': '\nQuery_Probe\n_SetProbeState action={ params.ACTION }'}, 'gcode_macro _SetProbeState': {'gcode': '\n{% set query_probe_triggered = printer.probe.last_query %}\n{% set action  = params.ACTION|default(\'\') %}\n\n\n{% if query_probe_triggered %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ False }\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ True }\n{% endif %}\n\n{% if action == \'query\' %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_state VALUE={ query_probe_triggered }\n{% endif %}\n\n\n\n\n{% if not query_probe_triggered and action == \'dock\' %}\n{ action_raise_error("Probe dock failed!") }\n{% endif %}\n\n\n{% if query_probe_triggered and action == \'attach\' %}\n{ action_raise_error("Probe attach failed!") }\n{% endif %}'}, 'gcode_macro _Park_Toolhead': {'gcode': '\n{% set park_toolhead = printer["gcode_macro _User_Variables"].park_toolhead %}\n{% set parkposition_x = printer["gcode_macro _User_Variables"].parkposition_x %}\n{% set parkposition_y = printer["gcode_macro _User_Variables"].parkposition_y %}\n{% set parkposition_z = printer["gcode_macro _User_Variables"].parkposition_z %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Park_Toolhead\n\n{% if park_toolhead and \'xyz\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Parking Toolhead") }\n{% endif %}\n{% if parkposition_z == -128 %}\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}\n\n{% else %}\n\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}\n\n{% endif %}\n\n{% endif %}\n_exit_point function=Park_Toolhead'}, 'gcode_macro _klicky_status_ready': {'gcode': '\n{% if printer[\'gcode_macro status_ready\'] is defined %}\n_KlickyDebug msg="_klicky_status_ready activating the LED STATUS_READY"\nSTATUS_READY\n{% endif %}'}, 'gcode_macro _klicky_status_busy': {'gcode': '\n{% if printer[\'gcode_macro status_busy\'] is defined %}\n_KlickyDebug msg="_klicky_status_busy activating the LED STATUS_BUSY"\nSTATUS_BUSY\n{% endif %}'}, 'gcode_macro _klicky_status_leveling': {'gcode': '\n{% if printer[\'gcode_macro status_leveling\'] is defined %}\n_KlickyDebug msg="_klicky_status_leveling activating the LED STATUS_LEVELING"\nSTATUS_LEVELING\n{% endif %}'}, 'gcode_macro _klicky_status_homing': {'gcode': '\n{% if printer[\'gcode_macro status_homing\'] is defined %}\n_KlickyDebug msg="_klicky_status_homing activating the LED STATUS_HOMING"\nSTATUS_HOMING\n{% endif %}'}, 'gcode_macro _klicky_status_cleaning': {'gcode': '\n{% if printer[\'gcode_macro status_cleaning\'] is defined %}\n_KlickyDebug msg="_klicky_status_cleaning activating the LED STATUS_CLEANING"\nSTATUS_CLEANING\n{% endif %}'}, 'gcode_macro _klicky_status_meshing': {'gcode': '\n{% if printer[\'gcode_macro status_meshing\'] is defined %}\n_KlickyDebug msg="_klicky_status_meshing activating the LED STATUS_MESHING"\nSTATUS_MESHING\n{% endif %}'}, 'gcode_macro _klicky_status_calibrating_z': {'gcode': '\n{% if printer[\'gcode_macro status_calibrating_z\'] is defined %}\n_KlickyDebug msg="_klicky_status_calibrating_z activating the LED STATUS_CALIBRATING_Z"\nSTATUS_CALIBRATING_Z\n{% endif %}'}, 'z_calibration': {'nozzle_xy_position': '172, 301', 'switch_xy_position': '171.5, 282', 'bed_xy_position': '150, 150', 'switch_offset': '0.09', 'offset_margins': '-1.0,1.0', 'speed': '50', 'probing_first_fast': 'false', 'start_gcode': 'Attach_Probe', 'end_gcode': 'Dock_Probe'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_28003C001150535556323420-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '^PG6', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '25', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'PG9', 'position_min': '0', 'position_endstop': '300', 'position_max': '303.5', 'homing_speed': '25', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': '!PG3', 'enable_pin': '!PG5', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'PG10', 'position_endstop': '-0.5', 'position_max': '290', 'position_min': '-4.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA0', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': '!PF10', 'enable_pin': '!PG2', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PC13', 'dir_pin': 'PF0', 'enable_pin': '!PF1', 'rotation_distance': '22.6789511', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.75', 'heater_pin': 'PA1', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF4', 'min_temp': '10', 'max_temp': '270', 'max_power': '1.0', 'min_extrude_temp': '170', 'pressure_advance': '0.05', 'pressure_advance_smooth_time': '0.040', 'control': 'pid', 'pid_kp': '26.572', 'pid_ki': '2.036', 'pid_kd': '86.691'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.5', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PA2', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF3', 'max_power': '1', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '55.196', 'pid_ki': '2.091', 'pid_kd': '364.295'}, 'probe': {'pin': 'PG15', 'x_offset': '0', 'y_offset': '25.0', 'z_offset': '0', 'speed': '10.0', 'samples': '5', 'samples_result': 'median', 'sample_retract_dist': '3.0', 'samples_tolerance': '0.006', 'samples_tolerance_retries': '3'}, 'fan': {'pin': 'PA8', 'kick_start_time': '0.5', 'off_below': '0.10'}, 'heater_fan hotend_fan': {'pin': 'PE5', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'controller_fan controller_fan': {'pin': 'PD12', 'kick_start_time': '0.5', 'heater': 'heater_bed'}, 'heater_fan exhaust_fan': {'pin': 'PD13', 'max_power': '1.0', 'shutdown_speed': '0.0', 'kick_start_time': '5.0', 'heater': 'heater_bed', 'heater_temp': '60', 'fan_speed': '1.0'}, 'output_pin caselight': {'pin': 'PD15', 'pwm': 'true', 'shutdown_value': '0', 'value': '1', 'cycle_time': '0.01'}, 'neopixel headlight': {'pin': 'PB0', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '0.0', 'initial_green': '0.0', 'initial_blue': '0.0', 'initial_white': '0.0'}, 'temperature_sensor chamber_temp': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF5', 'min_temp': '0', 'max_temp': '100', 'gcode_id': 'chamber_th'}, 'idle_timeout': {'timeout': '1800'}, 'z_tilt': {'z_positions': '\n-50, 18\n150, 348\n350, 18', 'points': '\n30, 5\n150, 245\n270, 5', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'gcode_macro _User_Variables': {'variable_verbose': 'True', 'variable_debug': 'False', 'variable_travel_speed': '200', 'variable_move_accel': '1000', 'variable_dock_speed': '50', 'variable_release_speed': '75', 'variable_z_drop_speed': '20', 'variable_safe_z': '25', 'variable_enable_z_hop': 'True', 'variable_max_bed_y': '300', 'variable_max_bed_x': '300', 'variable_z_endstop_x': '172', 'variable_z_endstop_y': '301', 'variable_docklocation_x': '40.5', 'variable_docklocation_y': '303.5', 'variable_docklocation_z': '-128', 'variable_enable_dock_servo': 'False', 'variable_servo_name': "'NAME'", 'variable_servo_deploy': '10', 'variable_servo_retract': '11', 'variable_servo_delay': '250', 'variable_dockmove_x': '40', 'variable_dockmove_y': '0', 'variable_dockmove_z': '0', 'variable_attachmove_x': '0', 'variable_attachmove_y': '30', 'variable_attachmove_z': '0', 'variable_umbilical': 'False', 'variable_umbilical_x': '15', 'variable_umbilical_y': '15', 'variable_park_toolhead': 'False', 'variable_parkposition_x': '125', 'variable_parkposition_y': '125', 'variable_parkposition_z': '30', 'variable_version': '1', 'variable_attachmove2_x': '0', 'variable_attachmove2_y': '0', 'variable_attachmove2_z': '0', 'variable_home_backoff_x': '10', 'variable_home_backoff_y': '10', 'variable_override_homing': "''", 'variable_dock_on_zhome': 'True', 'gcode': '\n{% set Mx = printer[\'configfile\'].config["stepper_x"]["position_max"]|float %}\n{% set My = printer[\'configfile\'].config["stepper_y"]["position_max"]|float %}\n{% set Ox = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set Oy = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set Oz = printer[\'configfile\'].config["probe"]["z_offset"]|float %}\n\n\n{% if z_endstop_x != 0 or z_endstop_y != 0 %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ z_endstop_x }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ z_endstop_y }\n\n\n{% else %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ (Mx * 0.5) - Ox }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ (My * 0.5) - Oy }\n{% endif %}'}, 'gcode_macro PRINT_START': {'gcode': '\nM117 Homing...\nG28\nZ_TILT_ADJUST\nG28\n\n\n\n\n\n\n\nG0 X150 Y150 Z30 F3600'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_28003C001150535556323420-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro _probe_variables': {'gcode': '', 'description': 'G-Code macro', 'variable_probe_attached': 'False', 'variable_probe_state': 'False', 'variable_probe_lock': 'False', 'variable_probe_z_homed': 'False', 'variable_z_endstop_x': '0', 'variable_z_endstop_y': '0'}, 'gcode_macro _klicky_check_variables_version': {'gcode': '\n{% set version = printer["gcode_macro _User_Variables"].version|default(0) %}\n\n{% if version != 1 %}\n{ action_raise_error("Please update your klicky variables, there are some functionality changes") }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klickydebug': {'gcode': '\n{% set message  = params.MSG %}\n{% set debug = printer["gcode_macro _User_Variables"].debug|default(False) %}\n\n{% if debug %}\n{ action_respond_info(message) }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _exit_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move  = params.MOVE|default(0) %}\n{% set speed = printer["gcode_macro _User_Variables"].travel_speed %}\n\n\nM400\nSET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\nRESTORE_GCODE_STATE NAME={function} MOVE={move} MOVE_SPEED={speed}', 'description': 'G-Code macro'}, 'gcode_macro _entry_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move_accel = printer["gcode_macro _User_Variables"].move_accel|default(1000) %}\n\nM400\nSAVE_GCODE_STATE NAME={function}\n\nSET_GCODE_OFFSET Z=0\n\nG90\n\nSET_VELOCITY_LIMIT ACCEL={move_accel}', 'description': 'G-Code macro'}, 'gcode_macro _homing_variables': {'gcode': '\n{% set reset  = params.RESET|default(0) %}\n{% if reset %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro attach_probe_lock': {'gcode': '\nAttach_Probe\n_Probe_Lock', 'description': 'Attaches Klicky Probe, can only be docked after unlocking'}, 'gcode_macro dock_probe_unlock': {'gcode': '\n_Probe_Unlock\nDock_Probe', 'description': 'Docks Klicky Probe even if it was locked'}, 'gcode_macro _probe_unlock': {'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to False"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }', 'description': 'Unlocks Klicky Probe state'}, 'gcode_macro _probe_lock': {'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to True"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ True }', 'description': 'Locks Klicky Probe state'}, 'gcode_macro _deployklickydock': {'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_deploy = printer["gcode_macro _User_Variables"].servo_deploy|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_DeployKlickyDock Klicky servo configuration enabled"\n{% if servo_deploy == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo deploy angle specified") }\n{% endif %}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _DeployDock"] is defined %}\n_KlickyDebug msg="_DeployKlickyDock calling _DeployDock"\n_DeployDock\n{% endif %}', 'description': 'Deploys Klicky servo-controlled dock'}, 'gcode_macro _retractklickydock': {'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_retract = printer["gcode_macro _User_Variables"].servo_retract|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_RetractKlickyDock Klicky servo configuration enabled"\n{% if servo_retract == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo retract angle specified") }\n{% endif %}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _RetractDock"] is defined %}\n_KlickyDebug msg="_RetractKlickyDock calling _RetractDock"\n_RetractDock\n{% endif %}', 'description': 'Retracts Klicky servo-controlled dock'}, 'gcode_macro attach_probe': {'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set attachmove2_x = printer["gcode_macro _User_Variables"].attachmove2_x|default(0) %}\n{% set attachmove2_y = printer["gcode_macro _User_Variables"].attachmove2_y|default(0) %}\n{% set attachmove2_z = printer["gcode_macro _User_Variables"].attachmove2_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n_entry_point function=Attach_Probe\n\n{% if bypass_probe_docking == False %}\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n_KlickyDebug msg="Attach_Probe Axis homed"\n\n\n{% elif not probe_attached and not probe_lock %}\n_KlickyDebug msg="Attach_Probe going to attach probe"\n{% if verbose %}\n{ action_respond_info("Attaching Probe") }\n{% endif %}\n_KLICKY_STATUS_BUSY\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% if not enable_z_hop %}\n_KlickyDebug msg="Attach_Probe z_hop disabled"\n{% set safe_z = 0 %}\n{% endif %}\n{% endif %}\n\n\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero, duplicate?") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Umbilical_Path\n\n_entry_point function=Attach_Probe_intern\n\n\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n_DeployKlickyDock\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}"\nG0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}\n\n_RetractKlickyDock\n\n{% if ((printer.gcode_move.gcode_position.z < safe_z) or (docklocation_z != -128 and docklocation_z < safe_z ))%}\n_KlickyDebug msg="Attach_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\n_CheckProbe action=attach\n\n_exit_point function=Attach_Probe_intern move={goback}\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe locked not attaching probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already attached!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe already attached, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Attach_Probe\n{% else %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}', 'description': 'Attaches Klicky Probe'}, 'gcode_macro dock_probe': {'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n{% if bypass_probe_docking == True %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}\n\n{% if bypass_probe_docking != True %}\n_entry_point function=Dock_Probe\n\n\n{% if probe_attached and not probe_lock %}\n_KLICKY_STATUS_BUSY\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Dock_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n_Umbilical_Path\n\n\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n\n_DeployKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\n\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}"\nG0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}\n{% endif %}\n\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}\n\n\n_RetractKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving away from the dock to G0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}\n\n\n{% if (printer.gcode_move.gcode_position.z < safe_z) %}\n_KlickyDebug msg="Dock_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\nG4 P1000\n_CheckProbe action=dock\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe locked not docking probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already docked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe already docked, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Dock_Probe move={goback}\n{% else %}\n_KlickyDebug msg="Dock_Probe probe docking bypassed, doing nothing"\n{% endif %}', 'description': 'Docks Klicky Probe'}, 'gcode_macro probe_calibrate': {'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_calibrate Axis homed"\n_KlickyDebug msg="probe_calibrate Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_CALIBRATE with the probe above the BED, check klicky_variables bed size!") }\n{% endif %}\n\n{% if bypass_probe_docking == False %}\n_CheckProbe action=query\nG90\nAttach_Probe back=1\n_KLICKY_STATUS_CALIBRATING_Z\n\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nM118 moving the toolhead 20 mm from the bed\n_KlickyDebug msg="probe_calibrate Moving Z up by 20mm"\nTESTZ Z=20\nM118 remove manually the probe and continue calibration\n_KLICKY_STATUS_READY\n{% else %}\n_KLICKY_STATUS_CALIBRATING_Z\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n_KLICKY_STATUS_READY\n{% endif %}', 'rename_existing': '_PROBE_CALIBRATE', 'description': 'Calibrate the probes z_offset with klicky automount'}, 'gcode_macro probe_accuracy': {'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_accuracy Axis homed"\n_KlickyDebug msg="probe_accuracy Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n_entry_point function=PROBE_ACCURACY\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_ACCURACY with the probe above the BED, check klicky_variables bed size!") }\n{% endif%}\n\n_CheckProbe action=query\nAttach_Probe back=1\n\n_KlickyDebug msg="probe_accuracy calling klipper probe accuracy"\n_PROBE_ACCURACY {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nDock_Probe back=1\n\n_exit_point function=PROBE_ACCURACY move=1', 'rename_existing': '_PROBE_ACCURACY', 'description': 'Probe Z-height accuracy at current XY position with klicky automount'}, 'force_move': {'enable_force_move': True}, 'homing_override': {'axes': 'xyz', 'gcode': '\n\n_User_Variables\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n{% set kinematic_z = 0 %}\n{% set dock_on_zhome = printer["gcode_macro _User_Variables"].dock_on_zhome|default(True) %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set home_backoff_x = printer["gcode_macro _User_Variables"].home_backoff_x|default(0) %}\n{% set home_backoff_y = printer["gcode_macro _User_Variables"].home_backoff_y|default(0) %}\n{% set override_homing = printer["gcode_macro _User_Variables"].override_homing|default(\'\') %}\n\n\n_klicky_check_variables_version\n\n_CheckProbe action=query\n\n\n{% set home_x, home_y, home_z, leave_probe_attached = False, False, False, False %}\n\n{% if \'PROBE_LOCK\' in params%}\n{% if verbose %}\n{ action_respond_info("PROBE_LOCK = True") }\n{% endif %}\n{% set leave_probe_attached = True %}\n{% endif %}\n\n\n{% if not \'X\' in params\nand not \'Y\' in params\nand not \'Z\' in params %}\n\n{% set home_x, home_y, home_z = True, True, True %}\n_KlickyDebug msg="homing_override goint to home all axes"\n\n{% else %}\n{% if \'X\' in params %}\n{% set home_x = True %}\n_KlickyDebug msg="homing_override goint to home X"\n\n{% endif %}\n\n{% if \'Y\' in params %}\n{% set home_y = True %}\n_KlickyDebug msg="homing_override goint to home Y"\n{% endif %}\n\n{% if \'Z\' in params %}\n{% set home_z = True %}\n_KlickyDebug msg="homing_override goint to home Z"\n{% endif %}\n\n{% if \'X\' in params\nand \'Y\' in params\nand \'Z\' in params %}\n\n\n_Homing_Variables reset=1\n_KlickyDebug msg="homing_override goint to home all axes"\n{% endif %}\n\n{% endif %}\n\n_entry_point function=homing_override\n_KLICKY_STATUS_HOMING\n\n\n{% if \'z\' not in printer.toolhead.homed_axes %}\n{% if enable_z_hop == False %}\n_KlickyDebug msg="homing_override z_hop disabled"\n\n{% set kinematic_z = safe_z %}\n{% set safe_z = safe_z %}\n{% endif %}\n{% endif %}\n\n\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes and \'z\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("No axis homed") }\n{% endif %}\n_KlickyDebug msg="homing_override no axis homed, setting position as X=Y=0 Z={kinematic_z}"\nSET_KINEMATIC_POSITION X=0 Y=0 Z={kinematic_z}\nM400\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% if home_z != True %}\n_KlickyDebug msg="homing_override clearing axis homed state if not already homing Z"\nM84\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("X or Y not homed, forcing full G28") }\n{% endif %}\n{% set home_x, home_y, home_z = True, True, True %}\n{% endif %}\n{% endif %}\n\n\n{% if ((attachmove_y == 0 and override_homing == \'\' ) or (override_homing == \'Y\'))%}\n\n{% if home_y %}\n{% if override_homing == \'Y\' %}\n_KlickyDebug msg="homing_override Y homing first override, due to override_homing = Y"\n{% else %}\n_KlickyDebug msg="homing_override Y homing first override, due to attachmove_y = 0"\n{% endif %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y G28 Y0"\nG28 Y0\n\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop-home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n{% set home_y = False %}\n{% endif %}\n\n\n\n{% if home_x %}\n{% if verbose %}\n{ action_respond_info("Homing X") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in X homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_X"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_X external script to handle the X homing"\n_HOME_X\n{% else %}\n_KlickyDebug msg="homing_override Homing X, G28 X0"\nG28 X0\n\n{% if home_backoff_x != 0 %}\n{% if (printer.configfile.settings.stepper_x.position_endstop > (printer.configfile.settings.stepper_x.position_min|default(0) + printer.configfile.settings.stepper_x.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n\n{% if home_y %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y, G28 Y0"\nG28 Y0\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if verbose %}\n{ action_respond_info("Homing Z") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe configured as a virtual Z endstop attaching probe"\nAttach_Probe\n\n{% if leave_probe_attached %}\n_Probe_Lock\n{% endif %}\n{% elif dock_on_zhome == True %}\nDock_Probe\n{% endif %}\n\n_Home_Z_\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe no longer required, docking probe"\nDock_Probe\n{% elif dock_on_zhome == False %}\nDock_Probe\n{% endif %}\n{% endif %}\n_CheckProbe action=query\n\n\n_Park_Toolhead\n\n_exit_point function=homing_override\n_KLICKY_STATUS_READY'}, 'gcode_macro _umbilical_path': {'gcode': '\n{% set umbilical = printer["gcode_macro _User_Variables"].umbilical %}\n{% set umbilical_x = printer["gcode_macro _User_Variables"].umbilical_x %}\n{% set umbilical_y = printer["gcode_macro _User_Variables"].umbilical_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n\n{% if umbilical %}\n\n_entry_point function=Umbilical_Path\n\n_KlickyDebug msg="_Umbilical_Path moving to G0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}"\nG0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}\n\n_exit_point function=Umbilical_Path\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _home_z_': {'gcode': '\n{% set z_endstop_x = printer["gcode_macro _Probe_Variables"].z_endstop_x %}\n{% set z_endstop_y = printer["gcode_macro _Probe_Variables"].z_endstop_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}    {% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Home_Z\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n{% else %}\n_KlickyDebug msg="_Home_Z_ XY Axis homed"\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="_Home_Z_ Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n\n\n_KlickyDebug msg="_Home_Z_ moving to Z endstop position G0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}"\nG0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}\n_KlickyDebug msg="_Home_Z_ Homing Z G28 Z"\nG28 Z0\n_KlickyDebug msg="_Home_Z_ toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_exit_point function=Home_Z', 'description': 'G-Code macro'}, 'gcode_macro _checkprobe': {'gcode': '\nQuery_Probe\n_SetProbeState action={ params.ACTION }', 'description': 'G-Code macro', 'variable_probe_state': '0'}, 'gcode_macro _setprobestate': {'gcode': '\n{% set query_probe_triggered = printer.probe.last_query %}\n{% set action  = params.ACTION|default(\'\') %}\n\n\n{% if query_probe_triggered %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ False }\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ True }\n{% endif %}\n\n{% if action == \'query\' %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_state VALUE={ query_probe_triggered }\n{% endif %}\n\n\n\n\n{% if not query_probe_triggered and action == \'dock\' %}\n{ action_raise_error("Probe dock failed!") }\n{% endif %}\n\n\n{% if query_probe_triggered and action == \'attach\' %}\n{ action_raise_error("Probe attach failed!") }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _park_toolhead': {'gcode': '\n{% set park_toolhead = printer["gcode_macro _User_Variables"].park_toolhead %}\n{% set parkposition_x = printer["gcode_macro _User_Variables"].parkposition_x %}\n{% set parkposition_y = printer["gcode_macro _User_Variables"].parkposition_y %}\n{% set parkposition_z = printer["gcode_macro _User_Variables"].parkposition_z %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Park_Toolhead\n\n{% if park_toolhead and \'xyz\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Parking Toolhead") }\n{% endif %}\n{% if parkposition_z == -128 %}\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}\n\n{% else %}\n\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}\n\n{% endif %}\n\n{% endif %}\n_exit_point function=Park_Toolhead', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_ready': {'gcode': '\n{% if printer[\'gcode_macro status_ready\'] is defined %}\n_KlickyDebug msg="_klicky_status_ready activating the LED STATUS_READY"\nSTATUS_READY\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_busy': {'gcode': '\n{% if printer[\'gcode_macro status_busy\'] is defined %}\n_KlickyDebug msg="_klicky_status_busy activating the LED STATUS_BUSY"\nSTATUS_BUSY\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_leveling': {'gcode': '\n{% if printer[\'gcode_macro status_leveling\'] is defined %}\n_KlickyDebug msg="_klicky_status_leveling activating the LED STATUS_LEVELING"\nSTATUS_LEVELING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_homing': {'gcode': '\n{% if printer[\'gcode_macro status_homing\'] is defined %}\n_KlickyDebug msg="_klicky_status_homing activating the LED STATUS_HOMING"\nSTATUS_HOMING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_cleaning': {'gcode': '\n{% if printer[\'gcode_macro status_cleaning\'] is defined %}\n_KlickyDebug msg="_klicky_status_cleaning activating the LED STATUS_CLEANING"\nSTATUS_CLEANING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_meshing': {'gcode': '\n{% if printer[\'gcode_macro status_meshing\'] is defined %}\n_KlickyDebug msg="_klicky_status_meshing activating the LED STATUS_MESHING"\nSTATUS_MESHING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_calibrating_z': {'gcode': '\n{% if printer[\'gcode_macro status_calibrating_z\'] is defined %}\n_KlickyDebug msg="_klicky_status_calibrating_z activating the LED STATUS_CALIBRATING_Z"\nSTATUS_CALIBRATING_Z\n{% endif %}', 'description': 'G-Code macro'}, 'z_calibration': {'switch_offset': 0.09, 'offset_margins': '-1.0,1.0', 'speed': 50.0, 'samples_result': 'none', 'probing_first_fast': False, 'nozzle_xy_position': '172, 301', 'switch_xy_position': '171.5, 282', 'bed_xy_position': '150, 150', 'start_gcode': 'Attach_Probe', 'before_switch_gcode': '', 'end_gcode': 'Dock_Probe'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': '^PG6', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'PG9', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 303.5, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PF11', 'dir_pin': '!PG3', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG5', 'endstop_pin': 'PG10', 'position_endstop': -0.5, 'position_min': -4.5, 'position_max': 290.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA0'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PF9', 'dir_pin': '!PF10', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG2'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF4', 'min_temp': 10.0, 'max_temp': 270.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 26.572, 'pid_ki': 2.036, 'pid_kd': 86.691, 'heater_pin': 'PA1', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PC13', 'pressure_advance': 0.05, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'PF0', 'rotation_distance': 22.6789511, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 55.196, 'pid_ki': 2.091, 'pid_kd': 364.295, 'heater_pin': 'PA2', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'probe': {'z_offset': 0.0, 'deactivate_on_each_sample': True, 'activate_gcode': '', 'deactivate_gcode': '', 'pin': 'PG15', 'speed': 10.0, 'lift_speed': 10.0, 'x_offset': 0.0, 'y_offset': 25.0, 'samples': 5, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.006, 'samples_tolerance_retries': 3}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE5', 'fan_speed': 1.0}, 'controller_fan controller_fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD12', 'fan_speed': 1.0, 'idle_speed': 1.0, 'idle_timeout': 30, 'heater': ['heater_bed']}, 'heater_fan exhaust_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 5.0, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13', 'fan_speed': 1.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PD15', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 1.0, 'maximum_mcu_duration': 0.0, 'value': 1.0, 'shutdown_value': 0.0}, 'neopixel headlight': {'pin': 'PB0', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 0.0, 'initial_green': 0.0, 'initial_blue': 0.0, 'initial_white': 0.0}, 'temperature_sensor chamber_temp': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF5', 'min_temp': 0.0, 'max_temp': 100.0, 'gcode_id': 'chamber_th'}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [150.0, 348.0], [350.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 5.0], [150.0, 245.0], [270.0, 5.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'gcode_macro _user_variables': {'gcode': '\n{% set Mx = printer[\'configfile\'].config["stepper_x"]["position_max"]|float %}\n{% set My = printer[\'configfile\'].config["stepper_y"]["position_max"]|float %}\n{% set Ox = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set Oy = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set Oz = printer[\'configfile\'].config["probe"]["z_offset"]|float %}\n\n\n{% if z_endstop_x != 0 or z_endstop_y != 0 %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ z_endstop_x }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ z_endstop_y }\n\n\n{% else %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ (Mx * 0.5) - Ox }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ (My * 0.5) - Oy }\n{% endif %}', 'description': 'G-Code macro', 'variable_verbose': 'True', 'variable_debug': 'False', 'variable_travel_speed': '200', 'variable_move_accel': '1000', 'variable_dock_speed': '50', 'variable_release_speed': '75', 'variable_z_drop_speed': '20', 'variable_safe_z': '25', 'variable_enable_z_hop': 'True', 'variable_max_bed_y': '300', 'variable_max_bed_x': '300', 'variable_z_endstop_x': '172', 'variable_z_endstop_y': '301', 'variable_docklocation_x': '40.5', 'variable_docklocation_y': '303.5', 'variable_docklocation_z': '-128', 'variable_enable_dock_servo': 'False', 'variable_servo_name': "'NAME'", 'variable_servo_deploy': '10', 'variable_servo_retract': '11', 'variable_servo_delay': '250', 'variable_dockmove_x': '40', 'variable_dockmove_y': '0', 'variable_dockmove_z': '0', 'variable_attachmove_x': '0', 'variable_attachmove_y': '30', 'variable_attachmove_z': '0', 'variable_umbilical': 'False', 'variable_umbilical_x': '15', 'variable_umbilical_y': '15', 'variable_park_toolhead': 'False', 'variable_parkposition_x': '125', 'variable_parkposition_y': '125', 'variable_parkposition_z': '30', 'variable_version': '1', 'variable_attachmove2_x': '0', 'variable_attachmove2_y': '0', 'variable_attachmove2_z': '0', 'variable_home_backoff_x': '10', 'variable_home_backoff_y': '10', 'variable_override_homing': "''", 'variable_dock_on_zhome': 'True'}, 'gcode_macro print_start': {'gcode': '\nM117 Homing...\nG28\nZ_TILT_ADJUST\nG28\n\n\n\n\n\n\n\nG0 X150 Y150 Z30 F3600', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1500.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-02-15 20:48:37,046 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-15 20:48:37,046 [printer.py:reinit()] - Klipper version: v0.12.0-103-g6ce6fbbc-dirty
2024-02-15 20:48:37,046 [printer.py:reinit()] - # Extruders: 1
2024-02-15 20:48:37,047 [printer.py:reinit()] - # Temperature devices: 2
2024-02-15 20:48:37,047 [printer.py:reinit()] - # Fans: 4
2024-02-15 20:48:37,047 [printer.py:reinit()] - # Output pins: 1
2024-02-15 20:48:37,047 [printer.py:reinit()] - # Leds: 1
2024-02-15 20:48:37,059 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2024-02-15 20:48:37,060 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-02-15 20:48:37,355 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor chamber_temp&fan&controller_fan controller_fan&heater_fan hotend_fan&heater_fan exhaust_fan&output_pin caselight&neopixel headlight
2024-02-15 20:48:37,358 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-02-15 20:48:37,358 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-02-15 20:48:37,361 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-02-15 20:48:37,362 [screen.py:init_klipper()] - Printer initialized
2024-02-15 20:48:37,362 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2024-02-15 20:48:37,362 [printer.py:change_state()] - Adding callback for state: ready
2024-02-15 20:48:37,365 [screen.py:_load_panel()] - Loading panel: main_menu
2024-02-15 20:48:37,426 [main_menu.py:__init__()] - ### Making MainMenu
2024-02-15 20:48:37,432 [main_menu.py:add_device()] - Adding device: extruder
2024-02-15 20:48:37,437 [main_menu.py:add_device()] - Adding device: heater_bed
2024-02-15 20:48:37,443 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber_temp
2024-02-15 20:48:37,466 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-02-15 20:48:37,474 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-02-15 20:48:37,475 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-02-15 20:48:37,475 [main_menu.py:update_graph_visibility()] - Could not create graph tempstore: None
2024-02-15 20:48:42,378 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-02-15 20:48:42,388 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'temperature_sensor chamber_temp', 'extruder']
2024-02-15 20:48:42,398 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2024-02-15 20:48:42,399 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-02-15 20:51:38,283 [screen.py:_load_panel()] - Loading panel: extrude
2024-02-15 20:51:38,372 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > extrude
2024-02-15 20:51:39,192 [extrude.py:change_speed()] - ### Speed 5
2024-02-15 20:51:40,712 [extrude.py:change_distance()] - ### Distance 15
2024-02-15 20:51:41,440 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M83
2024-02-15 20:51:41,443 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G1 E+15 F300'}
2024-02-15 20:51:41,506 [screen.py:show_popup_message()] - error: Extrude below minimum temp
2024-02-15 20:51:48,446 [screen.py:_menu_go_back()] - #### Menu go back
2024-02-15 20:51:48,483 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-02-15 20:51:49,725 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > extrude
2024-02-15 20:51:50,193 [screen.py:_load_panel()] - Loading panel: temperature
2024-02-15 20:51:50,202 [temperature.py:add_device()] - Adding device: extruder
2024-02-15 20:51:50,207 [temperature.py:add_device()] - Adding device: heater_bed
2024-02-15 20:51:50,212 [temperature.py:add_device()] - Adding device: temperature_sensor chamber_temp
2024-02-15 20:51:50,217 [temperature.py:select_heater()] - Selecting extruder
2024-02-15 20:51:50,218 [temperature.py:select_heater()] - Selecting heater_bed
2024-02-15 20:51:50,241 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > extrude > temperature
2024-02-15 20:51:53,397 [temperature.py:verify_max_temp()] - 240/270
2024-02-15 20:51:53,397 [KlippyWebsocket.py:set_tool_temp()] - Sending set_tool_temp: M104 T0 S240
2024-02-15 20:51:56,069 [temperature.py:verify_max_temp()] - 85/120
2024-02-15 20:51:56,070 [KlippyWebsocket.py:set_bed_temp()] - Sending set_bed_temp: M140 S85
2024-02-15 20:51:59,400 [screen.py:_menu_go_back()] - #### Menu go back
2024-02-15 20:51:59,417 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > extrude
2024-02-15 20:52:00,408 [screen.py:_menu_go_back()] - #### Menu go back
2024-02-15 20:52:00,425 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-02-15 20:52:00,889 [screen.py:_load_panel()] - Loading panel: print
2024-02-15 20:52:00,908 [print.py:__init__()] - 24h time is True
2024-02-15 20:52:00,929 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > print
2024-02-15 20:52:00,930 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-02-15 20:52:00,931 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-02-15 20:52:01,612 [screen.py:_menu_go_back()] - #### Menu go back
2024-02-15 20:52:01,629 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-02-15 20:52:02,693 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > temperature
2024-02-15 20:52:03,401 [temperature.py:set_temperature()] - {'bed': 80.0, 'extruder': 240.0}
2024-02-15 20:52:03,402 [temperature.py:set_temperature()] - {'bed': 80.0, 'extruder': 240.0}
2024-02-15 20:52:03,402 [temperature.py:set_temperature()] - name match extruder
2024-02-15 20:52:03,402 [KlippyWebsocket.py:set_tool_temp()] - Sending set_tool_temp: M104 T0 S240.0
2024-02-15 20:52:03,405 [temperature.py:set_temperature()] - {'bed': 80.0, 'extruder': 240.0}
2024-02-15 20:52:03,405 [temperature.py:set_temperature()] - {'bed': 80.0, 'extruder': 240.0}
2024-02-15 20:52:03,405 [KlippyWebsocket.py:set_bed_temp()] - Sending set_bed_temp: M140 S80.0
2024-02-15 20:52:05,013 [screen.py:_menu_go_back()] - #### Menu go back
2024-02-15 20:52:05,057 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-02-15 20:52:06,983 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > extrude
2024-02-15 20:53:45,773 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M83
2024-02-15 20:53:45,775 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G1 E+15 F300'}
2024-02-15 20:53:51,593 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M83
2024-02-15 20:53:51,595 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G1 E+15 F300'}
2024-02-15 20:54:08,217 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M83
2024-02-15 20:54:08,218 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G1 E+15 F300'}
2024-02-15 20:58:35,021 [screen.py:show_popup_message()] - error: // Unknown command:"ROTATION_DISTANCE"
2024-02-15 20:59:34,224 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-02-15 20:59:34,224 [printer.py:change_state()] - Adding callback for state: disconnected
2024-02-15 20:59:34,225 [screen.py:state_disconnected()] - ### Going to disconnected
2024-02-15 20:59:34,225 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-15 20:59:34,227 [screen.py:show_panel()] - Reinitializing panel
2024-02-15 20:59:34,258 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-02-15 20:59:37,261 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-15 20:59:37,269 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2024-02-15 20:59:37,270 [printer.py:configure_cameras()] - Cameras: []
2024-02-15 20:59:37,271 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'octoprint_compat', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 3, 'moonraker_version': 'v0.8.0-310-g67c98f6', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-02-15 20:59:37,279 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2024-02-15 20:59:37,297 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2024-02-15 20:59:37,299 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro _Probe_Variables': {'variable_probe_attached': 'False', 'variable_probe_state': 'False', 'variable_probe_lock': 'False', 'variable_probe_z_homed': 'False', 'variable_z_endstop_x': '0', 'variable_z_endstop_y': '0', 'gcode': ''}, 'gcode_macro _klicky_check_variables_version': {'gcode': '\n{% set version = printer["gcode_macro _User_Variables"].version|default(0) %}\n\n{% if version != 1 %}\n{ action_raise_error("Please update your klicky variables, there are some functionality changes") }\n{% endif %}'}, 'gcode_macro _KlickyDebug': {'gcode': '\n{% set message  = params.MSG %}\n{% set debug = printer["gcode_macro _User_Variables"].debug|default(False) %}\n\n{% if debug %}\n{ action_respond_info(message) }\n{% endif %}'}, 'gcode_macro _exit_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move  = params.MOVE|default(0) %}\n{% set speed = printer["gcode_macro _User_Variables"].travel_speed %}\n\n\nM400\nSET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\nRESTORE_GCODE_STATE NAME={function} MOVE={move} MOVE_SPEED={speed}'}, 'gcode_macro _entry_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move_accel = printer["gcode_macro _User_Variables"].move_accel|default(1000) %}\n\nM400\nSAVE_GCODE_STATE NAME={function}\n\nSET_GCODE_OFFSET Z=0\n\nG90\n\nSET_VELOCITY_LIMIT ACCEL={move_accel}'}, 'gcode_macro _Homing_Variables': {'gcode': '\n{% set reset  = params.RESET|default(0) %}\n{% if reset %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }\n{% endif %}'}, 'gcode_macro Attach_Probe_Lock': {'description': 'Attaches Klicky Probe, can only be docked after unlocking', 'gcode': '\nAttach_Probe\n_Probe_Lock'}, 'gcode_macro Dock_Probe_Unlock': {'description': 'Docks Klicky Probe even if it was locked', 'gcode': '\n_Probe_Unlock\nDock_Probe'}, 'gcode_macro _Probe_Unlock': {'description': 'Unlocks Klicky Probe state', 'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to False"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }'}, 'gcode_macro _Probe_Lock': {'description': 'Locks Klicky Probe state', 'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to True"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ True }'}, 'gcode_macro _DeployKlickyDock': {'description': 'Deploys Klicky servo-controlled dock', 'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_deploy = printer["gcode_macro _User_Variables"].servo_deploy|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_DeployKlickyDock Klicky servo configuration enabled"\n{% if servo_deploy == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo deploy angle specified") }\n{% endif %}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _DeployDock"] is defined %}\n_KlickyDebug msg="_DeployKlickyDock calling _DeployDock"\n_DeployDock\n{% endif %}'}, 'gcode_macro _RetractKlickyDock': {'description': 'Retracts Klicky servo-controlled dock', 'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_retract = printer["gcode_macro _User_Variables"].servo_retract|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_RetractKlickyDock Klicky servo configuration enabled"\n{% if servo_retract == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo retract angle specified") }\n{% endif %}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _RetractDock"] is defined %}\n_KlickyDebug msg="_RetractKlickyDock calling _RetractDock"\n_RetractDock\n{% endif %}'}, 'gcode_macro Attach_Probe': {'description': 'Attaches Klicky Probe', 'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set attachmove2_x = printer["gcode_macro _User_Variables"].attachmove2_x|default(0) %}\n{% set attachmove2_y = printer["gcode_macro _User_Variables"].attachmove2_y|default(0) %}\n{% set attachmove2_z = printer["gcode_macro _User_Variables"].attachmove2_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n_entry_point function=Attach_Probe\n\n{% if bypass_probe_docking == False %}\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n_KlickyDebug msg="Attach_Probe Axis homed"\n\n\n{% elif not probe_attached and not probe_lock %}\n_KlickyDebug msg="Attach_Probe going to attach probe"\n{% if verbose %}\n{ action_respond_info("Attaching Probe") }\n{% endif %}\n_KLICKY_STATUS_BUSY\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% if not enable_z_hop %}\n_KlickyDebug msg="Attach_Probe z_hop disabled"\n{% set safe_z = 0 %}\n{% endif %}\n{% endif %}\n\n\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero, duplicate?") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Umbilical_Path\n\n_entry_point function=Attach_Probe_intern\n\n\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n_DeployKlickyDock\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}"\nG0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}\n\n_RetractKlickyDock\n\n{% if ((printer.gcode_move.gcode_position.z < safe_z) or (docklocation_z != -128 and docklocation_z < safe_z ))%}\n_KlickyDebug msg="Attach_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\n_CheckProbe action=attach\n\n_exit_point function=Attach_Probe_intern move={goback}\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe locked not attaching probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already attached!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe already attached, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Attach_Probe\n{% else %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}'}, 'gcode_macro Dock_Probe': {'description': 'Docks Klicky Probe', 'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n{% if bypass_probe_docking == True %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}\n\n{% if bypass_probe_docking != True %}\n_entry_point function=Dock_Probe\n\n\n{% if probe_attached and not probe_lock %}\n_KLICKY_STATUS_BUSY\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Dock_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n_Umbilical_Path\n\n\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n\n_DeployKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\n\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}"\nG0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}\n{% endif %}\n\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}\n\n\n_RetractKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving away from the dock to G0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}\n\n\n{% if (printer.gcode_move.gcode_position.z < safe_z) %}\n_KlickyDebug msg="Dock_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\nG4 P1000\n_CheckProbe action=dock\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe locked not docking probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already docked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe already docked, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Dock_Probe move={goback}\n{% else %}\n_KlickyDebug msg="Dock_Probe probe docking bypassed, doing nothing"\n{% endif %}'}, 'gcode_macro PROBE_CALIBRATE': {'rename_existing': '_PROBE_CALIBRATE', 'description': 'Calibrate the probes z_offset with klicky automount', 'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_calibrate Axis homed"\n_KlickyDebug msg="probe_calibrate Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_CALIBRATE with the probe above the BED, check klicky_variables bed size!") }\n{% endif %}\n\n{% if bypass_probe_docking == False %}\n_CheckProbe action=query\nG90\nAttach_Probe back=1\n_KLICKY_STATUS_CALIBRATING_Z\n\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nM118 moving the toolhead 20 mm from the bed\n_KlickyDebug msg="probe_calibrate Moving Z up by 20mm"\nTESTZ Z=20\nM118 remove manually the probe and continue calibration\n_KLICKY_STATUS_READY\n{% else %}\n_KLICKY_STATUS_CALIBRATING_Z\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n_KLICKY_STATUS_READY\n{% endif %}'}, 'gcode_macro PROBE_ACCURACY': {'rename_existing': '_PROBE_ACCURACY', 'description': 'Probe Z-height accuracy at current XY position with klicky automount', 'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_accuracy Axis homed"\n_KlickyDebug msg="probe_accuracy Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n_entry_point function=PROBE_ACCURACY\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_ACCURACY with the probe above the BED, check klicky_variables bed size!") }\n{% endif%}\n\n_CheckProbe action=query\nAttach_Probe back=1\n\n_KlickyDebug msg="probe_accuracy calling klipper probe accuracy"\n_PROBE_ACCURACY {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nDock_Probe back=1\n\n_exit_point function=PROBE_ACCURACY move=1'}, 'force_move': {'enable_force_move': 'True'}, 'homing_override': {'axes': 'xyz', 'gcode': '\n\n_User_Variables\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n{% set kinematic_z = 0 %}\n{% set dock_on_zhome = printer["gcode_macro _User_Variables"].dock_on_zhome|default(True) %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set home_backoff_x = printer["gcode_macro _User_Variables"].home_backoff_x|default(0) %}\n{% set home_backoff_y = printer["gcode_macro _User_Variables"].home_backoff_y|default(0) %}\n{% set override_homing = printer["gcode_macro _User_Variables"].override_homing|default(\'\') %}\n\n\n_klicky_check_variables_version\n\n_CheckProbe action=query\n\n\n{% set home_x, home_y, home_z, leave_probe_attached = False, False, False, False %}\n\n{% if \'PROBE_LOCK\' in params%}\n{% if verbose %}\n{ action_respond_info("PROBE_LOCK = True") }\n{% endif %}\n{% set leave_probe_attached = True %}\n{% endif %}\n\n\n{% if not \'X\' in params\nand not \'Y\' in params\nand not \'Z\' in params %}\n\n{% set home_x, home_y, home_z = True, True, True %}\n_KlickyDebug msg="homing_override goint to home all axes"\n\n{% else %}\n{% if \'X\' in params %}\n{% set home_x = True %}\n_KlickyDebug msg="homing_override goint to home X"\n\n{% endif %}\n\n{% if \'Y\' in params %}\n{% set home_y = True %}\n_KlickyDebug msg="homing_override goint to home Y"\n{% endif %}\n\n{% if \'Z\' in params %}\n{% set home_z = True %}\n_KlickyDebug msg="homing_override goint to home Z"\n{% endif %}\n\n{% if \'X\' in params\nand \'Y\' in params\nand \'Z\' in params %}\n\n\n_Homing_Variables reset=1\n_KlickyDebug msg="homing_override goint to home all axes"\n{% endif %}\n\n{% endif %}\n\n_entry_point function=homing_override\n_KLICKY_STATUS_HOMING\n\n\n{% if \'z\' not in printer.toolhead.homed_axes %}\n{% if enable_z_hop == False %}\n_KlickyDebug msg="homing_override z_hop disabled"\n\n{% set kinematic_z = safe_z %}\n{% set safe_z = safe_z %}\n{% endif %}\n{% endif %}\n\n\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes and \'z\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("No axis homed") }\n{% endif %}\n_KlickyDebug msg="homing_override no axis homed, setting position as X=Y=0 Z={kinematic_z}"\nSET_KINEMATIC_POSITION X=0 Y=0 Z={kinematic_z}\nM400\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% if home_z != True %}\n_KlickyDebug msg="homing_override clearing axis homed state if not already homing Z"\nM84\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("X or Y not homed, forcing full G28") }\n{% endif %}\n{% set home_x, home_y, home_z = True, True, True %}\n{% endif %}\n{% endif %}\n\n\n{% if ((attachmove_y == 0 and override_homing == \'\' ) or (override_homing == \'Y\'))%}\n\n{% if home_y %}\n{% if override_homing == \'Y\' %}\n_KlickyDebug msg="homing_override Y homing first override, due to override_homing = Y"\n{% else %}\n_KlickyDebug msg="homing_override Y homing first override, due to attachmove_y = 0"\n{% endif %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y G28 Y0"\nG28 Y0\n\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop-home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n{% set home_y = False %}\n{% endif %}\n\n\n\n{% if home_x %}\n{% if verbose %}\n{ action_respond_info("Homing X") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in X homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_X"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_X external script to handle the X homing"\n_HOME_X\n{% else %}\n_KlickyDebug msg="homing_override Homing X, G28 X0"\nG28 X0\n\n{% if home_backoff_x != 0 %}\n{% if (printer.configfile.settings.stepper_x.position_endstop > (printer.configfile.settings.stepper_x.position_min|default(0) + printer.configfile.settings.stepper_x.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n\n{% if home_y %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y, G28 Y0"\nG28 Y0\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if verbose %}\n{ action_respond_info("Homing Z") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe configured as a virtual Z endstop attaching probe"\nAttach_Probe\n\n{% if leave_probe_attached %}\n_Probe_Lock\n{% endif %}\n{% elif dock_on_zhome == True %}\nDock_Probe\n{% endif %}\n\n_Home_Z_\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe no longer required, docking probe"\nDock_Probe\n{% elif dock_on_zhome == False %}\nDock_Probe\n{% endif %}\n{% endif %}\n_CheckProbe action=query\n\n\n_Park_Toolhead\n\n_exit_point function=homing_override\n_KLICKY_STATUS_READY'}, 'gcode_macro _Umbilical_Path': {'gcode': '\n{% set umbilical = printer["gcode_macro _User_Variables"].umbilical %}\n{% set umbilical_x = printer["gcode_macro _User_Variables"].umbilical_x %}\n{% set umbilical_y = printer["gcode_macro _User_Variables"].umbilical_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n\n{% if umbilical %}\n\n_entry_point function=Umbilical_Path\n\n_KlickyDebug msg="_Umbilical_Path moving to G0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}"\nG0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}\n\n_exit_point function=Umbilical_Path\n{% endif %}'}, 'gcode_macro _Home_Z_': {'gcode': '\n{% set z_endstop_x = printer["gcode_macro _Probe_Variables"].z_endstop_x %}\n{% set z_endstop_y = printer["gcode_macro _Probe_Variables"].z_endstop_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}    {% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Home_Z\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n{% else %}\n_KlickyDebug msg="_Home_Z_ XY Axis homed"\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="_Home_Z_ Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n\n\n_KlickyDebug msg="_Home_Z_ moving to Z endstop position G0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}"\nG0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}\n_KlickyDebug msg="_Home_Z_ Homing Z G28 Z"\nG28 Z0\n_KlickyDebug msg="_Home_Z_ toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_exit_point function=Home_Z'}, 'gcode_macro _CheckProbe': {'variable_probe_state': '0', 'gcode': '\nQuery_Probe\n_SetProbeState action={ params.ACTION }'}, 'gcode_macro _SetProbeState': {'gcode': '\n{% set query_probe_triggered = printer.probe.last_query %}\n{% set action  = params.ACTION|default(\'\') %}\n\n\n{% if query_probe_triggered %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ False }\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ True }\n{% endif %}\n\n{% if action == \'query\' %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_state VALUE={ query_probe_triggered }\n{% endif %}\n\n\n\n\n{% if not query_probe_triggered and action == \'dock\' %}\n{ action_raise_error("Probe dock failed!") }\n{% endif %}\n\n\n{% if query_probe_triggered and action == \'attach\' %}\n{ action_raise_error("Probe attach failed!") }\n{% endif %}'}, 'gcode_macro _Park_Toolhead': {'gcode': '\n{% set park_toolhead = printer["gcode_macro _User_Variables"].park_toolhead %}\n{% set parkposition_x = printer["gcode_macro _User_Variables"].parkposition_x %}\n{% set parkposition_y = printer["gcode_macro _User_Variables"].parkposition_y %}\n{% set parkposition_z = printer["gcode_macro _User_Variables"].parkposition_z %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Park_Toolhead\n\n{% if park_toolhead and \'xyz\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Parking Toolhead") }\n{% endif %}\n{% if parkposition_z == -128 %}\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}\n\n{% else %}\n\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}\n\n{% endif %}\n\n{% endif %}\n_exit_point function=Park_Toolhead'}, 'gcode_macro _klicky_status_ready': {'gcode': '\n{% if printer[\'gcode_macro status_ready\'] is defined %}\n_KlickyDebug msg="_klicky_status_ready activating the LED STATUS_READY"\nSTATUS_READY\n{% endif %}'}, 'gcode_macro _klicky_status_busy': {'gcode': '\n{% if printer[\'gcode_macro status_busy\'] is defined %}\n_KlickyDebug msg="_klicky_status_busy activating the LED STATUS_BUSY"\nSTATUS_BUSY\n{% endif %}'}, 'gcode_macro _klicky_status_leveling': {'gcode': '\n{% if printer[\'gcode_macro status_leveling\'] is defined %}\n_KlickyDebug msg="_klicky_status_leveling activating the LED STATUS_LEVELING"\nSTATUS_LEVELING\n{% endif %}'}, 'gcode_macro _klicky_status_homing': {'gcode': '\n{% if printer[\'gcode_macro status_homing\'] is defined %}\n_KlickyDebug msg="_klicky_status_homing activating the LED STATUS_HOMING"\nSTATUS_HOMING\n{% endif %}'}, 'gcode_macro _klicky_status_cleaning': {'gcode': '\n{% if printer[\'gcode_macro status_cleaning\'] is defined %}\n_KlickyDebug msg="_klicky_status_cleaning activating the LED STATUS_CLEANING"\nSTATUS_CLEANING\n{% endif %}'}, 'gcode_macro _klicky_status_meshing': {'gcode': '\n{% if printer[\'gcode_macro status_meshing\'] is defined %}\n_KlickyDebug msg="_klicky_status_meshing activating the LED STATUS_MESHING"\nSTATUS_MESHING\n{% endif %}'}, 'gcode_macro _klicky_status_calibrating_z': {'gcode': '\n{% if printer[\'gcode_macro status_calibrating_z\'] is defined %}\n_KlickyDebug msg="_klicky_status_calibrating_z activating the LED STATUS_CALIBRATING_Z"\nSTATUS_CALIBRATING_Z\n{% endif %}'}, 'z_calibration': {'nozzle_xy_position': '172, 301', 'switch_xy_position': '171.5, 282', 'bed_xy_position': '150, 150', 'switch_offset': '0.09', 'offset_margins': '-1.0,1.0', 'speed': '50', 'probing_first_fast': 'false', 'start_gcode': 'Attach_Probe', 'end_gcode': 'Dock_Probe'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_28003C001150535556323420-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '^PG6', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '25', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'PG9', 'position_min': '0', 'position_endstop': '300', 'position_max': '303.5', 'homing_speed': '25', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': '!PG3', 'enable_pin': '!PG5', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'PG10', 'position_endstop': '-0.5', 'position_max': '290', 'position_min': '-4.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA0', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': '!PF10', 'enable_pin': '!PG2', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PC13', 'dir_pin': 'PF0', 'enable_pin': '!PF1', 'rotation_distance': '22.86038271', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.75', 'heater_pin': 'PA1', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF4', 'min_temp': '10', 'max_temp': '270', 'max_power': '1.0', 'min_extrude_temp': '170', 'pressure_advance': '0.05', 'pressure_advance_smooth_time': '0.040', 'control': 'pid', 'pid_kp': '26.572', 'pid_ki': '2.036', 'pid_kd': '86.691'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.5', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PA2', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF3', 'max_power': '1', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '55.196', 'pid_ki': '2.091', 'pid_kd': '364.295'}, 'probe': {'pin': 'PG15', 'x_offset': '0', 'y_offset': '25.0', 'z_offset': '0', 'speed': '10.0', 'samples': '5', 'samples_result': 'median', 'sample_retract_dist': '3.0', 'samples_tolerance': '0.006', 'samples_tolerance_retries': '3'}, 'fan': {'pin': 'PA8', 'kick_start_time': '0.5', 'off_below': '0.10'}, 'heater_fan hotend_fan': {'pin': 'PE5', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'controller_fan controller_fan': {'pin': 'PD12', 'kick_start_time': '0.5', 'heater': 'heater_bed'}, 'heater_fan exhaust_fan': {'pin': 'PD13', 'max_power': '1.0', 'shutdown_speed': '0.0', 'kick_start_time': '5.0', 'heater': 'heater_bed', 'heater_temp': '60', 'fan_speed': '1.0'}, 'output_pin caselight': {'pin': 'PD15', 'pwm': 'true', 'shutdown_value': '0', 'value': '1', 'cycle_time': '0.01'}, 'neopixel headlight': {'pin': 'PB0', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '0.0', 'initial_green': '0.2157', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'temperature_sensor chamber_temp': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF5', 'min_temp': '0', 'max_temp': '100', 'gcode_id': 'chamber_th'}, 'idle_timeout': {'timeout': '1800'}, 'z_tilt': {'z_positions': '\n-50, 18\n150, 348\n350, 18', 'points': '\n30, 5\n150, 245\n270, 5', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'gcode_macro _User_Variables': {'variable_verbose': 'True', 'variable_debug': 'False', 'variable_travel_speed': '200', 'variable_move_accel': '1000', 'variable_dock_speed': '50', 'variable_release_speed': '75', 'variable_z_drop_speed': '20', 'variable_safe_z': '25', 'variable_enable_z_hop': 'True', 'variable_max_bed_y': '300', 'variable_max_bed_x': '300', 'variable_z_endstop_x': '172', 'variable_z_endstop_y': '301', 'variable_docklocation_x': '40.5', 'variable_docklocation_y': '303.5', 'variable_docklocation_z': '-128', 'variable_enable_dock_servo': 'False', 'variable_servo_name': "'NAME'", 'variable_servo_deploy': '10', 'variable_servo_retract': '11', 'variable_servo_delay': '250', 'variable_dockmove_x': '40', 'variable_dockmove_y': '0', 'variable_dockmove_z': '0', 'variable_attachmove_x': '0', 'variable_attachmove_y': '30', 'variable_attachmove_z': '0', 'variable_umbilical': 'False', 'variable_umbilical_x': '15', 'variable_umbilical_y': '15', 'variable_park_toolhead': 'False', 'variable_parkposition_x': '125', 'variable_parkposition_y': '125', 'variable_parkposition_z': '30', 'variable_version': '1', 'variable_attachmove2_x': '0', 'variable_attachmove2_y': '0', 'variable_attachmove2_z': '0', 'variable_home_backoff_x': '10', 'variable_home_backoff_y': '10', 'variable_override_homing': "''", 'variable_dock_on_zhome': 'True', 'gcode': '\n{% set Mx = printer[\'configfile\'].config["stepper_x"]["position_max"]|float %}\n{% set My = printer[\'configfile\'].config["stepper_y"]["position_max"]|float %}\n{% set Ox = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set Oy = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set Oz = printer[\'configfile\'].config["probe"]["z_offset"]|float %}\n\n\n{% if z_endstop_x != 0 or z_endstop_y != 0 %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ z_endstop_x }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ z_endstop_y }\n\n\n{% else %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ (Mx * 0.5) - Ox }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ (My * 0.5) - Oy }\n{% endif %}'}, 'gcode_macro PRINT_START': {'gcode': '\nM117 Homing...\nG28\nZ_TILT_ADJUST\nG28\n\n\n\n\n\n\n\nG0 X150 Y150 Z30 F3600'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_28003C001150535556323420-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro _probe_variables': {'gcode': '', 'description': 'G-Code macro', 'variable_probe_attached': 'False', 'variable_probe_state': 'False', 'variable_probe_lock': 'False', 'variable_probe_z_homed': 'False', 'variable_z_endstop_x': '0', 'variable_z_endstop_y': '0'}, 'gcode_macro _klicky_check_variables_version': {'gcode': '\n{% set version = printer["gcode_macro _User_Variables"].version|default(0) %}\n\n{% if version != 1 %}\n{ action_raise_error("Please update your klicky variables, there are some functionality changes") }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klickydebug': {'gcode': '\n{% set message  = params.MSG %}\n{% set debug = printer["gcode_macro _User_Variables"].debug|default(False) %}\n\n{% if debug %}\n{ action_respond_info(message) }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _exit_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move  = params.MOVE|default(0) %}\n{% set speed = printer["gcode_macro _User_Variables"].travel_speed %}\n\n\nM400\nSET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\nRESTORE_GCODE_STATE NAME={function} MOVE={move} MOVE_SPEED={speed}', 'description': 'G-Code macro'}, 'gcode_macro _entry_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move_accel = printer["gcode_macro _User_Variables"].move_accel|default(1000) %}\n\nM400\nSAVE_GCODE_STATE NAME={function}\n\nSET_GCODE_OFFSET Z=0\n\nG90\n\nSET_VELOCITY_LIMIT ACCEL={move_accel}', 'description': 'G-Code macro'}, 'gcode_macro _homing_variables': {'gcode': '\n{% set reset  = params.RESET|default(0) %}\n{% if reset %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro attach_probe_lock': {'gcode': '\nAttach_Probe\n_Probe_Lock', 'description': 'Attaches Klicky Probe, can only be docked after unlocking'}, 'gcode_macro dock_probe_unlock': {'gcode': '\n_Probe_Unlock\nDock_Probe', 'description': 'Docks Klicky Probe even if it was locked'}, 'gcode_macro _probe_unlock': {'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to False"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }', 'description': 'Unlocks Klicky Probe state'}, 'gcode_macro _probe_lock': {'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to True"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ True }', 'description': 'Locks Klicky Probe state'}, 'gcode_macro _deployklickydock': {'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_deploy = printer["gcode_macro _User_Variables"].servo_deploy|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_DeployKlickyDock Klicky servo configuration enabled"\n{% if servo_deploy == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo deploy angle specified") }\n{% endif %}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _DeployDock"] is defined %}\n_KlickyDebug msg="_DeployKlickyDock calling _DeployDock"\n_DeployDock\n{% endif %}', 'description': 'Deploys Klicky servo-controlled dock'}, 'gcode_macro _retractklickydock': {'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_retract = printer["gcode_macro _User_Variables"].servo_retract|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_RetractKlickyDock Klicky servo configuration enabled"\n{% if servo_retract == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo retract angle specified") }\n{% endif %}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _RetractDock"] is defined %}\n_KlickyDebug msg="_RetractKlickyDock calling _RetractDock"\n_RetractDock\n{% endif %}', 'description': 'Retracts Klicky servo-controlled dock'}, 'gcode_macro attach_probe': {'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set attachmove2_x = printer["gcode_macro _User_Variables"].attachmove2_x|default(0) %}\n{% set attachmove2_y = printer["gcode_macro _User_Variables"].attachmove2_y|default(0) %}\n{% set attachmove2_z = printer["gcode_macro _User_Variables"].attachmove2_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n_entry_point function=Attach_Probe\n\n{% if bypass_probe_docking == False %}\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n_KlickyDebug msg="Attach_Probe Axis homed"\n\n\n{% elif not probe_attached and not probe_lock %}\n_KlickyDebug msg="Attach_Probe going to attach probe"\n{% if verbose %}\n{ action_respond_info("Attaching Probe") }\n{% endif %}\n_KLICKY_STATUS_BUSY\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% if not enable_z_hop %}\n_KlickyDebug msg="Attach_Probe z_hop disabled"\n{% set safe_z = 0 %}\n{% endif %}\n{% endif %}\n\n\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero, duplicate?") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Umbilical_Path\n\n_entry_point function=Attach_Probe_intern\n\n\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n_DeployKlickyDock\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}"\nG0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}\n\n_RetractKlickyDock\n\n{% if ((printer.gcode_move.gcode_position.z < safe_z) or (docklocation_z != -128 and docklocation_z < safe_z ))%}\n_KlickyDebug msg="Attach_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\n_CheckProbe action=attach\n\n_exit_point function=Attach_Probe_intern move={goback}\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe locked not attaching probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already attached!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe already attached, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Attach_Probe\n{% else %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}', 'description': 'Attaches Klicky Probe'}, 'gcode_macro dock_probe': {'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n{% if bypass_probe_docking == True %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}\n\n{% if bypass_probe_docking != True %}\n_entry_point function=Dock_Probe\n\n\n{% if probe_attached and not probe_lock %}\n_KLICKY_STATUS_BUSY\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Dock_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n_Umbilical_Path\n\n\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n\n_DeployKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\n\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}"\nG0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}\n{% endif %}\n\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}\n\n\n_RetractKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving away from the dock to G0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}\n\n\n{% if (printer.gcode_move.gcode_position.z < safe_z) %}\n_KlickyDebug msg="Dock_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\nG4 P1000\n_CheckProbe action=dock\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe locked not docking probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already docked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe already docked, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Dock_Probe move={goback}\n{% else %}\n_KlickyDebug msg="Dock_Probe probe docking bypassed, doing nothing"\n{% endif %}', 'description': 'Docks Klicky Probe'}, 'gcode_macro probe_calibrate': {'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_calibrate Axis homed"\n_KlickyDebug msg="probe_calibrate Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_CALIBRATE with the probe above the BED, check klicky_variables bed size!") }\n{% endif %}\n\n{% if bypass_probe_docking == False %}\n_CheckProbe action=query\nG90\nAttach_Probe back=1\n_KLICKY_STATUS_CALIBRATING_Z\n\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nM118 moving the toolhead 20 mm from the bed\n_KlickyDebug msg="probe_calibrate Moving Z up by 20mm"\nTESTZ Z=20\nM118 remove manually the probe and continue calibration\n_KLICKY_STATUS_READY\n{% else %}\n_KLICKY_STATUS_CALIBRATING_Z\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n_KLICKY_STATUS_READY\n{% endif %}', 'rename_existing': '_PROBE_CALIBRATE', 'description': 'Calibrate the probes z_offset with klicky automount'}, 'gcode_macro probe_accuracy': {'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_accuracy Axis homed"\n_KlickyDebug msg="probe_accuracy Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n_entry_point function=PROBE_ACCURACY\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_ACCURACY with the probe above the BED, check klicky_variables bed size!") }\n{% endif%}\n\n_CheckProbe action=query\nAttach_Probe back=1\n\n_KlickyDebug msg="probe_accuracy calling klipper probe accuracy"\n_PROBE_ACCURACY {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nDock_Probe back=1\n\n_exit_point function=PROBE_ACCURACY move=1', 'rename_existing': '_PROBE_ACCURACY', 'description': 'Probe Z-height accuracy at current XY position with klicky automount'}, 'force_move': {'enable_force_move': True}, 'homing_override': {'axes': 'xyz', 'gcode': '\n\n_User_Variables\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n{% set kinematic_z = 0 %}\n{% set dock_on_zhome = printer["gcode_macro _User_Variables"].dock_on_zhome|default(True) %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set home_backoff_x = printer["gcode_macro _User_Variables"].home_backoff_x|default(0) %}\n{% set home_backoff_y = printer["gcode_macro _User_Variables"].home_backoff_y|default(0) %}\n{% set override_homing = printer["gcode_macro _User_Variables"].override_homing|default(\'\') %}\n\n\n_klicky_check_variables_version\n\n_CheckProbe action=query\n\n\n{% set home_x, home_y, home_z, leave_probe_attached = False, False, False, False %}\n\n{% if \'PROBE_LOCK\' in params%}\n{% if verbose %}\n{ action_respond_info("PROBE_LOCK = True") }\n{% endif %}\n{% set leave_probe_attached = True %}\n{% endif %}\n\n\n{% if not \'X\' in params\nand not \'Y\' in params\nand not \'Z\' in params %}\n\n{% set home_x, home_y, home_z = True, True, True %}\n_KlickyDebug msg="homing_override goint to home all axes"\n\n{% else %}\n{% if \'X\' in params %}\n{% set home_x = True %}\n_KlickyDebug msg="homing_override goint to home X"\n\n{% endif %}\n\n{% if \'Y\' in params %}\n{% set home_y = True %}\n_KlickyDebug msg="homing_override goint to home Y"\n{% endif %}\n\n{% if \'Z\' in params %}\n{% set home_z = True %}\n_KlickyDebug msg="homing_override goint to home Z"\n{% endif %}\n\n{% if \'X\' in params\nand \'Y\' in params\nand \'Z\' in params %}\n\n\n_Homing_Variables reset=1\n_KlickyDebug msg="homing_override goint to home all axes"\n{% endif %}\n\n{% endif %}\n\n_entry_point function=homing_override\n_KLICKY_STATUS_HOMING\n\n\n{% if \'z\' not in printer.toolhead.homed_axes %}\n{% if enable_z_hop == False %}\n_KlickyDebug msg="homing_override z_hop disabled"\n\n{% set kinematic_z = safe_z %}\n{% set safe_z = safe_z %}\n{% endif %}\n{% endif %}\n\n\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes and \'z\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("No axis homed") }\n{% endif %}\n_KlickyDebug msg="homing_override no axis homed, setting position as X=Y=0 Z={kinematic_z}"\nSET_KINEMATIC_POSITION X=0 Y=0 Z={kinematic_z}\nM400\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% if home_z != True %}\n_KlickyDebug msg="homing_override clearing axis homed state if not already homing Z"\nM84\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("X or Y not homed, forcing full G28") }\n{% endif %}\n{% set home_x, home_y, home_z = True, True, True %}\n{% endif %}\n{% endif %}\n\n\n{% if ((attachmove_y == 0 and override_homing == \'\' ) or (override_homing == \'Y\'))%}\n\n{% if home_y %}\n{% if override_homing == \'Y\' %}\n_KlickyDebug msg="homing_override Y homing first override, due to override_homing = Y"\n{% else %}\n_KlickyDebug msg="homing_override Y homing first override, due to attachmove_y = 0"\n{% endif %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y G28 Y0"\nG28 Y0\n\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop-home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n{% set home_y = False %}\n{% endif %}\n\n\n\n{% if home_x %}\n{% if verbose %}\n{ action_respond_info("Homing X") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in X homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_X"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_X external script to handle the X homing"\n_HOME_X\n{% else %}\n_KlickyDebug msg="homing_override Homing X, G28 X0"\nG28 X0\n\n{% if home_backoff_x != 0 %}\n{% if (printer.configfile.settings.stepper_x.position_endstop > (printer.configfile.settings.stepper_x.position_min|default(0) + printer.configfile.settings.stepper_x.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n\n{% if home_y %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y, G28 Y0"\nG28 Y0\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if verbose %}\n{ action_respond_info("Homing Z") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe configured as a virtual Z endstop attaching probe"\nAttach_Probe\n\n{% if leave_probe_attached %}\n_Probe_Lock\n{% endif %}\n{% elif dock_on_zhome == True %}\nDock_Probe\n{% endif %}\n\n_Home_Z_\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe no longer required, docking probe"\nDock_Probe\n{% elif dock_on_zhome == False %}\nDock_Probe\n{% endif %}\n{% endif %}\n_CheckProbe action=query\n\n\n_Park_Toolhead\n\n_exit_point function=homing_override\n_KLICKY_STATUS_READY'}, 'gcode_macro _umbilical_path': {'gcode': '\n{% set umbilical = printer["gcode_macro _User_Variables"].umbilical %}\n{% set umbilical_x = printer["gcode_macro _User_Variables"].umbilical_x %}\n{% set umbilical_y = printer["gcode_macro _User_Variables"].umbilical_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n\n{% if umbilical %}\n\n_entry_point function=Umbilical_Path\n\n_KlickyDebug msg="_Umbilical_Path moving to G0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}"\nG0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}\n\n_exit_point function=Umbilical_Path\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _home_z_': {'gcode': '\n{% set z_endstop_x = printer["gcode_macro _Probe_Variables"].z_endstop_x %}\n{% set z_endstop_y = printer["gcode_macro _Probe_Variables"].z_endstop_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}    {% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Home_Z\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n{% else %}\n_KlickyDebug msg="_Home_Z_ XY Axis homed"\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="_Home_Z_ Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n\n\n_KlickyDebug msg="_Home_Z_ moving to Z endstop position G0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}"\nG0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}\n_KlickyDebug msg="_Home_Z_ Homing Z G28 Z"\nG28 Z0\n_KlickyDebug msg="_Home_Z_ toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_exit_point function=Home_Z', 'description': 'G-Code macro'}, 'gcode_macro _checkprobe': {'gcode': '\nQuery_Probe\n_SetProbeState action={ params.ACTION }', 'description': 'G-Code macro', 'variable_probe_state': '0'}, 'gcode_macro _setprobestate': {'gcode': '\n{% set query_probe_triggered = printer.probe.last_query %}\n{% set action  = params.ACTION|default(\'\') %}\n\n\n{% if query_probe_triggered %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ False }\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ True }\n{% endif %}\n\n{% if action == \'query\' %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_state VALUE={ query_probe_triggered }\n{% endif %}\n\n\n\n\n{% if not query_probe_triggered and action == \'dock\' %}\n{ action_raise_error("Probe dock failed!") }\n{% endif %}\n\n\n{% if query_probe_triggered and action == \'attach\' %}\n{ action_raise_error("Probe attach failed!") }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _park_toolhead': {'gcode': '\n{% set park_toolhead = printer["gcode_macro _User_Variables"].park_toolhead %}\n{% set parkposition_x = printer["gcode_macro _User_Variables"].parkposition_x %}\n{% set parkposition_y = printer["gcode_macro _User_Variables"].parkposition_y %}\n{% set parkposition_z = printer["gcode_macro _User_Variables"].parkposition_z %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Park_Toolhead\n\n{% if park_toolhead and \'xyz\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Parking Toolhead") }\n{% endif %}\n{% if parkposition_z == -128 %}\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}\n\n{% else %}\n\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}\n\n{% endif %}\n\n{% endif %}\n_exit_point function=Park_Toolhead', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_ready': {'gcode': '\n{% if printer[\'gcode_macro status_ready\'] is defined %}\n_KlickyDebug msg="_klicky_status_ready activating the LED STATUS_READY"\nSTATUS_READY\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_busy': {'gcode': '\n{% if printer[\'gcode_macro status_busy\'] is defined %}\n_KlickyDebug msg="_klicky_status_busy activating the LED STATUS_BUSY"\nSTATUS_BUSY\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_leveling': {'gcode': '\n{% if printer[\'gcode_macro status_leveling\'] is defined %}\n_KlickyDebug msg="_klicky_status_leveling activating the LED STATUS_LEVELING"\nSTATUS_LEVELING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_homing': {'gcode': '\n{% if printer[\'gcode_macro status_homing\'] is defined %}\n_KlickyDebug msg="_klicky_status_homing activating the LED STATUS_HOMING"\nSTATUS_HOMING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_cleaning': {'gcode': '\n{% if printer[\'gcode_macro status_cleaning\'] is defined %}\n_KlickyDebug msg="_klicky_status_cleaning activating the LED STATUS_CLEANING"\nSTATUS_CLEANING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_meshing': {'gcode': '\n{% if printer[\'gcode_macro status_meshing\'] is defined %}\n_KlickyDebug msg="_klicky_status_meshing activating the LED STATUS_MESHING"\nSTATUS_MESHING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_calibrating_z': {'gcode': '\n{% if printer[\'gcode_macro status_calibrating_z\'] is defined %}\n_KlickyDebug msg="_klicky_status_calibrating_z activating the LED STATUS_CALIBRATING_Z"\nSTATUS_CALIBRATING_Z\n{% endif %}', 'description': 'G-Code macro'}, 'z_calibration': {'switch_offset': 0.09, 'offset_margins': '-1.0,1.0', 'speed': 50.0, 'samples_result': 'none', 'probing_first_fast': False, 'nozzle_xy_position': '172, 301', 'switch_xy_position': '171.5, 282', 'bed_xy_position': '150, 150', 'start_gcode': 'Attach_Probe', 'before_switch_gcode': '', 'end_gcode': 'Dock_Probe'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': '^PG6', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'PG9', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 303.5, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PF11', 'dir_pin': '!PG3', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG5', 'endstop_pin': 'PG10', 'position_endstop': -0.5, 'position_min': -4.5, 'position_max': 290.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA0'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PF9', 'dir_pin': '!PF10', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG2'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF4', 'min_temp': 10.0, 'max_temp': 270.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 26.572, 'pid_ki': 2.036, 'pid_kd': 86.691, 'heater_pin': 'PA1', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PC13', 'pressure_advance': 0.05, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'PF0', 'rotation_distance': 22.86038271, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 55.196, 'pid_ki': 2.091, 'pid_kd': 364.295, 'heater_pin': 'PA2', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'probe': {'z_offset': 0.0, 'deactivate_on_each_sample': True, 'activate_gcode': '', 'deactivate_gcode': '', 'pin': 'PG15', 'speed': 10.0, 'lift_speed': 10.0, 'x_offset': 0.0, 'y_offset': 25.0, 'samples': 5, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.006, 'samples_tolerance_retries': 3}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE5', 'fan_speed': 1.0}, 'controller_fan controller_fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD12', 'fan_speed': 1.0, 'idle_speed': 1.0, 'idle_timeout': 30, 'heater': ['heater_bed']}, 'heater_fan exhaust_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 5.0, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13', 'fan_speed': 1.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PD15', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 1.0, 'maximum_mcu_duration': 0.0, 'value': 1.0, 'shutdown_value': 0.0}, 'neopixel headlight': {'pin': 'PB0', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 0.0, 'initial_green': 0.2157, 'initial_blue': 1.0, 'initial_white': 0.0}, 'temperature_sensor chamber_temp': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF5', 'min_temp': 0.0, 'max_temp': 100.0, 'gcode_id': 'chamber_th'}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [150.0, 348.0], [350.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 5.0], [150.0, 245.0], [270.0, 5.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'gcode_macro _user_variables': {'gcode': '\n{% set Mx = printer[\'configfile\'].config["stepper_x"]["position_max"]|float %}\n{% set My = printer[\'configfile\'].config["stepper_y"]["position_max"]|float %}\n{% set Ox = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set Oy = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set Oz = printer[\'configfile\'].config["probe"]["z_offset"]|float %}\n\n\n{% if z_endstop_x != 0 or z_endstop_y != 0 %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ z_endstop_x }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ z_endstop_y }\n\n\n{% else %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ (Mx * 0.5) - Ox }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ (My * 0.5) - Oy }\n{% endif %}', 'description': 'G-Code macro', 'variable_verbose': 'True', 'variable_debug': 'False', 'variable_travel_speed': '200', 'variable_move_accel': '1000', 'variable_dock_speed': '50', 'variable_release_speed': '75', 'variable_z_drop_speed': '20', 'variable_safe_z': '25', 'variable_enable_z_hop': 'True', 'variable_max_bed_y': '300', 'variable_max_bed_x': '300', 'variable_z_endstop_x': '172', 'variable_z_endstop_y': '301', 'variable_docklocation_x': '40.5', 'variable_docklocation_y': '303.5', 'variable_docklocation_z': '-128', 'variable_enable_dock_servo': 'False', 'variable_servo_name': "'NAME'", 'variable_servo_deploy': '10', 'variable_servo_retract': '11', 'variable_servo_delay': '250', 'variable_dockmove_x': '40', 'variable_dockmove_y': '0', 'variable_dockmove_z': '0', 'variable_attachmove_x': '0', 'variable_attachmove_y': '30', 'variable_attachmove_z': '0', 'variable_umbilical': 'False', 'variable_umbilical_x': '15', 'variable_umbilical_y': '15', 'variable_park_toolhead': 'False', 'variable_parkposition_x': '125', 'variable_parkposition_y': '125', 'variable_parkposition_z': '30', 'variable_version': '1', 'variable_attachmove2_x': '0', 'variable_attachmove2_y': '0', 'variable_attachmove2_z': '0', 'variable_home_backoff_x': '10', 'variable_home_backoff_y': '10', 'variable_override_homing': "''", 'variable_dock_on_zhome': 'True'}, 'gcode_macro print_start': {'gcode': '\nM117 Homing...\nG28\nZ_TILT_ADJUST\nG28\n\n\n\n\n\n\n\nG0 X150 Y150 Z30 F3600', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1500.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-02-15 20:59:37,302 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-15 20:59:37,303 [printer.py:reinit()] - Klipper version: v0.12.0-103-g6ce6fbbc-dirty
2024-02-15 20:59:37,303 [printer.py:reinit()] - # Extruders: 1
2024-02-15 20:59:37,303 [printer.py:reinit()] - # Temperature devices: 2
2024-02-15 20:59:37,303 [printer.py:reinit()] - # Fans: 4
2024-02-15 20:59:37,303 [printer.py:reinit()] - # Output pins: 1
2024-02-15 20:59:37,303 [printer.py:reinit()] - # Leds: 1
2024-02-15 20:59:37,315 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2024-02-15 20:59:37,316 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-02-15 20:59:37,594 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor chamber_temp&fan&controller_fan controller_fan&heater_fan hotend_fan&heater_fan exhaust_fan&output_pin caselight&neopixel headlight
2024-02-15 20:59:37,597 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-02-15 20:59:37,598 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-02-15 20:59:37,599 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-02-15 20:59:37,600 [screen.py:init_klipper()] - Printer initialized
2024-02-15 20:59:37,600 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2024-02-15 20:59:37,600 [printer.py:change_state()] - Adding callback for state: ready
2024-02-15 20:59:37,603 [screen.py:show_panel()] - Reinitializing panel
2024-02-15 20:59:37,660 [main_menu.py:__init__()] - ### Making MainMenu
2024-02-15 20:59:37,666 [main_menu.py:add_device()] - Adding device: extruder
2024-02-15 20:59:37,671 [main_menu.py:add_device()] - Adding device: heater_bed
2024-02-15 20:59:37,677 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber_temp
2024-02-15 20:59:37,702 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-02-15 20:59:37,713 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-02-15 20:59:37,723 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'temperature_sensor chamber_temp', 'extruder']
2024-02-15 20:59:37,732 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2024-02-15 20:59:37,734 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-02-15 20:59:54,239 [screen.py:show_panel()] - Reinitializing panel
2024-02-15 20:59:54,317 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > extrude
2024-02-15 20:59:55,637 [screen.py:show_popup_message()] - error: Macro UNLOAD_FILAMENT not found
2024-02-15 20:59:57,082 [screen.py:show_popup_message()] - error: Macro LOAD_FILAMENT not found
2024-02-15 20:59:58,596 [extrude.py:change_speed()] - ### Speed 25
2024-02-15 20:59:59,125 [screen.py:show_popup_message()] - error: Macro UNLOAD_FILAMENT not found
2024-02-15 21:00:01,277 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M83
2024-02-15 21:00:01,279 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G1 E-10 F1500'}
2024-02-15 21:00:07,429 [extrude.py:change_distance()] - ### Distance 25
2024-02-15 21:00:07,886 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M83
2024-02-15 21:00:07,887 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G1 E-25 F1500'}
2024-02-15 21:00:14,773 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M83
2024-02-15 21:00:14,774 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G1 E-25 F1500'}
2024-02-15 21:00:17,065 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M83
2024-02-15 21:00:17,067 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G1 E-25 F1500'}
2024-02-15 21:02:14,685 [extrude.py:change_speed()] - ### Speed 1
2024-02-15 21:02:47,130 [screen.py:_menu_go_back()] - #### Menu go back
2024-02-15 21:02:47,167 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-02-15 21:02:48,712 [screen.py:_go_to_submenu()] - #### Go to submenu more
2024-02-15 21:02:48,713 [screen.py:_go_to_submenu()] - #### Menu __main
2024-02-15 21:02:48,716 [screen.py:_load_panel()] - Loading panel: menu
2024-02-15 21:02:48,896 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more
2024-02-15 21:02:48,899 [menu.py:arrangeMenuItems()] - X > more bedlevel
2024-02-15 21:02:48,901 [menu.py:arrangeMenuItems()] - X > more bedmesh
2024-02-15 21:02:48,906 [menu.py:arrangeMenuItems()] - X > more retraction
2024-02-15 21:02:48,918 [menu.py:arrangeMenuItems()] - X > more power
2024-02-15 21:02:48,920 [menu.py:arrangeMenuItems()] - X > more camera
2024-02-15 21:02:48,925 [menu.py:arrangeMenuItems()] - X > more input_shaper
2024-02-15 21:02:48,932 [menu.py:arrangeMenuItems()] - X > more spoolman
2024-02-15 21:02:49,689 [screen.py:_load_panel()] - Loading panel: fan
2024-02-15 21:02:49,693 [fan.py:add_fan()] - Adding fan: fan
2024-02-15 21:02:49,704 [fan.py:add_fan()] - Adding fan: controller_fan controller_fan
2024-02-15 21:02:49,714 [fan.py:add_fan()] - Adding fan: heater_fan hotend_fan
2024-02-15 21:02:49,722 [fan.py:add_fan()] - Adding fan: heater_fan exhaust_fan
2024-02-15 21:02:49,744 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more > fan
2024-02-15 21:02:51,728 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M106 S252
2024-02-15 21:02:54,238 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M106 S0
2024-02-15 21:02:54,622 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M106 S255
2024-02-15 21:06:39,537 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-02-15 21:06:39,537 [printer.py:change_state()] - Adding callback for state: disconnected
2024-02-15 21:06:39,539 [screen.py:state_disconnected()] - ### Going to disconnected
2024-02-15 21:06:39,539 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-15 21:06:39,543 [screen.py:show_panel()] - Reinitializing panel
2024-02-15 21:06:39,604 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-02-15 21:06:43,261 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-15 21:06:43,270 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2024-02-15 21:06:43,271 [printer.py:configure_cameras()] - Cameras: []
2024-02-15 21:06:43,272 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'octoprint_compat', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 3, 'moonraker_version': 'v0.8.0-310-g67c98f6', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-02-15 21:06:43,284 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2024-02-15 21:06:43,536 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2024-02-15 21:06:43,539 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro _Probe_Variables': {'variable_probe_attached': 'False', 'variable_probe_state': 'False', 'variable_probe_lock': 'False', 'variable_probe_z_homed': 'False', 'variable_z_endstop_x': '0', 'variable_z_endstop_y': '0', 'gcode': ''}, 'gcode_macro _klicky_check_variables_version': {'gcode': '\n{% set version = printer["gcode_macro _User_Variables"].version|default(0) %}\n\n{% if version != 1 %}\n{ action_raise_error("Please update your klicky variables, there are some functionality changes") }\n{% endif %}'}, 'gcode_macro _KlickyDebug': {'gcode': '\n{% set message  = params.MSG %}\n{% set debug = printer["gcode_macro _User_Variables"].debug|default(False) %}\n\n{% if debug %}\n{ action_respond_info(message) }\n{% endif %}'}, 'gcode_macro _exit_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move  = params.MOVE|default(0) %}\n{% set speed = printer["gcode_macro _User_Variables"].travel_speed %}\n\n\nM400\nSET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\nRESTORE_GCODE_STATE NAME={function} MOVE={move} MOVE_SPEED={speed}'}, 'gcode_macro _entry_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move_accel = printer["gcode_macro _User_Variables"].move_accel|default(1000) %}\n\nM400\nSAVE_GCODE_STATE NAME={function}\n\nSET_GCODE_OFFSET Z=0\n\nG90\n\nSET_VELOCITY_LIMIT ACCEL={move_accel}'}, 'gcode_macro _Homing_Variables': {'gcode': '\n{% set reset  = params.RESET|default(0) %}\n{% if reset %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }\n{% endif %}'}, 'gcode_macro Attach_Probe_Lock': {'description': 'Attaches Klicky Probe, can only be docked after unlocking', 'gcode': '\nAttach_Probe\n_Probe_Lock'}, 'gcode_macro Dock_Probe_Unlock': {'description': 'Docks Klicky Probe even if it was locked', 'gcode': '\n_Probe_Unlock\nDock_Probe'}, 'gcode_macro _Probe_Unlock': {'description': 'Unlocks Klicky Probe state', 'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to False"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }'}, 'gcode_macro _Probe_Lock': {'description': 'Locks Klicky Probe state', 'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to True"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ True }'}, 'gcode_macro _DeployKlickyDock': {'description': 'Deploys Klicky servo-controlled dock', 'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_deploy = printer["gcode_macro _User_Variables"].servo_deploy|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_DeployKlickyDock Klicky servo configuration enabled"\n{% if servo_deploy == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo deploy angle specified") }\n{% endif %}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _DeployDock"] is defined %}\n_KlickyDebug msg="_DeployKlickyDock calling _DeployDock"\n_DeployDock\n{% endif %}'}, 'gcode_macro _RetractKlickyDock': {'description': 'Retracts Klicky servo-controlled dock', 'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_retract = printer["gcode_macro _User_Variables"].servo_retract|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_RetractKlickyDock Klicky servo configuration enabled"\n{% if servo_retract == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo retract angle specified") }\n{% endif %}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _RetractDock"] is defined %}\n_KlickyDebug msg="_RetractKlickyDock calling _RetractDock"\n_RetractDock\n{% endif %}'}, 'gcode_macro Attach_Probe': {'description': 'Attaches Klicky Probe', 'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set attachmove2_x = printer["gcode_macro _User_Variables"].attachmove2_x|default(0) %}\n{% set attachmove2_y = printer["gcode_macro _User_Variables"].attachmove2_y|default(0) %}\n{% set attachmove2_z = printer["gcode_macro _User_Variables"].attachmove2_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n_entry_point function=Attach_Probe\n\n{% if bypass_probe_docking == False %}\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n_KlickyDebug msg="Attach_Probe Axis homed"\n\n\n{% elif not probe_attached and not probe_lock %}\n_KlickyDebug msg="Attach_Probe going to attach probe"\n{% if verbose %}\n{ action_respond_info("Attaching Probe") }\n{% endif %}\n_KLICKY_STATUS_BUSY\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% if not enable_z_hop %}\n_KlickyDebug msg="Attach_Probe z_hop disabled"\n{% set safe_z = 0 %}\n{% endif %}\n{% endif %}\n\n\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero, duplicate?") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Umbilical_Path\n\n_entry_point function=Attach_Probe_intern\n\n\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n_DeployKlickyDock\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}"\nG0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}\n\n_RetractKlickyDock\n\n{% if ((printer.gcode_move.gcode_position.z < safe_z) or (docklocation_z != -128 and docklocation_z < safe_z ))%}\n_KlickyDebug msg="Attach_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\n_CheckProbe action=attach\n\n_exit_point function=Attach_Probe_intern move={goback}\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe locked not attaching probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already attached!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe already attached, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Attach_Probe\n{% else %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}'}, 'gcode_macro Dock_Probe': {'description': 'Docks Klicky Probe', 'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n{% if bypass_probe_docking == True %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}\n\n{% if bypass_probe_docking != True %}\n_entry_point function=Dock_Probe\n\n\n{% if probe_attached and not probe_lock %}\n_KLICKY_STATUS_BUSY\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Dock_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n_Umbilical_Path\n\n\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n\n_DeployKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\n\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}"\nG0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}\n{% endif %}\n\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}\n\n\n_RetractKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving away from the dock to G0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}\n\n\n{% if (printer.gcode_move.gcode_position.z < safe_z) %}\n_KlickyDebug msg="Dock_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\nG4 P1000\n_CheckProbe action=dock\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe locked not docking probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already docked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe already docked, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Dock_Probe move={goback}\n{% else %}\n_KlickyDebug msg="Dock_Probe probe docking bypassed, doing nothing"\n{% endif %}'}, 'gcode_macro PROBE_CALIBRATE': {'rename_existing': '_PROBE_CALIBRATE', 'description': 'Calibrate the probes z_offset with klicky automount', 'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_calibrate Axis homed"\n_KlickyDebug msg="probe_calibrate Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_CALIBRATE with the probe above the BED, check klicky_variables bed size!") }\n{% endif %}\n\n{% if bypass_probe_docking == False %}\n_CheckProbe action=query\nG90\nAttach_Probe back=1\n_KLICKY_STATUS_CALIBRATING_Z\n\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nM118 moving the toolhead 20 mm from the bed\n_KlickyDebug msg="probe_calibrate Moving Z up by 20mm"\nTESTZ Z=20\nM118 remove manually the probe and continue calibration\n_KLICKY_STATUS_READY\n{% else %}\n_KLICKY_STATUS_CALIBRATING_Z\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n_KLICKY_STATUS_READY\n{% endif %}'}, 'gcode_macro PROBE_ACCURACY': {'rename_existing': '_PROBE_ACCURACY', 'description': 'Probe Z-height accuracy at current XY position with klicky automount', 'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_accuracy Axis homed"\n_KlickyDebug msg="probe_accuracy Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n_entry_point function=PROBE_ACCURACY\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_ACCURACY with the probe above the BED, check klicky_variables bed size!") }\n{% endif%}\n\n_CheckProbe action=query\nAttach_Probe back=1\n\n_KlickyDebug msg="probe_accuracy calling klipper probe accuracy"\n_PROBE_ACCURACY {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nDock_Probe back=1\n\n_exit_point function=PROBE_ACCURACY move=1'}, 'force_move': {'enable_force_move': 'True'}, 'homing_override': {'axes': 'xyz', 'gcode': '\n\n_User_Variables\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n{% set kinematic_z = 0 %}\n{% set dock_on_zhome = printer["gcode_macro _User_Variables"].dock_on_zhome|default(True) %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set home_backoff_x = printer["gcode_macro _User_Variables"].home_backoff_x|default(0) %}\n{% set home_backoff_y = printer["gcode_macro _User_Variables"].home_backoff_y|default(0) %}\n{% set override_homing = printer["gcode_macro _User_Variables"].override_homing|default(\'\') %}\n\n\n_klicky_check_variables_version\n\n_CheckProbe action=query\n\n\n{% set home_x, home_y, home_z, leave_probe_attached = False, False, False, False %}\n\n{% if \'PROBE_LOCK\' in params%}\n{% if verbose %}\n{ action_respond_info("PROBE_LOCK = True") }\n{% endif %}\n{% set leave_probe_attached = True %}\n{% endif %}\n\n\n{% if not \'X\' in params\nand not \'Y\' in params\nand not \'Z\' in params %}\n\n{% set home_x, home_y, home_z = True, True, True %}\n_KlickyDebug msg="homing_override goint to home all axes"\n\n{% else %}\n{% if \'X\' in params %}\n{% set home_x = True %}\n_KlickyDebug msg="homing_override goint to home X"\n\n{% endif %}\n\n{% if \'Y\' in params %}\n{% set home_y = True %}\n_KlickyDebug msg="homing_override goint to home Y"\n{% endif %}\n\n{% if \'Z\' in params %}\n{% set home_z = True %}\n_KlickyDebug msg="homing_override goint to home Z"\n{% endif %}\n\n{% if \'X\' in params\nand \'Y\' in params\nand \'Z\' in params %}\n\n\n_Homing_Variables reset=1\n_KlickyDebug msg="homing_override goint to home all axes"\n{% endif %}\n\n{% endif %}\n\n_entry_point function=homing_override\n_KLICKY_STATUS_HOMING\n\n\n{% if \'z\' not in printer.toolhead.homed_axes %}\n{% if enable_z_hop == False %}\n_KlickyDebug msg="homing_override z_hop disabled"\n\n{% set kinematic_z = safe_z %}\n{% set safe_z = safe_z %}\n{% endif %}\n{% endif %}\n\n\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes and \'z\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("No axis homed") }\n{% endif %}\n_KlickyDebug msg="homing_override no axis homed, setting position as X=Y=0 Z={kinematic_z}"\nSET_KINEMATIC_POSITION X=0 Y=0 Z={kinematic_z}\nM400\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% if home_z != True %}\n_KlickyDebug msg="homing_override clearing axis homed state if not already homing Z"\nM84\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("X or Y not homed, forcing full G28") }\n{% endif %}\n{% set home_x, home_y, home_z = True, True, True %}\n{% endif %}\n{% endif %}\n\n\n{% if ((attachmove_y == 0 and override_homing == \'\' ) or (override_homing == \'Y\'))%}\n\n{% if home_y %}\n{% if override_homing == \'Y\' %}\n_KlickyDebug msg="homing_override Y homing first override, due to override_homing = Y"\n{% else %}\n_KlickyDebug msg="homing_override Y homing first override, due to attachmove_y = 0"\n{% endif %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y G28 Y0"\nG28 Y0\n\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop-home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n{% set home_y = False %}\n{% endif %}\n\n\n\n{% if home_x %}\n{% if verbose %}\n{ action_respond_info("Homing X") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in X homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_X"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_X external script to handle the X homing"\n_HOME_X\n{% else %}\n_KlickyDebug msg="homing_override Homing X, G28 X0"\nG28 X0\n\n{% if home_backoff_x != 0 %}\n{% if (printer.configfile.settings.stepper_x.position_endstop > (printer.configfile.settings.stepper_x.position_min|default(0) + printer.configfile.settings.stepper_x.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n\n{% if home_y %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y, G28 Y0"\nG28 Y0\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if verbose %}\n{ action_respond_info("Homing Z") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe configured as a virtual Z endstop attaching probe"\nAttach_Probe\n\n{% if leave_probe_attached %}\n_Probe_Lock\n{% endif %}\n{% elif dock_on_zhome == True %}\nDock_Probe\n{% endif %}\n\n_Home_Z_\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe no longer required, docking probe"\nDock_Probe\n{% elif dock_on_zhome == False %}\nDock_Probe\n{% endif %}\n{% endif %}\n_CheckProbe action=query\n\n\n_Park_Toolhead\n\n_exit_point function=homing_override\n_KLICKY_STATUS_READY'}, 'gcode_macro _Umbilical_Path': {'gcode': '\n{% set umbilical = printer["gcode_macro _User_Variables"].umbilical %}\n{% set umbilical_x = printer["gcode_macro _User_Variables"].umbilical_x %}\n{% set umbilical_y = printer["gcode_macro _User_Variables"].umbilical_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n\n{% if umbilical %}\n\n_entry_point function=Umbilical_Path\n\n_KlickyDebug msg="_Umbilical_Path moving to G0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}"\nG0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}\n\n_exit_point function=Umbilical_Path\n{% endif %}'}, 'gcode_macro _Home_Z_': {'gcode': '\n{% set z_endstop_x = printer["gcode_macro _Probe_Variables"].z_endstop_x %}\n{% set z_endstop_y = printer["gcode_macro _Probe_Variables"].z_endstop_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}    {% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Home_Z\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n{% else %}\n_KlickyDebug msg="_Home_Z_ XY Axis homed"\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="_Home_Z_ Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n\n\n_KlickyDebug msg="_Home_Z_ moving to Z endstop position G0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}"\nG0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}\n_KlickyDebug msg="_Home_Z_ Homing Z G28 Z"\nG28 Z0\n_KlickyDebug msg="_Home_Z_ toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_exit_point function=Home_Z'}, 'gcode_macro _CheckProbe': {'variable_probe_state': '0', 'gcode': '\nQuery_Probe\n_SetProbeState action={ params.ACTION }'}, 'gcode_macro _SetProbeState': {'gcode': '\n{% set query_probe_triggered = printer.probe.last_query %}\n{% set action  = params.ACTION|default(\'\') %}\n\n\n{% if query_probe_triggered %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ False }\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ True }\n{% endif %}\n\n{% if action == \'query\' %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_state VALUE={ query_probe_triggered }\n{% endif %}\n\n\n\n\n{% if not query_probe_triggered and action == \'dock\' %}\n{ action_raise_error("Probe dock failed!") }\n{% endif %}\n\n\n{% if query_probe_triggered and action == \'attach\' %}\n{ action_raise_error("Probe attach failed!") }\n{% endif %}'}, 'gcode_macro _Park_Toolhead': {'gcode': '\n{% set park_toolhead = printer["gcode_macro _User_Variables"].park_toolhead %}\n{% set parkposition_x = printer["gcode_macro _User_Variables"].parkposition_x %}\n{% set parkposition_y = printer["gcode_macro _User_Variables"].parkposition_y %}\n{% set parkposition_z = printer["gcode_macro _User_Variables"].parkposition_z %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Park_Toolhead\n\n{% if park_toolhead and \'xyz\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Parking Toolhead") }\n{% endif %}\n{% if parkposition_z == -128 %}\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}\n\n{% else %}\n\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}\n\n{% endif %}\n\n{% endif %}\n_exit_point function=Park_Toolhead'}, 'gcode_macro _klicky_status_ready': {'gcode': '\n{% if printer[\'gcode_macro status_ready\'] is defined %}\n_KlickyDebug msg="_klicky_status_ready activating the LED STATUS_READY"\nSTATUS_READY\n{% endif %}'}, 'gcode_macro _klicky_status_busy': {'gcode': '\n{% if printer[\'gcode_macro status_busy\'] is defined %}\n_KlickyDebug msg="_klicky_status_busy activating the LED STATUS_BUSY"\nSTATUS_BUSY\n{% endif %}'}, 'gcode_macro _klicky_status_leveling': {'gcode': '\n{% if printer[\'gcode_macro status_leveling\'] is defined %}\n_KlickyDebug msg="_klicky_status_leveling activating the LED STATUS_LEVELING"\nSTATUS_LEVELING\n{% endif %}'}, 'gcode_macro _klicky_status_homing': {'gcode': '\n{% if printer[\'gcode_macro status_homing\'] is defined %}\n_KlickyDebug msg="_klicky_status_homing activating the LED STATUS_HOMING"\nSTATUS_HOMING\n{% endif %}'}, 'gcode_macro _klicky_status_cleaning': {'gcode': '\n{% if printer[\'gcode_macro status_cleaning\'] is defined %}\n_KlickyDebug msg="_klicky_status_cleaning activating the LED STATUS_CLEANING"\nSTATUS_CLEANING\n{% endif %}'}, 'gcode_macro _klicky_status_meshing': {'gcode': '\n{% if printer[\'gcode_macro status_meshing\'] is defined %}\n_KlickyDebug msg="_klicky_status_meshing activating the LED STATUS_MESHING"\nSTATUS_MESHING\n{% endif %}'}, 'gcode_macro _klicky_status_calibrating_z': {'gcode': '\n{% if printer[\'gcode_macro status_calibrating_z\'] is defined %}\n_KlickyDebug msg="_klicky_status_calibrating_z activating the LED STATUS_CALIBRATING_Z"\nSTATUS_CALIBRATING_Z\n{% endif %}'}, 'z_calibration': {'nozzle_xy_position': '172, 301', 'switch_xy_position': '171.5, 282', 'bed_xy_position': '150, 150', 'switch_offset': '0.09', 'offset_margins': '-1.0,1.0', 'speed': '50', 'probing_first_fast': 'false', 'start_gcode': 'Attach_Probe', 'end_gcode': 'Dock_Probe'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_28003C001150535556323420-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '^PG6', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '25', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'PG9', 'position_min': '0', 'position_endstop': '300', 'position_max': '303.5', 'homing_speed': '25', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': '!PG3', 'enable_pin': '!PG5', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'PG10', 'position_endstop': '-0.5', 'position_max': '290', 'position_min': '-4.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA0', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': '!PF10', 'enable_pin': '!PG2', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PC13', 'dir_pin': 'PF0', 'enable_pin': '!PF1', 'rotation_distance': '21.9459674016', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.75', 'heater_pin': 'PA1', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF4', 'min_temp': '10', 'max_temp': '270', 'max_power': '1.0', 'min_extrude_temp': '170', 'pressure_advance': '0.05', 'pressure_advance_smooth_time': '0.040', 'control': 'pid', 'pid_kp': '26.572', 'pid_ki': '2.036', 'pid_kd': '86.691'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.5', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PA2', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF3', 'max_power': '1', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '55.196', 'pid_ki': '2.091', 'pid_kd': '364.295'}, 'probe': {'pin': 'PG15', 'x_offset': '0', 'y_offset': '25.0', 'z_offset': '0', 'speed': '10.0', 'samples': '5', 'samples_result': 'median', 'sample_retract_dist': '3.0', 'samples_tolerance': '0.006', 'samples_tolerance_retries': '3'}, 'fan': {'pin': 'PA8', 'kick_start_time': '0.5', 'off_below': '0.10'}, 'heater_fan hotend_fan': {'pin': 'PE5', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'controller_fan controller_fan': {'pin': 'PD12', 'kick_start_time': '0.5', 'heater': 'heater_bed'}, 'heater_fan exhaust_fan': {'pin': 'PD13', 'max_power': '1.0', 'shutdown_speed': '0.0', 'kick_start_time': '5.0', 'heater': 'heater_bed', 'heater_temp': '60', 'fan_speed': '1.0'}, 'output_pin caselight': {'pin': 'PD15', 'pwm': 'true', 'shutdown_value': '0', 'value': '1', 'cycle_time': '0.01'}, 'neopixel headlight': {'pin': 'PB0', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '0.0', 'initial_green': '0.2157', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'temperature_sensor chamber_temp': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF5', 'min_temp': '0', 'max_temp': '100', 'gcode_id': 'chamber_th'}, 'idle_timeout': {'timeout': '1800'}, 'z_tilt': {'z_positions': '\n-50, 18\n150, 348\n350, 18', 'points': '\n30, 5\n150, 245\n270, 5', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'gcode_macro _User_Variables': {'variable_verbose': 'True', 'variable_debug': 'False', 'variable_travel_speed': '200', 'variable_move_accel': '1000', 'variable_dock_speed': '50', 'variable_release_speed': '75', 'variable_z_drop_speed': '20', 'variable_safe_z': '25', 'variable_enable_z_hop': 'True', 'variable_max_bed_y': '300', 'variable_max_bed_x': '300', 'variable_z_endstop_x': '172', 'variable_z_endstop_y': '301', 'variable_docklocation_x': '40.5', 'variable_docklocation_y': '303.5', 'variable_docklocation_z': '-128', 'variable_enable_dock_servo': 'False', 'variable_servo_name': "'NAME'", 'variable_servo_deploy': '10', 'variable_servo_retract': '11', 'variable_servo_delay': '250', 'variable_dockmove_x': '40', 'variable_dockmove_y': '0', 'variable_dockmove_z': '0', 'variable_attachmove_x': '0', 'variable_attachmove_y': '30', 'variable_attachmove_z': '0', 'variable_umbilical': 'False', 'variable_umbilical_x': '15', 'variable_umbilical_y': '15', 'variable_park_toolhead': 'False', 'variable_parkposition_x': '125', 'variable_parkposition_y': '125', 'variable_parkposition_z': '30', 'variable_version': '1', 'variable_attachmove2_x': '0', 'variable_attachmove2_y': '0', 'variable_attachmove2_z': '0', 'variable_home_backoff_x': '10', 'variable_home_backoff_y': '10', 'variable_override_homing': "''", 'variable_dock_on_zhome': 'True', 'gcode': '\n{% set Mx = printer[\'configfile\'].config["stepper_x"]["position_max"]|float %}\n{% set My = printer[\'configfile\'].config["stepper_y"]["position_max"]|float %}\n{% set Ox = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set Oy = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set Oz = printer[\'configfile\'].config["probe"]["z_offset"]|float %}\n\n\n{% if z_endstop_x != 0 or z_endstop_y != 0 %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ z_endstop_x }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ z_endstop_y }\n\n\n{% else %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ (Mx * 0.5) - Ox }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ (My * 0.5) - Oy }\n{% endif %}'}, 'gcode_macro PRINT_START': {'gcode': '\nM117 Homing...\nG28\nZ_TILT_ADJUST\nG28\n\n\n\n\n\n\n\nG0 X150 Y150 Z30 F3600'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_28003C001150535556323420-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro _probe_variables': {'gcode': '', 'description': 'G-Code macro', 'variable_probe_attached': 'False', 'variable_probe_state': 'False', 'variable_probe_lock': 'False', 'variable_probe_z_homed': 'False', 'variable_z_endstop_x': '0', 'variable_z_endstop_y': '0'}, 'gcode_macro _klicky_check_variables_version': {'gcode': '\n{% set version = printer["gcode_macro _User_Variables"].version|default(0) %}\n\n{% if version != 1 %}\n{ action_raise_error("Please update your klicky variables, there are some functionality changes") }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klickydebug': {'gcode': '\n{% set message  = params.MSG %}\n{% set debug = printer["gcode_macro _User_Variables"].debug|default(False) %}\n\n{% if debug %}\n{ action_respond_info(message) }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _exit_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move  = params.MOVE|default(0) %}\n{% set speed = printer["gcode_macro _User_Variables"].travel_speed %}\n\n\nM400\nSET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\nRESTORE_GCODE_STATE NAME={function} MOVE={move} MOVE_SPEED={speed}', 'description': 'G-Code macro'}, 'gcode_macro _entry_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move_accel = printer["gcode_macro _User_Variables"].move_accel|default(1000) %}\n\nM400\nSAVE_GCODE_STATE NAME={function}\n\nSET_GCODE_OFFSET Z=0\n\nG90\n\nSET_VELOCITY_LIMIT ACCEL={move_accel}', 'description': 'G-Code macro'}, 'gcode_macro _homing_variables': {'gcode': '\n{% set reset  = params.RESET|default(0) %}\n{% if reset %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro attach_probe_lock': {'gcode': '\nAttach_Probe\n_Probe_Lock', 'description': 'Attaches Klicky Probe, can only be docked after unlocking'}, 'gcode_macro dock_probe_unlock': {'gcode': '\n_Probe_Unlock\nDock_Probe', 'description': 'Docks Klicky Probe even if it was locked'}, 'gcode_macro _probe_unlock': {'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to False"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }', 'description': 'Unlocks Klicky Probe state'}, 'gcode_macro _probe_lock': {'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to True"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ True }', 'description': 'Locks Klicky Probe state'}, 'gcode_macro _deployklickydock': {'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_deploy = printer["gcode_macro _User_Variables"].servo_deploy|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_DeployKlickyDock Klicky servo configuration enabled"\n{% if servo_deploy == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo deploy angle specified") }\n{% endif %}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _DeployDock"] is defined %}\n_KlickyDebug msg="_DeployKlickyDock calling _DeployDock"\n_DeployDock\n{% endif %}', 'description': 'Deploys Klicky servo-controlled dock'}, 'gcode_macro _retractklickydock': {'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_retract = printer["gcode_macro _User_Variables"].servo_retract|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_RetractKlickyDock Klicky servo configuration enabled"\n{% if servo_retract == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo retract angle specified") }\n{% endif %}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _RetractDock"] is defined %}\n_KlickyDebug msg="_RetractKlickyDock calling _RetractDock"\n_RetractDock\n{% endif %}', 'description': 'Retracts Klicky servo-controlled dock'}, 'gcode_macro attach_probe': {'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set attachmove2_x = printer["gcode_macro _User_Variables"].attachmove2_x|default(0) %}\n{% set attachmove2_y = printer["gcode_macro _User_Variables"].attachmove2_y|default(0) %}\n{% set attachmove2_z = printer["gcode_macro _User_Variables"].attachmove2_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n_entry_point function=Attach_Probe\n\n{% if bypass_probe_docking == False %}\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n_KlickyDebug msg="Attach_Probe Axis homed"\n\n\n{% elif not probe_attached and not probe_lock %}\n_KlickyDebug msg="Attach_Probe going to attach probe"\n{% if verbose %}\n{ action_respond_info("Attaching Probe") }\n{% endif %}\n_KLICKY_STATUS_BUSY\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% if not enable_z_hop %}\n_KlickyDebug msg="Attach_Probe z_hop disabled"\n{% set safe_z = 0 %}\n{% endif %}\n{% endif %}\n\n\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero, duplicate?") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Umbilical_Path\n\n_entry_point function=Attach_Probe_intern\n\n\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n_DeployKlickyDock\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}"\nG0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}\n\n_RetractKlickyDock\n\n{% if ((printer.gcode_move.gcode_position.z < safe_z) or (docklocation_z != -128 and docklocation_z < safe_z ))%}\n_KlickyDebug msg="Attach_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\n_CheckProbe action=attach\n\n_exit_point function=Attach_Probe_intern move={goback}\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe locked not attaching probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already attached!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe already attached, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Attach_Probe\n{% else %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}', 'description': 'Attaches Klicky Probe'}, 'gcode_macro dock_probe': {'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n{% if bypass_probe_docking == True %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}\n\n{% if bypass_probe_docking != True %}\n_entry_point function=Dock_Probe\n\n\n{% if probe_attached and not probe_lock %}\n_KLICKY_STATUS_BUSY\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Dock_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n_Umbilical_Path\n\n\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n\n_DeployKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\n\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}"\nG0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}\n{% endif %}\n\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}\n\n\n_RetractKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving away from the dock to G0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}\n\n\n{% if (printer.gcode_move.gcode_position.z < safe_z) %}\n_KlickyDebug msg="Dock_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\nG4 P1000\n_CheckProbe action=dock\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe locked not docking probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already docked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe already docked, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Dock_Probe move={goback}\n{% else %}\n_KlickyDebug msg="Dock_Probe probe docking bypassed, doing nothing"\n{% endif %}', 'description': 'Docks Klicky Probe'}, 'gcode_macro probe_calibrate': {'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_calibrate Axis homed"\n_KlickyDebug msg="probe_calibrate Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_CALIBRATE with the probe above the BED, check klicky_variables bed size!") }\n{% endif %}\n\n{% if bypass_probe_docking == False %}\n_CheckProbe action=query\nG90\nAttach_Probe back=1\n_KLICKY_STATUS_CALIBRATING_Z\n\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nM118 moving the toolhead 20 mm from the bed\n_KlickyDebug msg="probe_calibrate Moving Z up by 20mm"\nTESTZ Z=20\nM118 remove manually the probe and continue calibration\n_KLICKY_STATUS_READY\n{% else %}\n_KLICKY_STATUS_CALIBRATING_Z\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n_KLICKY_STATUS_READY\n{% endif %}', 'rename_existing': '_PROBE_CALIBRATE', 'description': 'Calibrate the probes z_offset with klicky automount'}, 'gcode_macro probe_accuracy': {'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_accuracy Axis homed"\n_KlickyDebug msg="probe_accuracy Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n_entry_point function=PROBE_ACCURACY\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_ACCURACY with the probe above the BED, check klicky_variables bed size!") }\n{% endif%}\n\n_CheckProbe action=query\nAttach_Probe back=1\n\n_KlickyDebug msg="probe_accuracy calling klipper probe accuracy"\n_PROBE_ACCURACY {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nDock_Probe back=1\n\n_exit_point function=PROBE_ACCURACY move=1', 'rename_existing': '_PROBE_ACCURACY', 'description': 'Probe Z-height accuracy at current XY position with klicky automount'}, 'force_move': {'enable_force_move': True}, 'homing_override': {'axes': 'xyz', 'gcode': '\n\n_User_Variables\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n{% set kinematic_z = 0 %}\n{% set dock_on_zhome = printer["gcode_macro _User_Variables"].dock_on_zhome|default(True) %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set home_backoff_x = printer["gcode_macro _User_Variables"].home_backoff_x|default(0) %}\n{% set home_backoff_y = printer["gcode_macro _User_Variables"].home_backoff_y|default(0) %}\n{% set override_homing = printer["gcode_macro _User_Variables"].override_homing|default(\'\') %}\n\n\n_klicky_check_variables_version\n\n_CheckProbe action=query\n\n\n{% set home_x, home_y, home_z, leave_probe_attached = False, False, False, False %}\n\n{% if \'PROBE_LOCK\' in params%}\n{% if verbose %}\n{ action_respond_info("PROBE_LOCK = True") }\n{% endif %}\n{% set leave_probe_attached = True %}\n{% endif %}\n\n\n{% if not \'X\' in params\nand not \'Y\' in params\nand not \'Z\' in params %}\n\n{% set home_x, home_y, home_z = True, True, True %}\n_KlickyDebug msg="homing_override goint to home all axes"\n\n{% else %}\n{% if \'X\' in params %}\n{% set home_x = True %}\n_KlickyDebug msg="homing_override goint to home X"\n\n{% endif %}\n\n{% if \'Y\' in params %}\n{% set home_y = True %}\n_KlickyDebug msg="homing_override goint to home Y"\n{% endif %}\n\n{% if \'Z\' in params %}\n{% set home_z = True %}\n_KlickyDebug msg="homing_override goint to home Z"\n{% endif %}\n\n{% if \'X\' in params\nand \'Y\' in params\nand \'Z\' in params %}\n\n\n_Homing_Variables reset=1\n_KlickyDebug msg="homing_override goint to home all axes"\n{% endif %}\n\n{% endif %}\n\n_entry_point function=homing_override\n_KLICKY_STATUS_HOMING\n\n\n{% if \'z\' not in printer.toolhead.homed_axes %}\n{% if enable_z_hop == False %}\n_KlickyDebug msg="homing_override z_hop disabled"\n\n{% set kinematic_z = safe_z %}\n{% set safe_z = safe_z %}\n{% endif %}\n{% endif %}\n\n\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes and \'z\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("No axis homed") }\n{% endif %}\n_KlickyDebug msg="homing_override no axis homed, setting position as X=Y=0 Z={kinematic_z}"\nSET_KINEMATIC_POSITION X=0 Y=0 Z={kinematic_z}\nM400\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% if home_z != True %}\n_KlickyDebug msg="homing_override clearing axis homed state if not already homing Z"\nM84\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("X or Y not homed, forcing full G28") }\n{% endif %}\n{% set home_x, home_y, home_z = True, True, True %}\n{% endif %}\n{% endif %}\n\n\n{% if ((attachmove_y == 0 and override_homing == \'\' ) or (override_homing == \'Y\'))%}\n\n{% if home_y %}\n{% if override_homing == \'Y\' %}\n_KlickyDebug msg="homing_override Y homing first override, due to override_homing = Y"\n{% else %}\n_KlickyDebug msg="homing_override Y homing first override, due to attachmove_y = 0"\n{% endif %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y G28 Y0"\nG28 Y0\n\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop-home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n{% set home_y = False %}\n{% endif %}\n\n\n\n{% if home_x %}\n{% if verbose %}\n{ action_respond_info("Homing X") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in X homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_X"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_X external script to handle the X homing"\n_HOME_X\n{% else %}\n_KlickyDebug msg="homing_override Homing X, G28 X0"\nG28 X0\n\n{% if home_backoff_x != 0 %}\n{% if (printer.configfile.settings.stepper_x.position_endstop > (printer.configfile.settings.stepper_x.position_min|default(0) + printer.configfile.settings.stepper_x.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n\n{% if home_y %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y, G28 Y0"\nG28 Y0\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if verbose %}\n{ action_respond_info("Homing Z") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe configured as a virtual Z endstop attaching probe"\nAttach_Probe\n\n{% if leave_probe_attached %}\n_Probe_Lock\n{% endif %}\n{% elif dock_on_zhome == True %}\nDock_Probe\n{% endif %}\n\n_Home_Z_\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe no longer required, docking probe"\nDock_Probe\n{% elif dock_on_zhome == False %}\nDock_Probe\n{% endif %}\n{% endif %}\n_CheckProbe action=query\n\n\n_Park_Toolhead\n\n_exit_point function=homing_override\n_KLICKY_STATUS_READY'}, 'gcode_macro _umbilical_path': {'gcode': '\n{% set umbilical = printer["gcode_macro _User_Variables"].umbilical %}\n{% set umbilical_x = printer["gcode_macro _User_Variables"].umbilical_x %}\n{% set umbilical_y = printer["gcode_macro _User_Variables"].umbilical_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n\n{% if umbilical %}\n\n_entry_point function=Umbilical_Path\n\n_KlickyDebug msg="_Umbilical_Path moving to G0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}"\nG0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}\n\n_exit_point function=Umbilical_Path\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _home_z_': {'gcode': '\n{% set z_endstop_x = printer["gcode_macro _Probe_Variables"].z_endstop_x %}\n{% set z_endstop_y = printer["gcode_macro _Probe_Variables"].z_endstop_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}    {% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Home_Z\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n{% else %}\n_KlickyDebug msg="_Home_Z_ XY Axis homed"\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="_Home_Z_ Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n\n\n_KlickyDebug msg="_Home_Z_ moving to Z endstop position G0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}"\nG0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}\n_KlickyDebug msg="_Home_Z_ Homing Z G28 Z"\nG28 Z0\n_KlickyDebug msg="_Home_Z_ toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_exit_point function=Home_Z', 'description': 'G-Code macro'}, 'gcode_macro _checkprobe': {'gcode': '\nQuery_Probe\n_SetProbeState action={ params.ACTION }', 'description': 'G-Code macro', 'variable_probe_state': '0'}, 'gcode_macro _setprobestate': {'gcode': '\n{% set query_probe_triggered = printer.probe.last_query %}\n{% set action  = params.ACTION|default(\'\') %}\n\n\n{% if query_probe_triggered %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ False }\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ True }\n{% endif %}\n\n{% if action == \'query\' %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_state VALUE={ query_probe_triggered }\n{% endif %}\n\n\n\n\n{% if not query_probe_triggered and action == \'dock\' %}\n{ action_raise_error("Probe dock failed!") }\n{% endif %}\n\n\n{% if query_probe_triggered and action == \'attach\' %}\n{ action_raise_error("Probe attach failed!") }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _park_toolhead': {'gcode': '\n{% set park_toolhead = printer["gcode_macro _User_Variables"].park_toolhead %}\n{% set parkposition_x = printer["gcode_macro _User_Variables"].parkposition_x %}\n{% set parkposition_y = printer["gcode_macro _User_Variables"].parkposition_y %}\n{% set parkposition_z = printer["gcode_macro _User_Variables"].parkposition_z %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Park_Toolhead\n\n{% if park_toolhead and \'xyz\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Parking Toolhead") }\n{% endif %}\n{% if parkposition_z == -128 %}\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}\n\n{% else %}\n\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}\n\n{% endif %}\n\n{% endif %}\n_exit_point function=Park_Toolhead', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_ready': {'gcode': '\n{% if printer[\'gcode_macro status_ready\'] is defined %}\n_KlickyDebug msg="_klicky_status_ready activating the LED STATUS_READY"\nSTATUS_READY\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_busy': {'gcode': '\n{% if printer[\'gcode_macro status_busy\'] is defined %}\n_KlickyDebug msg="_klicky_status_busy activating the LED STATUS_BUSY"\nSTATUS_BUSY\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_leveling': {'gcode': '\n{% if printer[\'gcode_macro status_leveling\'] is defined %}\n_KlickyDebug msg="_klicky_status_leveling activating the LED STATUS_LEVELING"\nSTATUS_LEVELING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_homing': {'gcode': '\n{% if printer[\'gcode_macro status_homing\'] is defined %}\n_KlickyDebug msg="_klicky_status_homing activating the LED STATUS_HOMING"\nSTATUS_HOMING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_cleaning': {'gcode': '\n{% if printer[\'gcode_macro status_cleaning\'] is defined %}\n_KlickyDebug msg="_klicky_status_cleaning activating the LED STATUS_CLEANING"\nSTATUS_CLEANING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_meshing': {'gcode': '\n{% if printer[\'gcode_macro status_meshing\'] is defined %}\n_KlickyDebug msg="_klicky_status_meshing activating the LED STATUS_MESHING"\nSTATUS_MESHING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_calibrating_z': {'gcode': '\n{% if printer[\'gcode_macro status_calibrating_z\'] is defined %}\n_KlickyDebug msg="_klicky_status_calibrating_z activating the LED STATUS_CALIBRATING_Z"\nSTATUS_CALIBRATING_Z\n{% endif %}', 'description': 'G-Code macro'}, 'z_calibration': {'switch_offset': 0.09, 'offset_margins': '-1.0,1.0', 'speed': 50.0, 'samples_result': 'none', 'probing_first_fast': False, 'nozzle_xy_position': '172, 301', 'switch_xy_position': '171.5, 282', 'bed_xy_position': '150, 150', 'start_gcode': 'Attach_Probe', 'before_switch_gcode': '', 'end_gcode': 'Dock_Probe'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': '^PG6', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'PG9', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 303.5, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PF11', 'dir_pin': '!PG3', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG5', 'endstop_pin': 'PG10', 'position_endstop': -0.5, 'position_min': -4.5, 'position_max': 290.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA0'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PF9', 'dir_pin': '!PF10', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG2'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF4', 'min_temp': 10.0, 'max_temp': 270.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 26.572, 'pid_ki': 2.036, 'pid_kd': 86.691, 'heater_pin': 'PA1', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PC13', 'pressure_advance': 0.05, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'PF0', 'rotation_distance': 21.9459674016, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 55.196, 'pid_ki': 2.091, 'pid_kd': 364.295, 'heater_pin': 'PA2', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'probe': {'z_offset': 0.0, 'deactivate_on_each_sample': True, 'activate_gcode': '', 'deactivate_gcode': '', 'pin': 'PG15', 'speed': 10.0, 'lift_speed': 10.0, 'x_offset': 0.0, 'y_offset': 25.0, 'samples': 5, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.006, 'samples_tolerance_retries': 3}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE5', 'fan_speed': 1.0}, 'controller_fan controller_fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD12', 'fan_speed': 1.0, 'idle_speed': 1.0, 'idle_timeout': 30, 'heater': ['heater_bed']}, 'heater_fan exhaust_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 5.0, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13', 'fan_speed': 1.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PD15', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 1.0, 'maximum_mcu_duration': 0.0, 'value': 1.0, 'shutdown_value': 0.0}, 'neopixel headlight': {'pin': 'PB0', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 0.0, 'initial_green': 0.2157, 'initial_blue': 1.0, 'initial_white': 0.0}, 'temperature_sensor chamber_temp': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF5', 'min_temp': 0.0, 'max_temp': 100.0, 'gcode_id': 'chamber_th'}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [150.0, 348.0], [350.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 5.0], [150.0, 245.0], [270.0, 5.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'gcode_macro _user_variables': {'gcode': '\n{% set Mx = printer[\'configfile\'].config["stepper_x"]["position_max"]|float %}\n{% set My = printer[\'configfile\'].config["stepper_y"]["position_max"]|float %}\n{% set Ox = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set Oy = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set Oz = printer[\'configfile\'].config["probe"]["z_offset"]|float %}\n\n\n{% if z_endstop_x != 0 or z_endstop_y != 0 %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ z_endstop_x }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ z_endstop_y }\n\n\n{% else %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ (Mx * 0.5) - Ox }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ (My * 0.5) - Oy }\n{% endif %}', 'description': 'G-Code macro', 'variable_verbose': 'True', 'variable_debug': 'False', 'variable_travel_speed': '200', 'variable_move_accel': '1000', 'variable_dock_speed': '50', 'variable_release_speed': '75', 'variable_z_drop_speed': '20', 'variable_safe_z': '25', 'variable_enable_z_hop': 'True', 'variable_max_bed_y': '300', 'variable_max_bed_x': '300', 'variable_z_endstop_x': '172', 'variable_z_endstop_y': '301', 'variable_docklocation_x': '40.5', 'variable_docklocation_y': '303.5', 'variable_docklocation_z': '-128', 'variable_enable_dock_servo': 'False', 'variable_servo_name': "'NAME'", 'variable_servo_deploy': '10', 'variable_servo_retract': '11', 'variable_servo_delay': '250', 'variable_dockmove_x': '40', 'variable_dockmove_y': '0', 'variable_dockmove_z': '0', 'variable_attachmove_x': '0', 'variable_attachmove_y': '30', 'variable_attachmove_z': '0', 'variable_umbilical': 'False', 'variable_umbilical_x': '15', 'variable_umbilical_y': '15', 'variable_park_toolhead': 'False', 'variable_parkposition_x': '125', 'variable_parkposition_y': '125', 'variable_parkposition_z': '30', 'variable_version': '1', 'variable_attachmove2_x': '0', 'variable_attachmove2_y': '0', 'variable_attachmove2_z': '0', 'variable_home_backoff_x': '10', 'variable_home_backoff_y': '10', 'variable_override_homing': "''", 'variable_dock_on_zhome': 'True'}, 'gcode_macro print_start': {'gcode': '\nM117 Homing...\nG28\nZ_TILT_ADJUST\nG28\n\n\n\n\n\n\n\nG0 X150 Y150 Z30 F3600', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1500.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-02-15 21:06:43,542 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-15 21:06:43,543 [printer.py:reinit()] - Klipper version: v0.12.0-103-g6ce6fbbc-dirty
2024-02-15 21:06:43,543 [printer.py:reinit()] - # Extruders: 1
2024-02-15 21:06:43,543 [printer.py:reinit()] - # Temperature devices: 2
2024-02-15 21:06:43,544 [printer.py:reinit()] - # Fans: 4
2024-02-15 21:06:43,544 [printer.py:reinit()] - # Output pins: 1
2024-02-15 21:06:43,544 [printer.py:reinit()] - # Leds: 1
2024-02-15 21:06:43,555 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2024-02-15 21:06:43,557 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-02-15 21:06:43,798 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor chamber_temp&fan&controller_fan controller_fan&heater_fan hotend_fan&heater_fan exhaust_fan&output_pin caselight&neopixel headlight
2024-02-15 21:06:43,801 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-02-15 21:06:43,801 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-02-15 21:06:43,801 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-02-15 21:06:43,802 [screen.py:init_klipper()] - Printer initialized
2024-02-15 21:06:43,802 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2024-02-15 21:06:43,802 [printer.py:change_state()] - Adding callback for state: ready
2024-02-15 21:06:43,805 [screen.py:show_panel()] - Reinitializing panel
2024-02-15 21:06:43,865 [main_menu.py:__init__()] - ### Making MainMenu
2024-02-15 21:06:43,870 [main_menu.py:add_device()] - Adding device: extruder
2024-02-15 21:06:43,875 [main_menu.py:add_device()] - Adding device: heater_bed
2024-02-15 21:06:43,879 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber_temp
2024-02-15 21:06:43,904 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-02-15 21:06:43,917 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-02-15 21:06:43,923 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'temperature_sensor chamber_temp', 'extruder']
2024-02-15 21:06:43,932 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2024-02-15 21:06:43,933 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-02-15 21:06:57,741 [screen.py:_go_to_submenu()] - #### Go to submenu more
2024-02-15 21:06:57,742 [screen.py:_go_to_submenu()] - #### Menu __main
2024-02-15 21:06:57,749 [screen.py:show_panel()] - Reinitializing panel
2024-02-15 21:06:57,975 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more
2024-02-15 21:06:57,979 [menu.py:arrangeMenuItems()] - X > more bedlevel
2024-02-15 21:06:57,982 [menu.py:arrangeMenuItems()] - X > more bedmesh
2024-02-15 21:06:57,986 [menu.py:arrangeMenuItems()] - X > more retraction
2024-02-15 21:06:57,998 [menu.py:arrangeMenuItems()] - X > more power
2024-02-15 21:06:58,000 [menu.py:arrangeMenuItems()] - X > more camera
2024-02-15 21:06:58,009 [menu.py:arrangeMenuItems()] - X > more input_shaper
2024-02-15 21:06:58,017 [menu.py:arrangeMenuItems()] - X > more spoolman
2024-02-15 21:06:58,634 [screen.py:show_panel()] - Reinitializing panel
2024-02-15 21:06:58,638 [fan.py:add_fan()] - Adding fan: fan
2024-02-15 21:06:58,647 [fan.py:add_fan()] - Adding fan: controller_fan controller_fan
2024-02-15 21:06:58,656 [fan.py:add_fan()] - Adding fan: heater_fan hotend_fan
2024-02-15 21:06:58,665 [fan.py:add_fan()] - Adding fan: heater_fan exhaust_fan
2024-02-15 21:06:58,690 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more > fan
2024-02-15 21:06:59,475 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M106 S255
2024-02-15 21:07:00,125 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M106 S255
2024-02-15 21:07:00,725 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M106 S255
2024-02-15 21:07:04,410 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M106 S0
2024-02-15 21:07:04,846 [screen.py:_menu_go_back()] - #### Menu go back
2024-02-15 21:07:04,888 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more
2024-02-15 21:07:04,899 [menu.py:arrangeMenuItems()] - X > more bedlevel
2024-02-15 21:07:04,903 [menu.py:arrangeMenuItems()] - X > more bedmesh
2024-02-15 21:07:04,908 [menu.py:arrangeMenuItems()] - X > more retraction
2024-02-15 21:07:04,920 [menu.py:arrangeMenuItems()] - X > more power
2024-02-15 21:07:04,922 [menu.py:arrangeMenuItems()] - X > more camera
2024-02-15 21:07:04,927 [menu.py:arrangeMenuItems()] - X > more input_shaper
2024-02-15 21:07:04,934 [menu.py:arrangeMenuItems()] - X > more spoolman
2024-02-15 21:07:05,060 [screen.py:_menu_go_back()] - #### Menu go back
2024-02-15 21:07:05,077 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-02-15 21:07:09,925 [screen.py:show_panel()] - Reinitializing panel
2024-02-15 21:07:10,019 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > extrude
2024-02-15 21:07:11,124 [extrude.py:change_speed()] - ### Speed 25
2024-02-15 21:07:11,868 [extrude.py:change_distance()] - ### Distance 25
2024-02-15 21:07:12,520 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M83
2024-02-15 21:07:12,523 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G1 E-25 F1500'}
2024-02-15 21:07:14,160 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M83
2024-02-15 21:07:14,161 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G1 E-25 F1500'}
2024-02-15 21:07:15,870 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M83
2024-02-15 21:07:15,875 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G1 E-25 F1500'}
2024-02-15 21:07:34,526 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-02-15 21:07:34,527 [functions.py:log_start()] - KlipperScreen Version: v0.3.8-89-g2a5e9b3
2024-02-15 21:07:34,527 [functions.py:log_start()] - Python version: 3.9
2024-02-15 21:07:34,685 [config.py:get_config_file_location()] - Passed config (-c): .
2024-02-15 21:07:34,686 [config.py:__init__()] - Config path location: /home/pi/printer_data/config/KlipperScreen.conf
2024-02-15 21:07:34,696 [config.py:log_config()] -  ===== Config File =====

=======================
2024-02-15 21:07:34,697 [config.py:__init__()] - ====== Saved Def ======

[graph Printer]
heater_bed = False
extruder = False

=======================
2024-02-15 21:07:34,698 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-02-15 21:07:34,795 [config.py:create_translations()] - Selected lang: None OS lang: en_GB
2024-02-15 21:07:34,795 [config.py:install_language()] - Using lang en
2024-02-15 21:07:34,814 [screen.py:__init__()] - Screen resolution: 800x480
2024-02-15 21:07:34,815 [KlippyGtk.py:__init__()] - Font size: 16.6 (medium)
2024-02-15 21:07:35,268 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2024-02-15 21:07:35,276 [screen.py:set_screenblanking_timeout()] - Using DPMS
2024-02-15 21:07:35,283 [screen.py:initial_connection()] - Default printer: None
2024-02-15 21:07:35,312 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-02-15 21:07:35,313 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-02-15 21:07:35,349 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-02-15 21:07:35,355 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-02-15 21:07:35,374 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-15 21:07:35,384 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/access/oneshot_token
2024-02-15 21:07:35,385 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-02-15 21:07:35,396 [_logging.py:info()] - Websocket connected
2024-02-15 21:07:35,396 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-02-15 21:07:35,426 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-15 21:07:35,434 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2024-02-15 21:07:35,435 [printer.py:configure_cameras()] - Cameras: []
2024-02-15 21:07:35,435 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'octoprint_compat', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-310-g67c98f6', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-02-15 21:07:35,455 [KlippyRest.py:_do_request()] - 404 Client Error>>Not Found for url>>http://127.0.0.1:7125/printer/info
2024-02-15 21:07:38,810 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-15 21:07:38,820 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2024-02-15 21:07:38,821 [printer.py:configure_cameras()] - Cameras: []
2024-02-15 21:07:38,821 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'octoprint_compat', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-310-g67c98f6', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-02-15 21:07:38,831 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2024-02-15 21:07:38,986 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2024-02-15 21:07:38,989 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro _Probe_Variables': {'variable_probe_attached': 'False', 'variable_probe_state': 'False', 'variable_probe_lock': 'False', 'variable_probe_z_homed': 'False', 'variable_z_endstop_x': '0', 'variable_z_endstop_y': '0', 'gcode': ''}, 'gcode_macro _klicky_check_variables_version': {'gcode': '\n{% set version = printer["gcode_macro _User_Variables"].version|default(0) %}\n\n{% if version != 1 %}\n{ action_raise_error("Please update your klicky variables, there are some functionality changes") }\n{% endif %}'}, 'gcode_macro _KlickyDebug': {'gcode': '\n{% set message  = params.MSG %}\n{% set debug = printer["gcode_macro _User_Variables"].debug|default(False) %}\n\n{% if debug %}\n{ action_respond_info(message) }\n{% endif %}'}, 'gcode_macro _exit_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move  = params.MOVE|default(0) %}\n{% set speed = printer["gcode_macro _User_Variables"].travel_speed %}\n\n\nM400\nSET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\nRESTORE_GCODE_STATE NAME={function} MOVE={move} MOVE_SPEED={speed}'}, 'gcode_macro _entry_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move_accel = printer["gcode_macro _User_Variables"].move_accel|default(1000) %}\n\nM400\nSAVE_GCODE_STATE NAME={function}\n\nSET_GCODE_OFFSET Z=0\n\nG90\n\nSET_VELOCITY_LIMIT ACCEL={move_accel}'}, 'gcode_macro _Homing_Variables': {'gcode': '\n{% set reset  = params.RESET|default(0) %}\n{% if reset %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }\n{% endif %}'}, 'gcode_macro Attach_Probe_Lock': {'description': 'Attaches Klicky Probe, can only be docked after unlocking', 'gcode': '\nAttach_Probe\n_Probe_Lock'}, 'gcode_macro Dock_Probe_Unlock': {'description': 'Docks Klicky Probe even if it was locked', 'gcode': '\n_Probe_Unlock\nDock_Probe'}, 'gcode_macro _Probe_Unlock': {'description': 'Unlocks Klicky Probe state', 'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to False"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }'}, 'gcode_macro _Probe_Lock': {'description': 'Locks Klicky Probe state', 'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to True"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ True }'}, 'gcode_macro _DeployKlickyDock': {'description': 'Deploys Klicky servo-controlled dock', 'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_deploy = printer["gcode_macro _User_Variables"].servo_deploy|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_DeployKlickyDock Klicky servo configuration enabled"\n{% if servo_deploy == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo deploy angle specified") }\n{% endif %}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _DeployDock"] is defined %}\n_KlickyDebug msg="_DeployKlickyDock calling _DeployDock"\n_DeployDock\n{% endif %}'}, 'gcode_macro _RetractKlickyDock': {'description': 'Retracts Klicky servo-controlled dock', 'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_retract = printer["gcode_macro _User_Variables"].servo_retract|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_RetractKlickyDock Klicky servo configuration enabled"\n{% if servo_retract == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo retract angle specified") }\n{% endif %}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _RetractDock"] is defined %}\n_KlickyDebug msg="_RetractKlickyDock calling _RetractDock"\n_RetractDock\n{% endif %}'}, 'gcode_macro Attach_Probe': {'description': 'Attaches Klicky Probe', 'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set attachmove2_x = printer["gcode_macro _User_Variables"].attachmove2_x|default(0) %}\n{% set attachmove2_y = printer["gcode_macro _User_Variables"].attachmove2_y|default(0) %}\n{% set attachmove2_z = printer["gcode_macro _User_Variables"].attachmove2_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n_entry_point function=Attach_Probe\n\n{% if bypass_probe_docking == False %}\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n_KlickyDebug msg="Attach_Probe Axis homed"\n\n\n{% elif not probe_attached and not probe_lock %}\n_KlickyDebug msg="Attach_Probe going to attach probe"\n{% if verbose %}\n{ action_respond_info("Attaching Probe") }\n{% endif %}\n_KLICKY_STATUS_BUSY\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% if not enable_z_hop %}\n_KlickyDebug msg="Attach_Probe z_hop disabled"\n{% set safe_z = 0 %}\n{% endif %}\n{% endif %}\n\n\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero, duplicate?") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Umbilical_Path\n\n_entry_point function=Attach_Probe_intern\n\n\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n_DeployKlickyDock\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}"\nG0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}\n\n_RetractKlickyDock\n\n{% if ((printer.gcode_move.gcode_position.z < safe_z) or (docklocation_z != -128 and docklocation_z < safe_z ))%}\n_KlickyDebug msg="Attach_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\n_CheckProbe action=attach\n\n_exit_point function=Attach_Probe_intern move={goback}\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe locked not attaching probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already attached!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe already attached, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Attach_Probe\n{% else %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}'}, 'gcode_macro Dock_Probe': {'description': 'Docks Klicky Probe', 'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n{% if bypass_probe_docking == True %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}\n\n{% if bypass_probe_docking != True %}\n_entry_point function=Dock_Probe\n\n\n{% if probe_attached and not probe_lock %}\n_KLICKY_STATUS_BUSY\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Dock_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n_Umbilical_Path\n\n\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n\n_DeployKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\n\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}"\nG0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}\n{% endif %}\n\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}\n\n\n_RetractKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving away from the dock to G0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}\n\n\n{% if (printer.gcode_move.gcode_position.z < safe_z) %}\n_KlickyDebug msg="Dock_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\nG4 P1000\n_CheckProbe action=dock\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe locked not docking probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already docked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe already docked, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Dock_Probe move={goback}\n{% else %}\n_KlickyDebug msg="Dock_Probe probe docking bypassed, doing nothing"\n{% endif %}'}, 'gcode_macro PROBE_CALIBRATE': {'rename_existing': '_PROBE_CALIBRATE', 'description': 'Calibrate the probes z_offset with klicky automount', 'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_calibrate Axis homed"\n_KlickyDebug msg="probe_calibrate Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_CALIBRATE with the probe above the BED, check klicky_variables bed size!") }\n{% endif %}\n\n{% if bypass_probe_docking == False %}\n_CheckProbe action=query\nG90\nAttach_Probe back=1\n_KLICKY_STATUS_CALIBRATING_Z\n\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nM118 moving the toolhead 20 mm from the bed\n_KlickyDebug msg="probe_calibrate Moving Z up by 20mm"\nTESTZ Z=20\nM118 remove manually the probe and continue calibration\n_KLICKY_STATUS_READY\n{% else %}\n_KLICKY_STATUS_CALIBRATING_Z\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n_KLICKY_STATUS_READY\n{% endif %}'}, 'gcode_macro PROBE_ACCURACY': {'rename_existing': '_PROBE_ACCURACY', 'description': 'Probe Z-height accuracy at current XY position with klicky automount', 'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_accuracy Axis homed"\n_KlickyDebug msg="probe_accuracy Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n_entry_point function=PROBE_ACCURACY\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_ACCURACY with the probe above the BED, check klicky_variables bed size!") }\n{% endif%}\n\n_CheckProbe action=query\nAttach_Probe back=1\n\n_KlickyDebug msg="probe_accuracy calling klipper probe accuracy"\n_PROBE_ACCURACY {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nDock_Probe back=1\n\n_exit_point function=PROBE_ACCURACY move=1'}, 'force_move': {'enable_force_move': 'True'}, 'homing_override': {'axes': 'xyz', 'gcode': '\n\n_User_Variables\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n{% set kinematic_z = 0 %}\n{% set dock_on_zhome = printer["gcode_macro _User_Variables"].dock_on_zhome|default(True) %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set home_backoff_x = printer["gcode_macro _User_Variables"].home_backoff_x|default(0) %}\n{% set home_backoff_y = printer["gcode_macro _User_Variables"].home_backoff_y|default(0) %}\n{% set override_homing = printer["gcode_macro _User_Variables"].override_homing|default(\'\') %}\n\n\n_klicky_check_variables_version\n\n_CheckProbe action=query\n\n\n{% set home_x, home_y, home_z, leave_probe_attached = False, False, False, False %}\n\n{% if \'PROBE_LOCK\' in params%}\n{% if verbose %}\n{ action_respond_info("PROBE_LOCK = True") }\n{% endif %}\n{% set leave_probe_attached = True %}\n{% endif %}\n\n\n{% if not \'X\' in params\nand not \'Y\' in params\nand not \'Z\' in params %}\n\n{% set home_x, home_y, home_z = True, True, True %}\n_KlickyDebug msg="homing_override goint to home all axes"\n\n{% else %}\n{% if \'X\' in params %}\n{% set home_x = True %}\n_KlickyDebug msg="homing_override goint to home X"\n\n{% endif %}\n\n{% if \'Y\' in params %}\n{% set home_y = True %}\n_KlickyDebug msg="homing_override goint to home Y"\n{% endif %}\n\n{% if \'Z\' in params %}\n{% set home_z = True %}\n_KlickyDebug msg="homing_override goint to home Z"\n{% endif %}\n\n{% if \'X\' in params\nand \'Y\' in params\nand \'Z\' in params %}\n\n\n_Homing_Variables reset=1\n_KlickyDebug msg="homing_override goint to home all axes"\n{% endif %}\n\n{% endif %}\n\n_entry_point function=homing_override\n_KLICKY_STATUS_HOMING\n\n\n{% if \'z\' not in printer.toolhead.homed_axes %}\n{% if enable_z_hop == False %}\n_KlickyDebug msg="homing_override z_hop disabled"\n\n{% set kinematic_z = safe_z %}\n{% set safe_z = safe_z %}\n{% endif %}\n{% endif %}\n\n\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes and \'z\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("No axis homed") }\n{% endif %}\n_KlickyDebug msg="homing_override no axis homed, setting position as X=Y=0 Z={kinematic_z}"\nSET_KINEMATIC_POSITION X=0 Y=0 Z={kinematic_z}\nM400\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% if home_z != True %}\n_KlickyDebug msg="homing_override clearing axis homed state if not already homing Z"\nM84\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("X or Y not homed, forcing full G28") }\n{% endif %}\n{% set home_x, home_y, home_z = True, True, True %}\n{% endif %}\n{% endif %}\n\n\n{% if ((attachmove_y == 0 and override_homing == \'\' ) or (override_homing == \'Y\'))%}\n\n{% if home_y %}\n{% if override_homing == \'Y\' %}\n_KlickyDebug msg="homing_override Y homing first override, due to override_homing = Y"\n{% else %}\n_KlickyDebug msg="homing_override Y homing first override, due to attachmove_y = 0"\n{% endif %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y G28 Y0"\nG28 Y0\n\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop-home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n{% set home_y = False %}\n{% endif %}\n\n\n\n{% if home_x %}\n{% if verbose %}\n{ action_respond_info("Homing X") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in X homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_X"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_X external script to handle the X homing"\n_HOME_X\n{% else %}\n_KlickyDebug msg="homing_override Homing X, G28 X0"\nG28 X0\n\n{% if home_backoff_x != 0 %}\n{% if (printer.configfile.settings.stepper_x.position_endstop > (printer.configfile.settings.stepper_x.position_min|default(0) + printer.configfile.settings.stepper_x.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n\n{% if home_y %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y, G28 Y0"\nG28 Y0\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if verbose %}\n{ action_respond_info("Homing Z") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe configured as a virtual Z endstop attaching probe"\nAttach_Probe\n\n{% if leave_probe_attached %}\n_Probe_Lock\n{% endif %}\n{% elif dock_on_zhome == True %}\nDock_Probe\n{% endif %}\n\n_Home_Z_\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe no longer required, docking probe"\nDock_Probe\n{% elif dock_on_zhome == False %}\nDock_Probe\n{% endif %}\n{% endif %}\n_CheckProbe action=query\n\n\n_Park_Toolhead\n\n_exit_point function=homing_override\n_KLICKY_STATUS_READY'}, 'gcode_macro _Umbilical_Path': {'gcode': '\n{% set umbilical = printer["gcode_macro _User_Variables"].umbilical %}\n{% set umbilical_x = printer["gcode_macro _User_Variables"].umbilical_x %}\n{% set umbilical_y = printer["gcode_macro _User_Variables"].umbilical_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n\n{% if umbilical %}\n\n_entry_point function=Umbilical_Path\n\n_KlickyDebug msg="_Umbilical_Path moving to G0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}"\nG0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}\n\n_exit_point function=Umbilical_Path\n{% endif %}'}, 'gcode_macro _Home_Z_': {'gcode': '\n{% set z_endstop_x = printer["gcode_macro _Probe_Variables"].z_endstop_x %}\n{% set z_endstop_y = printer["gcode_macro _Probe_Variables"].z_endstop_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}    {% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Home_Z\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n{% else %}\n_KlickyDebug msg="_Home_Z_ XY Axis homed"\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="_Home_Z_ Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n\n\n_KlickyDebug msg="_Home_Z_ moving to Z endstop position G0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}"\nG0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}\n_KlickyDebug msg="_Home_Z_ Homing Z G28 Z"\nG28 Z0\n_KlickyDebug msg="_Home_Z_ toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_exit_point function=Home_Z'}, 'gcode_macro _CheckProbe': {'variable_probe_state': '0', 'gcode': '\nQuery_Probe\n_SetProbeState action={ params.ACTION }'}, 'gcode_macro _SetProbeState': {'gcode': '\n{% set query_probe_triggered = printer.probe.last_query %}\n{% set action  = params.ACTION|default(\'\') %}\n\n\n{% if query_probe_triggered %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ False }\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ True }\n{% endif %}\n\n{% if action == \'query\' %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_state VALUE={ query_probe_triggered }\n{% endif %}\n\n\n\n\n{% if not query_probe_triggered and action == \'dock\' %}\n{ action_raise_error("Probe dock failed!") }\n{% endif %}\n\n\n{% if query_probe_triggered and action == \'attach\' %}\n{ action_raise_error("Probe attach failed!") }\n{% endif %}'}, 'gcode_macro _Park_Toolhead': {'gcode': '\n{% set park_toolhead = printer["gcode_macro _User_Variables"].park_toolhead %}\n{% set parkposition_x = printer["gcode_macro _User_Variables"].parkposition_x %}\n{% set parkposition_y = printer["gcode_macro _User_Variables"].parkposition_y %}\n{% set parkposition_z = printer["gcode_macro _User_Variables"].parkposition_z %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Park_Toolhead\n\n{% if park_toolhead and \'xyz\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Parking Toolhead") }\n{% endif %}\n{% if parkposition_z == -128 %}\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}\n\n{% else %}\n\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}\n\n{% endif %}\n\n{% endif %}\n_exit_point function=Park_Toolhead'}, 'gcode_macro _klicky_status_ready': {'gcode': '\n{% if printer[\'gcode_macro status_ready\'] is defined %}\n_KlickyDebug msg="_klicky_status_ready activating the LED STATUS_READY"\nSTATUS_READY\n{% endif %}'}, 'gcode_macro _klicky_status_busy': {'gcode': '\n{% if printer[\'gcode_macro status_busy\'] is defined %}\n_KlickyDebug msg="_klicky_status_busy activating the LED STATUS_BUSY"\nSTATUS_BUSY\n{% endif %}'}, 'gcode_macro _klicky_status_leveling': {'gcode': '\n{% if printer[\'gcode_macro status_leveling\'] is defined %}\n_KlickyDebug msg="_klicky_status_leveling activating the LED STATUS_LEVELING"\nSTATUS_LEVELING\n{% endif %}'}, 'gcode_macro _klicky_status_homing': {'gcode': '\n{% if printer[\'gcode_macro status_homing\'] is defined %}\n_KlickyDebug msg="_klicky_status_homing activating the LED STATUS_HOMING"\nSTATUS_HOMING\n{% endif %}'}, 'gcode_macro _klicky_status_cleaning': {'gcode': '\n{% if printer[\'gcode_macro status_cleaning\'] is defined %}\n_KlickyDebug msg="_klicky_status_cleaning activating the LED STATUS_CLEANING"\nSTATUS_CLEANING\n{% endif %}'}, 'gcode_macro _klicky_status_meshing': {'gcode': '\n{% if printer[\'gcode_macro status_meshing\'] is defined %}\n_KlickyDebug msg="_klicky_status_meshing activating the LED STATUS_MESHING"\nSTATUS_MESHING\n{% endif %}'}, 'gcode_macro _klicky_status_calibrating_z': {'gcode': '\n{% if printer[\'gcode_macro status_calibrating_z\'] is defined %}\n_KlickyDebug msg="_klicky_status_calibrating_z activating the LED STATUS_CALIBRATING_Z"\nSTATUS_CALIBRATING_Z\n{% endif %}'}, 'z_calibration': {'nozzle_xy_position': '172, 301', 'switch_xy_position': '171.5, 282', 'bed_xy_position': '150, 150', 'switch_offset': '0.09', 'offset_margins': '-1.0,1.0', 'speed': '50', 'probing_first_fast': 'false', 'start_gcode': 'Attach_Probe', 'end_gcode': 'Dock_Probe'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_28003C001150535556323420-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '^PG6', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '25', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'PG9', 'position_min': '0', 'position_endstop': '300', 'position_max': '303.5', 'homing_speed': '25', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': '!PG3', 'enable_pin': '!PG5', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'PG10', 'position_endstop': '-0.5', 'position_max': '290', 'position_min': '-4.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA0', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': '!PF10', 'enable_pin': '!PG2', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PC13', 'dir_pin': 'PF0', 'enable_pin': '!PF1', 'rotation_distance': '21.9459674016', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.75', 'heater_pin': 'PA1', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF4', 'min_temp': '10', 'max_temp': '270', 'max_power': '1.0', 'min_extrude_temp': '170', 'pressure_advance': '0.05', 'pressure_advance_smooth_time': '0.040', 'control': 'pid', 'pid_kp': '26.572', 'pid_ki': '2.036', 'pid_kd': '86.691'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.5', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PA2', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF3', 'max_power': '1', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '55.196', 'pid_ki': '2.091', 'pid_kd': '364.295'}, 'probe': {'pin': 'PG15', 'x_offset': '0', 'y_offset': '25.0', 'z_offset': '0', 'speed': '10.0', 'samples': '5', 'samples_result': 'median', 'sample_retract_dist': '3.0', 'samples_tolerance': '0.006', 'samples_tolerance_retries': '3'}, 'fan': {'pin': 'PA8', 'kick_start_time': '0.5', 'off_below': '0.10'}, 'heater_fan hotend_fan': {'pin': 'PE5', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'controller_fan controller_fan': {'pin': 'PD12', 'kick_start_time': '0.5', 'heater': 'heater_bed'}, 'heater_fan exhaust_fan': {'pin': 'PD13', 'max_power': '1.0', 'shutdown_speed': '0.0', 'kick_start_time': '5.0', 'heater': 'heater_bed', 'heater_temp': '60', 'fan_speed': '1.0'}, 'output_pin caselight': {'pin': 'PD15', 'pwm': 'true', 'shutdown_value': '0', 'value': '1', 'cycle_time': '0.01'}, 'neopixel headlight': {'pin': 'PB0', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '0.0', 'initial_green': '0.2157', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'temperature_sensor chamber_temp': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF5', 'min_temp': '0', 'max_temp': '100', 'gcode_id': 'chamber_th'}, 'idle_timeout': {'timeout': '1800'}, 'z_tilt': {'z_positions': '\n-50, 18\n150, 348\n350, 18', 'points': '\n30, 5\n150, 245\n270, 5', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'gcode_macro _User_Variables': {'variable_verbose': 'True', 'variable_debug': 'False', 'variable_travel_speed': '200', 'variable_move_accel': '1000', 'variable_dock_speed': '50', 'variable_release_speed': '75', 'variable_z_drop_speed': '20', 'variable_safe_z': '25', 'variable_enable_z_hop': 'True', 'variable_max_bed_y': '300', 'variable_max_bed_x': '300', 'variable_z_endstop_x': '172', 'variable_z_endstop_y': '301', 'variable_docklocation_x': '40.5', 'variable_docklocation_y': '303.5', 'variable_docklocation_z': '-128', 'variable_enable_dock_servo': 'False', 'variable_servo_name': "'NAME'", 'variable_servo_deploy': '10', 'variable_servo_retract': '11', 'variable_servo_delay': '250', 'variable_dockmove_x': '40', 'variable_dockmove_y': '0', 'variable_dockmove_z': '0', 'variable_attachmove_x': '0', 'variable_attachmove_y': '30', 'variable_attachmove_z': '0', 'variable_umbilical': 'False', 'variable_umbilical_x': '15', 'variable_umbilical_y': '15', 'variable_park_toolhead': 'False', 'variable_parkposition_x': '125', 'variable_parkposition_y': '125', 'variable_parkposition_z': '30', 'variable_version': '1', 'variable_attachmove2_x': '0', 'variable_attachmove2_y': '0', 'variable_attachmove2_z': '0', 'variable_home_backoff_x': '10', 'variable_home_backoff_y': '10', 'variable_override_homing': "''", 'variable_dock_on_zhome': 'True', 'gcode': '\n{% set Mx = printer[\'configfile\'].config["stepper_x"]["position_max"]|float %}\n{% set My = printer[\'configfile\'].config["stepper_y"]["position_max"]|float %}\n{% set Ox = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set Oy = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set Oz = printer[\'configfile\'].config["probe"]["z_offset"]|float %}\n\n\n{% if z_endstop_x != 0 or z_endstop_y != 0 %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ z_endstop_x }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ z_endstop_y }\n\n\n{% else %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ (Mx * 0.5) - Ox }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ (My * 0.5) - Oy }\n{% endif %}'}, 'gcode_macro PRINT_START': {'gcode': '\nM117 Homing...\nG28\nZ_TILT_ADJUST\nG28\n\n\n\n\n\n\n\nG0 X150 Y150 Z30 F3600'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_28003C001150535556323420-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro _probe_variables': {'gcode': '', 'description': 'G-Code macro', 'variable_probe_attached': 'False', 'variable_probe_state': 'False', 'variable_probe_lock': 'False', 'variable_probe_z_homed': 'False', 'variable_z_endstop_x': '0', 'variable_z_endstop_y': '0'}, 'gcode_macro _klicky_check_variables_version': {'gcode': '\n{% set version = printer["gcode_macro _User_Variables"].version|default(0) %}\n\n{% if version != 1 %}\n{ action_raise_error("Please update your klicky variables, there are some functionality changes") }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klickydebug': {'gcode': '\n{% set message  = params.MSG %}\n{% set debug = printer["gcode_macro _User_Variables"].debug|default(False) %}\n\n{% if debug %}\n{ action_respond_info(message) }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _exit_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move  = params.MOVE|default(0) %}\n{% set speed = printer["gcode_macro _User_Variables"].travel_speed %}\n\n\nM400\nSET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\nRESTORE_GCODE_STATE NAME={function} MOVE={move} MOVE_SPEED={speed}', 'description': 'G-Code macro'}, 'gcode_macro _entry_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move_accel = printer["gcode_macro _User_Variables"].move_accel|default(1000) %}\n\nM400\nSAVE_GCODE_STATE NAME={function}\n\nSET_GCODE_OFFSET Z=0\n\nG90\n\nSET_VELOCITY_LIMIT ACCEL={move_accel}', 'description': 'G-Code macro'}, 'gcode_macro _homing_variables': {'gcode': '\n{% set reset  = params.RESET|default(0) %}\n{% if reset %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro attach_probe_lock': {'gcode': '\nAttach_Probe\n_Probe_Lock', 'description': 'Attaches Klicky Probe, can only be docked after unlocking'}, 'gcode_macro dock_probe_unlock': {'gcode': '\n_Probe_Unlock\nDock_Probe', 'description': 'Docks Klicky Probe even if it was locked'}, 'gcode_macro _probe_unlock': {'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to False"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }', 'description': 'Unlocks Klicky Probe state'}, 'gcode_macro _probe_lock': {'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to True"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ True }', 'description': 'Locks Klicky Probe state'}, 'gcode_macro _deployklickydock': {'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_deploy = printer["gcode_macro _User_Variables"].servo_deploy|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_DeployKlickyDock Klicky servo configuration enabled"\n{% if servo_deploy == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo deploy angle specified") }\n{% endif %}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _DeployDock"] is defined %}\n_KlickyDebug msg="_DeployKlickyDock calling _DeployDock"\n_DeployDock\n{% endif %}', 'description': 'Deploys Klicky servo-controlled dock'}, 'gcode_macro _retractklickydock': {'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_retract = printer["gcode_macro _User_Variables"].servo_retract|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_RetractKlickyDock Klicky servo configuration enabled"\n{% if servo_retract == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo retract angle specified") }\n{% endif %}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _RetractDock"] is defined %}\n_KlickyDebug msg="_RetractKlickyDock calling _RetractDock"\n_RetractDock\n{% endif %}', 'description': 'Retracts Klicky servo-controlled dock'}, 'gcode_macro attach_probe': {'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set attachmove2_x = printer["gcode_macro _User_Variables"].attachmove2_x|default(0) %}\n{% set attachmove2_y = printer["gcode_macro _User_Variables"].attachmove2_y|default(0) %}\n{% set attachmove2_z = printer["gcode_macro _User_Variables"].attachmove2_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n_entry_point function=Attach_Probe\n\n{% if bypass_probe_docking == False %}\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n_KlickyDebug msg="Attach_Probe Axis homed"\n\n\n{% elif not probe_attached and not probe_lock %}\n_KlickyDebug msg="Attach_Probe going to attach probe"\n{% if verbose %}\n{ action_respond_info("Attaching Probe") }\n{% endif %}\n_KLICKY_STATUS_BUSY\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% if not enable_z_hop %}\n_KlickyDebug msg="Attach_Probe z_hop disabled"\n{% set safe_z = 0 %}\n{% endif %}\n{% endif %}\n\n\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero, duplicate?") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Umbilical_Path\n\n_entry_point function=Attach_Probe_intern\n\n\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n_DeployKlickyDock\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}"\nG0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}\n\n_RetractKlickyDock\n\n{% if ((printer.gcode_move.gcode_position.z < safe_z) or (docklocation_z != -128 and docklocation_z < safe_z ))%}\n_KlickyDebug msg="Attach_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\n_CheckProbe action=attach\n\n_exit_point function=Attach_Probe_intern move={goback}\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe locked not attaching probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already attached!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe already attached, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Attach_Probe\n{% else %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}', 'description': 'Attaches Klicky Probe'}, 'gcode_macro dock_probe': {'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n{% if bypass_probe_docking == True %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}\n\n{% if bypass_probe_docking != True %}\n_entry_point function=Dock_Probe\n\n\n{% if probe_attached and not probe_lock %}\n_KLICKY_STATUS_BUSY\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Dock_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n_Umbilical_Path\n\n\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n\n_DeployKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\n\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}"\nG0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}\n{% endif %}\n\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}\n\n\n_RetractKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving away from the dock to G0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}\n\n\n{% if (printer.gcode_move.gcode_position.z < safe_z) %}\n_KlickyDebug msg="Dock_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\nG4 P1000\n_CheckProbe action=dock\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe locked not docking probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already docked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe already docked, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Dock_Probe move={goback}\n{% else %}\n_KlickyDebug msg="Dock_Probe probe docking bypassed, doing nothing"\n{% endif %}', 'description': 'Docks Klicky Probe'}, 'gcode_macro probe_calibrate': {'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_calibrate Axis homed"\n_KlickyDebug msg="probe_calibrate Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_CALIBRATE with the probe above the BED, check klicky_variables bed size!") }\n{% endif %}\n\n{% if bypass_probe_docking == False %}\n_CheckProbe action=query\nG90\nAttach_Probe back=1\n_KLICKY_STATUS_CALIBRATING_Z\n\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nM118 moving the toolhead 20 mm from the bed\n_KlickyDebug msg="probe_calibrate Moving Z up by 20mm"\nTESTZ Z=20\nM118 remove manually the probe and continue calibration\n_KLICKY_STATUS_READY\n{% else %}\n_KLICKY_STATUS_CALIBRATING_Z\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n_KLICKY_STATUS_READY\n{% endif %}', 'rename_existing': '_PROBE_CALIBRATE', 'description': 'Calibrate the probes z_offset with klicky automount'}, 'gcode_macro probe_accuracy': {'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_accuracy Axis homed"\n_KlickyDebug msg="probe_accuracy Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n_entry_point function=PROBE_ACCURACY\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_ACCURACY with the probe above the BED, check klicky_variables bed size!") }\n{% endif%}\n\n_CheckProbe action=query\nAttach_Probe back=1\n\n_KlickyDebug msg="probe_accuracy calling klipper probe accuracy"\n_PROBE_ACCURACY {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nDock_Probe back=1\n\n_exit_point function=PROBE_ACCURACY move=1', 'rename_existing': '_PROBE_ACCURACY', 'description': 'Probe Z-height accuracy at current XY position with klicky automount'}, 'force_move': {'enable_force_move': True}, 'homing_override': {'axes': 'xyz', 'gcode': '\n\n_User_Variables\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n{% set kinematic_z = 0 %}\n{% set dock_on_zhome = printer["gcode_macro _User_Variables"].dock_on_zhome|default(True) %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set home_backoff_x = printer["gcode_macro _User_Variables"].home_backoff_x|default(0) %}\n{% set home_backoff_y = printer["gcode_macro _User_Variables"].home_backoff_y|default(0) %}\n{% set override_homing = printer["gcode_macro _User_Variables"].override_homing|default(\'\') %}\n\n\n_klicky_check_variables_version\n\n_CheckProbe action=query\n\n\n{% set home_x, home_y, home_z, leave_probe_attached = False, False, False, False %}\n\n{% if \'PROBE_LOCK\' in params%}\n{% if verbose %}\n{ action_respond_info("PROBE_LOCK = True") }\n{% endif %}\n{% set leave_probe_attached = True %}\n{% endif %}\n\n\n{% if not \'X\' in params\nand not \'Y\' in params\nand not \'Z\' in params %}\n\n{% set home_x, home_y, home_z = True, True, True %}\n_KlickyDebug msg="homing_override goint to home all axes"\n\n{% else %}\n{% if \'X\' in params %}\n{% set home_x = True %}\n_KlickyDebug msg="homing_override goint to home X"\n\n{% endif %}\n\n{% if \'Y\' in params %}\n{% set home_y = True %}\n_KlickyDebug msg="homing_override goint to home Y"\n{% endif %}\n\n{% if \'Z\' in params %}\n{% set home_z = True %}\n_KlickyDebug msg="homing_override goint to home Z"\n{% endif %}\n\n{% if \'X\' in params\nand \'Y\' in params\nand \'Z\' in params %}\n\n\n_Homing_Variables reset=1\n_KlickyDebug msg="homing_override goint to home all axes"\n{% endif %}\n\n{% endif %}\n\n_entry_point function=homing_override\n_KLICKY_STATUS_HOMING\n\n\n{% if \'z\' not in printer.toolhead.homed_axes %}\n{% if enable_z_hop == False %}\n_KlickyDebug msg="homing_override z_hop disabled"\n\n{% set kinematic_z = safe_z %}\n{% set safe_z = safe_z %}\n{% endif %}\n{% endif %}\n\n\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes and \'z\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("No axis homed") }\n{% endif %}\n_KlickyDebug msg="homing_override no axis homed, setting position as X=Y=0 Z={kinematic_z}"\nSET_KINEMATIC_POSITION X=0 Y=0 Z={kinematic_z}\nM400\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% if home_z != True %}\n_KlickyDebug msg="homing_override clearing axis homed state if not already homing Z"\nM84\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("X or Y not homed, forcing full G28") }\n{% endif %}\n{% set home_x, home_y, home_z = True, True, True %}\n{% endif %}\n{% endif %}\n\n\n{% if ((attachmove_y == 0 and override_homing == \'\' ) or (override_homing == \'Y\'))%}\n\n{% if home_y %}\n{% if override_homing == \'Y\' %}\n_KlickyDebug msg="homing_override Y homing first override, due to override_homing = Y"\n{% else %}\n_KlickyDebug msg="homing_override Y homing first override, due to attachmove_y = 0"\n{% endif %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y G28 Y0"\nG28 Y0\n\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop-home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n{% set home_y = False %}\n{% endif %}\n\n\n\n{% if home_x %}\n{% if verbose %}\n{ action_respond_info("Homing X") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in X homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_X"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_X external script to handle the X homing"\n_HOME_X\n{% else %}\n_KlickyDebug msg="homing_override Homing X, G28 X0"\nG28 X0\n\n{% if home_backoff_x != 0 %}\n{% if (printer.configfile.settings.stepper_x.position_endstop > (printer.configfile.settings.stepper_x.position_min|default(0) + printer.configfile.settings.stepper_x.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n\n{% if home_y %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y, G28 Y0"\nG28 Y0\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if verbose %}\n{ action_respond_info("Homing Z") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe configured as a virtual Z endstop attaching probe"\nAttach_Probe\n\n{% if leave_probe_attached %}\n_Probe_Lock\n{% endif %}\n{% elif dock_on_zhome == True %}\nDock_Probe\n{% endif %}\n\n_Home_Z_\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe no longer required, docking probe"\nDock_Probe\n{% elif dock_on_zhome == False %}\nDock_Probe\n{% endif %}\n{% endif %}\n_CheckProbe action=query\n\n\n_Park_Toolhead\n\n_exit_point function=homing_override\n_KLICKY_STATUS_READY'}, 'gcode_macro _umbilical_path': {'gcode': '\n{% set umbilical = printer["gcode_macro _User_Variables"].umbilical %}\n{% set umbilical_x = printer["gcode_macro _User_Variables"].umbilical_x %}\n{% set umbilical_y = printer["gcode_macro _User_Variables"].umbilical_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n\n{% if umbilical %}\n\n_entry_point function=Umbilical_Path\n\n_KlickyDebug msg="_Umbilical_Path moving to G0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}"\nG0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}\n\n_exit_point function=Umbilical_Path\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _home_z_': {'gcode': '\n{% set z_endstop_x = printer["gcode_macro _Probe_Variables"].z_endstop_x %}\n{% set z_endstop_y = printer["gcode_macro _Probe_Variables"].z_endstop_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}    {% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Home_Z\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n{% else %}\n_KlickyDebug msg="_Home_Z_ XY Axis homed"\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="_Home_Z_ Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n\n\n_KlickyDebug msg="_Home_Z_ moving to Z endstop position G0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}"\nG0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}\n_KlickyDebug msg="_Home_Z_ Homing Z G28 Z"\nG28 Z0\n_KlickyDebug msg="_Home_Z_ toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_exit_point function=Home_Z', 'description': 'G-Code macro'}, 'gcode_macro _checkprobe': {'gcode': '\nQuery_Probe\n_SetProbeState action={ params.ACTION }', 'description': 'G-Code macro', 'variable_probe_state': '0'}, 'gcode_macro _setprobestate': {'gcode': '\n{% set query_probe_triggered = printer.probe.last_query %}\n{% set action  = params.ACTION|default(\'\') %}\n\n\n{% if query_probe_triggered %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ False }\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ True }\n{% endif %}\n\n{% if action == \'query\' %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_state VALUE={ query_probe_triggered }\n{% endif %}\n\n\n\n\n{% if not query_probe_triggered and action == \'dock\' %}\n{ action_raise_error("Probe dock failed!") }\n{% endif %}\n\n\n{% if query_probe_triggered and action == \'attach\' %}\n{ action_raise_error("Probe attach failed!") }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _park_toolhead': {'gcode': '\n{% set park_toolhead = printer["gcode_macro _User_Variables"].park_toolhead %}\n{% set parkposition_x = printer["gcode_macro _User_Variables"].parkposition_x %}\n{% set parkposition_y = printer["gcode_macro _User_Variables"].parkposition_y %}\n{% set parkposition_z = printer["gcode_macro _User_Variables"].parkposition_z %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Park_Toolhead\n\n{% if park_toolhead and \'xyz\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Parking Toolhead") }\n{% endif %}\n{% if parkposition_z == -128 %}\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}\n\n{% else %}\n\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}\n\n{% endif %}\n\n{% endif %}\n_exit_point function=Park_Toolhead', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_ready': {'gcode': '\n{% if printer[\'gcode_macro status_ready\'] is defined %}\n_KlickyDebug msg="_klicky_status_ready activating the LED STATUS_READY"\nSTATUS_READY\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_busy': {'gcode': '\n{% if printer[\'gcode_macro status_busy\'] is defined %}\n_KlickyDebug msg="_klicky_status_busy activating the LED STATUS_BUSY"\nSTATUS_BUSY\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_leveling': {'gcode': '\n{% if printer[\'gcode_macro status_leveling\'] is defined %}\n_KlickyDebug msg="_klicky_status_leveling activating the LED STATUS_LEVELING"\nSTATUS_LEVELING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_homing': {'gcode': '\n{% if printer[\'gcode_macro status_homing\'] is defined %}\n_KlickyDebug msg="_klicky_status_homing activating the LED STATUS_HOMING"\nSTATUS_HOMING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_cleaning': {'gcode': '\n{% if printer[\'gcode_macro status_cleaning\'] is defined %}\n_KlickyDebug msg="_klicky_status_cleaning activating the LED STATUS_CLEANING"\nSTATUS_CLEANING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_meshing': {'gcode': '\n{% if printer[\'gcode_macro status_meshing\'] is defined %}\n_KlickyDebug msg="_klicky_status_meshing activating the LED STATUS_MESHING"\nSTATUS_MESHING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_calibrating_z': {'gcode': '\n{% if printer[\'gcode_macro status_calibrating_z\'] is defined %}\n_KlickyDebug msg="_klicky_status_calibrating_z activating the LED STATUS_CALIBRATING_Z"\nSTATUS_CALIBRATING_Z\n{% endif %}', 'description': 'G-Code macro'}, 'z_calibration': {'switch_offset': 0.09, 'offset_margins': '-1.0,1.0', 'speed': 50.0, 'samples_result': 'none', 'probing_first_fast': False, 'nozzle_xy_position': '172, 301', 'switch_xy_position': '171.5, 282', 'bed_xy_position': '150, 150', 'start_gcode': 'Attach_Probe', 'before_switch_gcode': '', 'end_gcode': 'Dock_Probe'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': '^PG6', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'PG9', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 303.5, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PF11', 'dir_pin': '!PG3', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG5', 'endstop_pin': 'PG10', 'position_endstop': -0.5, 'position_min': -4.5, 'position_max': 290.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA0'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PF9', 'dir_pin': '!PF10', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG2'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF4', 'min_temp': 10.0, 'max_temp': 270.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 26.572, 'pid_ki': 2.036, 'pid_kd': 86.691, 'heater_pin': 'PA1', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PC13', 'pressure_advance': 0.05, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'PF0', 'rotation_distance': 21.9459674016, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 55.196, 'pid_ki': 2.091, 'pid_kd': 364.295, 'heater_pin': 'PA2', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'probe': {'z_offset': 0.0, 'deactivate_on_each_sample': True, 'activate_gcode': '', 'deactivate_gcode': '', 'pin': 'PG15', 'speed': 10.0, 'lift_speed': 10.0, 'x_offset': 0.0, 'y_offset': 25.0, 'samples': 5, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.006, 'samples_tolerance_retries': 3}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE5', 'fan_speed': 1.0}, 'controller_fan controller_fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD12', 'fan_speed': 1.0, 'idle_speed': 1.0, 'idle_timeout': 30, 'heater': ['heater_bed']}, 'heater_fan exhaust_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 5.0, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13', 'fan_speed': 1.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PD15', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 1.0, 'maximum_mcu_duration': 0.0, 'value': 1.0, 'shutdown_value': 0.0}, 'neopixel headlight': {'pin': 'PB0', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 0.0, 'initial_green': 0.2157, 'initial_blue': 1.0, 'initial_white': 0.0}, 'temperature_sensor chamber_temp': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF5', 'min_temp': 0.0, 'max_temp': 100.0, 'gcode_id': 'chamber_th'}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [150.0, 348.0], [350.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 5.0], [150.0, 245.0], [270.0, 5.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'gcode_macro _user_variables': {'gcode': '\n{% set Mx = printer[\'configfile\'].config["stepper_x"]["position_max"]|float %}\n{% set My = printer[\'configfile\'].config["stepper_y"]["position_max"]|float %}\n{% set Ox = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set Oy = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set Oz = printer[\'configfile\'].config["probe"]["z_offset"]|float %}\n\n\n{% if z_endstop_x != 0 or z_endstop_y != 0 %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ z_endstop_x }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ z_endstop_y }\n\n\n{% else %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ (Mx * 0.5) - Ox }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ (My * 0.5) - Oy }\n{% endif %}', 'description': 'G-Code macro', 'variable_verbose': 'True', 'variable_debug': 'False', 'variable_travel_speed': '200', 'variable_move_accel': '1000', 'variable_dock_speed': '50', 'variable_release_speed': '75', 'variable_z_drop_speed': '20', 'variable_safe_z': '25', 'variable_enable_z_hop': 'True', 'variable_max_bed_y': '300', 'variable_max_bed_x': '300', 'variable_z_endstop_x': '172', 'variable_z_endstop_y': '301', 'variable_docklocation_x': '40.5', 'variable_docklocation_y': '303.5', 'variable_docklocation_z': '-128', 'variable_enable_dock_servo': 'False', 'variable_servo_name': "'NAME'", 'variable_servo_deploy': '10', 'variable_servo_retract': '11', 'variable_servo_delay': '250', 'variable_dockmove_x': '40', 'variable_dockmove_y': '0', 'variable_dockmove_z': '0', 'variable_attachmove_x': '0', 'variable_attachmove_y': '30', 'variable_attachmove_z': '0', 'variable_umbilical': 'False', 'variable_umbilical_x': '15', 'variable_umbilical_y': '15', 'variable_park_toolhead': 'False', 'variable_parkposition_x': '125', 'variable_parkposition_y': '125', 'variable_parkposition_z': '30', 'variable_version': '1', 'variable_attachmove2_x': '0', 'variable_attachmove2_y': '0', 'variable_attachmove2_z': '0', 'variable_home_backoff_x': '10', 'variable_home_backoff_y': '10', 'variable_override_homing': "''", 'variable_dock_on_zhome': 'True'}, 'gcode_macro print_start': {'gcode': '\nM117 Homing...\nG28\nZ_TILT_ADJUST\nG28\n\n\n\n\n\n\n\nG0 X150 Y150 Z30 F3600', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1500.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-02-15 21:07:38,992 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-15 21:07:38,992 [printer.py:reinit()] - Klipper version: v0.12.0-103-g6ce6fbbc-dirty
2024-02-15 21:07:38,992 [printer.py:reinit()] - # Extruders: 1
2024-02-15 21:07:38,992 [printer.py:reinit()] - # Temperature devices: 2
2024-02-15 21:07:38,993 [printer.py:reinit()] - # Fans: 4
2024-02-15 21:07:38,993 [printer.py:reinit()] - # Output pins: 1
2024-02-15 21:07:38,993 [printer.py:reinit()] - # Leds: 1
2024-02-15 21:07:39,008 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2024-02-15 21:07:39,011 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-02-15 21:07:39,257 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor chamber_temp&fan&controller_fan controller_fan&heater_fan hotend_fan&heater_fan exhaust_fan&output_pin caselight&neopixel headlight
2024-02-15 21:07:39,261 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-02-15 21:07:39,262 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-02-15 21:07:39,279 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-02-15 21:07:39,285 [screen.py:init_klipper()] - Printer initialized
2024-02-15 21:07:39,286 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2024-02-15 21:07:39,286 [printer.py:change_state()] - Adding callback for state: ready
2024-02-15 21:07:39,301 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-15 21:07:39,302 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'octoprint_compat', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-310-g67c98f6', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-02-15 21:07:39,314 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2024-02-15 21:07:39,487 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2024-02-15 21:07:39,490 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro _Probe_Variables': {'variable_probe_attached': 'False', 'variable_probe_state': 'False', 'variable_probe_lock': 'False', 'variable_probe_z_homed': 'False', 'variable_z_endstop_x': '0', 'variable_z_endstop_y': '0', 'gcode': ''}, 'gcode_macro _klicky_check_variables_version': {'gcode': '\n{% set version = printer["gcode_macro _User_Variables"].version|default(0) %}\n\n{% if version != 1 %}\n{ action_raise_error("Please update your klicky variables, there are some functionality changes") }\n{% endif %}'}, 'gcode_macro _KlickyDebug': {'gcode': '\n{% set message  = params.MSG %}\n{% set debug = printer["gcode_macro _User_Variables"].debug|default(False) %}\n\n{% if debug %}\n{ action_respond_info(message) }\n{% endif %}'}, 'gcode_macro _exit_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move  = params.MOVE|default(0) %}\n{% set speed = printer["gcode_macro _User_Variables"].travel_speed %}\n\n\nM400\nSET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\nRESTORE_GCODE_STATE NAME={function} MOVE={move} MOVE_SPEED={speed}'}, 'gcode_macro _entry_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move_accel = printer["gcode_macro _User_Variables"].move_accel|default(1000) %}\n\nM400\nSAVE_GCODE_STATE NAME={function}\n\nSET_GCODE_OFFSET Z=0\n\nG90\n\nSET_VELOCITY_LIMIT ACCEL={move_accel}'}, 'gcode_macro _Homing_Variables': {'gcode': '\n{% set reset  = params.RESET|default(0) %}\n{% if reset %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }\n{% endif %}'}, 'gcode_macro Attach_Probe_Lock': {'description': 'Attaches Klicky Probe, can only be docked after unlocking', 'gcode': '\nAttach_Probe\n_Probe_Lock'}, 'gcode_macro Dock_Probe_Unlock': {'description': 'Docks Klicky Probe even if it was locked', 'gcode': '\n_Probe_Unlock\nDock_Probe'}, 'gcode_macro _Probe_Unlock': {'description': 'Unlocks Klicky Probe state', 'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to False"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }'}, 'gcode_macro _Probe_Lock': {'description': 'Locks Klicky Probe state', 'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to True"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ True }'}, 'gcode_macro _DeployKlickyDock': {'description': 'Deploys Klicky servo-controlled dock', 'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_deploy = printer["gcode_macro _User_Variables"].servo_deploy|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_DeployKlickyDock Klicky servo configuration enabled"\n{% if servo_deploy == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo deploy angle specified") }\n{% endif %}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _DeployDock"] is defined %}\n_KlickyDebug msg="_DeployKlickyDock calling _DeployDock"\n_DeployDock\n{% endif %}'}, 'gcode_macro _RetractKlickyDock': {'description': 'Retracts Klicky servo-controlled dock', 'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_retract = printer["gcode_macro _User_Variables"].servo_retract|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_RetractKlickyDock Klicky servo configuration enabled"\n{% if servo_retract == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo retract angle specified") }\n{% endif %}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _RetractDock"] is defined %}\n_KlickyDebug msg="_RetractKlickyDock calling _RetractDock"\n_RetractDock\n{% endif %}'}, 'gcode_macro Attach_Probe': {'description': 'Attaches Klicky Probe', 'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set attachmove2_x = printer["gcode_macro _User_Variables"].attachmove2_x|default(0) %}\n{% set attachmove2_y = printer["gcode_macro _User_Variables"].attachmove2_y|default(0) %}\n{% set attachmove2_z = printer["gcode_macro _User_Variables"].attachmove2_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n_entry_point function=Attach_Probe\n\n{% if bypass_probe_docking == False %}\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n_KlickyDebug msg="Attach_Probe Axis homed"\n\n\n{% elif not probe_attached and not probe_lock %}\n_KlickyDebug msg="Attach_Probe going to attach probe"\n{% if verbose %}\n{ action_respond_info("Attaching Probe") }\n{% endif %}\n_KLICKY_STATUS_BUSY\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% if not enable_z_hop %}\n_KlickyDebug msg="Attach_Probe z_hop disabled"\n{% set safe_z = 0 %}\n{% endif %}\n{% endif %}\n\n\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero, duplicate?") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Umbilical_Path\n\n_entry_point function=Attach_Probe_intern\n\n\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n_DeployKlickyDock\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}"\nG0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}\n\n_RetractKlickyDock\n\n{% if ((printer.gcode_move.gcode_position.z < safe_z) or (docklocation_z != -128 and docklocation_z < safe_z ))%}\n_KlickyDebug msg="Attach_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\n_CheckProbe action=attach\n\n_exit_point function=Attach_Probe_intern move={goback}\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe locked not attaching probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already attached!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe already attached, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Attach_Probe\n{% else %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}'}, 'gcode_macro Dock_Probe': {'description': 'Docks Klicky Probe', 'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n{% if bypass_probe_docking == True %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}\n\n{% if bypass_probe_docking != True %}\n_entry_point function=Dock_Probe\n\n\n{% if probe_attached and not probe_lock %}\n_KLICKY_STATUS_BUSY\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Dock_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n_Umbilical_Path\n\n\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n\n_DeployKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\n\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}"\nG0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}\n{% endif %}\n\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}\n\n\n_RetractKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving away from the dock to G0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}\n\n\n{% if (printer.gcode_move.gcode_position.z < safe_z) %}\n_KlickyDebug msg="Dock_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\nG4 P1000\n_CheckProbe action=dock\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe locked not docking probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already docked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe already docked, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Dock_Probe move={goback}\n{% else %}\n_KlickyDebug msg="Dock_Probe probe docking bypassed, doing nothing"\n{% endif %}'}, 'gcode_macro PROBE_CALIBRATE': {'rename_existing': '_PROBE_CALIBRATE', 'description': 'Calibrate the probes z_offset with klicky automount', 'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_calibrate Axis homed"\n_KlickyDebug msg="probe_calibrate Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_CALIBRATE with the probe above the BED, check klicky_variables bed size!") }\n{% endif %}\n\n{% if bypass_probe_docking == False %}\n_CheckProbe action=query\nG90\nAttach_Probe back=1\n_KLICKY_STATUS_CALIBRATING_Z\n\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nM118 moving the toolhead 20 mm from the bed\n_KlickyDebug msg="probe_calibrate Moving Z up by 20mm"\nTESTZ Z=20\nM118 remove manually the probe and continue calibration\n_KLICKY_STATUS_READY\n{% else %}\n_KLICKY_STATUS_CALIBRATING_Z\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n_KLICKY_STATUS_READY\n{% endif %}'}, 'gcode_macro PROBE_ACCURACY': {'rename_existing': '_PROBE_ACCURACY', 'description': 'Probe Z-height accuracy at current XY position with klicky automount', 'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_accuracy Axis homed"\n_KlickyDebug msg="probe_accuracy Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n_entry_point function=PROBE_ACCURACY\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_ACCURACY with the probe above the BED, check klicky_variables bed size!") }\n{% endif%}\n\n_CheckProbe action=query\nAttach_Probe back=1\n\n_KlickyDebug msg="probe_accuracy calling klipper probe accuracy"\n_PROBE_ACCURACY {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nDock_Probe back=1\n\n_exit_point function=PROBE_ACCURACY move=1'}, 'force_move': {'enable_force_move': 'True'}, 'homing_override': {'axes': 'xyz', 'gcode': '\n\n_User_Variables\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n{% set kinematic_z = 0 %}\n{% set dock_on_zhome = printer["gcode_macro _User_Variables"].dock_on_zhome|default(True) %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set home_backoff_x = printer["gcode_macro _User_Variables"].home_backoff_x|default(0) %}\n{% set home_backoff_y = printer["gcode_macro _User_Variables"].home_backoff_y|default(0) %}\n{% set override_homing = printer["gcode_macro _User_Variables"].override_homing|default(\'\') %}\n\n\n_klicky_check_variables_version\n\n_CheckProbe action=query\n\n\n{% set home_x, home_y, home_z, leave_probe_attached = False, False, False, False %}\n\n{% if \'PROBE_LOCK\' in params%}\n{% if verbose %}\n{ action_respond_info("PROBE_LOCK = True") }\n{% endif %}\n{% set leave_probe_attached = True %}\n{% endif %}\n\n\n{% if not \'X\' in params\nand not \'Y\' in params\nand not \'Z\' in params %}\n\n{% set home_x, home_y, home_z = True, True, True %}\n_KlickyDebug msg="homing_override goint to home all axes"\n\n{% else %}\n{% if \'X\' in params %}\n{% set home_x = True %}\n_KlickyDebug msg="homing_override goint to home X"\n\n{% endif %}\n\n{% if \'Y\' in params %}\n{% set home_y = True %}\n_KlickyDebug msg="homing_override goint to home Y"\n{% endif %}\n\n{% if \'Z\' in params %}\n{% set home_z = True %}\n_KlickyDebug msg="homing_override goint to home Z"\n{% endif %}\n\n{% if \'X\' in params\nand \'Y\' in params\nand \'Z\' in params %}\n\n\n_Homing_Variables reset=1\n_KlickyDebug msg="homing_override goint to home all axes"\n{% endif %}\n\n{% endif %}\n\n_entry_point function=homing_override\n_KLICKY_STATUS_HOMING\n\n\n{% if \'z\' not in printer.toolhead.homed_axes %}\n{% if enable_z_hop == False %}\n_KlickyDebug msg="homing_override z_hop disabled"\n\n{% set kinematic_z = safe_z %}\n{% set safe_z = safe_z %}\n{% endif %}\n{% endif %}\n\n\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes and \'z\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("No axis homed") }\n{% endif %}\n_KlickyDebug msg="homing_override no axis homed, setting position as X=Y=0 Z={kinematic_z}"\nSET_KINEMATIC_POSITION X=0 Y=0 Z={kinematic_z}\nM400\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% if home_z != True %}\n_KlickyDebug msg="homing_override clearing axis homed state if not already homing Z"\nM84\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("X or Y not homed, forcing full G28") }\n{% endif %}\n{% set home_x, home_y, home_z = True, True, True %}\n{% endif %}\n{% endif %}\n\n\n{% if ((attachmove_y == 0 and override_homing == \'\' ) or (override_homing == \'Y\'))%}\n\n{% if home_y %}\n{% if override_homing == \'Y\' %}\n_KlickyDebug msg="homing_override Y homing first override, due to override_homing = Y"\n{% else %}\n_KlickyDebug msg="homing_override Y homing first override, due to attachmove_y = 0"\n{% endif %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y G28 Y0"\nG28 Y0\n\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop-home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n{% set home_y = False %}\n{% endif %}\n\n\n\n{% if home_x %}\n{% if verbose %}\n{ action_respond_info("Homing X") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in X homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_X"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_X external script to handle the X homing"\n_HOME_X\n{% else %}\n_KlickyDebug msg="homing_override Homing X, G28 X0"\nG28 X0\n\n{% if home_backoff_x != 0 %}\n{% if (printer.configfile.settings.stepper_x.position_endstop > (printer.configfile.settings.stepper_x.position_min|default(0) + printer.configfile.settings.stepper_x.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n\n{% if home_y %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y, G28 Y0"\nG28 Y0\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if verbose %}\n{ action_respond_info("Homing Z") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe configured as a virtual Z endstop attaching probe"\nAttach_Probe\n\n{% if leave_probe_attached %}\n_Probe_Lock\n{% endif %}\n{% elif dock_on_zhome == True %}\nDock_Probe\n{% endif %}\n\n_Home_Z_\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe no longer required, docking probe"\nDock_Probe\n{% elif dock_on_zhome == False %}\nDock_Probe\n{% endif %}\n{% endif %}\n_CheckProbe action=query\n\n\n_Park_Toolhead\n\n_exit_point function=homing_override\n_KLICKY_STATUS_READY'}, 'gcode_macro _Umbilical_Path': {'gcode': '\n{% set umbilical = printer["gcode_macro _User_Variables"].umbilical %}\n{% set umbilical_x = printer["gcode_macro _User_Variables"].umbilical_x %}\n{% set umbilical_y = printer["gcode_macro _User_Variables"].umbilical_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n\n{% if umbilical %}\n\n_entry_point function=Umbilical_Path\n\n_KlickyDebug msg="_Umbilical_Path moving to G0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}"\nG0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}\n\n_exit_point function=Umbilical_Path\n{% endif %}'}, 'gcode_macro _Home_Z_': {'gcode': '\n{% set z_endstop_x = printer["gcode_macro _Probe_Variables"].z_endstop_x %}\n{% set z_endstop_y = printer["gcode_macro _Probe_Variables"].z_endstop_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}    {% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Home_Z\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n{% else %}\n_KlickyDebug msg="_Home_Z_ XY Axis homed"\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="_Home_Z_ Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n\n\n_KlickyDebug msg="_Home_Z_ moving to Z endstop position G0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}"\nG0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}\n_KlickyDebug msg="_Home_Z_ Homing Z G28 Z"\nG28 Z0\n_KlickyDebug msg="_Home_Z_ toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_exit_point function=Home_Z'}, 'gcode_macro _CheckProbe': {'variable_probe_state': '0', 'gcode': '\nQuery_Probe\n_SetProbeState action={ params.ACTION }'}, 'gcode_macro _SetProbeState': {'gcode': '\n{% set query_probe_triggered = printer.probe.last_query %}\n{% set action  = params.ACTION|default(\'\') %}\n\n\n{% if query_probe_triggered %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ False }\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ True }\n{% endif %}\n\n{% if action == \'query\' %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_state VALUE={ query_probe_triggered }\n{% endif %}\n\n\n\n\n{% if not query_probe_triggered and action == \'dock\' %}\n{ action_raise_error("Probe dock failed!") }\n{% endif %}\n\n\n{% if query_probe_triggered and action == \'attach\' %}\n{ action_raise_error("Probe attach failed!") }\n{% endif %}'}, 'gcode_macro _Park_Toolhead': {'gcode': '\n{% set park_toolhead = printer["gcode_macro _User_Variables"].park_toolhead %}\n{% set parkposition_x = printer["gcode_macro _User_Variables"].parkposition_x %}\n{% set parkposition_y = printer["gcode_macro _User_Variables"].parkposition_y %}\n{% set parkposition_z = printer["gcode_macro _User_Variables"].parkposition_z %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Park_Toolhead\n\n{% if park_toolhead and \'xyz\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Parking Toolhead") }\n{% endif %}\n{% if parkposition_z == -128 %}\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}\n\n{% else %}\n\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}\n\n{% endif %}\n\n{% endif %}\n_exit_point function=Park_Toolhead'}, 'gcode_macro _klicky_status_ready': {'gcode': '\n{% if printer[\'gcode_macro status_ready\'] is defined %}\n_KlickyDebug msg="_klicky_status_ready activating the LED STATUS_READY"\nSTATUS_READY\n{% endif %}'}, 'gcode_macro _klicky_status_busy': {'gcode': '\n{% if printer[\'gcode_macro status_busy\'] is defined %}\n_KlickyDebug msg="_klicky_status_busy activating the LED STATUS_BUSY"\nSTATUS_BUSY\n{% endif %}'}, 'gcode_macro _klicky_status_leveling': {'gcode': '\n{% if printer[\'gcode_macro status_leveling\'] is defined %}\n_KlickyDebug msg="_klicky_status_leveling activating the LED STATUS_LEVELING"\nSTATUS_LEVELING\n{% endif %}'}, 'gcode_macro _klicky_status_homing': {'gcode': '\n{% if printer[\'gcode_macro status_homing\'] is defined %}\n_KlickyDebug msg="_klicky_status_homing activating the LED STATUS_HOMING"\nSTATUS_HOMING\n{% endif %}'}, 'gcode_macro _klicky_status_cleaning': {'gcode': '\n{% if printer[\'gcode_macro status_cleaning\'] is defined %}\n_KlickyDebug msg="_klicky_status_cleaning activating the LED STATUS_CLEANING"\nSTATUS_CLEANING\n{% endif %}'}, 'gcode_macro _klicky_status_meshing': {'gcode': '\n{% if printer[\'gcode_macro status_meshing\'] is defined %}\n_KlickyDebug msg="_klicky_status_meshing activating the LED STATUS_MESHING"\nSTATUS_MESHING\n{% endif %}'}, 'gcode_macro _klicky_status_calibrating_z': {'gcode': '\n{% if printer[\'gcode_macro status_calibrating_z\'] is defined %}\n_KlickyDebug msg="_klicky_status_calibrating_z activating the LED STATUS_CALIBRATING_Z"\nSTATUS_CALIBRATING_Z\n{% endif %}'}, 'z_calibration': {'nozzle_xy_position': '172, 301', 'switch_xy_position': '171.5, 282', 'bed_xy_position': '150, 150', 'switch_offset': '0.09', 'offset_margins': '-1.0,1.0', 'speed': '50', 'probing_first_fast': 'false', 'start_gcode': 'Attach_Probe', 'end_gcode': 'Dock_Probe'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_28003C001150535556323420-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '^PG6', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '25', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'PG9', 'position_min': '0', 'position_endstop': '300', 'position_max': '303.5', 'homing_speed': '25', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': '!PG3', 'enable_pin': '!PG5', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'PG10', 'position_endstop': '-0.5', 'position_max': '290', 'position_min': '-4.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA0', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': '!PF10', 'enable_pin': '!PG2', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PC13', 'dir_pin': 'PF0', 'enable_pin': '!PF1', 'rotation_distance': '21.9459674016', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.75', 'heater_pin': 'PA1', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF4', 'min_temp': '10', 'max_temp': '270', 'max_power': '1.0', 'min_extrude_temp': '170', 'pressure_advance': '0.05', 'pressure_advance_smooth_time': '0.040', 'control': 'pid', 'pid_kp': '26.572', 'pid_ki': '2.036', 'pid_kd': '86.691'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.5', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PA2', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF3', 'max_power': '1', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '55.196', 'pid_ki': '2.091', 'pid_kd': '364.295'}, 'probe': {'pin': 'PG15', 'x_offset': '0', 'y_offset': '25.0', 'z_offset': '0', 'speed': '10.0', 'samples': '5', 'samples_result': 'median', 'sample_retract_dist': '3.0', 'samples_tolerance': '0.006', 'samples_tolerance_retries': '3'}, 'fan': {'pin': 'PA8', 'kick_start_time': '0.5', 'off_below': '0.10'}, 'heater_fan hotend_fan': {'pin': 'PE5', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'controller_fan controller_fan': {'pin': 'PD12', 'kick_start_time': '0.5', 'heater': 'heater_bed'}, 'heater_fan exhaust_fan': {'pin': 'PD13', 'max_power': '1.0', 'shutdown_speed': '0.0', 'kick_start_time': '5.0', 'heater': 'heater_bed', 'heater_temp': '60', 'fan_speed': '1.0'}, 'output_pin caselight': {'pin': 'PD15', 'pwm': 'true', 'shutdown_value': '0', 'value': '1', 'cycle_time': '0.01'}, 'neopixel headlight': {'pin': 'PB0', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '0.0', 'initial_green': '0.2157', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'temperature_sensor chamber_temp': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF5', 'min_temp': '0', 'max_temp': '100', 'gcode_id': 'chamber_th'}, 'idle_timeout': {'timeout': '1800'}, 'z_tilt': {'z_positions': '\n-50, 18\n150, 348\n350, 18', 'points': '\n30, 5\n150, 245\n270, 5', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'gcode_macro _User_Variables': {'variable_verbose': 'True', 'variable_debug': 'False', 'variable_travel_speed': '200', 'variable_move_accel': '1000', 'variable_dock_speed': '50', 'variable_release_speed': '75', 'variable_z_drop_speed': '20', 'variable_safe_z': '25', 'variable_enable_z_hop': 'True', 'variable_max_bed_y': '300', 'variable_max_bed_x': '300', 'variable_z_endstop_x': '172', 'variable_z_endstop_y': '301', 'variable_docklocation_x': '40.5', 'variable_docklocation_y': '303.5', 'variable_docklocation_z': '-128', 'variable_enable_dock_servo': 'False', 'variable_servo_name': "'NAME'", 'variable_servo_deploy': '10', 'variable_servo_retract': '11', 'variable_servo_delay': '250', 'variable_dockmove_x': '40', 'variable_dockmove_y': '0', 'variable_dockmove_z': '0', 'variable_attachmove_x': '0', 'variable_attachmove_y': '30', 'variable_attachmove_z': '0', 'variable_umbilical': 'False', 'variable_umbilical_x': '15', 'variable_umbilical_y': '15', 'variable_park_toolhead': 'False', 'variable_parkposition_x': '125', 'variable_parkposition_y': '125', 'variable_parkposition_z': '30', 'variable_version': '1', 'variable_attachmove2_x': '0', 'variable_attachmove2_y': '0', 'variable_attachmove2_z': '0', 'variable_home_backoff_x': '10', 'variable_home_backoff_y': '10', 'variable_override_homing': "''", 'variable_dock_on_zhome': 'True', 'gcode': '\n{% set Mx = printer[\'configfile\'].config["stepper_x"]["position_max"]|float %}\n{% set My = printer[\'configfile\'].config["stepper_y"]["position_max"]|float %}\n{% set Ox = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set Oy = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set Oz = printer[\'configfile\'].config["probe"]["z_offset"]|float %}\n\n\n{% if z_endstop_x != 0 or z_endstop_y != 0 %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ z_endstop_x }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ z_endstop_y }\n\n\n{% else %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ (Mx * 0.5) - Ox }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ (My * 0.5) - Oy }\n{% endif %}'}, 'gcode_macro PRINT_START': {'gcode': '\nM117 Homing...\nG28\nZ_TILT_ADJUST\nG28\n\n\n\n\n\n\n\nG0 X150 Y150 Z30 F3600'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_28003C001150535556323420-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro _probe_variables': {'gcode': '', 'description': 'G-Code macro', 'variable_probe_attached': 'False', 'variable_probe_state': 'False', 'variable_probe_lock': 'False', 'variable_probe_z_homed': 'False', 'variable_z_endstop_x': '0', 'variable_z_endstop_y': '0'}, 'gcode_macro _klicky_check_variables_version': {'gcode': '\n{% set version = printer["gcode_macro _User_Variables"].version|default(0) %}\n\n{% if version != 1 %}\n{ action_raise_error("Please update your klicky variables, there are some functionality changes") }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klickydebug': {'gcode': '\n{% set message  = params.MSG %}\n{% set debug = printer["gcode_macro _User_Variables"].debug|default(False) %}\n\n{% if debug %}\n{ action_respond_info(message) }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _exit_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move  = params.MOVE|default(0) %}\n{% set speed = printer["gcode_macro _User_Variables"].travel_speed %}\n\n\nM400\nSET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\nRESTORE_GCODE_STATE NAME={function} MOVE={move} MOVE_SPEED={speed}', 'description': 'G-Code macro'}, 'gcode_macro _entry_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move_accel = printer["gcode_macro _User_Variables"].move_accel|default(1000) %}\n\nM400\nSAVE_GCODE_STATE NAME={function}\n\nSET_GCODE_OFFSET Z=0\n\nG90\n\nSET_VELOCITY_LIMIT ACCEL={move_accel}', 'description': 'G-Code macro'}, 'gcode_macro _homing_variables': {'gcode': '\n{% set reset  = params.RESET|default(0) %}\n{% if reset %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro attach_probe_lock': {'gcode': '\nAttach_Probe\n_Probe_Lock', 'description': 'Attaches Klicky Probe, can only be docked after unlocking'}, 'gcode_macro dock_probe_unlock': {'gcode': '\n_Probe_Unlock\nDock_Probe', 'description': 'Docks Klicky Probe even if it was locked'}, 'gcode_macro _probe_unlock': {'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to False"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }', 'description': 'Unlocks Klicky Probe state'}, 'gcode_macro _probe_lock': {'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to True"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ True }', 'description': 'Locks Klicky Probe state'}, 'gcode_macro _deployklickydock': {'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_deploy = printer["gcode_macro _User_Variables"].servo_deploy|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_DeployKlickyDock Klicky servo configuration enabled"\n{% if servo_deploy == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo deploy angle specified") }\n{% endif %}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _DeployDock"] is defined %}\n_KlickyDebug msg="_DeployKlickyDock calling _DeployDock"\n_DeployDock\n{% endif %}', 'description': 'Deploys Klicky servo-controlled dock'}, 'gcode_macro _retractklickydock': {'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_retract = printer["gcode_macro _User_Variables"].servo_retract|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_RetractKlickyDock Klicky servo configuration enabled"\n{% if servo_retract == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo retract angle specified") }\n{% endif %}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _RetractDock"] is defined %}\n_KlickyDebug msg="_RetractKlickyDock calling _RetractDock"\n_RetractDock\n{% endif %}', 'description': 'Retracts Klicky servo-controlled dock'}, 'gcode_macro attach_probe': {'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set attachmove2_x = printer["gcode_macro _User_Variables"].attachmove2_x|default(0) %}\n{% set attachmove2_y = printer["gcode_macro _User_Variables"].attachmove2_y|default(0) %}\n{% set attachmove2_z = printer["gcode_macro _User_Variables"].attachmove2_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n_entry_point function=Attach_Probe\n\n{% if bypass_probe_docking == False %}\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n_KlickyDebug msg="Attach_Probe Axis homed"\n\n\n{% elif not probe_attached and not probe_lock %}\n_KlickyDebug msg="Attach_Probe going to attach probe"\n{% if verbose %}\n{ action_respond_info("Attaching Probe") }\n{% endif %}\n_KLICKY_STATUS_BUSY\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% if not enable_z_hop %}\n_KlickyDebug msg="Attach_Probe z_hop disabled"\n{% set safe_z = 0 %}\n{% endif %}\n{% endif %}\n\n\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero, duplicate?") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Umbilical_Path\n\n_entry_point function=Attach_Probe_intern\n\n\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n_DeployKlickyDock\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}"\nG0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}\n\n_RetractKlickyDock\n\n{% if ((printer.gcode_move.gcode_position.z < safe_z) or (docklocation_z != -128 and docklocation_z < safe_z ))%}\n_KlickyDebug msg="Attach_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\n_CheckProbe action=attach\n\n_exit_point function=Attach_Probe_intern move={goback}\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe locked not attaching probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already attached!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe already attached, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Attach_Probe\n{% else %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}', 'description': 'Attaches Klicky Probe'}, 'gcode_macro dock_probe': {'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n{% if bypass_probe_docking == True %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}\n\n{% if bypass_probe_docking != True %}\n_entry_point function=Dock_Probe\n\n\n{% if probe_attached and not probe_lock %}\n_KLICKY_STATUS_BUSY\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Dock_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n_Umbilical_Path\n\n\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n\n_DeployKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\n\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}"\nG0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}\n{% endif %}\n\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}\n\n\n_RetractKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving away from the dock to G0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}\n\n\n{% if (printer.gcode_move.gcode_position.z < safe_z) %}\n_KlickyDebug msg="Dock_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\nG4 P1000\n_CheckProbe action=dock\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe locked not docking probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already docked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe already docked, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Dock_Probe move={goback}\n{% else %}\n_KlickyDebug msg="Dock_Probe probe docking bypassed, doing nothing"\n{% endif %}', 'description': 'Docks Klicky Probe'}, 'gcode_macro probe_calibrate': {'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_calibrate Axis homed"\n_KlickyDebug msg="probe_calibrate Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_CALIBRATE with the probe above the BED, check klicky_variables bed size!") }\n{% endif %}\n\n{% if bypass_probe_docking == False %}\n_CheckProbe action=query\nG90\nAttach_Probe back=1\n_KLICKY_STATUS_CALIBRATING_Z\n\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nM118 moving the toolhead 20 mm from the bed\n_KlickyDebug msg="probe_calibrate Moving Z up by 20mm"\nTESTZ Z=20\nM118 remove manually the probe and continue calibration\n_KLICKY_STATUS_READY\n{% else %}\n_KLICKY_STATUS_CALIBRATING_Z\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n_KLICKY_STATUS_READY\n{% endif %}', 'rename_existing': '_PROBE_CALIBRATE', 'description': 'Calibrate the probes z_offset with klicky automount'}, 'gcode_macro probe_accuracy': {'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_accuracy Axis homed"\n_KlickyDebug msg="probe_accuracy Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n_entry_point function=PROBE_ACCURACY\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_ACCURACY with the probe above the BED, check klicky_variables bed size!") }\n{% endif%}\n\n_CheckProbe action=query\nAttach_Probe back=1\n\n_KlickyDebug msg="probe_accuracy calling klipper probe accuracy"\n_PROBE_ACCURACY {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nDock_Probe back=1\n\n_exit_point function=PROBE_ACCURACY move=1', 'rename_existing': '_PROBE_ACCURACY', 'description': 'Probe Z-height accuracy at current XY position with klicky automount'}, 'force_move': {'enable_force_move': True}, 'homing_override': {'axes': 'xyz', 'gcode': '\n\n_User_Variables\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n{% set kinematic_z = 0 %}\n{% set dock_on_zhome = printer["gcode_macro _User_Variables"].dock_on_zhome|default(True) %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set home_backoff_x = printer["gcode_macro _User_Variables"].home_backoff_x|default(0) %}\n{% set home_backoff_y = printer["gcode_macro _User_Variables"].home_backoff_y|default(0) %}\n{% set override_homing = printer["gcode_macro _User_Variables"].override_homing|default(\'\') %}\n\n\n_klicky_check_variables_version\n\n_CheckProbe action=query\n\n\n{% set home_x, home_y, home_z, leave_probe_attached = False, False, False, False %}\n\n{% if \'PROBE_LOCK\' in params%}\n{% if verbose %}\n{ action_respond_info("PROBE_LOCK = True") }\n{% endif %}\n{% set leave_probe_attached = True %}\n{% endif %}\n\n\n{% if not \'X\' in params\nand not \'Y\' in params\nand not \'Z\' in params %}\n\n{% set home_x, home_y, home_z = True, True, True %}\n_KlickyDebug msg="homing_override goint to home all axes"\n\n{% else %}\n{% if \'X\' in params %}\n{% set home_x = True %}\n_KlickyDebug msg="homing_override goint to home X"\n\n{% endif %}\n\n{% if \'Y\' in params %}\n{% set home_y = True %}\n_KlickyDebug msg="homing_override goint to home Y"\n{% endif %}\n\n{% if \'Z\' in params %}\n{% set home_z = True %}\n_KlickyDebug msg="homing_override goint to home Z"\n{% endif %}\n\n{% if \'X\' in params\nand \'Y\' in params\nand \'Z\' in params %}\n\n\n_Homing_Variables reset=1\n_KlickyDebug msg="homing_override goint to home all axes"\n{% endif %}\n\n{% endif %}\n\n_entry_point function=homing_override\n_KLICKY_STATUS_HOMING\n\n\n{% if \'z\' not in printer.toolhead.homed_axes %}\n{% if enable_z_hop == False %}\n_KlickyDebug msg="homing_override z_hop disabled"\n\n{% set kinematic_z = safe_z %}\n{% set safe_z = safe_z %}\n{% endif %}\n{% endif %}\n\n\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes and \'z\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("No axis homed") }\n{% endif %}\n_KlickyDebug msg="homing_override no axis homed, setting position as X=Y=0 Z={kinematic_z}"\nSET_KINEMATIC_POSITION X=0 Y=0 Z={kinematic_z}\nM400\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% if home_z != True %}\n_KlickyDebug msg="homing_override clearing axis homed state if not already homing Z"\nM84\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("X or Y not homed, forcing full G28") }\n{% endif %}\n{% set home_x, home_y, home_z = True, True, True %}\n{% endif %}\n{% endif %}\n\n\n{% if ((attachmove_y == 0 and override_homing == \'\' ) or (override_homing == \'Y\'))%}\n\n{% if home_y %}\n{% if override_homing == \'Y\' %}\n_KlickyDebug msg="homing_override Y homing first override, due to override_homing = Y"\n{% else %}\n_KlickyDebug msg="homing_override Y homing first override, due to attachmove_y = 0"\n{% endif %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y G28 Y0"\nG28 Y0\n\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop-home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n{% set home_y = False %}\n{% endif %}\n\n\n\n{% if home_x %}\n{% if verbose %}\n{ action_respond_info("Homing X") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in X homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_X"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_X external script to handle the X homing"\n_HOME_X\n{% else %}\n_KlickyDebug msg="homing_override Homing X, G28 X0"\nG28 X0\n\n{% if home_backoff_x != 0 %}\n{% if (printer.configfile.settings.stepper_x.position_endstop > (printer.configfile.settings.stepper_x.position_min|default(0) + printer.configfile.settings.stepper_x.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n\n{% if home_y %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y, G28 Y0"\nG28 Y0\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if verbose %}\n{ action_respond_info("Homing Z") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe configured as a virtual Z endstop attaching probe"\nAttach_Probe\n\n{% if leave_probe_attached %}\n_Probe_Lock\n{% endif %}\n{% elif dock_on_zhome == True %}\nDock_Probe\n{% endif %}\n\n_Home_Z_\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe no longer required, docking probe"\nDock_Probe\n{% elif dock_on_zhome == False %}\nDock_Probe\n{% endif %}\n{% endif %}\n_CheckProbe action=query\n\n\n_Park_Toolhead\n\n_exit_point function=homing_override\n_KLICKY_STATUS_READY'}, 'gcode_macro _umbilical_path': {'gcode': '\n{% set umbilical = printer["gcode_macro _User_Variables"].umbilical %}\n{% set umbilical_x = printer["gcode_macro _User_Variables"].umbilical_x %}\n{% set umbilical_y = printer["gcode_macro _User_Variables"].umbilical_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n\n{% if umbilical %}\n\n_entry_point function=Umbilical_Path\n\n_KlickyDebug msg="_Umbilical_Path moving to G0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}"\nG0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}\n\n_exit_point function=Umbilical_Path\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _home_z_': {'gcode': '\n{% set z_endstop_x = printer["gcode_macro _Probe_Variables"].z_endstop_x %}\n{% set z_endstop_y = printer["gcode_macro _Probe_Variables"].z_endstop_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}    {% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Home_Z\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n{% else %}\n_KlickyDebug msg="_Home_Z_ XY Axis homed"\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="_Home_Z_ Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n\n\n_KlickyDebug msg="_Home_Z_ moving to Z endstop position G0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}"\nG0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}\n_KlickyDebug msg="_Home_Z_ Homing Z G28 Z"\nG28 Z0\n_KlickyDebug msg="_Home_Z_ toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_exit_point function=Home_Z', 'description': 'G-Code macro'}, 'gcode_macro _checkprobe': {'gcode': '\nQuery_Probe\n_SetProbeState action={ params.ACTION }', 'description': 'G-Code macro', 'variable_probe_state': '0'}, 'gcode_macro _setprobestate': {'gcode': '\n{% set query_probe_triggered = printer.probe.last_query %}\n{% set action  = params.ACTION|default(\'\') %}\n\n\n{% if query_probe_triggered %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ False }\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ True }\n{% endif %}\n\n{% if action == \'query\' %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_state VALUE={ query_probe_triggered }\n{% endif %}\n\n\n\n\n{% if not query_probe_triggered and action == \'dock\' %}\n{ action_raise_error("Probe dock failed!") }\n{% endif %}\n\n\n{% if query_probe_triggered and action == \'attach\' %}\n{ action_raise_error("Probe attach failed!") }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _park_toolhead': {'gcode': '\n{% set park_toolhead = printer["gcode_macro _User_Variables"].park_toolhead %}\n{% set parkposition_x = printer["gcode_macro _User_Variables"].parkposition_x %}\n{% set parkposition_y = printer["gcode_macro _User_Variables"].parkposition_y %}\n{% set parkposition_z = printer["gcode_macro _User_Variables"].parkposition_z %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Park_Toolhead\n\n{% if park_toolhead and \'xyz\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Parking Toolhead") }\n{% endif %}\n{% if parkposition_z == -128 %}\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}\n\n{% else %}\n\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}\n\n{% endif %}\n\n{% endif %}\n_exit_point function=Park_Toolhead', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_ready': {'gcode': '\n{% if printer[\'gcode_macro status_ready\'] is defined %}\n_KlickyDebug msg="_klicky_status_ready activating the LED STATUS_READY"\nSTATUS_READY\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_busy': {'gcode': '\n{% if printer[\'gcode_macro status_busy\'] is defined %}\n_KlickyDebug msg="_klicky_status_busy activating the LED STATUS_BUSY"\nSTATUS_BUSY\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_leveling': {'gcode': '\n{% if printer[\'gcode_macro status_leveling\'] is defined %}\n_KlickyDebug msg="_klicky_status_leveling activating the LED STATUS_LEVELING"\nSTATUS_LEVELING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_homing': {'gcode': '\n{% if printer[\'gcode_macro status_homing\'] is defined %}\n_KlickyDebug msg="_klicky_status_homing activating the LED STATUS_HOMING"\nSTATUS_HOMING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_cleaning': {'gcode': '\n{% if printer[\'gcode_macro status_cleaning\'] is defined %}\n_KlickyDebug msg="_klicky_status_cleaning activating the LED STATUS_CLEANING"\nSTATUS_CLEANING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_meshing': {'gcode': '\n{% if printer[\'gcode_macro status_meshing\'] is defined %}\n_KlickyDebug msg="_klicky_status_meshing activating the LED STATUS_MESHING"\nSTATUS_MESHING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_calibrating_z': {'gcode': '\n{% if printer[\'gcode_macro status_calibrating_z\'] is defined %}\n_KlickyDebug msg="_klicky_status_calibrating_z activating the LED STATUS_CALIBRATING_Z"\nSTATUS_CALIBRATING_Z\n{% endif %}', 'description': 'G-Code macro'}, 'z_calibration': {'switch_offset': 0.09, 'offset_margins': '-1.0,1.0', 'speed': 50.0, 'samples_result': 'none', 'probing_first_fast': False, 'nozzle_xy_position': '172, 301', 'switch_xy_position': '171.5, 282', 'bed_xy_position': '150, 150', 'start_gcode': 'Attach_Probe', 'before_switch_gcode': '', 'end_gcode': 'Dock_Probe'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': '^PG6', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'PG9', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 303.5, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PF11', 'dir_pin': '!PG3', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG5', 'endstop_pin': 'PG10', 'position_endstop': -0.5, 'position_min': -4.5, 'position_max': 290.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA0'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PF9', 'dir_pin': '!PF10', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG2'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF4', 'min_temp': 10.0, 'max_temp': 270.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 26.572, 'pid_ki': 2.036, 'pid_kd': 86.691, 'heater_pin': 'PA1', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PC13', 'pressure_advance': 0.05, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'PF0', 'rotation_distance': 21.9459674016, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 55.196, 'pid_ki': 2.091, 'pid_kd': 364.295, 'heater_pin': 'PA2', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'probe': {'z_offset': 0.0, 'deactivate_on_each_sample': True, 'activate_gcode': '', 'deactivate_gcode': '', 'pin': 'PG15', 'speed': 10.0, 'lift_speed': 10.0, 'x_offset': 0.0, 'y_offset': 25.0, 'samples': 5, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.006, 'samples_tolerance_retries': 3}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE5', 'fan_speed': 1.0}, 'controller_fan controller_fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD12', 'fan_speed': 1.0, 'idle_speed': 1.0, 'idle_timeout': 30, 'heater': ['heater_bed']}, 'heater_fan exhaust_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 5.0, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13', 'fan_speed': 1.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PD15', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 1.0, 'maximum_mcu_duration': 0.0, 'value': 1.0, 'shutdown_value': 0.0}, 'neopixel headlight': {'pin': 'PB0', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 0.0, 'initial_green': 0.2157, 'initial_blue': 1.0, 'initial_white': 0.0}, 'temperature_sensor chamber_temp': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF5', 'min_temp': 0.0, 'max_temp': 100.0, 'gcode_id': 'chamber_th'}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [150.0, 348.0], [350.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 5.0], [150.0, 245.0], [270.0, 5.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'gcode_macro _user_variables': {'gcode': '\n{% set Mx = printer[\'configfile\'].config["stepper_x"]["position_max"]|float %}\n{% set My = printer[\'configfile\'].config["stepper_y"]["position_max"]|float %}\n{% set Ox = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set Oy = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set Oz = printer[\'configfile\'].config["probe"]["z_offset"]|float %}\n\n\n{% if z_endstop_x != 0 or z_endstop_y != 0 %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ z_endstop_x }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ z_endstop_y }\n\n\n{% else %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ (Mx * 0.5) - Ox }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ (My * 0.5) - Oy }\n{% endif %}', 'description': 'G-Code macro', 'variable_verbose': 'True', 'variable_debug': 'False', 'variable_travel_speed': '200', 'variable_move_accel': '1000', 'variable_dock_speed': '50', 'variable_release_speed': '75', 'variable_z_drop_speed': '20', 'variable_safe_z': '25', 'variable_enable_z_hop': 'True', 'variable_max_bed_y': '300', 'variable_max_bed_x': '300', 'variable_z_endstop_x': '172', 'variable_z_endstop_y': '301', 'variable_docklocation_x': '40.5', 'variable_docklocation_y': '303.5', 'variable_docklocation_z': '-128', 'variable_enable_dock_servo': 'False', 'variable_servo_name': "'NAME'", 'variable_servo_deploy': '10', 'variable_servo_retract': '11', 'variable_servo_delay': '250', 'variable_dockmove_x': '40', 'variable_dockmove_y': '0', 'variable_dockmove_z': '0', 'variable_attachmove_x': '0', 'variable_attachmove_y': '30', 'variable_attachmove_z': '0', 'variable_umbilical': 'False', 'variable_umbilical_x': '15', 'variable_umbilical_y': '15', 'variable_park_toolhead': 'False', 'variable_parkposition_x': '125', 'variable_parkposition_y': '125', 'variable_parkposition_z': '30', 'variable_version': '1', 'variable_attachmove2_x': '0', 'variable_attachmove2_y': '0', 'variable_attachmove2_z': '0', 'variable_home_backoff_x': '10', 'variable_home_backoff_y': '10', 'variable_override_homing': "''", 'variable_dock_on_zhome': 'True'}, 'gcode_macro print_start': {'gcode': '\nM117 Homing...\nG28\nZ_TILT_ADJUST\nG28\n\n\n\n\n\n\n\nG0 X150 Y150 Z30 F3600', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1500.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-02-15 21:07:39,493 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-15 21:07:39,494 [printer.py:reinit()] - Klipper version: v0.12.0-103-g6ce6fbbc-dirty
2024-02-15 21:07:39,494 [printer.py:reinit()] - # Extruders: 1
2024-02-15 21:07:39,494 [printer.py:reinit()] - # Temperature devices: 2
2024-02-15 21:07:39,494 [printer.py:reinit()] - # Fans: 4
2024-02-15 21:07:39,494 [printer.py:reinit()] - # Output pins: 1
2024-02-15 21:07:39,494 [printer.py:reinit()] - # Leds: 1
2024-02-15 21:07:39,507 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2024-02-15 21:07:39,508 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-02-15 21:07:39,797 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor chamber_temp&fan&controller_fan controller_fan&heater_fan hotend_fan&heater_fan exhaust_fan&output_pin caselight&neopixel headlight
2024-02-15 21:07:39,800 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-02-15 21:07:39,800 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-02-15 21:07:39,801 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-02-15 21:07:39,801 [screen.py:init_klipper()] - Printer initialized
2024-02-15 21:07:39,807 [screen.py:_load_panel()] - Loading panel: main_menu
2024-02-15 21:07:39,868 [main_menu.py:__init__()] - ### Making MainMenu
2024-02-15 21:07:39,874 [main_menu.py:add_device()] - Adding device: extruder
2024-02-15 21:07:39,879 [main_menu.py:add_device()] - Adding device: heater_bed
2024-02-15 21:07:39,885 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber_temp
2024-02-15 21:07:39,908 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-02-15 21:07:39,916 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-02-15 21:07:39,926 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'temperature_sensor chamber_temp', 'extruder']
2024-02-15 21:07:39,936 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2024-02-15 21:07:39,937 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-02-15 21:11:51,983 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-02-15 21:11:51,984 [functions.py:log_start()] - KlipperScreen Version: v0.3.8-89-g2a5e9b3
2024-02-15 21:11:51,984 [functions.py:log_start()] - Python version: 3.9
2024-02-15 21:11:52,147 [config.py:get_config_file_location()] - Passed config (-c): .
2024-02-15 21:11:52,147 [config.py:__init__()] - Config path location: /home/pi/printer_data/config/KlipperScreen.conf
2024-02-15 21:11:52,159 [config.py:log_config()] -  ===== Config File =====

=======================
2024-02-15 21:11:52,161 [config.py:__init__()] - ====== Saved Def ======

[graph Printer]
heater_bed = False
extruder = False

=======================
2024-02-15 21:11:52,161 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-02-15 21:11:52,235 [config.py:create_translations()] - Selected lang: None OS lang: en_GB
2024-02-15 21:11:52,236 [config.py:install_language()] - Using lang en
2024-02-15 21:11:52,248 [screen.py:__init__()] - Screen resolution: 800x480
2024-02-15 21:11:52,250 [KlippyGtk.py:__init__()] - Font size: 16.6 (medium)
2024-02-15 21:11:52,696 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2024-02-15 21:11:52,704 [screen.py:set_screenblanking_timeout()] - Using DPMS
2024-02-15 21:11:52,711 [screen.py:initial_connection()] - Default printer: None
2024-02-15 21:11:52,742 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-02-15 21:11:52,742 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-02-15 21:11:52,781 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-02-15 21:11:52,787 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-02-15 21:11:52,801 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-15 21:11:52,809 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/access/oneshot_token
2024-02-15 21:11:52,810 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-02-15 21:11:52,819 [_logging.py:info()] - Websocket connected
2024-02-15 21:11:52,819 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-02-15 21:11:52,851 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-15 21:11:52,859 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2024-02-15 21:11:52,860 [printer.py:configure_cameras()] - Cameras: []
2024-02-15 21:11:52,860 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'octoprint_compat', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-310-g67c98f6', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-02-15 21:11:52,869 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2024-02-15 21:11:53,015 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2024-02-15 21:11:53,018 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro _Probe_Variables': {'variable_probe_attached': 'False', 'variable_probe_state': 'False', 'variable_probe_lock': 'False', 'variable_probe_z_homed': 'False', 'variable_z_endstop_x': '0', 'variable_z_endstop_y': '0', 'gcode': ''}, 'gcode_macro _klicky_check_variables_version': {'gcode': '\n{% set version = printer["gcode_macro _User_Variables"].version|default(0) %}\n\n{% if version != 1 %}\n{ action_raise_error("Please update your klicky variables, there are some functionality changes") }\n{% endif %}'}, 'gcode_macro _KlickyDebug': {'gcode': '\n{% set message  = params.MSG %}\n{% set debug = printer["gcode_macro _User_Variables"].debug|default(False) %}\n\n{% if debug %}\n{ action_respond_info(message) }\n{% endif %}'}, 'gcode_macro _exit_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move  = params.MOVE|default(0) %}\n{% set speed = printer["gcode_macro _User_Variables"].travel_speed %}\n\n\nM400\nSET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\nRESTORE_GCODE_STATE NAME={function} MOVE={move} MOVE_SPEED={speed}'}, 'gcode_macro _entry_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move_accel = printer["gcode_macro _User_Variables"].move_accel|default(1000) %}\n\nM400\nSAVE_GCODE_STATE NAME={function}\n\nSET_GCODE_OFFSET Z=0\n\nG90\n\nSET_VELOCITY_LIMIT ACCEL={move_accel}'}, 'gcode_macro _Homing_Variables': {'gcode': '\n{% set reset  = params.RESET|default(0) %}\n{% if reset %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }\n{% endif %}'}, 'gcode_macro Attach_Probe_Lock': {'description': 'Attaches Klicky Probe, can only be docked after unlocking', 'gcode': '\nAttach_Probe\n_Probe_Lock'}, 'gcode_macro Dock_Probe_Unlock': {'description': 'Docks Klicky Probe even if it was locked', 'gcode': '\n_Probe_Unlock\nDock_Probe'}, 'gcode_macro _Probe_Unlock': {'description': 'Unlocks Klicky Probe state', 'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to False"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }'}, 'gcode_macro _Probe_Lock': {'description': 'Locks Klicky Probe state', 'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to True"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ True }'}, 'gcode_macro _DeployKlickyDock': {'description': 'Deploys Klicky servo-controlled dock', 'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_deploy = printer["gcode_macro _User_Variables"].servo_deploy|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_DeployKlickyDock Klicky servo configuration enabled"\n{% if servo_deploy == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo deploy angle specified") }\n{% endif %}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _DeployDock"] is defined %}\n_KlickyDebug msg="_DeployKlickyDock calling _DeployDock"\n_DeployDock\n{% endif %}'}, 'gcode_macro _RetractKlickyDock': {'description': 'Retracts Klicky servo-controlled dock', 'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_retract = printer["gcode_macro _User_Variables"].servo_retract|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_RetractKlickyDock Klicky servo configuration enabled"\n{% if servo_retract == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo retract angle specified") }\n{% endif %}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _RetractDock"] is defined %}\n_KlickyDebug msg="_RetractKlickyDock calling _RetractDock"\n_RetractDock\n{% endif %}'}, 'gcode_macro Attach_Probe': {'description': 'Attaches Klicky Probe', 'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set attachmove2_x = printer["gcode_macro _User_Variables"].attachmove2_x|default(0) %}\n{% set attachmove2_y = printer["gcode_macro _User_Variables"].attachmove2_y|default(0) %}\n{% set attachmove2_z = printer["gcode_macro _User_Variables"].attachmove2_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n_entry_point function=Attach_Probe\n\n{% if bypass_probe_docking == False %}\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n_KlickyDebug msg="Attach_Probe Axis homed"\n\n\n{% elif not probe_attached and not probe_lock %}\n_KlickyDebug msg="Attach_Probe going to attach probe"\n{% if verbose %}\n{ action_respond_info("Attaching Probe") }\n{% endif %}\n_KLICKY_STATUS_BUSY\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% if not enable_z_hop %}\n_KlickyDebug msg="Attach_Probe z_hop disabled"\n{% set safe_z = 0 %}\n{% endif %}\n{% endif %}\n\n\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero, duplicate?") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Umbilical_Path\n\n_entry_point function=Attach_Probe_intern\n\n\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n_DeployKlickyDock\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}"\nG0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}\n\n_RetractKlickyDock\n\n{% if ((printer.gcode_move.gcode_position.z < safe_z) or (docklocation_z != -128 and docklocation_z < safe_z ))%}\n_KlickyDebug msg="Attach_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\n_CheckProbe action=attach\n\n_exit_point function=Attach_Probe_intern move={goback}\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe locked not attaching probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already attached!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe already attached, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Attach_Probe\n{% else %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}'}, 'gcode_macro Dock_Probe': {'description': 'Docks Klicky Probe', 'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n{% if bypass_probe_docking == True %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}\n\n{% if bypass_probe_docking != True %}\n_entry_point function=Dock_Probe\n\n\n{% if probe_attached and not probe_lock %}\n_KLICKY_STATUS_BUSY\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Dock_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n_Umbilical_Path\n\n\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n\n_DeployKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\n\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}"\nG0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}\n{% endif %}\n\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}\n\n\n_RetractKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving away from the dock to G0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}\n\n\n{% if (printer.gcode_move.gcode_position.z < safe_z) %}\n_KlickyDebug msg="Dock_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\nG4 P1000\n_CheckProbe action=dock\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe locked not docking probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already docked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe already docked, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Dock_Probe move={goback}\n{% else %}\n_KlickyDebug msg="Dock_Probe probe docking bypassed, doing nothing"\n{% endif %}'}, 'gcode_macro PROBE_CALIBRATE': {'rename_existing': '_PROBE_CALIBRATE', 'description': 'Calibrate the probes z_offset with klicky automount', 'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_calibrate Axis homed"\n_KlickyDebug msg="probe_calibrate Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_CALIBRATE with the probe above the BED, check klicky_variables bed size!") }\n{% endif %}\n\n{% if bypass_probe_docking == False %}\n_CheckProbe action=query\nG90\nAttach_Probe back=1\n_KLICKY_STATUS_CALIBRATING_Z\n\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nM118 moving the toolhead 20 mm from the bed\n_KlickyDebug msg="probe_calibrate Moving Z up by 20mm"\nTESTZ Z=20\nM118 remove manually the probe and continue calibration\n_KLICKY_STATUS_READY\n{% else %}\n_KLICKY_STATUS_CALIBRATING_Z\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n_KLICKY_STATUS_READY\n{% endif %}'}, 'gcode_macro PROBE_ACCURACY': {'rename_existing': '_PROBE_ACCURACY', 'description': 'Probe Z-height accuracy at current XY position with klicky automount', 'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_accuracy Axis homed"\n_KlickyDebug msg="probe_accuracy Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n_entry_point function=PROBE_ACCURACY\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_ACCURACY with the probe above the BED, check klicky_variables bed size!") }\n{% endif%}\n\n_CheckProbe action=query\nAttach_Probe back=1\n\n_KlickyDebug msg="probe_accuracy calling klipper probe accuracy"\n_PROBE_ACCURACY {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nDock_Probe back=1\n\n_exit_point function=PROBE_ACCURACY move=1'}, 'force_move': {'enable_force_move': 'True'}, 'homing_override': {'axes': 'xyz', 'gcode': '\n\n_User_Variables\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n{% set kinematic_z = 0 %}\n{% set dock_on_zhome = printer["gcode_macro _User_Variables"].dock_on_zhome|default(True) %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set home_backoff_x = printer["gcode_macro _User_Variables"].home_backoff_x|default(0) %}\n{% set home_backoff_y = printer["gcode_macro _User_Variables"].home_backoff_y|default(0) %}\n{% set override_homing = printer["gcode_macro _User_Variables"].override_homing|default(\'\') %}\n\n\n_klicky_check_variables_version\n\n_CheckProbe action=query\n\n\n{% set home_x, home_y, home_z, leave_probe_attached = False, False, False, False %}\n\n{% if \'PROBE_LOCK\' in params%}\n{% if verbose %}\n{ action_respond_info("PROBE_LOCK = True") }\n{% endif %}\n{% set leave_probe_attached = True %}\n{% endif %}\n\n\n{% if not \'X\' in params\nand not \'Y\' in params\nand not \'Z\' in params %}\n\n{% set home_x, home_y, home_z = True, True, True %}\n_KlickyDebug msg="homing_override goint to home all axes"\n\n{% else %}\n{% if \'X\' in params %}\n{% set home_x = True %}\n_KlickyDebug msg="homing_override goint to home X"\n\n{% endif %}\n\n{% if \'Y\' in params %}\n{% set home_y = True %}\n_KlickyDebug msg="homing_override goint to home Y"\n{% endif %}\n\n{% if \'Z\' in params %}\n{% set home_z = True %}\n_KlickyDebug msg="homing_override goint to home Z"\n{% endif %}\n\n{% if \'X\' in params\nand \'Y\' in params\nand \'Z\' in params %}\n\n\n_Homing_Variables reset=1\n_KlickyDebug msg="homing_override goint to home all axes"\n{% endif %}\n\n{% endif %}\n\n_entry_point function=homing_override\n_KLICKY_STATUS_HOMING\n\n\n{% if \'z\' not in printer.toolhead.homed_axes %}\n{% if enable_z_hop == False %}\n_KlickyDebug msg="homing_override z_hop disabled"\n\n{% set kinematic_z = safe_z %}\n{% set safe_z = safe_z %}\n{% endif %}\n{% endif %}\n\n\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes and \'z\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("No axis homed") }\n{% endif %}\n_KlickyDebug msg="homing_override no axis homed, setting position as X=Y=0 Z={kinematic_z}"\nSET_KINEMATIC_POSITION X=0 Y=0 Z={kinematic_z}\nM400\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% if home_z != True %}\n_KlickyDebug msg="homing_override clearing axis homed state if not already homing Z"\nM84\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("X or Y not homed, forcing full G28") }\n{% endif %}\n{% set home_x, home_y, home_z = True, True, True %}\n{% endif %}\n{% endif %}\n\n\n{% if ((attachmove_y == 0 and override_homing == \'\' ) or (override_homing == \'Y\'))%}\n\n{% if home_y %}\n{% if override_homing == \'Y\' %}\n_KlickyDebug msg="homing_override Y homing first override, due to override_homing = Y"\n{% else %}\n_KlickyDebug msg="homing_override Y homing first override, due to attachmove_y = 0"\n{% endif %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y G28 Y0"\nG28 Y0\n\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop-home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n{% set home_y = False %}\n{% endif %}\n\n\n\n{% if home_x %}\n{% if verbose %}\n{ action_respond_info("Homing X") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in X homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_X"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_X external script to handle the X homing"\n_HOME_X\n{% else %}\n_KlickyDebug msg="homing_override Homing X, G28 X0"\nG28 X0\n\n{% if home_backoff_x != 0 %}\n{% if (printer.configfile.settings.stepper_x.position_endstop > (printer.configfile.settings.stepper_x.position_min|default(0) + printer.configfile.settings.stepper_x.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n\n{% if home_y %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y, G28 Y0"\nG28 Y0\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if verbose %}\n{ action_respond_info("Homing Z") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe configured as a virtual Z endstop attaching probe"\nAttach_Probe\n\n{% if leave_probe_attached %}\n_Probe_Lock\n{% endif %}\n{% elif dock_on_zhome == True %}\nDock_Probe\n{% endif %}\n\n_Home_Z_\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe no longer required, docking probe"\nDock_Probe\n{% elif dock_on_zhome == False %}\nDock_Probe\n{% endif %}\n{% endif %}\n_CheckProbe action=query\n\n\n_Park_Toolhead\n\n_exit_point function=homing_override\n_KLICKY_STATUS_READY'}, 'gcode_macro _Umbilical_Path': {'gcode': '\n{% set umbilical = printer["gcode_macro _User_Variables"].umbilical %}\n{% set umbilical_x = printer["gcode_macro _User_Variables"].umbilical_x %}\n{% set umbilical_y = printer["gcode_macro _User_Variables"].umbilical_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n\n{% if umbilical %}\n\n_entry_point function=Umbilical_Path\n\n_KlickyDebug msg="_Umbilical_Path moving to G0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}"\nG0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}\n\n_exit_point function=Umbilical_Path\n{% endif %}'}, 'gcode_macro _Home_Z_': {'gcode': '\n{% set z_endstop_x = printer["gcode_macro _Probe_Variables"].z_endstop_x %}\n{% set z_endstop_y = printer["gcode_macro _Probe_Variables"].z_endstop_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}    {% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Home_Z\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n{% else %}\n_KlickyDebug msg="_Home_Z_ XY Axis homed"\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="_Home_Z_ Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n\n\n_KlickyDebug msg="_Home_Z_ moving to Z endstop position G0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}"\nG0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}\n_KlickyDebug msg="_Home_Z_ Homing Z G28 Z"\nG28 Z0\n_KlickyDebug msg="_Home_Z_ toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_exit_point function=Home_Z'}, 'gcode_macro _CheckProbe': {'variable_probe_state': '0', 'gcode': '\nQuery_Probe\n_SetProbeState action={ params.ACTION }'}, 'gcode_macro _SetProbeState': {'gcode': '\n{% set query_probe_triggered = printer.probe.last_query %}\n{% set action  = params.ACTION|default(\'\') %}\n\n\n{% if query_probe_triggered %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ False }\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ True }\n{% endif %}\n\n{% if action == \'query\' %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_state VALUE={ query_probe_triggered }\n{% endif %}\n\n\n\n\n{% if not query_probe_triggered and action == \'dock\' %}\n{ action_raise_error("Probe dock failed!") }\n{% endif %}\n\n\n{% if query_probe_triggered and action == \'attach\' %}\n{ action_raise_error("Probe attach failed!") }\n{% endif %}'}, 'gcode_macro _Park_Toolhead': {'gcode': '\n{% set park_toolhead = printer["gcode_macro _User_Variables"].park_toolhead %}\n{% set parkposition_x = printer["gcode_macro _User_Variables"].parkposition_x %}\n{% set parkposition_y = printer["gcode_macro _User_Variables"].parkposition_y %}\n{% set parkposition_z = printer["gcode_macro _User_Variables"].parkposition_z %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Park_Toolhead\n\n{% if park_toolhead and \'xyz\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Parking Toolhead") }\n{% endif %}\n{% if parkposition_z == -128 %}\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}\n\n{% else %}\n\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}\n\n{% endif %}\n\n{% endif %}\n_exit_point function=Park_Toolhead'}, 'gcode_macro _klicky_status_ready': {'gcode': '\n{% if printer[\'gcode_macro status_ready\'] is defined %}\n_KlickyDebug msg="_klicky_status_ready activating the LED STATUS_READY"\nSTATUS_READY\n{% endif %}'}, 'gcode_macro _klicky_status_busy': {'gcode': '\n{% if printer[\'gcode_macro status_busy\'] is defined %}\n_KlickyDebug msg="_klicky_status_busy activating the LED STATUS_BUSY"\nSTATUS_BUSY\n{% endif %}'}, 'gcode_macro _klicky_status_leveling': {'gcode': '\n{% if printer[\'gcode_macro status_leveling\'] is defined %}\n_KlickyDebug msg="_klicky_status_leveling activating the LED STATUS_LEVELING"\nSTATUS_LEVELING\n{% endif %}'}, 'gcode_macro _klicky_status_homing': {'gcode': '\n{% if printer[\'gcode_macro status_homing\'] is defined %}\n_KlickyDebug msg="_klicky_status_homing activating the LED STATUS_HOMING"\nSTATUS_HOMING\n{% endif %}'}, 'gcode_macro _klicky_status_cleaning': {'gcode': '\n{% if printer[\'gcode_macro status_cleaning\'] is defined %}\n_KlickyDebug msg="_klicky_status_cleaning activating the LED STATUS_CLEANING"\nSTATUS_CLEANING\n{% endif %}'}, 'gcode_macro _klicky_status_meshing': {'gcode': '\n{% if printer[\'gcode_macro status_meshing\'] is defined %}\n_KlickyDebug msg="_klicky_status_meshing activating the LED STATUS_MESHING"\nSTATUS_MESHING\n{% endif %}'}, 'gcode_macro _klicky_status_calibrating_z': {'gcode': '\n{% if printer[\'gcode_macro status_calibrating_z\'] is defined %}\n_KlickyDebug msg="_klicky_status_calibrating_z activating the LED STATUS_CALIBRATING_Z"\nSTATUS_CALIBRATING_Z\n{% endif %}'}, 'z_calibration': {'nozzle_xy_position': '172, 301', 'switch_xy_position': '171.5, 282', 'bed_xy_position': '150, 150', 'switch_offset': '0.09', 'offset_margins': '-1.0,1.0', 'speed': '50', 'probing_first_fast': 'false', 'start_gcode': 'Attach_Probe', 'end_gcode': 'Dock_Probe'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_28003C001150535556323420-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '^PG6', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '25', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'PG9', 'position_min': '0', 'position_endstop': '300', 'position_max': '303.5', 'homing_speed': '25', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': '!PG3', 'enable_pin': '!PG5', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'PG10', 'position_endstop': '-0.5', 'position_max': '290', 'position_min': '-4.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA0', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': '!PF10', 'enable_pin': '!PG2', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PC13', 'dir_pin': 'PF0', 'enable_pin': '!PF1', 'rotation_distance': '21.9459674016', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.75', 'heater_pin': 'PA1', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF4', 'min_temp': '10', 'max_temp': '270', 'max_power': '1.0', 'min_extrude_temp': '170', 'pressure_advance': '0.05', 'pressure_advance_smooth_time': '0.040', 'control': 'pid', 'pid_kp': '26.572', 'pid_ki': '2.036', 'pid_kd': '86.691'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.5', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PA2', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF3', 'max_power': '1', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '55.196', 'pid_ki': '2.091', 'pid_kd': '364.295'}, 'probe': {'pin': 'PG15', 'x_offset': '0', 'y_offset': '25.0', 'z_offset': '0', 'speed': '10.0', 'samples': '5', 'samples_result': 'median', 'sample_retract_dist': '3.0', 'samples_tolerance': '0.006', 'samples_tolerance_retries': '3'}, 'fan': {'pin': 'PA8', 'kick_start_time': '0.5', 'off_below': '0.10'}, 'heater_fan hotend_fan': {'pin': 'PE5', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'controller_fan controller_fan': {'pin': 'PD12', 'kick_start_time': '0.5', 'heater': 'heater_bed'}, 'heater_fan exhaust_fan': {'pin': 'PD13', 'max_power': '1.0', 'shutdown_speed': '0.0', 'kick_start_time': '5.0', 'heater': 'heater_bed', 'heater_temp': '60', 'fan_speed': '1.0'}, 'output_pin caselight': {'pin': 'PD15', 'pwm': 'true', 'shutdown_value': '0', 'value': '1', 'cycle_time': '0.01'}, 'neopixel headlight': {'pin': 'PB0', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '0.0', 'initial_green': '0.2157', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'temperature_sensor chamber_temp': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF5', 'min_temp': '0', 'max_temp': '100', 'gcode_id': 'chamber_th'}, 'idle_timeout': {'timeout': '1800'}, 'z_tilt': {'z_positions': '\n-50, 18\n150, 348\n350, 18', 'points': '\n30, 5\n150, 245\n270, 5', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'gcode_macro _User_Variables': {'variable_verbose': 'True', 'variable_debug': 'False', 'variable_travel_speed': '200', 'variable_move_accel': '1000', 'variable_dock_speed': '50', 'variable_release_speed': '75', 'variable_z_drop_speed': '20', 'variable_safe_z': '25', 'variable_enable_z_hop': 'True', 'variable_max_bed_y': '300', 'variable_max_bed_x': '300', 'variable_z_endstop_x': '172', 'variable_z_endstop_y': '301', 'variable_docklocation_x': '40.5', 'variable_docklocation_y': '303.5', 'variable_docklocation_z': '-128', 'variable_enable_dock_servo': 'False', 'variable_servo_name': "'NAME'", 'variable_servo_deploy': '10', 'variable_servo_retract': '11', 'variable_servo_delay': '250', 'variable_dockmove_x': '40', 'variable_dockmove_y': '0', 'variable_dockmove_z': '0', 'variable_attachmove_x': '0', 'variable_attachmove_y': '30', 'variable_attachmove_z': '0', 'variable_umbilical': 'False', 'variable_umbilical_x': '15', 'variable_umbilical_y': '15', 'variable_park_toolhead': 'False', 'variable_parkposition_x': '125', 'variable_parkposition_y': '125', 'variable_parkposition_z': '30', 'variable_version': '1', 'variable_attachmove2_x': '0', 'variable_attachmove2_y': '0', 'variable_attachmove2_z': '0', 'variable_home_backoff_x': '10', 'variable_home_backoff_y': '10', 'variable_override_homing': "''", 'variable_dock_on_zhome': 'True', 'gcode': '\n{% set Mx = printer[\'configfile\'].config["stepper_x"]["position_max"]|float %}\n{% set My = printer[\'configfile\'].config["stepper_y"]["position_max"]|float %}\n{% set Ox = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set Oy = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set Oz = printer[\'configfile\'].config["probe"]["z_offset"]|float %}\n\n\n{% if z_endstop_x != 0 or z_endstop_y != 0 %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ z_endstop_x }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ z_endstop_y }\n\n\n{% else %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ (Mx * 0.5) - Ox }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ (My * 0.5) - Oy }\n{% endif %}'}, 'gcode_macro PRINT_START': {'gcode': '\nM117 Homing...\nG28\nZ_TILT_ADJUST\nG28\n\n\n\n\n\n\n\nG0 X150 Y150 Z30 F3600'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_28003C001150535556323420-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro _probe_variables': {'gcode': '', 'description': 'G-Code macro', 'variable_probe_attached': 'False', 'variable_probe_state': 'False', 'variable_probe_lock': 'False', 'variable_probe_z_homed': 'False', 'variable_z_endstop_x': '0', 'variable_z_endstop_y': '0'}, 'gcode_macro _klicky_check_variables_version': {'gcode': '\n{% set version = printer["gcode_macro _User_Variables"].version|default(0) %}\n\n{% if version != 1 %}\n{ action_raise_error("Please update your klicky variables, there are some functionality changes") }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klickydebug': {'gcode': '\n{% set message  = params.MSG %}\n{% set debug = printer["gcode_macro _User_Variables"].debug|default(False) %}\n\n{% if debug %}\n{ action_respond_info(message) }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _exit_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move  = params.MOVE|default(0) %}\n{% set speed = printer["gcode_macro _User_Variables"].travel_speed %}\n\n\nM400\nSET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\nRESTORE_GCODE_STATE NAME={function} MOVE={move} MOVE_SPEED={speed}', 'description': 'G-Code macro'}, 'gcode_macro _entry_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move_accel = printer["gcode_macro _User_Variables"].move_accel|default(1000) %}\n\nM400\nSAVE_GCODE_STATE NAME={function}\n\nSET_GCODE_OFFSET Z=0\n\nG90\n\nSET_VELOCITY_LIMIT ACCEL={move_accel}', 'description': 'G-Code macro'}, 'gcode_macro _homing_variables': {'gcode': '\n{% set reset  = params.RESET|default(0) %}\n{% if reset %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro attach_probe_lock': {'gcode': '\nAttach_Probe\n_Probe_Lock', 'description': 'Attaches Klicky Probe, can only be docked after unlocking'}, 'gcode_macro dock_probe_unlock': {'gcode': '\n_Probe_Unlock\nDock_Probe', 'description': 'Docks Klicky Probe even if it was locked'}, 'gcode_macro _probe_unlock': {'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to False"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }', 'description': 'Unlocks Klicky Probe state'}, 'gcode_macro _probe_lock': {'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to True"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ True }', 'description': 'Locks Klicky Probe state'}, 'gcode_macro _deployklickydock': {'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_deploy = printer["gcode_macro _User_Variables"].servo_deploy|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_DeployKlickyDock Klicky servo configuration enabled"\n{% if servo_deploy == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo deploy angle specified") }\n{% endif %}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _DeployDock"] is defined %}\n_KlickyDebug msg="_DeployKlickyDock calling _DeployDock"\n_DeployDock\n{% endif %}', 'description': 'Deploys Klicky servo-controlled dock'}, 'gcode_macro _retractklickydock': {'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_retract = printer["gcode_macro _User_Variables"].servo_retract|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_RetractKlickyDock Klicky servo configuration enabled"\n{% if servo_retract == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo retract angle specified") }\n{% endif %}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _RetractDock"] is defined %}\n_KlickyDebug msg="_RetractKlickyDock calling _RetractDock"\n_RetractDock\n{% endif %}', 'description': 'Retracts Klicky servo-controlled dock'}, 'gcode_macro attach_probe': {'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set attachmove2_x = printer["gcode_macro _User_Variables"].attachmove2_x|default(0) %}\n{% set attachmove2_y = printer["gcode_macro _User_Variables"].attachmove2_y|default(0) %}\n{% set attachmove2_z = printer["gcode_macro _User_Variables"].attachmove2_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n_entry_point function=Attach_Probe\n\n{% if bypass_probe_docking == False %}\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n_KlickyDebug msg="Attach_Probe Axis homed"\n\n\n{% elif not probe_attached and not probe_lock %}\n_KlickyDebug msg="Attach_Probe going to attach probe"\n{% if verbose %}\n{ action_respond_info("Attaching Probe") }\n{% endif %}\n_KLICKY_STATUS_BUSY\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% if not enable_z_hop %}\n_KlickyDebug msg="Attach_Probe z_hop disabled"\n{% set safe_z = 0 %}\n{% endif %}\n{% endif %}\n\n\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero, duplicate?") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Umbilical_Path\n\n_entry_point function=Attach_Probe_intern\n\n\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n_DeployKlickyDock\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}"\nG0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}\n\n_RetractKlickyDock\n\n{% if ((printer.gcode_move.gcode_position.z < safe_z) or (docklocation_z != -128 and docklocation_z < safe_z ))%}\n_KlickyDebug msg="Attach_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\n_CheckProbe action=attach\n\n_exit_point function=Attach_Probe_intern move={goback}\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe locked not attaching probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already attached!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe already attached, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Attach_Probe\n{% else %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}', 'description': 'Attaches Klicky Probe'}, 'gcode_macro dock_probe': {'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n{% if bypass_probe_docking == True %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}\n\n{% if bypass_probe_docking != True %}\n_entry_point function=Dock_Probe\n\n\n{% if probe_attached and not probe_lock %}\n_KLICKY_STATUS_BUSY\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Dock_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n_Umbilical_Path\n\n\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n\n_DeployKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\n\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}"\nG0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}\n{% endif %}\n\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}\n\n\n_RetractKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving away from the dock to G0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}\n\n\n{% if (printer.gcode_move.gcode_position.z < safe_z) %}\n_KlickyDebug msg="Dock_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\nG4 P1000\n_CheckProbe action=dock\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe locked not docking probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already docked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe already docked, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Dock_Probe move={goback}\n{% else %}\n_KlickyDebug msg="Dock_Probe probe docking bypassed, doing nothing"\n{% endif %}', 'description': 'Docks Klicky Probe'}, 'gcode_macro probe_calibrate': {'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_calibrate Axis homed"\n_KlickyDebug msg="probe_calibrate Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_CALIBRATE with the probe above the BED, check klicky_variables bed size!") }\n{% endif %}\n\n{% if bypass_probe_docking == False %}\n_CheckProbe action=query\nG90\nAttach_Probe back=1\n_KLICKY_STATUS_CALIBRATING_Z\n\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nM118 moving the toolhead 20 mm from the bed\n_KlickyDebug msg="probe_calibrate Moving Z up by 20mm"\nTESTZ Z=20\nM118 remove manually the probe and continue calibration\n_KLICKY_STATUS_READY\n{% else %}\n_KLICKY_STATUS_CALIBRATING_Z\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n_KLICKY_STATUS_READY\n{% endif %}', 'rename_existing': '_PROBE_CALIBRATE', 'description': 'Calibrate the probes z_offset with klicky automount'}, 'gcode_macro probe_accuracy': {'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_accuracy Axis homed"\n_KlickyDebug msg="probe_accuracy Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n_entry_point function=PROBE_ACCURACY\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_ACCURACY with the probe above the BED, check klicky_variables bed size!") }\n{% endif%}\n\n_CheckProbe action=query\nAttach_Probe back=1\n\n_KlickyDebug msg="probe_accuracy calling klipper probe accuracy"\n_PROBE_ACCURACY {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nDock_Probe back=1\n\n_exit_point function=PROBE_ACCURACY move=1', 'rename_existing': '_PROBE_ACCURACY', 'description': 'Probe Z-height accuracy at current XY position with klicky automount'}, 'force_move': {'enable_force_move': True}, 'homing_override': {'axes': 'xyz', 'gcode': '\n\n_User_Variables\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n{% set kinematic_z = 0 %}\n{% set dock_on_zhome = printer["gcode_macro _User_Variables"].dock_on_zhome|default(True) %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set home_backoff_x = printer["gcode_macro _User_Variables"].home_backoff_x|default(0) %}\n{% set home_backoff_y = printer["gcode_macro _User_Variables"].home_backoff_y|default(0) %}\n{% set override_homing = printer["gcode_macro _User_Variables"].override_homing|default(\'\') %}\n\n\n_klicky_check_variables_version\n\n_CheckProbe action=query\n\n\n{% set home_x, home_y, home_z, leave_probe_attached = False, False, False, False %}\n\n{% if \'PROBE_LOCK\' in params%}\n{% if verbose %}\n{ action_respond_info("PROBE_LOCK = True") }\n{% endif %}\n{% set leave_probe_attached = True %}\n{% endif %}\n\n\n{% if not \'X\' in params\nand not \'Y\' in params\nand not \'Z\' in params %}\n\n{% set home_x, home_y, home_z = True, True, True %}\n_KlickyDebug msg="homing_override goint to home all axes"\n\n{% else %}\n{% if \'X\' in params %}\n{% set home_x = True %}\n_KlickyDebug msg="homing_override goint to home X"\n\n{% endif %}\n\n{% if \'Y\' in params %}\n{% set home_y = True %}\n_KlickyDebug msg="homing_override goint to home Y"\n{% endif %}\n\n{% if \'Z\' in params %}\n{% set home_z = True %}\n_KlickyDebug msg="homing_override goint to home Z"\n{% endif %}\n\n{% if \'X\' in params\nand \'Y\' in params\nand \'Z\' in params %}\n\n\n_Homing_Variables reset=1\n_KlickyDebug msg="homing_override goint to home all axes"\n{% endif %}\n\n{% endif %}\n\n_entry_point function=homing_override\n_KLICKY_STATUS_HOMING\n\n\n{% if \'z\' not in printer.toolhead.homed_axes %}\n{% if enable_z_hop == False %}\n_KlickyDebug msg="homing_override z_hop disabled"\n\n{% set kinematic_z = safe_z %}\n{% set safe_z = safe_z %}\n{% endif %}\n{% endif %}\n\n\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes and \'z\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("No axis homed") }\n{% endif %}\n_KlickyDebug msg="homing_override no axis homed, setting position as X=Y=0 Z={kinematic_z}"\nSET_KINEMATIC_POSITION X=0 Y=0 Z={kinematic_z}\nM400\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% if home_z != True %}\n_KlickyDebug msg="homing_override clearing axis homed state if not already homing Z"\nM84\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("X or Y not homed, forcing full G28") }\n{% endif %}\n{% set home_x, home_y, home_z = True, True, True %}\n{% endif %}\n{% endif %}\n\n\n{% if ((attachmove_y == 0 and override_homing == \'\' ) or (override_homing == \'Y\'))%}\n\n{% if home_y %}\n{% if override_homing == \'Y\' %}\n_KlickyDebug msg="homing_override Y homing first override, due to override_homing = Y"\n{% else %}\n_KlickyDebug msg="homing_override Y homing first override, due to attachmove_y = 0"\n{% endif %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y G28 Y0"\nG28 Y0\n\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop-home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n{% set home_y = False %}\n{% endif %}\n\n\n\n{% if home_x %}\n{% if verbose %}\n{ action_respond_info("Homing X") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in X homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_X"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_X external script to handle the X homing"\n_HOME_X\n{% else %}\n_KlickyDebug msg="homing_override Homing X, G28 X0"\nG28 X0\n\n{% if home_backoff_x != 0 %}\n{% if (printer.configfile.settings.stepper_x.position_endstop > (printer.configfile.settings.stepper_x.position_min|default(0) + printer.configfile.settings.stepper_x.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n\n{% if home_y %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y, G28 Y0"\nG28 Y0\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if verbose %}\n{ action_respond_info("Homing Z") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe configured as a virtual Z endstop attaching probe"\nAttach_Probe\n\n{% if leave_probe_attached %}\n_Probe_Lock\n{% endif %}\n{% elif dock_on_zhome == True %}\nDock_Probe\n{% endif %}\n\n_Home_Z_\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe no longer required, docking probe"\nDock_Probe\n{% elif dock_on_zhome == False %}\nDock_Probe\n{% endif %}\n{% endif %}\n_CheckProbe action=query\n\n\n_Park_Toolhead\n\n_exit_point function=homing_override\n_KLICKY_STATUS_READY'}, 'gcode_macro _umbilical_path': {'gcode': '\n{% set umbilical = printer["gcode_macro _User_Variables"].umbilical %}\n{% set umbilical_x = printer["gcode_macro _User_Variables"].umbilical_x %}\n{% set umbilical_y = printer["gcode_macro _User_Variables"].umbilical_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n\n{% if umbilical %}\n\n_entry_point function=Umbilical_Path\n\n_KlickyDebug msg="_Umbilical_Path moving to G0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}"\nG0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}\n\n_exit_point function=Umbilical_Path\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _home_z_': {'gcode': '\n{% set z_endstop_x = printer["gcode_macro _Probe_Variables"].z_endstop_x %}\n{% set z_endstop_y = printer["gcode_macro _Probe_Variables"].z_endstop_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}    {% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Home_Z\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n{% else %}\n_KlickyDebug msg="_Home_Z_ XY Axis homed"\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="_Home_Z_ Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n\n\n_KlickyDebug msg="_Home_Z_ moving to Z endstop position G0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}"\nG0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}\n_KlickyDebug msg="_Home_Z_ Homing Z G28 Z"\nG28 Z0\n_KlickyDebug msg="_Home_Z_ toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_exit_point function=Home_Z', 'description': 'G-Code macro'}, 'gcode_macro _checkprobe': {'gcode': '\nQuery_Probe\n_SetProbeState action={ params.ACTION }', 'description': 'G-Code macro', 'variable_probe_state': '0'}, 'gcode_macro _setprobestate': {'gcode': '\n{% set query_probe_triggered = printer.probe.last_query %}\n{% set action  = params.ACTION|default(\'\') %}\n\n\n{% if query_probe_triggered %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ False }\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ True }\n{% endif %}\n\n{% if action == \'query\' %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_state VALUE={ query_probe_triggered }\n{% endif %}\n\n\n\n\n{% if not query_probe_triggered and action == \'dock\' %}\n{ action_raise_error("Probe dock failed!") }\n{% endif %}\n\n\n{% if query_probe_triggered and action == \'attach\' %}\n{ action_raise_error("Probe attach failed!") }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _park_toolhead': {'gcode': '\n{% set park_toolhead = printer["gcode_macro _User_Variables"].park_toolhead %}\n{% set parkposition_x = printer["gcode_macro _User_Variables"].parkposition_x %}\n{% set parkposition_y = printer["gcode_macro _User_Variables"].parkposition_y %}\n{% set parkposition_z = printer["gcode_macro _User_Variables"].parkposition_z %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Park_Toolhead\n\n{% if park_toolhead and \'xyz\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Parking Toolhead") }\n{% endif %}\n{% if parkposition_z == -128 %}\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}\n\n{% else %}\n\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}\n\n{% endif %}\n\n{% endif %}\n_exit_point function=Park_Toolhead', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_ready': {'gcode': '\n{% if printer[\'gcode_macro status_ready\'] is defined %}\n_KlickyDebug msg="_klicky_status_ready activating the LED STATUS_READY"\nSTATUS_READY\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_busy': {'gcode': '\n{% if printer[\'gcode_macro status_busy\'] is defined %}\n_KlickyDebug msg="_klicky_status_busy activating the LED STATUS_BUSY"\nSTATUS_BUSY\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_leveling': {'gcode': '\n{% if printer[\'gcode_macro status_leveling\'] is defined %}\n_KlickyDebug msg="_klicky_status_leveling activating the LED STATUS_LEVELING"\nSTATUS_LEVELING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_homing': {'gcode': '\n{% if printer[\'gcode_macro status_homing\'] is defined %}\n_KlickyDebug msg="_klicky_status_homing activating the LED STATUS_HOMING"\nSTATUS_HOMING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_cleaning': {'gcode': '\n{% if printer[\'gcode_macro status_cleaning\'] is defined %}\n_KlickyDebug msg="_klicky_status_cleaning activating the LED STATUS_CLEANING"\nSTATUS_CLEANING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_meshing': {'gcode': '\n{% if printer[\'gcode_macro status_meshing\'] is defined %}\n_KlickyDebug msg="_klicky_status_meshing activating the LED STATUS_MESHING"\nSTATUS_MESHING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_calibrating_z': {'gcode': '\n{% if printer[\'gcode_macro status_calibrating_z\'] is defined %}\n_KlickyDebug msg="_klicky_status_calibrating_z activating the LED STATUS_CALIBRATING_Z"\nSTATUS_CALIBRATING_Z\n{% endif %}', 'description': 'G-Code macro'}, 'z_calibration': {'switch_offset': 0.09, 'offset_margins': '-1.0,1.0', 'speed': 50.0, 'samples_result': 'none', 'probing_first_fast': False, 'nozzle_xy_position': '172, 301', 'switch_xy_position': '171.5, 282', 'bed_xy_position': '150, 150', 'start_gcode': 'Attach_Probe', 'before_switch_gcode': '', 'end_gcode': 'Dock_Probe'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': '^PG6', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'PG9', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 303.5, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PF11', 'dir_pin': '!PG3', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG5', 'endstop_pin': 'PG10', 'position_endstop': -0.5, 'position_min': -4.5, 'position_max': 290.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA0'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PF9', 'dir_pin': '!PF10', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG2'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF4', 'min_temp': 10.0, 'max_temp': 270.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 26.572, 'pid_ki': 2.036, 'pid_kd': 86.691, 'heater_pin': 'PA1', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PC13', 'pressure_advance': 0.05, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'PF0', 'rotation_distance': 21.9459674016, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 55.196, 'pid_ki': 2.091, 'pid_kd': 364.295, 'heater_pin': 'PA2', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'probe': {'z_offset': 0.0, 'deactivate_on_each_sample': True, 'activate_gcode': '', 'deactivate_gcode': '', 'pin': 'PG15', 'speed': 10.0, 'lift_speed': 10.0, 'x_offset': 0.0, 'y_offset': 25.0, 'samples': 5, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.006, 'samples_tolerance_retries': 3}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE5', 'fan_speed': 1.0}, 'controller_fan controller_fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD12', 'fan_speed': 1.0, 'idle_speed': 1.0, 'idle_timeout': 30, 'heater': ['heater_bed']}, 'heater_fan exhaust_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 5.0, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13', 'fan_speed': 1.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PD15', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 1.0, 'maximum_mcu_duration': 0.0, 'value': 1.0, 'shutdown_value': 0.0}, 'neopixel headlight': {'pin': 'PB0', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 0.0, 'initial_green': 0.2157, 'initial_blue': 1.0, 'initial_white': 0.0}, 'temperature_sensor chamber_temp': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF5', 'min_temp': 0.0, 'max_temp': 100.0, 'gcode_id': 'chamber_th'}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [150.0, 348.0], [350.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 5.0], [150.0, 245.0], [270.0, 5.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'gcode_macro _user_variables': {'gcode': '\n{% set Mx = printer[\'configfile\'].config["stepper_x"]["position_max"]|float %}\n{% set My = printer[\'configfile\'].config["stepper_y"]["position_max"]|float %}\n{% set Ox = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set Oy = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set Oz = printer[\'configfile\'].config["probe"]["z_offset"]|float %}\n\n\n{% if z_endstop_x != 0 or z_endstop_y != 0 %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ z_endstop_x }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ z_endstop_y }\n\n\n{% else %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ (Mx * 0.5) - Ox }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ (My * 0.5) - Oy }\n{% endif %}', 'description': 'G-Code macro', 'variable_verbose': 'True', 'variable_debug': 'False', 'variable_travel_speed': '200', 'variable_move_accel': '1000', 'variable_dock_speed': '50', 'variable_release_speed': '75', 'variable_z_drop_speed': '20', 'variable_safe_z': '25', 'variable_enable_z_hop': 'True', 'variable_max_bed_y': '300', 'variable_max_bed_x': '300', 'variable_z_endstop_x': '172', 'variable_z_endstop_y': '301', 'variable_docklocation_x': '40.5', 'variable_docklocation_y': '303.5', 'variable_docklocation_z': '-128', 'variable_enable_dock_servo': 'False', 'variable_servo_name': "'NAME'", 'variable_servo_deploy': '10', 'variable_servo_retract': '11', 'variable_servo_delay': '250', 'variable_dockmove_x': '40', 'variable_dockmove_y': '0', 'variable_dockmove_z': '0', 'variable_attachmove_x': '0', 'variable_attachmove_y': '30', 'variable_attachmove_z': '0', 'variable_umbilical': 'False', 'variable_umbilical_x': '15', 'variable_umbilical_y': '15', 'variable_park_toolhead': 'False', 'variable_parkposition_x': '125', 'variable_parkposition_y': '125', 'variable_parkposition_z': '30', 'variable_version': '1', 'variable_attachmove2_x': '0', 'variable_attachmove2_y': '0', 'variable_attachmove2_z': '0', 'variable_home_backoff_x': '10', 'variable_home_backoff_y': '10', 'variable_override_homing': "''", 'variable_dock_on_zhome': 'True'}, 'gcode_macro print_start': {'gcode': '\nM117 Homing...\nG28\nZ_TILT_ADJUST\nG28\n\n\n\n\n\n\n\nG0 X150 Y150 Z30 F3600', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1500.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-02-15 21:11:53,021 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-15 21:11:53,021 [printer.py:reinit()] - Klipper version: v0.12.0-103-g6ce6fbbc-dirty
2024-02-15 21:11:53,021 [printer.py:reinit()] - # Extruders: 1
2024-02-15 21:11:53,021 [printer.py:reinit()] - # Temperature devices: 2
2024-02-15 21:11:53,021 [printer.py:reinit()] - # Fans: 4
2024-02-15 21:11:53,021 [printer.py:reinit()] - # Output pins: 1
2024-02-15 21:11:53,022 [printer.py:reinit()] - # Leds: 1
2024-02-15 21:11:53,033 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2024-02-15 21:11:53,034 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-02-15 21:11:53,331 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor chamber_temp&fan&controller_fan controller_fan&heater_fan hotend_fan&heater_fan exhaust_fan&output_pin caselight&neopixel headlight
2024-02-15 21:11:53,334 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-02-15 21:11:53,334 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-02-15 21:11:53,334 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-02-15 21:11:53,335 [screen.py:init_klipper()] - Printer initialized
2024-02-15 21:11:53,335 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2024-02-15 21:11:53,336 [printer.py:change_state()] - Adding callback for state: ready
2024-02-15 21:11:53,338 [screen.py:_load_panel()] - Loading panel: main_menu
2024-02-15 21:11:53,398 [main_menu.py:__init__()] - ### Making MainMenu
2024-02-15 21:11:53,404 [main_menu.py:add_device()] - Adding device: extruder
2024-02-15 21:11:53,409 [main_menu.py:add_device()] - Adding device: heater_bed
2024-02-15 21:11:53,414 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber_temp
2024-02-15 21:11:53,438 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-02-15 21:11:53,445 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-02-15 21:11:53,446 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-02-15 21:11:53,446 [main_menu.py:update_graph_visibility()] - Could not create graph tempstore: None
2024-02-15 21:11:58,982 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-02-15 21:11:58,993 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'temperature_sensor chamber_temp', 'extruder']
2024-02-15 21:11:59,004 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2024-02-15 21:11:59,005 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-02-15 21:40:42,468 [screen.py:_load_panel()] - Loading panel: temperature
2024-02-15 21:40:42,489 [temperature.py:add_device()] - Adding device: extruder
2024-02-15 21:40:42,502 [temperature.py:add_device()] - Adding device: heater_bed
2024-02-15 21:40:42,514 [temperature.py:add_device()] - Adding device: temperature_sensor chamber_temp
2024-02-15 21:40:42,523 [temperature.py:select_heater()] - Selecting extruder
2024-02-15 21:40:42,524 [temperature.py:select_heater()] - Selecting heater_bed
2024-02-15 21:40:42,556 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > temperature
2024-02-15 21:40:46,493 [temperature.py:verify_max_temp()] - 240/270
2024-02-15 21:40:46,493 [KlippyWebsocket.py:set_tool_temp()] - Sending set_tool_temp: M104 T0 S240
2024-02-15 21:40:50,066 [temperature.py:verify_max_temp()] - 80/120
2024-02-15 21:40:50,066 [KlippyWebsocket.py:set_bed_temp()] - Sending set_bed_temp: M140 S80
2024-02-15 21:54:43,789 [screen.py:_menu_go_back()] - #### Menu go back
2024-02-15 21:54:43,831 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-02-15 21:54:46,002 [screen.py:_load_panel()] - Loading panel: extrude
2024-02-15 21:54:46,050 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > extrude
2024-02-15 21:54:47,033 [extrude.py:change_speed()] - ### Speed 5
2024-02-15 21:54:47,609 [extrude.py:change_speed()] - ### Speed 25
2024-02-15 21:54:48,017 [extrude.py:change_distance()] - ### Distance 25
2024-02-15 21:54:48,640 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M83
2024-02-15 21:54:48,643 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G1 E-25 F1500'}
2024-02-15 21:54:53,049 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M83
2024-02-15 21:54:53,051 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G1 E-25 F1500'}
2024-02-15 21:54:55,737 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M83
2024-02-15 21:54:55,740 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G1 E-25 F1500'}
2024-02-15 22:06:42,776 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_DEFINE"
2024-02-15 22:06:42,971 [KlippyWebsocket.py:get_file_dir()] - Sending server.files.directory gcodes/.thumbs
2024-02-15 22:06:42,988 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2024-02-15 22:06:42,988 [printer.py:change_state()] - Adding callback for state: printing
2024-02-15 22:06:42,997 [screen.py:_load_panel()] - Loading panel: job_status
2024-02-15 22:06:43,126 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-02-15 22:06:43,130 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-02-15 22:06:43,140 [job_status.py:update_file_metadata()] - Update Metadata. File: Voron_Design_Cube_v7_PETG_35m47s.gcode Size: 2884279
2024-02-15 22:06:43,148 [job_status.py:show_file_thumbnail()] - Voron_Design_Cube_v7_PETG_35m47s.gcode
2024-02-15 22:06:59,903 [screen.py:show_popup_message()] - echo: Printer not homed
2024-02-15 22:07:00,040 [printer.py:change_state()] - Changing state from 'printing' to 'paused'
2024-02-15 22:07:00,040 [printer.py:change_state()] - Adding callback for state: paused
2024-02-15 22:07:00,046 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'paused'
2024-02-15 22:07:00,075 [files.py:remove_file_callback()] - callback not found <bound method Panel._callback_metadata of <panels.job_status.Panel object at 0x7f682a76a0>>
2024-02-15 22:07:00,076 [screen.py:show_panel()] - Reinitializing panel
2024-02-15 22:07:00,187 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-02-15 22:07:00,192 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'paused'
2024-02-15 22:07:00,198 [job_status.py:update_file_metadata()] - Update Metadata. File: Voron_Design_Cube_v7_PETG_35m47s.gcode Size: 2884279
2024-02-15 22:07:00,204 [job_status.py:show_file_thumbnail()] - Voron_Design_Cube_v7_PETG_35m47s.gcode
2024-02-15 22:07:00,208 [files.py:remove_file_callback()] - callback not found <bound method Panel._callback_metadata of <panels.job_status.Panel object at 0x7f682a76a0>>
2024-02-15 22:07:00,208 [screen.py:show_panel()] - Reinitializing panel
2024-02-15 22:07:00,257 [screen.py:attach_panel()] - Current panel hierarchy: job_status > extrude
2024-02-15 22:07:05,049 [printer.py:change_state()] - Changing state from 'paused' to 'printing'
2024-02-15 22:07:05,049 [printer.py:change_state()] - Adding callback for state: printing
2024-02-15 22:07:05,056 [files.py:remove_file_callback()] - callback not found <bound method Panel._callback_metadata of <panels.job_status.Panel object at 0x7f682a76a0>>
2024-02-15 22:07:05,056 [screen.py:show_panel()] - Reinitializing panel
2024-02-15 22:07:05,152 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-02-15 22:07:05,162 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-02-15 22:07:05,179 [job_status.py:update_file_metadata()] - Update Metadata. File: Voron_Design_Cube_v7_PETG_35m47s.gcode Size: 2884279
2024-02-15 22:07:05,190 [job_status.py:show_file_thumbnail()] - Voron_Design_Cube_v7_PETG_35m47s.gcode
2024-02-15 22:07:38,780 [screen.py:show_popup_message()] - error: Probe triggered prior to movement
2024-02-15 22:07:38,888 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2024-02-15 22:07:38,888 [printer.py:change_state()] - Adding callback for state: ready
2024-02-15 22:07:38,898 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'cancelled'
2024-02-15 22:09:17,360 [KlippyGtk.py:Dialog()] - Showing dialog KlipperScreen (width=800, height=480)
2024-02-15 22:09:23,267 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-02-15 22:09:23,267 [printer.py:change_state()] - Adding callback for state: disconnected
2024-02-15 22:09:23,268 [screen.py:state_disconnected()] - ### Going to disconnected
2024-02-15 22:09:23,268 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-15 22:09:23,271 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-02-15 22:09:23,271 [files.py:remove_file_callback()] - callback not found <bound method Panel._callback_metadata of <panels.job_status.Panel object at 0x7f682a76a0>>
2024-02-15 22:09:23,271 [screen.py:show_panel()] - Reinitializing panel
2024-02-15 22:09:23,305 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-02-15 22:09:26,742 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-15 22:09:26,754 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2024-02-15 22:09:26,755 [printer.py:configure_cameras()] - Cameras: []
2024-02-15 22:09:26,755 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'octoprint_compat', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-310-g67c98f6', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-02-15 22:09:26,767 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2024-02-15 22:09:27,007 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2024-02-15 22:09:27,010 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro _Probe_Variables': {'variable_probe_attached': 'False', 'variable_probe_state': 'False', 'variable_probe_lock': 'False', 'variable_probe_z_homed': 'False', 'variable_z_endstop_x': '0', 'variable_z_endstop_y': '0', 'gcode': ''}, 'gcode_macro _klicky_check_variables_version': {'gcode': '\n{% set version = printer["gcode_macro _User_Variables"].version|default(0) %}\n\n{% if version != 1 %}\n{ action_raise_error("Please update your klicky variables, there are some functionality changes") }\n{% endif %}'}, 'gcode_macro _KlickyDebug': {'gcode': '\n{% set message  = params.MSG %}\n{% set debug = printer["gcode_macro _User_Variables"].debug|default(False) %}\n\n{% if debug %}\n{ action_respond_info(message) }\n{% endif %}'}, 'gcode_macro _exit_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move  = params.MOVE|default(0) %}\n{% set speed = printer["gcode_macro _User_Variables"].travel_speed %}\n\n\nM400\nSET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\nRESTORE_GCODE_STATE NAME={function} MOVE={move} MOVE_SPEED={speed}'}, 'gcode_macro _entry_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move_accel = printer["gcode_macro _User_Variables"].move_accel|default(1000) %}\n\nM400\nSAVE_GCODE_STATE NAME={function}\n\nSET_GCODE_OFFSET Z=0\n\nG90\n\nSET_VELOCITY_LIMIT ACCEL={move_accel}'}, 'gcode_macro _Homing_Variables': {'gcode': '\n{% set reset  = params.RESET|default(0) %}\n{% if reset %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }\n{% endif %}'}, 'gcode_macro Attach_Probe_Lock': {'description': 'Attaches Klicky Probe, can only be docked after unlocking', 'gcode': '\nAttach_Probe\n_Probe_Lock'}, 'gcode_macro Dock_Probe_Unlock': {'description': 'Docks Klicky Probe even if it was locked', 'gcode': '\n_Probe_Unlock\nDock_Probe'}, 'gcode_macro _Probe_Unlock': {'description': 'Unlocks Klicky Probe state', 'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to False"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }'}, 'gcode_macro _Probe_Lock': {'description': 'Locks Klicky Probe state', 'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to True"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ True }'}, 'gcode_macro _DeployKlickyDock': {'description': 'Deploys Klicky servo-controlled dock', 'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_deploy = printer["gcode_macro _User_Variables"].servo_deploy|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_DeployKlickyDock Klicky servo configuration enabled"\n{% if servo_deploy == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo deploy angle specified") }\n{% endif %}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _DeployDock"] is defined %}\n_KlickyDebug msg="_DeployKlickyDock calling _DeployDock"\n_DeployDock\n{% endif %}'}, 'gcode_macro _RetractKlickyDock': {'description': 'Retracts Klicky servo-controlled dock', 'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_retract = printer["gcode_macro _User_Variables"].servo_retract|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_RetractKlickyDock Klicky servo configuration enabled"\n{% if servo_retract == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo retract angle specified") }\n{% endif %}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _RetractDock"] is defined %}\n_KlickyDebug msg="_RetractKlickyDock calling _RetractDock"\n_RetractDock\n{% endif %}'}, 'gcode_macro Attach_Probe': {'description': 'Attaches Klicky Probe', 'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set attachmove2_x = printer["gcode_macro _User_Variables"].attachmove2_x|default(0) %}\n{% set attachmove2_y = printer["gcode_macro _User_Variables"].attachmove2_y|default(0) %}\n{% set attachmove2_z = printer["gcode_macro _User_Variables"].attachmove2_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n_entry_point function=Attach_Probe\n\n{% if bypass_probe_docking == False %}\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n_KlickyDebug msg="Attach_Probe Axis homed"\n\n\n{% elif not probe_attached and not probe_lock %}\n_KlickyDebug msg="Attach_Probe going to attach probe"\n{% if verbose %}\n{ action_respond_info("Attaching Probe") }\n{% endif %}\n_KLICKY_STATUS_BUSY\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% if not enable_z_hop %}\n_KlickyDebug msg="Attach_Probe z_hop disabled"\n{% set safe_z = 0 %}\n{% endif %}\n{% endif %}\n\n\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero, duplicate?") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Umbilical_Path\n\n_entry_point function=Attach_Probe_intern\n\n\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n_DeployKlickyDock\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}"\nG0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}\n\n_RetractKlickyDock\n\n{% if ((printer.gcode_move.gcode_position.z < safe_z) or (docklocation_z != -128 and docklocation_z < safe_z ))%}\n_KlickyDebug msg="Attach_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\n_CheckProbe action=attach\n\n_exit_point function=Attach_Probe_intern move={goback}\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe locked not attaching probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already attached!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe already attached, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Attach_Probe\n{% else %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}'}, 'gcode_macro Dock_Probe': {'description': 'Docks Klicky Probe', 'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n{% if bypass_probe_docking == True %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}\n\n{% if bypass_probe_docking != True %}\n_entry_point function=Dock_Probe\n\n\n{% if probe_attached and not probe_lock %}\n_KLICKY_STATUS_BUSY\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Dock_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n_Umbilical_Path\n\n\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n\n_DeployKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\n\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}"\nG0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}\n{% endif %}\n\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}\n\n\n_RetractKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving away from the dock to G0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}\n\n\n{% if (printer.gcode_move.gcode_position.z < safe_z) %}\n_KlickyDebug msg="Dock_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\nG4 P1000\n_CheckProbe action=dock\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe locked not docking probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already docked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe already docked, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Dock_Probe move={goback}\n{% else %}\n_KlickyDebug msg="Dock_Probe probe docking bypassed, doing nothing"\n{% endif %}'}, 'gcode_macro PROBE_CALIBRATE': {'rename_existing': '_PROBE_CALIBRATE', 'description': 'Calibrate the probes z_offset with klicky automount', 'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_calibrate Axis homed"\n_KlickyDebug msg="probe_calibrate Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_CALIBRATE with the probe above the BED, check klicky_variables bed size!") }\n{% endif %}\n\n{% if bypass_probe_docking == False %}\n_CheckProbe action=query\nG90\nAttach_Probe back=1\n_KLICKY_STATUS_CALIBRATING_Z\n\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nM118 moving the toolhead 20 mm from the bed\n_KlickyDebug msg="probe_calibrate Moving Z up by 20mm"\nTESTZ Z=20\nM118 remove manually the probe and continue calibration\n_KLICKY_STATUS_READY\n{% else %}\n_KLICKY_STATUS_CALIBRATING_Z\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n_KLICKY_STATUS_READY\n{% endif %}'}, 'gcode_macro PROBE_ACCURACY': {'rename_existing': '_PROBE_ACCURACY', 'description': 'Probe Z-height accuracy at current XY position with klicky automount', 'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_accuracy Axis homed"\n_KlickyDebug msg="probe_accuracy Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n_entry_point function=PROBE_ACCURACY\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_ACCURACY with the probe above the BED, check klicky_variables bed size!") }\n{% endif%}\n\n_CheckProbe action=query\nAttach_Probe back=1\n\n_KlickyDebug msg="probe_accuracy calling klipper probe accuracy"\n_PROBE_ACCURACY {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nDock_Probe back=1\n\n_exit_point function=PROBE_ACCURACY move=1'}, 'force_move': {'enable_force_move': 'True'}, 'homing_override': {'axes': 'xyz', 'gcode': '\n\n_User_Variables\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n{% set kinematic_z = 0 %}\n{% set dock_on_zhome = printer["gcode_macro _User_Variables"].dock_on_zhome|default(True) %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set home_backoff_x = printer["gcode_macro _User_Variables"].home_backoff_x|default(0) %}\n{% set home_backoff_y = printer["gcode_macro _User_Variables"].home_backoff_y|default(0) %}\n{% set override_homing = printer["gcode_macro _User_Variables"].override_homing|default(\'\') %}\n\n\n_klicky_check_variables_version\n\n_CheckProbe action=query\n\n\n{% set home_x, home_y, home_z, leave_probe_attached = False, False, False, False %}\n\n{% if \'PROBE_LOCK\' in params%}\n{% if verbose %}\n{ action_respond_info("PROBE_LOCK = True") }\n{% endif %}\n{% set leave_probe_attached = True %}\n{% endif %}\n\n\n{% if not \'X\' in params\nand not \'Y\' in params\nand not \'Z\' in params %}\n\n{% set home_x, home_y, home_z = True, True, True %}\n_KlickyDebug msg="homing_override goint to home all axes"\n\n{% else %}\n{% if \'X\' in params %}\n{% set home_x = True %}\n_KlickyDebug msg="homing_override goint to home X"\n\n{% endif %}\n\n{% if \'Y\' in params %}\n{% set home_y = True %}\n_KlickyDebug msg="homing_override goint to home Y"\n{% endif %}\n\n{% if \'Z\' in params %}\n{% set home_z = True %}\n_KlickyDebug msg="homing_override goint to home Z"\n{% endif %}\n\n{% if \'X\' in params\nand \'Y\' in params\nand \'Z\' in params %}\n\n\n_Homing_Variables reset=1\n_KlickyDebug msg="homing_override goint to home all axes"\n{% endif %}\n\n{% endif %}\n\n_entry_point function=homing_override\n_KLICKY_STATUS_HOMING\n\n\n{% if \'z\' not in printer.toolhead.homed_axes %}\n{% if enable_z_hop == False %}\n_KlickyDebug msg="homing_override z_hop disabled"\n\n{% set kinematic_z = safe_z %}\n{% set safe_z = safe_z %}\n{% endif %}\n{% endif %}\n\n\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes and \'z\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("No axis homed") }\n{% endif %}\n_KlickyDebug msg="homing_override no axis homed, setting position as X=Y=0 Z={kinematic_z}"\nSET_KINEMATIC_POSITION X=0 Y=0 Z={kinematic_z}\nM400\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% if home_z != True %}\n_KlickyDebug msg="homing_override clearing axis homed state if not already homing Z"\nM84\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("X or Y not homed, forcing full G28") }\n{% endif %}\n{% set home_x, home_y, home_z = True, True, True %}\n{% endif %}\n{% endif %}\n\n\n{% if ((attachmove_y == 0 and override_homing == \'\' ) or (override_homing == \'Y\'))%}\n\n{% if home_y %}\n{% if override_homing == \'Y\' %}\n_KlickyDebug msg="homing_override Y homing first override, due to override_homing = Y"\n{% else %}\n_KlickyDebug msg="homing_override Y homing first override, due to attachmove_y = 0"\n{% endif %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y G28 Y0"\nG28 Y0\n\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop-home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n{% set home_y = False %}\n{% endif %}\n\n\n\n{% if home_x %}\n{% if verbose %}\n{ action_respond_info("Homing X") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in X homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_X"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_X external script to handle the X homing"\n_HOME_X\n{% else %}\n_KlickyDebug msg="homing_override Homing X, G28 X0"\nG28 X0\n\n{% if home_backoff_x != 0 %}\n{% if (printer.configfile.settings.stepper_x.position_endstop > (printer.configfile.settings.stepper_x.position_min|default(0) + printer.configfile.settings.stepper_x.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n\n{% if home_y %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y, G28 Y0"\nG28 Y0\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if verbose %}\n{ action_respond_info("Homing Z") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe configured as a virtual Z endstop attaching probe"\nAttach_Probe\n\n{% if leave_probe_attached %}\n_Probe_Lock\n{% endif %}\n{% elif dock_on_zhome == True %}\nDock_Probe\n{% endif %}\n\n_Home_Z_\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe no longer required, docking probe"\nDock_Probe\n{% elif dock_on_zhome == False %}\nDock_Probe\n{% endif %}\n{% endif %}\n_CheckProbe action=query\n\n\n_Park_Toolhead\n\n_exit_point function=homing_override\n_KLICKY_STATUS_READY'}, 'gcode_macro _Umbilical_Path': {'gcode': '\n{% set umbilical = printer["gcode_macro _User_Variables"].umbilical %}\n{% set umbilical_x = printer["gcode_macro _User_Variables"].umbilical_x %}\n{% set umbilical_y = printer["gcode_macro _User_Variables"].umbilical_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n\n{% if umbilical %}\n\n_entry_point function=Umbilical_Path\n\n_KlickyDebug msg="_Umbilical_Path moving to G0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}"\nG0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}\n\n_exit_point function=Umbilical_Path\n{% endif %}'}, 'gcode_macro _Home_Z_': {'gcode': '\n{% set z_endstop_x = printer["gcode_macro _Probe_Variables"].z_endstop_x %}\n{% set z_endstop_y = printer["gcode_macro _Probe_Variables"].z_endstop_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}    {% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Home_Z\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n{% else %}\n_KlickyDebug msg="_Home_Z_ XY Axis homed"\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="_Home_Z_ Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n\n\n_KlickyDebug msg="_Home_Z_ moving to Z endstop position G0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}"\nG0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}\n_KlickyDebug msg="_Home_Z_ Homing Z G28 Z"\nG28 Z0\n_KlickyDebug msg="_Home_Z_ toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_exit_point function=Home_Z'}, 'gcode_macro _CheckProbe': {'variable_probe_state': '0', 'gcode': '\nQuery_Probe\n_SetProbeState action={ params.ACTION }'}, 'gcode_macro _SetProbeState': {'gcode': '\n{% set query_probe_triggered = printer.probe.last_query %}\n{% set action  = params.ACTION|default(\'\') %}\n\n\n{% if query_probe_triggered %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ False }\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ True }\n{% endif %}\n\n{% if action == \'query\' %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_state VALUE={ query_probe_triggered }\n{% endif %}\n\n\n\n\n{% if not query_probe_triggered and action == \'dock\' %}\n{ action_raise_error("Probe dock failed!") }\n{% endif %}\n\n\n{% if query_probe_triggered and action == \'attach\' %}\n{ action_raise_error("Probe attach failed!") }\n{% endif %}'}, 'gcode_macro _Park_Toolhead': {'gcode': '\n{% set park_toolhead = printer["gcode_macro _User_Variables"].park_toolhead %}\n{% set parkposition_x = printer["gcode_macro _User_Variables"].parkposition_x %}\n{% set parkposition_y = printer["gcode_macro _User_Variables"].parkposition_y %}\n{% set parkposition_z = printer["gcode_macro _User_Variables"].parkposition_z %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Park_Toolhead\n\n{% if park_toolhead and \'xyz\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Parking Toolhead") }\n{% endif %}\n{% if parkposition_z == -128 %}\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}\n\n{% else %}\n\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}\n\n{% endif %}\n\n{% endif %}\n_exit_point function=Park_Toolhead'}, 'gcode_macro _klicky_status_ready': {'gcode': '\n{% if printer[\'gcode_macro status_ready\'] is defined %}\n_KlickyDebug msg="_klicky_status_ready activating the LED STATUS_READY"\nSTATUS_READY\n{% endif %}'}, 'gcode_macro _klicky_status_busy': {'gcode': '\n{% if printer[\'gcode_macro status_busy\'] is defined %}\n_KlickyDebug msg="_klicky_status_busy activating the LED STATUS_BUSY"\nSTATUS_BUSY\n{% endif %}'}, 'gcode_macro _klicky_status_leveling': {'gcode': '\n{% if printer[\'gcode_macro status_leveling\'] is defined %}\n_KlickyDebug msg="_klicky_status_leveling activating the LED STATUS_LEVELING"\nSTATUS_LEVELING\n{% endif %}'}, 'gcode_macro _klicky_status_homing': {'gcode': '\n{% if printer[\'gcode_macro status_homing\'] is defined %}\n_KlickyDebug msg="_klicky_status_homing activating the LED STATUS_HOMING"\nSTATUS_HOMING\n{% endif %}'}, 'gcode_macro _klicky_status_cleaning': {'gcode': '\n{% if printer[\'gcode_macro status_cleaning\'] is defined %}\n_KlickyDebug msg="_klicky_status_cleaning activating the LED STATUS_CLEANING"\nSTATUS_CLEANING\n{% endif %}'}, 'gcode_macro _klicky_status_meshing': {'gcode': '\n{% if printer[\'gcode_macro status_meshing\'] is defined %}\n_KlickyDebug msg="_klicky_status_meshing activating the LED STATUS_MESHING"\nSTATUS_MESHING\n{% endif %}'}, 'gcode_macro _klicky_status_calibrating_z': {'gcode': '\n{% if printer[\'gcode_macro status_calibrating_z\'] is defined %}\n_KlickyDebug msg="_klicky_status_calibrating_z activating the LED STATUS_CALIBRATING_Z"\nSTATUS_CALIBRATING_Z\n{% endif %}'}, 'z_calibration': {'nozzle_xy_position': '172, 301', 'switch_xy_position': '171.5, 282', 'bed_xy_position': '150, 150', 'switch_offset': '0.09', 'offset_margins': '-1.0,1.0', 'speed': '50', 'probing_first_fast': 'false', 'start_gcode': 'Attach_Probe', 'end_gcode': 'Dock_Probe'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_28003C001150535556323420-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '^PG6', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '25', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'PG9', 'position_min': '0', 'position_endstop': '300', 'position_max': '303.5', 'homing_speed': '25', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': '!PG3', 'enable_pin': '!PG5', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'PG10', 'position_max': '290', 'position_min': '-4.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3', 'position_endstop': '-0.711'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA0', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': '!PF10', 'enable_pin': '!PG2', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PC13', 'dir_pin': 'PF0', 'enable_pin': '!PF1', 'rotation_distance': '21.9459674016', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.75', 'heater_pin': 'PA1', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF4', 'min_temp': '10', 'max_temp': '270', 'max_power': '1.0', 'min_extrude_temp': '170', 'pressure_advance': '0.05', 'pressure_advance_smooth_time': '0.040', 'control': 'pid', 'pid_kp': '26.572', 'pid_ki': '2.036', 'pid_kd': '86.691'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.5', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PA2', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF3', 'max_power': '1', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '55.196', 'pid_ki': '2.091', 'pid_kd': '364.295'}, 'probe': {'pin': 'PG15', 'x_offset': '0', 'y_offset': '25.0', 'z_offset': '0', 'speed': '10.0', 'samples': '5', 'samples_result': 'median', 'sample_retract_dist': '3.0', 'samples_tolerance': '0.006', 'samples_tolerance_retries': '3'}, 'fan': {'pin': 'PA8', 'kick_start_time': '0.5', 'off_below': '0.10'}, 'heater_fan hotend_fan': {'pin': 'PE5', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'controller_fan controller_fan': {'pin': 'PD12', 'kick_start_time': '0.5', 'heater': 'heater_bed'}, 'heater_fan exhaust_fan': {'pin': 'PD13', 'max_power': '1.0', 'shutdown_speed': '0.0', 'kick_start_time': '5.0', 'heater': 'heater_bed', 'heater_temp': '60', 'fan_speed': '1.0'}, 'output_pin caselight': {'pin': 'PD15', 'pwm': 'true', 'shutdown_value': '0', 'value': '1', 'cycle_time': '0.01'}, 'neopixel headlight': {'pin': 'PB0', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '0.0', 'initial_green': '0.2157', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'temperature_sensor chamber_temp': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF5', 'min_temp': '0', 'max_temp': '100', 'gcode_id': 'chamber_th'}, 'idle_timeout': {'timeout': '1800'}, 'z_tilt': {'z_positions': '\n-50, 18\n150, 348\n350, 18', 'points': '\n30, 5\n150, 245\n270, 5', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'gcode_macro _User_Variables': {'variable_verbose': 'True', 'variable_debug': 'False', 'variable_travel_speed': '200', 'variable_move_accel': '1000', 'variable_dock_speed': '50', 'variable_release_speed': '75', 'variable_z_drop_speed': '20', 'variable_safe_z': '25', 'variable_enable_z_hop': 'True', 'variable_max_bed_y': '300', 'variable_max_bed_x': '300', 'variable_z_endstop_x': '172', 'variable_z_endstop_y': '301', 'variable_docklocation_x': '40.5', 'variable_docklocation_y': '303.5', 'variable_docklocation_z': '-128', 'variable_enable_dock_servo': 'False', 'variable_servo_name': "'NAME'", 'variable_servo_deploy': '10', 'variable_servo_retract': '11', 'variable_servo_delay': '250', 'variable_dockmove_x': '40', 'variable_dockmove_y': '0', 'variable_dockmove_z': '0', 'variable_attachmove_x': '0', 'variable_attachmove_y': '30', 'variable_attachmove_z': '0', 'variable_umbilical': 'False', 'variable_umbilical_x': '15', 'variable_umbilical_y': '15', 'variable_park_toolhead': 'False', 'variable_parkposition_x': '125', 'variable_parkposition_y': '125', 'variable_parkposition_z': '30', 'variable_version': '1', 'variable_attachmove2_x': '0', 'variable_attachmove2_y': '0', 'variable_attachmove2_z': '0', 'variable_home_backoff_x': '10', 'variable_home_backoff_y': '10', 'variable_override_homing': "''", 'variable_dock_on_zhome': 'True', 'gcode': '\n{% set Mx = printer[\'configfile\'].config["stepper_x"]["position_max"]|float %}\n{% set My = printer[\'configfile\'].config["stepper_y"]["position_max"]|float %}\n{% set Ox = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set Oy = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set Oz = printer[\'configfile\'].config["probe"]["z_offset"]|float %}\n\n\n{% if z_endstop_x != 0 or z_endstop_y != 0 %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ z_endstop_x }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ z_endstop_y }\n\n\n{% else %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ (Mx * 0.5) - Ox }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ (My * 0.5) - Oy }\n{% endif %}'}, 'gcode_macro PRINT_START': {'gcode': '\nM117 Homing...\nG28\nZ_TILT_ADJUST\nG28\n\n\n\n\n\n\n\nG0 X150 Y150 Z30 F3600'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_28003C001150535556323420-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro _probe_variables': {'gcode': '', 'description': 'G-Code macro', 'variable_probe_attached': 'False', 'variable_probe_state': 'False', 'variable_probe_lock': 'False', 'variable_probe_z_homed': 'False', 'variable_z_endstop_x': '0', 'variable_z_endstop_y': '0'}, 'gcode_macro _klicky_check_variables_version': {'gcode': '\n{% set version = printer["gcode_macro _User_Variables"].version|default(0) %}\n\n{% if version != 1 %}\n{ action_raise_error("Please update your klicky variables, there are some functionality changes") }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klickydebug': {'gcode': '\n{% set message  = params.MSG %}\n{% set debug = printer["gcode_macro _User_Variables"].debug|default(False) %}\n\n{% if debug %}\n{ action_respond_info(message) }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _exit_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move  = params.MOVE|default(0) %}\n{% set speed = printer["gcode_macro _User_Variables"].travel_speed %}\n\n\nM400\nSET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\nRESTORE_GCODE_STATE NAME={function} MOVE={move} MOVE_SPEED={speed}', 'description': 'G-Code macro'}, 'gcode_macro _entry_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move_accel = printer["gcode_macro _User_Variables"].move_accel|default(1000) %}\n\nM400\nSAVE_GCODE_STATE NAME={function}\n\nSET_GCODE_OFFSET Z=0\n\nG90\n\nSET_VELOCITY_LIMIT ACCEL={move_accel}', 'description': 'G-Code macro'}, 'gcode_macro _homing_variables': {'gcode': '\n{% set reset  = params.RESET|default(0) %}\n{% if reset %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro attach_probe_lock': {'gcode': '\nAttach_Probe\n_Probe_Lock', 'description': 'Attaches Klicky Probe, can only be docked after unlocking'}, 'gcode_macro dock_probe_unlock': {'gcode': '\n_Probe_Unlock\nDock_Probe', 'description': 'Docks Klicky Probe even if it was locked'}, 'gcode_macro _probe_unlock': {'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to False"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }', 'description': 'Unlocks Klicky Probe state'}, 'gcode_macro _probe_lock': {'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to True"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ True }', 'description': 'Locks Klicky Probe state'}, 'gcode_macro _deployklickydock': {'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_deploy = printer["gcode_macro _User_Variables"].servo_deploy|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_DeployKlickyDock Klicky servo configuration enabled"\n{% if servo_deploy == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo deploy angle specified") }\n{% endif %}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _DeployDock"] is defined %}\n_KlickyDebug msg="_DeployKlickyDock calling _DeployDock"\n_DeployDock\n{% endif %}', 'description': 'Deploys Klicky servo-controlled dock'}, 'gcode_macro _retractklickydock': {'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_retract = printer["gcode_macro _User_Variables"].servo_retract|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_RetractKlickyDock Klicky servo configuration enabled"\n{% if servo_retract == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo retract angle specified") }\n{% endif %}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _RetractDock"] is defined %}\n_KlickyDebug msg="_RetractKlickyDock calling _RetractDock"\n_RetractDock\n{% endif %}', 'description': 'Retracts Klicky servo-controlled dock'}, 'gcode_macro attach_probe': {'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set attachmove2_x = printer["gcode_macro _User_Variables"].attachmove2_x|default(0) %}\n{% set attachmove2_y = printer["gcode_macro _User_Variables"].attachmove2_y|default(0) %}\n{% set attachmove2_z = printer["gcode_macro _User_Variables"].attachmove2_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n_entry_point function=Attach_Probe\n\n{% if bypass_probe_docking == False %}\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n_KlickyDebug msg="Attach_Probe Axis homed"\n\n\n{% elif not probe_attached and not probe_lock %}\n_KlickyDebug msg="Attach_Probe going to attach probe"\n{% if verbose %}\n{ action_respond_info("Attaching Probe") }\n{% endif %}\n_KLICKY_STATUS_BUSY\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% if not enable_z_hop %}\n_KlickyDebug msg="Attach_Probe z_hop disabled"\n{% set safe_z = 0 %}\n{% endif %}\n{% endif %}\n\n\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero, duplicate?") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Umbilical_Path\n\n_entry_point function=Attach_Probe_intern\n\n\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n_DeployKlickyDock\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}"\nG0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}\n\n_RetractKlickyDock\n\n{% if ((printer.gcode_move.gcode_position.z < safe_z) or (docklocation_z != -128 and docklocation_z < safe_z ))%}\n_KlickyDebug msg="Attach_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\n_CheckProbe action=attach\n\n_exit_point function=Attach_Probe_intern move={goback}\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe locked not attaching probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already attached!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe already attached, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Attach_Probe\n{% else %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}', 'description': 'Attaches Klicky Probe'}, 'gcode_macro dock_probe': {'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n{% if bypass_probe_docking == True %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}\n\n{% if bypass_probe_docking != True %}\n_entry_point function=Dock_Probe\n\n\n{% if probe_attached and not probe_lock %}\n_KLICKY_STATUS_BUSY\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Dock_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n_Umbilical_Path\n\n\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n\n_DeployKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\n\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}"\nG0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}\n{% endif %}\n\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}\n\n\n_RetractKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving away from the dock to G0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}\n\n\n{% if (printer.gcode_move.gcode_position.z < safe_z) %}\n_KlickyDebug msg="Dock_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\nG4 P1000\n_CheckProbe action=dock\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe locked not docking probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already docked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe already docked, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Dock_Probe move={goback}\n{% else %}\n_KlickyDebug msg="Dock_Probe probe docking bypassed, doing nothing"\n{% endif %}', 'description': 'Docks Klicky Probe'}, 'gcode_macro probe_calibrate': {'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_calibrate Axis homed"\n_KlickyDebug msg="probe_calibrate Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_CALIBRATE with the probe above the BED, check klicky_variables bed size!") }\n{% endif %}\n\n{% if bypass_probe_docking == False %}\n_CheckProbe action=query\nG90\nAttach_Probe back=1\n_KLICKY_STATUS_CALIBRATING_Z\n\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nM118 moving the toolhead 20 mm from the bed\n_KlickyDebug msg="probe_calibrate Moving Z up by 20mm"\nTESTZ Z=20\nM118 remove manually the probe and continue calibration\n_KLICKY_STATUS_READY\n{% else %}\n_KLICKY_STATUS_CALIBRATING_Z\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n_KLICKY_STATUS_READY\n{% endif %}', 'rename_existing': '_PROBE_CALIBRATE', 'description': 'Calibrate the probes z_offset with klicky automount'}, 'gcode_macro probe_accuracy': {'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_accuracy Axis homed"\n_KlickyDebug msg="probe_accuracy Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n_entry_point function=PROBE_ACCURACY\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_ACCURACY with the probe above the BED, check klicky_variables bed size!") }\n{% endif%}\n\n_CheckProbe action=query\nAttach_Probe back=1\n\n_KlickyDebug msg="probe_accuracy calling klipper probe accuracy"\n_PROBE_ACCURACY {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nDock_Probe back=1\n\n_exit_point function=PROBE_ACCURACY move=1', 'rename_existing': '_PROBE_ACCURACY', 'description': 'Probe Z-height accuracy at current XY position with klicky automount'}, 'force_move': {'enable_force_move': True}, 'homing_override': {'axes': 'xyz', 'gcode': '\n\n_User_Variables\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n{% set kinematic_z = 0 %}\n{% set dock_on_zhome = printer["gcode_macro _User_Variables"].dock_on_zhome|default(True) %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set home_backoff_x = printer["gcode_macro _User_Variables"].home_backoff_x|default(0) %}\n{% set home_backoff_y = printer["gcode_macro _User_Variables"].home_backoff_y|default(0) %}\n{% set override_homing = printer["gcode_macro _User_Variables"].override_homing|default(\'\') %}\n\n\n_klicky_check_variables_version\n\n_CheckProbe action=query\n\n\n{% set home_x, home_y, home_z, leave_probe_attached = False, False, False, False %}\n\n{% if \'PROBE_LOCK\' in params%}\n{% if verbose %}\n{ action_respond_info("PROBE_LOCK = True") }\n{% endif %}\n{% set leave_probe_attached = True %}\n{% endif %}\n\n\n{% if not \'X\' in params\nand not \'Y\' in params\nand not \'Z\' in params %}\n\n{% set home_x, home_y, home_z = True, True, True %}\n_KlickyDebug msg="homing_override goint to home all axes"\n\n{% else %}\n{% if \'X\' in params %}\n{% set home_x = True %}\n_KlickyDebug msg="homing_override goint to home X"\n\n{% endif %}\n\n{% if \'Y\' in params %}\n{% set home_y = True %}\n_KlickyDebug msg="homing_override goint to home Y"\n{% endif %}\n\n{% if \'Z\' in params %}\n{% set home_z = True %}\n_KlickyDebug msg="homing_override goint to home Z"\n{% endif %}\n\n{% if \'X\' in params\nand \'Y\' in params\nand \'Z\' in params %}\n\n\n_Homing_Variables reset=1\n_KlickyDebug msg="homing_override goint to home all axes"\n{% endif %}\n\n{% endif %}\n\n_entry_point function=homing_override\n_KLICKY_STATUS_HOMING\n\n\n{% if \'z\' not in printer.toolhead.homed_axes %}\n{% if enable_z_hop == False %}\n_KlickyDebug msg="homing_override z_hop disabled"\n\n{% set kinematic_z = safe_z %}\n{% set safe_z = safe_z %}\n{% endif %}\n{% endif %}\n\n\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes and \'z\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("No axis homed") }\n{% endif %}\n_KlickyDebug msg="homing_override no axis homed, setting position as X=Y=0 Z={kinematic_z}"\nSET_KINEMATIC_POSITION X=0 Y=0 Z={kinematic_z}\nM400\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% if home_z != True %}\n_KlickyDebug msg="homing_override clearing axis homed state if not already homing Z"\nM84\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("X or Y not homed, forcing full G28") }\n{% endif %}\n{% set home_x, home_y, home_z = True, True, True %}\n{% endif %}\n{% endif %}\n\n\n{% if ((attachmove_y == 0 and override_homing == \'\' ) or (override_homing == \'Y\'))%}\n\n{% if home_y %}\n{% if override_homing == \'Y\' %}\n_KlickyDebug msg="homing_override Y homing first override, due to override_homing = Y"\n{% else %}\n_KlickyDebug msg="homing_override Y homing first override, due to attachmove_y = 0"\n{% endif %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y G28 Y0"\nG28 Y0\n\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop-home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n{% set home_y = False %}\n{% endif %}\n\n\n\n{% if home_x %}\n{% if verbose %}\n{ action_respond_info("Homing X") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in X homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_X"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_X external script to handle the X homing"\n_HOME_X\n{% else %}\n_KlickyDebug msg="homing_override Homing X, G28 X0"\nG28 X0\n\n{% if home_backoff_x != 0 %}\n{% if (printer.configfile.settings.stepper_x.position_endstop > (printer.configfile.settings.stepper_x.position_min|default(0) + printer.configfile.settings.stepper_x.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n\n{% if home_y %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y, G28 Y0"\nG28 Y0\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if verbose %}\n{ action_respond_info("Homing Z") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe configured as a virtual Z endstop attaching probe"\nAttach_Probe\n\n{% if leave_probe_attached %}\n_Probe_Lock\n{% endif %}\n{% elif dock_on_zhome == True %}\nDock_Probe\n{% endif %}\n\n_Home_Z_\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe no longer required, docking probe"\nDock_Probe\n{% elif dock_on_zhome == False %}\nDock_Probe\n{% endif %}\n{% endif %}\n_CheckProbe action=query\n\n\n_Park_Toolhead\n\n_exit_point function=homing_override\n_KLICKY_STATUS_READY'}, 'gcode_macro _umbilical_path': {'gcode': '\n{% set umbilical = printer["gcode_macro _User_Variables"].umbilical %}\n{% set umbilical_x = printer["gcode_macro _User_Variables"].umbilical_x %}\n{% set umbilical_y = printer["gcode_macro _User_Variables"].umbilical_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n\n{% if umbilical %}\n\n_entry_point function=Umbilical_Path\n\n_KlickyDebug msg="_Umbilical_Path moving to G0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}"\nG0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}\n\n_exit_point function=Umbilical_Path\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _home_z_': {'gcode': '\n{% set z_endstop_x = printer["gcode_macro _Probe_Variables"].z_endstop_x %}\n{% set z_endstop_y = printer["gcode_macro _Probe_Variables"].z_endstop_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}    {% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Home_Z\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n{% else %}\n_KlickyDebug msg="_Home_Z_ XY Axis homed"\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="_Home_Z_ Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n\n\n_KlickyDebug msg="_Home_Z_ moving to Z endstop position G0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}"\nG0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}\n_KlickyDebug msg="_Home_Z_ Homing Z G28 Z"\nG28 Z0\n_KlickyDebug msg="_Home_Z_ toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_exit_point function=Home_Z', 'description': 'G-Code macro'}, 'gcode_macro _checkprobe': {'gcode': '\nQuery_Probe\n_SetProbeState action={ params.ACTION }', 'description': 'G-Code macro', 'variable_probe_state': '0'}, 'gcode_macro _setprobestate': {'gcode': '\n{% set query_probe_triggered = printer.probe.last_query %}\n{% set action  = params.ACTION|default(\'\') %}\n\n\n{% if query_probe_triggered %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ False }\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ True }\n{% endif %}\n\n{% if action == \'query\' %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_state VALUE={ query_probe_triggered }\n{% endif %}\n\n\n\n\n{% if not query_probe_triggered and action == \'dock\' %}\n{ action_raise_error("Probe dock failed!") }\n{% endif %}\n\n\n{% if query_probe_triggered and action == \'attach\' %}\n{ action_raise_error("Probe attach failed!") }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _park_toolhead': {'gcode': '\n{% set park_toolhead = printer["gcode_macro _User_Variables"].park_toolhead %}\n{% set parkposition_x = printer["gcode_macro _User_Variables"].parkposition_x %}\n{% set parkposition_y = printer["gcode_macro _User_Variables"].parkposition_y %}\n{% set parkposition_z = printer["gcode_macro _User_Variables"].parkposition_z %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Park_Toolhead\n\n{% if park_toolhead and \'xyz\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Parking Toolhead") }\n{% endif %}\n{% if parkposition_z == -128 %}\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}\n\n{% else %}\n\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}\n\n{% endif %}\n\n{% endif %}\n_exit_point function=Park_Toolhead', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_ready': {'gcode': '\n{% if printer[\'gcode_macro status_ready\'] is defined %}\n_KlickyDebug msg="_klicky_status_ready activating the LED STATUS_READY"\nSTATUS_READY\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_busy': {'gcode': '\n{% if printer[\'gcode_macro status_busy\'] is defined %}\n_KlickyDebug msg="_klicky_status_busy activating the LED STATUS_BUSY"\nSTATUS_BUSY\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_leveling': {'gcode': '\n{% if printer[\'gcode_macro status_leveling\'] is defined %}\n_KlickyDebug msg="_klicky_status_leveling activating the LED STATUS_LEVELING"\nSTATUS_LEVELING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_homing': {'gcode': '\n{% if printer[\'gcode_macro status_homing\'] is defined %}\n_KlickyDebug msg="_klicky_status_homing activating the LED STATUS_HOMING"\nSTATUS_HOMING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_cleaning': {'gcode': '\n{% if printer[\'gcode_macro status_cleaning\'] is defined %}\n_KlickyDebug msg="_klicky_status_cleaning activating the LED STATUS_CLEANING"\nSTATUS_CLEANING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_meshing': {'gcode': '\n{% if printer[\'gcode_macro status_meshing\'] is defined %}\n_KlickyDebug msg="_klicky_status_meshing activating the LED STATUS_MESHING"\nSTATUS_MESHING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_calibrating_z': {'gcode': '\n{% if printer[\'gcode_macro status_calibrating_z\'] is defined %}\n_KlickyDebug msg="_klicky_status_calibrating_z activating the LED STATUS_CALIBRATING_Z"\nSTATUS_CALIBRATING_Z\n{% endif %}', 'description': 'G-Code macro'}, 'z_calibration': {'switch_offset': 0.09, 'offset_margins': '-1.0,1.0', 'speed': 50.0, 'samples_result': 'none', 'probing_first_fast': False, 'nozzle_xy_position': '172, 301', 'switch_xy_position': '171.5, 282', 'bed_xy_position': '150, 150', 'start_gcode': 'Attach_Probe', 'before_switch_gcode': '', 'end_gcode': 'Dock_Probe'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': '^PG6', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'PG9', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 303.5, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PF11', 'dir_pin': '!PG3', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG5', 'endstop_pin': 'PG10', 'position_endstop': -0.711, 'position_min': -4.5, 'position_max': 290.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA0'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PF9', 'dir_pin': '!PF10', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG2'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF4', 'min_temp': 10.0, 'max_temp': 270.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 26.572, 'pid_ki': 2.036, 'pid_kd': 86.691, 'heater_pin': 'PA1', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PC13', 'pressure_advance': 0.05, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'PF0', 'rotation_distance': 21.9459674016, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 55.196, 'pid_ki': 2.091, 'pid_kd': 364.295, 'heater_pin': 'PA2', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'probe': {'z_offset': 0.0, 'deactivate_on_each_sample': True, 'activate_gcode': '', 'deactivate_gcode': '', 'pin': 'PG15', 'speed': 10.0, 'lift_speed': 10.0, 'x_offset': 0.0, 'y_offset': 25.0, 'samples': 5, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.006, 'samples_tolerance_retries': 3}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE5', 'fan_speed': 1.0}, 'controller_fan controller_fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD12', 'fan_speed': 1.0, 'idle_speed': 1.0, 'idle_timeout': 30, 'heater': ['heater_bed']}, 'heater_fan exhaust_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 5.0, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13', 'fan_speed': 1.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PD15', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 1.0, 'maximum_mcu_duration': 0.0, 'value': 1.0, 'shutdown_value': 0.0}, 'neopixel headlight': {'pin': 'PB0', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 0.0, 'initial_green': 0.2157, 'initial_blue': 1.0, 'initial_white': 0.0}, 'temperature_sensor chamber_temp': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF5', 'min_temp': 0.0, 'max_temp': 100.0, 'gcode_id': 'chamber_th'}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [150.0, 348.0], [350.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 5.0], [150.0, 245.0], [270.0, 5.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'gcode_macro _user_variables': {'gcode': '\n{% set Mx = printer[\'configfile\'].config["stepper_x"]["position_max"]|float %}\n{% set My = printer[\'configfile\'].config["stepper_y"]["position_max"]|float %}\n{% set Ox = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set Oy = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set Oz = printer[\'configfile\'].config["probe"]["z_offset"]|float %}\n\n\n{% if z_endstop_x != 0 or z_endstop_y != 0 %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ z_endstop_x }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ z_endstop_y }\n\n\n{% else %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ (Mx * 0.5) - Ox }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ (My * 0.5) - Oy }\n{% endif %}', 'description': 'G-Code macro', 'variable_verbose': 'True', 'variable_debug': 'False', 'variable_travel_speed': '200', 'variable_move_accel': '1000', 'variable_dock_speed': '50', 'variable_release_speed': '75', 'variable_z_drop_speed': '20', 'variable_safe_z': '25', 'variable_enable_z_hop': 'True', 'variable_max_bed_y': '300', 'variable_max_bed_x': '300', 'variable_z_endstop_x': '172', 'variable_z_endstop_y': '301', 'variable_docklocation_x': '40.5', 'variable_docklocation_y': '303.5', 'variable_docklocation_z': '-128', 'variable_enable_dock_servo': 'False', 'variable_servo_name': "'NAME'", 'variable_servo_deploy': '10', 'variable_servo_retract': '11', 'variable_servo_delay': '250', 'variable_dockmove_x': '40', 'variable_dockmove_y': '0', 'variable_dockmove_z': '0', 'variable_attachmove_x': '0', 'variable_attachmove_y': '30', 'variable_attachmove_z': '0', 'variable_umbilical': 'False', 'variable_umbilical_x': '15', 'variable_umbilical_y': '15', 'variable_park_toolhead': 'False', 'variable_parkposition_x': '125', 'variable_parkposition_y': '125', 'variable_parkposition_z': '30', 'variable_version': '1', 'variable_attachmove2_x': '0', 'variable_attachmove2_y': '0', 'variable_attachmove2_z': '0', 'variable_home_backoff_x': '10', 'variable_home_backoff_y': '10', 'variable_override_homing': "''", 'variable_dock_on_zhome': 'True'}, 'gcode_macro print_start': {'gcode': '\nM117 Homing...\nG28\nZ_TILT_ADJUST\nG28\n\n\n\n\n\n\n\nG0 X150 Y150 Z30 F3600', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1500.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-02-15 22:09:27,014 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-15 22:09:27,015 [printer.py:reinit()] - Klipper version: v0.12.0-103-g6ce6fbbc-dirty
2024-02-15 22:09:27,015 [printer.py:reinit()] - # Extruders: 1
2024-02-15 22:09:27,015 [printer.py:reinit()] - # Temperature devices: 2
2024-02-15 22:09:27,015 [printer.py:reinit()] - # Fans: 4
2024-02-15 22:09:27,015 [printer.py:reinit()] - # Output pins: 1
2024-02-15 22:09:27,015 [printer.py:reinit()] - # Leds: 1
2024-02-15 22:09:27,028 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2024-02-15 22:09:27,030 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-02-15 22:09:27,282 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor chamber_temp&fan&controller_fan controller_fan&heater_fan hotend_fan&heater_fan exhaust_fan&output_pin caselight&neopixel headlight
2024-02-15 22:09:27,287 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-02-15 22:09:27,287 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-02-15 22:09:27,289 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-02-15 22:09:27,290 [screen.py:init_klipper()] - Printer initialized
2024-02-15 22:09:27,290 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2024-02-15 22:09:27,291 [printer.py:change_state()] - Adding callback for state: ready
2024-02-15 22:09:27,299 [files.py:remove_file_callback()] - callback not found <bound method Panel._callback_metadata of <panels.job_status.Panel object at 0x7f682a76a0>>
2024-02-15 22:09:27,300 [screen.py:show_panel()] - Reinitializing panel
2024-02-15 22:09:27,380 [main_menu.py:__init__()] - ### Making MainMenu
2024-02-15 22:09:27,385 [main_menu.py:add_device()] - Adding device: extruder
2024-02-15 22:09:27,389 [main_menu.py:add_device()] - Adding device: heater_bed
2024-02-15 22:09:27,394 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber_temp
2024-02-15 22:09:27,417 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-02-15 22:09:27,433 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-02-15 22:09:27,436 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'temperature_sensor chamber_temp', 'extruder']
2024-02-15 22:09:27,445 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2024-02-15 22:09:27,446 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-02-15 22:09:39,169 [screen.py:show_popup_message()] - error: Must home axis first: 0.000 0.000 10.000 [0.000]
2024-02-15 22:11:02,846 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-02-15 22:11:02,847 [printer.py:change_state()] - Adding callback for state: disconnected
2024-02-15 22:11:02,851 [screen.py:state_disconnected()] - ### Going to disconnected
2024-02-15 22:11:02,852 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-15 22:11:02,856 [files.py:remove_file_callback()] - callback not found <bound method Panel._callback_metadata of <panels.job_status.Panel object at 0x7f682a76a0>>
2024-02-15 22:11:02,856 [screen.py:show_panel()] - Reinitializing panel
2024-02-15 22:11:02,918 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-02-15 22:11:05,741 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-15 22:11:05,750 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2024-02-15 22:11:05,751 [printer.py:configure_cameras()] - Cameras: []
2024-02-15 22:11:05,751 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'octoprint_compat', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-310-g67c98f6', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-02-15 22:11:05,760 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2024-02-15 22:11:05,778 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2024-02-15 22:11:05,780 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro _Probe_Variables': {'variable_probe_attached': 'False', 'variable_probe_state': 'False', 'variable_probe_lock': 'False', 'variable_probe_z_homed': 'False', 'variable_z_endstop_x': '0', 'variable_z_endstop_y': '0', 'gcode': ''}, 'gcode_macro _klicky_check_variables_version': {'gcode': '\n{% set version = printer["gcode_macro _User_Variables"].version|default(0) %}\n\n{% if version != 1 %}\n{ action_raise_error("Please update your klicky variables, there are some functionality changes") }\n{% endif %}'}, 'gcode_macro _KlickyDebug': {'gcode': '\n{% set message  = params.MSG %}\n{% set debug = printer["gcode_macro _User_Variables"].debug|default(False) %}\n\n{% if debug %}\n{ action_respond_info(message) }\n{% endif %}'}, 'gcode_macro _exit_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move  = params.MOVE|default(0) %}\n{% set speed = printer["gcode_macro _User_Variables"].travel_speed %}\n\n\nM400\nSET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\nRESTORE_GCODE_STATE NAME={function} MOVE={move} MOVE_SPEED={speed}'}, 'gcode_macro _entry_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move_accel = printer["gcode_macro _User_Variables"].move_accel|default(1000) %}\n\nM400\nSAVE_GCODE_STATE NAME={function}\n\nSET_GCODE_OFFSET Z=0\n\nG90\n\nSET_VELOCITY_LIMIT ACCEL={move_accel}'}, 'gcode_macro _Homing_Variables': {'gcode': '\n{% set reset  = params.RESET|default(0) %}\n{% if reset %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }\n{% endif %}'}, 'gcode_macro Attach_Probe_Lock': {'description': 'Attaches Klicky Probe, can only be docked after unlocking', 'gcode': '\nAttach_Probe\n_Probe_Lock'}, 'gcode_macro Dock_Probe_Unlock': {'description': 'Docks Klicky Probe even if it was locked', 'gcode': '\n_Probe_Unlock\nDock_Probe'}, 'gcode_macro _Probe_Unlock': {'description': 'Unlocks Klicky Probe state', 'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to False"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }'}, 'gcode_macro _Probe_Lock': {'description': 'Locks Klicky Probe state', 'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to True"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ True }'}, 'gcode_macro _DeployKlickyDock': {'description': 'Deploys Klicky servo-controlled dock', 'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_deploy = printer["gcode_macro _User_Variables"].servo_deploy|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_DeployKlickyDock Klicky servo configuration enabled"\n{% if servo_deploy == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo deploy angle specified") }\n{% endif %}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _DeployDock"] is defined %}\n_KlickyDebug msg="_DeployKlickyDock calling _DeployDock"\n_DeployDock\n{% endif %}'}, 'gcode_macro _RetractKlickyDock': {'description': 'Retracts Klicky servo-controlled dock', 'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_retract = printer["gcode_macro _User_Variables"].servo_retract|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_RetractKlickyDock Klicky servo configuration enabled"\n{% if servo_retract == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo retract angle specified") }\n{% endif %}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _RetractDock"] is defined %}\n_KlickyDebug msg="_RetractKlickyDock calling _RetractDock"\n_RetractDock\n{% endif %}'}, 'gcode_macro Attach_Probe': {'description': 'Attaches Klicky Probe', 'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set attachmove2_x = printer["gcode_macro _User_Variables"].attachmove2_x|default(0) %}\n{% set attachmove2_y = printer["gcode_macro _User_Variables"].attachmove2_y|default(0) %}\n{% set attachmove2_z = printer["gcode_macro _User_Variables"].attachmove2_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n_entry_point function=Attach_Probe\n\n{% if bypass_probe_docking == False %}\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n_KlickyDebug msg="Attach_Probe Axis homed"\n\n\n{% elif not probe_attached and not probe_lock %}\n_KlickyDebug msg="Attach_Probe going to attach probe"\n{% if verbose %}\n{ action_respond_info("Attaching Probe") }\n{% endif %}\n_KLICKY_STATUS_BUSY\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% if not enable_z_hop %}\n_KlickyDebug msg="Attach_Probe z_hop disabled"\n{% set safe_z = 0 %}\n{% endif %}\n{% endif %}\n\n\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero, duplicate?") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Umbilical_Path\n\n_entry_point function=Attach_Probe_intern\n\n\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n_DeployKlickyDock\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}"\nG0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}\n\n_RetractKlickyDock\n\n{% if ((printer.gcode_move.gcode_position.z < safe_z) or (docklocation_z != -128 and docklocation_z < safe_z ))%}\n_KlickyDebug msg="Attach_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\n_CheckProbe action=attach\n\n_exit_point function=Attach_Probe_intern move={goback}\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe locked not attaching probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already attached!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe already attached, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Attach_Probe\n{% else %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}'}, 'gcode_macro Dock_Probe': {'description': 'Docks Klicky Probe', 'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n{% if bypass_probe_docking == True %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}\n\n{% if bypass_probe_docking != True %}\n_entry_point function=Dock_Probe\n\n\n{% if probe_attached and not probe_lock %}\n_KLICKY_STATUS_BUSY\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Dock_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n_Umbilical_Path\n\n\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n\n_DeployKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\n\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}"\nG0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}\n{% endif %}\n\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}\n\n\n_RetractKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving away from the dock to G0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}\n\n\n{% if (printer.gcode_move.gcode_position.z < safe_z) %}\n_KlickyDebug msg="Dock_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\nG4 P1000\n_CheckProbe action=dock\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe locked not docking probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already docked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe already docked, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Dock_Probe move={goback}\n{% else %}\n_KlickyDebug msg="Dock_Probe probe docking bypassed, doing nothing"\n{% endif %}'}, 'gcode_macro PROBE_CALIBRATE': {'rename_existing': '_PROBE_CALIBRATE', 'description': 'Calibrate the probes z_offset with klicky automount', 'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_calibrate Axis homed"\n_KlickyDebug msg="probe_calibrate Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_CALIBRATE with the probe above the BED, check klicky_variables bed size!") }\n{% endif %}\n\n{% if bypass_probe_docking == False %}\n_CheckProbe action=query\nG90\nAttach_Probe back=1\n_KLICKY_STATUS_CALIBRATING_Z\n\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nM118 moving the toolhead 20 mm from the bed\n_KlickyDebug msg="probe_calibrate Moving Z up by 20mm"\nTESTZ Z=20\nM118 remove manually the probe and continue calibration\n_KLICKY_STATUS_READY\n{% else %}\n_KLICKY_STATUS_CALIBRATING_Z\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n_KLICKY_STATUS_READY\n{% endif %}'}, 'gcode_macro PROBE_ACCURACY': {'rename_existing': '_PROBE_ACCURACY', 'description': 'Probe Z-height accuracy at current XY position with klicky automount', 'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_accuracy Axis homed"\n_KlickyDebug msg="probe_accuracy Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n_entry_point function=PROBE_ACCURACY\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_ACCURACY with the probe above the BED, check klicky_variables bed size!") }\n{% endif%}\n\n_CheckProbe action=query\nAttach_Probe back=1\n\n_KlickyDebug msg="probe_accuracy calling klipper probe accuracy"\n_PROBE_ACCURACY {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nDock_Probe back=1\n\n_exit_point function=PROBE_ACCURACY move=1'}, 'force_move': {'enable_force_move': 'True'}, 'homing_override': {'axes': 'xyz', 'gcode': '\n\n_User_Variables\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n{% set kinematic_z = 0 %}\n{% set dock_on_zhome = printer["gcode_macro _User_Variables"].dock_on_zhome|default(True) %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set home_backoff_x = printer["gcode_macro _User_Variables"].home_backoff_x|default(0) %}\n{% set home_backoff_y = printer["gcode_macro _User_Variables"].home_backoff_y|default(0) %}\n{% set override_homing = printer["gcode_macro _User_Variables"].override_homing|default(\'\') %}\n\n\n_klicky_check_variables_version\n\n_CheckProbe action=query\n\n\n{% set home_x, home_y, home_z, leave_probe_attached = False, False, False, False %}\n\n{% if \'PROBE_LOCK\' in params%}\n{% if verbose %}\n{ action_respond_info("PROBE_LOCK = True") }\n{% endif %}\n{% set leave_probe_attached = True %}\n{% endif %}\n\n\n{% if not \'X\' in params\nand not \'Y\' in params\nand not \'Z\' in params %}\n\n{% set home_x, home_y, home_z = True, True, True %}\n_KlickyDebug msg="homing_override goint to home all axes"\n\n{% else %}\n{% if \'X\' in params %}\n{% set home_x = True %}\n_KlickyDebug msg="homing_override goint to home X"\n\n{% endif %}\n\n{% if \'Y\' in params %}\n{% set home_y = True %}\n_KlickyDebug msg="homing_override goint to home Y"\n{% endif %}\n\n{% if \'Z\' in params %}\n{% set home_z = True %}\n_KlickyDebug msg="homing_override goint to home Z"\n{% endif %}\n\n{% if \'X\' in params\nand \'Y\' in params\nand \'Z\' in params %}\n\n\n_Homing_Variables reset=1\n_KlickyDebug msg="homing_override goint to home all axes"\n{% endif %}\n\n{% endif %}\n\n_entry_point function=homing_override\n_KLICKY_STATUS_HOMING\n\n\n{% if \'z\' not in printer.toolhead.homed_axes %}\n{% if enable_z_hop == False %}\n_KlickyDebug msg="homing_override z_hop disabled"\n\n{% set kinematic_z = safe_z %}\n{% set safe_z = safe_z %}\n{% endif %}\n{% endif %}\n\n\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes and \'z\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("No axis homed") }\n{% endif %}\n_KlickyDebug msg="homing_override no axis homed, setting position as X=Y=0 Z={kinematic_z}"\nSET_KINEMATIC_POSITION X=0 Y=0 Z={kinematic_z}\nM400\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% if home_z != True %}\n_KlickyDebug msg="homing_override clearing axis homed state if not already homing Z"\nM84\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("X or Y not homed, forcing full G28") }\n{% endif %}\n{% set home_x, home_y, home_z = True, True, True %}\n{% endif %}\n{% endif %}\n\n\n{% if ((attachmove_y == 0 and override_homing == \'\' ) or (override_homing == \'Y\'))%}\n\n{% if home_y %}\n{% if override_homing == \'Y\' %}\n_KlickyDebug msg="homing_override Y homing first override, due to override_homing = Y"\n{% else %}\n_KlickyDebug msg="homing_override Y homing first override, due to attachmove_y = 0"\n{% endif %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y G28 Y0"\nG28 Y0\n\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop-home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n{% set home_y = False %}\n{% endif %}\n\n\n\n{% if home_x %}\n{% if verbose %}\n{ action_respond_info("Homing X") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in X homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_X"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_X external script to handle the X homing"\n_HOME_X\n{% else %}\n_KlickyDebug msg="homing_override Homing X, G28 X0"\nG28 X0\n\n{% if home_backoff_x != 0 %}\n{% if (printer.configfile.settings.stepper_x.position_endstop > (printer.configfile.settings.stepper_x.position_min|default(0) + printer.configfile.settings.stepper_x.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n\n{% if home_y %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y, G28 Y0"\nG28 Y0\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if verbose %}\n{ action_respond_info("Homing Z") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe configured as a virtual Z endstop attaching probe"\nAttach_Probe\n\n{% if leave_probe_attached %}\n_Probe_Lock\n{% endif %}\n{% elif dock_on_zhome == True %}\nDock_Probe\n{% endif %}\n\n_Home_Z_\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe no longer required, docking probe"\nDock_Probe\n{% elif dock_on_zhome == False %}\nDock_Probe\n{% endif %}\n{% endif %}\n_CheckProbe action=query\n\n\n_Park_Toolhead\n\n_exit_point function=homing_override\n_KLICKY_STATUS_READY'}, 'gcode_macro _Umbilical_Path': {'gcode': '\n{% set umbilical = printer["gcode_macro _User_Variables"].umbilical %}\n{% set umbilical_x = printer["gcode_macro _User_Variables"].umbilical_x %}\n{% set umbilical_y = printer["gcode_macro _User_Variables"].umbilical_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n\n{% if umbilical %}\n\n_entry_point function=Umbilical_Path\n\n_KlickyDebug msg="_Umbilical_Path moving to G0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}"\nG0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}\n\n_exit_point function=Umbilical_Path\n{% endif %}'}, 'gcode_macro _Home_Z_': {'gcode': '\n{% set z_endstop_x = printer["gcode_macro _Probe_Variables"].z_endstop_x %}\n{% set z_endstop_y = printer["gcode_macro _Probe_Variables"].z_endstop_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}    {% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Home_Z\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n{% else %}\n_KlickyDebug msg="_Home_Z_ XY Axis homed"\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="_Home_Z_ Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n\n\n_KlickyDebug msg="_Home_Z_ moving to Z endstop position G0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}"\nG0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}\n_KlickyDebug msg="_Home_Z_ Homing Z G28 Z"\nG28 Z0\n_KlickyDebug msg="_Home_Z_ toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_exit_point function=Home_Z'}, 'gcode_macro _CheckProbe': {'variable_probe_state': '0', 'gcode': '\nQuery_Probe\n_SetProbeState action={ params.ACTION }'}, 'gcode_macro _SetProbeState': {'gcode': '\n{% set query_probe_triggered = printer.probe.last_query %}\n{% set action  = params.ACTION|default(\'\') %}\n\n\n{% if query_probe_triggered %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ False }\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ True }\n{% endif %}\n\n{% if action == \'query\' %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_state VALUE={ query_probe_triggered }\n{% endif %}\n\n\n\n\n{% if not query_probe_triggered and action == \'dock\' %}\n{ action_raise_error("Probe dock failed!") }\n{% endif %}\n\n\n{% if query_probe_triggered and action == \'attach\' %}\n{ action_raise_error("Probe attach failed!") }\n{% endif %}'}, 'gcode_macro _Park_Toolhead': {'gcode': '\n{% set park_toolhead = printer["gcode_macro _User_Variables"].park_toolhead %}\n{% set parkposition_x = printer["gcode_macro _User_Variables"].parkposition_x %}\n{% set parkposition_y = printer["gcode_macro _User_Variables"].parkposition_y %}\n{% set parkposition_z = printer["gcode_macro _User_Variables"].parkposition_z %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Park_Toolhead\n\n{% if park_toolhead and \'xyz\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Parking Toolhead") }\n{% endif %}\n{% if parkposition_z == -128 %}\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}\n\n{% else %}\n\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}\n\n{% endif %}\n\n{% endif %}\n_exit_point function=Park_Toolhead'}, 'gcode_macro _klicky_status_ready': {'gcode': '\n{% if printer[\'gcode_macro status_ready\'] is defined %}\n_KlickyDebug msg="_klicky_status_ready activating the LED STATUS_READY"\nSTATUS_READY\n{% endif %}'}, 'gcode_macro _klicky_status_busy': {'gcode': '\n{% if printer[\'gcode_macro status_busy\'] is defined %}\n_KlickyDebug msg="_klicky_status_busy activating the LED STATUS_BUSY"\nSTATUS_BUSY\n{% endif %}'}, 'gcode_macro _klicky_status_leveling': {'gcode': '\n{% if printer[\'gcode_macro status_leveling\'] is defined %}\n_KlickyDebug msg="_klicky_status_leveling activating the LED STATUS_LEVELING"\nSTATUS_LEVELING\n{% endif %}'}, 'gcode_macro _klicky_status_homing': {'gcode': '\n{% if printer[\'gcode_macro status_homing\'] is defined %}\n_KlickyDebug msg="_klicky_status_homing activating the LED STATUS_HOMING"\nSTATUS_HOMING\n{% endif %}'}, 'gcode_macro _klicky_status_cleaning': {'gcode': '\n{% if printer[\'gcode_macro status_cleaning\'] is defined %}\n_KlickyDebug msg="_klicky_status_cleaning activating the LED STATUS_CLEANING"\nSTATUS_CLEANING\n{% endif %}'}, 'gcode_macro _klicky_status_meshing': {'gcode': '\n{% if printer[\'gcode_macro status_meshing\'] is defined %}\n_KlickyDebug msg="_klicky_status_meshing activating the LED STATUS_MESHING"\nSTATUS_MESHING\n{% endif %}'}, 'gcode_macro _klicky_status_calibrating_z': {'gcode': '\n{% if printer[\'gcode_macro status_calibrating_z\'] is defined %}\n_KlickyDebug msg="_klicky_status_calibrating_z activating the LED STATUS_CALIBRATING_Z"\nSTATUS_CALIBRATING_Z\n{% endif %}'}, 'z_calibration': {'nozzle_xy_position': '172, 301', 'switch_xy_position': '171.5, 282', 'bed_xy_position': '150, 150', 'switch_offset': '0.09', 'offset_margins': '-1.0,1.0', 'speed': '50', 'probing_first_fast': 'false', 'start_gcode': 'Attach_Probe', 'end_gcode': 'Dock_Probe'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_28003C001150535556323420-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '^PG6', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '25', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'PG9', 'position_min': '0', 'position_endstop': '300', 'position_max': '303.5', 'homing_speed': '25', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': '!PG3', 'enable_pin': '!PG5', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'PG10', 'position_max': '290', 'position_min': '-4.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3', 'position_endstop': '-0.711'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA0', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': '!PF10', 'enable_pin': '!PG2', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PC13', 'dir_pin': 'PF0', 'enable_pin': '!PF1', 'rotation_distance': '21.9459674016', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.75', 'heater_pin': 'PA1', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF4', 'min_temp': '10', 'max_temp': '270', 'max_power': '1.0', 'min_extrude_temp': '170', 'pressure_advance': '0.05', 'pressure_advance_smooth_time': '0.040', 'control': 'pid', 'pid_kp': '26.572', 'pid_ki': '2.036', 'pid_kd': '86.691'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.5', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PA2', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF3', 'max_power': '1', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '55.196', 'pid_ki': '2.091', 'pid_kd': '364.295'}, 'probe': {'pin': 'PG15', 'x_offset': '0', 'y_offset': '25.0', 'z_offset': '0', 'speed': '10.0', 'samples': '5', 'samples_result': 'median', 'sample_retract_dist': '3.0', 'samples_tolerance': '0.006', 'samples_tolerance_retries': '3'}, 'fan': {'pin': 'PA8', 'kick_start_time': '0.5', 'off_below': '0.10'}, 'heater_fan hotend_fan': {'pin': 'PE5', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'controller_fan controller_fan': {'pin': 'PD12', 'kick_start_time': '0.5', 'heater': 'heater_bed'}, 'heater_fan exhaust_fan': {'pin': 'PD13', 'max_power': '1.0', 'shutdown_speed': '0.0', 'kick_start_time': '5.0', 'heater': 'heater_bed', 'heater_temp': '60', 'fan_speed': '1.0'}, 'output_pin caselight': {'pin': 'PD15', 'pwm': 'true', 'shutdown_value': '0', 'value': '1', 'cycle_time': '0.01'}, 'neopixel headlight': {'pin': 'PB0', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '0.0', 'initial_green': '0.2157', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'temperature_sensor chamber_temp': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF5', 'min_temp': '0', 'max_temp': '100', 'gcode_id': 'chamber_th'}, 'idle_timeout': {'timeout': '1800'}, 'z_tilt': {'z_positions': '\n-50, 18\n150, 348\n350, 18', 'points': '\n30, 5\n150, 245\n270, 5', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'gcode_macro _User_Variables': {'variable_verbose': 'True', 'variable_debug': 'False', 'variable_travel_speed': '200', 'variable_move_accel': '1000', 'variable_dock_speed': '50', 'variable_release_speed': '75', 'variable_z_drop_speed': '20', 'variable_safe_z': '25', 'variable_enable_z_hop': 'True', 'variable_max_bed_y': '300', 'variable_max_bed_x': '300', 'variable_z_endstop_x': '172', 'variable_z_endstop_y': '301', 'variable_docklocation_x': '40.5', 'variable_docklocation_y': '303.5', 'variable_docklocation_z': '-128', 'variable_enable_dock_servo': 'False', 'variable_servo_name': "'NAME'", 'variable_servo_deploy': '10', 'variable_servo_retract': '11', 'variable_servo_delay': '250', 'variable_dockmove_x': '40', 'variable_dockmove_y': '0', 'variable_dockmove_z': '0', 'variable_attachmove_x': '0', 'variable_attachmove_y': '30', 'variable_attachmove_z': '0', 'variable_umbilical': 'False', 'variable_umbilical_x': '15', 'variable_umbilical_y': '15', 'variable_park_toolhead': 'False', 'variable_parkposition_x': '125', 'variable_parkposition_y': '125', 'variable_parkposition_z': '30', 'variable_version': '1', 'variable_attachmove2_x': '0', 'variable_attachmove2_y': '0', 'variable_attachmove2_z': '0', 'variable_home_backoff_x': '10', 'variable_home_backoff_y': '10', 'variable_override_homing': "''", 'variable_dock_on_zhome': 'True', 'gcode': '\n{% set Mx = printer[\'configfile\'].config["stepper_x"]["position_max"]|float %}\n{% set My = printer[\'configfile\'].config["stepper_y"]["position_max"]|float %}\n{% set Ox = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set Oy = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set Oz = printer[\'configfile\'].config["probe"]["z_offset"]|float %}\n\n\n{% if z_endstop_x != 0 or z_endstop_y != 0 %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ z_endstop_x }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ z_endstop_y }\n\n\n{% else %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ (Mx * 0.5) - Ox }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ (My * 0.5) - Oy }\n{% endif %}'}, 'gcode_macro PRINT_START': {'gcode': '\nM117 Homing...\nG28\nATTACH_PROBE\nZ_TILT_ADJUST\nDOCK_PROBE\nG28\n\n\n\n\n\n\n\nG0 X150 Y150 Z30 F3600'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_28003C001150535556323420-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro _probe_variables': {'gcode': '', 'description': 'G-Code macro', 'variable_probe_attached': 'False', 'variable_probe_state': 'False', 'variable_probe_lock': 'False', 'variable_probe_z_homed': 'False', 'variable_z_endstop_x': '0', 'variable_z_endstop_y': '0'}, 'gcode_macro _klicky_check_variables_version': {'gcode': '\n{% set version = printer["gcode_macro _User_Variables"].version|default(0) %}\n\n{% if version != 1 %}\n{ action_raise_error("Please update your klicky variables, there are some functionality changes") }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klickydebug': {'gcode': '\n{% set message  = params.MSG %}\n{% set debug = printer["gcode_macro _User_Variables"].debug|default(False) %}\n\n{% if debug %}\n{ action_respond_info(message) }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _exit_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move  = params.MOVE|default(0) %}\n{% set speed = printer["gcode_macro _User_Variables"].travel_speed %}\n\n\nM400\nSET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\nRESTORE_GCODE_STATE NAME={function} MOVE={move} MOVE_SPEED={speed}', 'description': 'G-Code macro'}, 'gcode_macro _entry_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move_accel = printer["gcode_macro _User_Variables"].move_accel|default(1000) %}\n\nM400\nSAVE_GCODE_STATE NAME={function}\n\nSET_GCODE_OFFSET Z=0\n\nG90\n\nSET_VELOCITY_LIMIT ACCEL={move_accel}', 'description': 'G-Code macro'}, 'gcode_macro _homing_variables': {'gcode': '\n{% set reset  = params.RESET|default(0) %}\n{% if reset %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro attach_probe_lock': {'gcode': '\nAttach_Probe\n_Probe_Lock', 'description': 'Attaches Klicky Probe, can only be docked after unlocking'}, 'gcode_macro dock_probe_unlock': {'gcode': '\n_Probe_Unlock\nDock_Probe', 'description': 'Docks Klicky Probe even if it was locked'}, 'gcode_macro _probe_unlock': {'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to False"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }', 'description': 'Unlocks Klicky Probe state'}, 'gcode_macro _probe_lock': {'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to True"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ True }', 'description': 'Locks Klicky Probe state'}, 'gcode_macro _deployklickydock': {'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_deploy = printer["gcode_macro _User_Variables"].servo_deploy|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_DeployKlickyDock Klicky servo configuration enabled"\n{% if servo_deploy == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo deploy angle specified") }\n{% endif %}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _DeployDock"] is defined %}\n_KlickyDebug msg="_DeployKlickyDock calling _DeployDock"\n_DeployDock\n{% endif %}', 'description': 'Deploys Klicky servo-controlled dock'}, 'gcode_macro _retractklickydock': {'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_retract = printer["gcode_macro _User_Variables"].servo_retract|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_RetractKlickyDock Klicky servo configuration enabled"\n{% if servo_retract == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo retract angle specified") }\n{% endif %}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _RetractDock"] is defined %}\n_KlickyDebug msg="_RetractKlickyDock calling _RetractDock"\n_RetractDock\n{% endif %}', 'description': 'Retracts Klicky servo-controlled dock'}, 'gcode_macro attach_probe': {'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set attachmove2_x = printer["gcode_macro _User_Variables"].attachmove2_x|default(0) %}\n{% set attachmove2_y = printer["gcode_macro _User_Variables"].attachmove2_y|default(0) %}\n{% set attachmove2_z = printer["gcode_macro _User_Variables"].attachmove2_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n_entry_point function=Attach_Probe\n\n{% if bypass_probe_docking == False %}\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n_KlickyDebug msg="Attach_Probe Axis homed"\n\n\n{% elif not probe_attached and not probe_lock %}\n_KlickyDebug msg="Attach_Probe going to attach probe"\n{% if verbose %}\n{ action_respond_info("Attaching Probe") }\n{% endif %}\n_KLICKY_STATUS_BUSY\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% if not enable_z_hop %}\n_KlickyDebug msg="Attach_Probe z_hop disabled"\n{% set safe_z = 0 %}\n{% endif %}\n{% endif %}\n\n\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero, duplicate?") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Umbilical_Path\n\n_entry_point function=Attach_Probe_intern\n\n\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n_DeployKlickyDock\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}"\nG0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}\n\n_RetractKlickyDock\n\n{% if ((printer.gcode_move.gcode_position.z < safe_z) or (docklocation_z != -128 and docklocation_z < safe_z ))%}\n_KlickyDebug msg="Attach_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\n_CheckProbe action=attach\n\n_exit_point function=Attach_Probe_intern move={goback}\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe locked not attaching probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already attached!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe already attached, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Attach_Probe\n{% else %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}', 'description': 'Attaches Klicky Probe'}, 'gcode_macro dock_probe': {'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n{% if bypass_probe_docking == True %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}\n\n{% if bypass_probe_docking != True %}\n_entry_point function=Dock_Probe\n\n\n{% if probe_attached and not probe_lock %}\n_KLICKY_STATUS_BUSY\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Dock_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n_Umbilical_Path\n\n\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n\n_DeployKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\n\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}"\nG0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}\n{% endif %}\n\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}\n\n\n_RetractKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving away from the dock to G0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}\n\n\n{% if (printer.gcode_move.gcode_position.z < safe_z) %}\n_KlickyDebug msg="Dock_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\nG4 P1000\n_CheckProbe action=dock\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe locked not docking probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already docked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe already docked, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Dock_Probe move={goback}\n{% else %}\n_KlickyDebug msg="Dock_Probe probe docking bypassed, doing nothing"\n{% endif %}', 'description': 'Docks Klicky Probe'}, 'gcode_macro probe_calibrate': {'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_calibrate Axis homed"\n_KlickyDebug msg="probe_calibrate Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_CALIBRATE with the probe above the BED, check klicky_variables bed size!") }\n{% endif %}\n\n{% if bypass_probe_docking == False %}\n_CheckProbe action=query\nG90\nAttach_Probe back=1\n_KLICKY_STATUS_CALIBRATING_Z\n\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nM118 moving the toolhead 20 mm from the bed\n_KlickyDebug msg="probe_calibrate Moving Z up by 20mm"\nTESTZ Z=20\nM118 remove manually the probe and continue calibration\n_KLICKY_STATUS_READY\n{% else %}\n_KLICKY_STATUS_CALIBRATING_Z\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n_KLICKY_STATUS_READY\n{% endif %}', 'rename_existing': '_PROBE_CALIBRATE', 'description': 'Calibrate the probes z_offset with klicky automount'}, 'gcode_macro probe_accuracy': {'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_accuracy Axis homed"\n_KlickyDebug msg="probe_accuracy Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n_entry_point function=PROBE_ACCURACY\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_ACCURACY with the probe above the BED, check klicky_variables bed size!") }\n{% endif%}\n\n_CheckProbe action=query\nAttach_Probe back=1\n\n_KlickyDebug msg="probe_accuracy calling klipper probe accuracy"\n_PROBE_ACCURACY {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nDock_Probe back=1\n\n_exit_point function=PROBE_ACCURACY move=1', 'rename_existing': '_PROBE_ACCURACY', 'description': 'Probe Z-height accuracy at current XY position with klicky automount'}, 'force_move': {'enable_force_move': True}, 'homing_override': {'axes': 'xyz', 'gcode': '\n\n_User_Variables\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n{% set kinematic_z = 0 %}\n{% set dock_on_zhome = printer["gcode_macro _User_Variables"].dock_on_zhome|default(True) %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set home_backoff_x = printer["gcode_macro _User_Variables"].home_backoff_x|default(0) %}\n{% set home_backoff_y = printer["gcode_macro _User_Variables"].home_backoff_y|default(0) %}\n{% set override_homing = printer["gcode_macro _User_Variables"].override_homing|default(\'\') %}\n\n\n_klicky_check_variables_version\n\n_CheckProbe action=query\n\n\n{% set home_x, home_y, home_z, leave_probe_attached = False, False, False, False %}\n\n{% if \'PROBE_LOCK\' in params%}\n{% if verbose %}\n{ action_respond_info("PROBE_LOCK = True") }\n{% endif %}\n{% set leave_probe_attached = True %}\n{% endif %}\n\n\n{% if not \'X\' in params\nand not \'Y\' in params\nand not \'Z\' in params %}\n\n{% set home_x, home_y, home_z = True, True, True %}\n_KlickyDebug msg="homing_override goint to home all axes"\n\n{% else %}\n{% if \'X\' in params %}\n{% set home_x = True %}\n_KlickyDebug msg="homing_override goint to home X"\n\n{% endif %}\n\n{% if \'Y\' in params %}\n{% set home_y = True %}\n_KlickyDebug msg="homing_override goint to home Y"\n{% endif %}\n\n{% if \'Z\' in params %}\n{% set home_z = True %}\n_KlickyDebug msg="homing_override goint to home Z"\n{% endif %}\n\n{% if \'X\' in params\nand \'Y\' in params\nand \'Z\' in params %}\n\n\n_Homing_Variables reset=1\n_KlickyDebug msg="homing_override goint to home all axes"\n{% endif %}\n\n{% endif %}\n\n_entry_point function=homing_override\n_KLICKY_STATUS_HOMING\n\n\n{% if \'z\' not in printer.toolhead.homed_axes %}\n{% if enable_z_hop == False %}\n_KlickyDebug msg="homing_override z_hop disabled"\n\n{% set kinematic_z = safe_z %}\n{% set safe_z = safe_z %}\n{% endif %}\n{% endif %}\n\n\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes and \'z\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("No axis homed") }\n{% endif %}\n_KlickyDebug msg="homing_override no axis homed, setting position as X=Y=0 Z={kinematic_z}"\nSET_KINEMATIC_POSITION X=0 Y=0 Z={kinematic_z}\nM400\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% if home_z != True %}\n_KlickyDebug msg="homing_override clearing axis homed state if not already homing Z"\nM84\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("X or Y not homed, forcing full G28") }\n{% endif %}\n{% set home_x, home_y, home_z = True, True, True %}\n{% endif %}\n{% endif %}\n\n\n{% if ((attachmove_y == 0 and override_homing == \'\' ) or (override_homing == \'Y\'))%}\n\n{% if home_y %}\n{% if override_homing == \'Y\' %}\n_KlickyDebug msg="homing_override Y homing first override, due to override_homing = Y"\n{% else %}\n_KlickyDebug msg="homing_override Y homing first override, due to attachmove_y = 0"\n{% endif %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y G28 Y0"\nG28 Y0\n\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop-home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n{% set home_y = False %}\n{% endif %}\n\n\n\n{% if home_x %}\n{% if verbose %}\n{ action_respond_info("Homing X") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in X homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_X"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_X external script to handle the X homing"\n_HOME_X\n{% else %}\n_KlickyDebug msg="homing_override Homing X, G28 X0"\nG28 X0\n\n{% if home_backoff_x != 0 %}\n{% if (printer.configfile.settings.stepper_x.position_endstop > (printer.configfile.settings.stepper_x.position_min|default(0) + printer.configfile.settings.stepper_x.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n\n{% if home_y %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y, G28 Y0"\nG28 Y0\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if verbose %}\n{ action_respond_info("Homing Z") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe configured as a virtual Z endstop attaching probe"\nAttach_Probe\n\n{% if leave_probe_attached %}\n_Probe_Lock\n{% endif %}\n{% elif dock_on_zhome == True %}\nDock_Probe\n{% endif %}\n\n_Home_Z_\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe no longer required, docking probe"\nDock_Probe\n{% elif dock_on_zhome == False %}\nDock_Probe\n{% endif %}\n{% endif %}\n_CheckProbe action=query\n\n\n_Park_Toolhead\n\n_exit_point function=homing_override\n_KLICKY_STATUS_READY'}, 'gcode_macro _umbilical_path': {'gcode': '\n{% set umbilical = printer["gcode_macro _User_Variables"].umbilical %}\n{% set umbilical_x = printer["gcode_macro _User_Variables"].umbilical_x %}\n{% set umbilical_y = printer["gcode_macro _User_Variables"].umbilical_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n\n{% if umbilical %}\n\n_entry_point function=Umbilical_Path\n\n_KlickyDebug msg="_Umbilical_Path moving to G0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}"\nG0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}\n\n_exit_point function=Umbilical_Path\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _home_z_': {'gcode': '\n{% set z_endstop_x = printer["gcode_macro _Probe_Variables"].z_endstop_x %}\n{% set z_endstop_y = printer["gcode_macro _Probe_Variables"].z_endstop_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}    {% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Home_Z\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n{% else %}\n_KlickyDebug msg="_Home_Z_ XY Axis homed"\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="_Home_Z_ Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n\n\n_KlickyDebug msg="_Home_Z_ moving to Z endstop position G0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}"\nG0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}\n_KlickyDebug msg="_Home_Z_ Homing Z G28 Z"\nG28 Z0\n_KlickyDebug msg="_Home_Z_ toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_exit_point function=Home_Z', 'description': 'G-Code macro'}, 'gcode_macro _checkprobe': {'gcode': '\nQuery_Probe\n_SetProbeState action={ params.ACTION }', 'description': 'G-Code macro', 'variable_probe_state': '0'}, 'gcode_macro _setprobestate': {'gcode': '\n{% set query_probe_triggered = printer.probe.last_query %}\n{% set action  = params.ACTION|default(\'\') %}\n\n\n{% if query_probe_triggered %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ False }\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ True }\n{% endif %}\n\n{% if action == \'query\' %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_state VALUE={ query_probe_triggered }\n{% endif %}\n\n\n\n\n{% if not query_probe_triggered and action == \'dock\' %}\n{ action_raise_error("Probe dock failed!") }\n{% endif %}\n\n\n{% if query_probe_triggered and action == \'attach\' %}\n{ action_raise_error("Probe attach failed!") }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _park_toolhead': {'gcode': '\n{% set park_toolhead = printer["gcode_macro _User_Variables"].park_toolhead %}\n{% set parkposition_x = printer["gcode_macro _User_Variables"].parkposition_x %}\n{% set parkposition_y = printer["gcode_macro _User_Variables"].parkposition_y %}\n{% set parkposition_z = printer["gcode_macro _User_Variables"].parkposition_z %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Park_Toolhead\n\n{% if park_toolhead and \'xyz\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Parking Toolhead") }\n{% endif %}\n{% if parkposition_z == -128 %}\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}\n\n{% else %}\n\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}\n\n{% endif %}\n\n{% endif %}\n_exit_point function=Park_Toolhead', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_ready': {'gcode': '\n{% if printer[\'gcode_macro status_ready\'] is defined %}\n_KlickyDebug msg="_klicky_status_ready activating the LED STATUS_READY"\nSTATUS_READY\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_busy': {'gcode': '\n{% if printer[\'gcode_macro status_busy\'] is defined %}\n_KlickyDebug msg="_klicky_status_busy activating the LED STATUS_BUSY"\nSTATUS_BUSY\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_leveling': {'gcode': '\n{% if printer[\'gcode_macro status_leveling\'] is defined %}\n_KlickyDebug msg="_klicky_status_leveling activating the LED STATUS_LEVELING"\nSTATUS_LEVELING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_homing': {'gcode': '\n{% if printer[\'gcode_macro status_homing\'] is defined %}\n_KlickyDebug msg="_klicky_status_homing activating the LED STATUS_HOMING"\nSTATUS_HOMING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_cleaning': {'gcode': '\n{% if printer[\'gcode_macro status_cleaning\'] is defined %}\n_KlickyDebug msg="_klicky_status_cleaning activating the LED STATUS_CLEANING"\nSTATUS_CLEANING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_meshing': {'gcode': '\n{% if printer[\'gcode_macro status_meshing\'] is defined %}\n_KlickyDebug msg="_klicky_status_meshing activating the LED STATUS_MESHING"\nSTATUS_MESHING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_calibrating_z': {'gcode': '\n{% if printer[\'gcode_macro status_calibrating_z\'] is defined %}\n_KlickyDebug msg="_klicky_status_calibrating_z activating the LED STATUS_CALIBRATING_Z"\nSTATUS_CALIBRATING_Z\n{% endif %}', 'description': 'G-Code macro'}, 'z_calibration': {'switch_offset': 0.09, 'offset_margins': '-1.0,1.0', 'speed': 50.0, 'samples_result': 'none', 'probing_first_fast': False, 'nozzle_xy_position': '172, 301', 'switch_xy_position': '171.5, 282', 'bed_xy_position': '150, 150', 'start_gcode': 'Attach_Probe', 'before_switch_gcode': '', 'end_gcode': 'Dock_Probe'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': '^PG6', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'PG9', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 303.5, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PF11', 'dir_pin': '!PG3', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG5', 'endstop_pin': 'PG10', 'position_endstop': -0.711, 'position_min': -4.5, 'position_max': 290.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA0'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PF9', 'dir_pin': '!PF10', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG2'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF4', 'min_temp': 10.0, 'max_temp': 270.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 26.572, 'pid_ki': 2.036, 'pid_kd': 86.691, 'heater_pin': 'PA1', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PC13', 'pressure_advance': 0.05, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'PF0', 'rotation_distance': 21.9459674016, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 55.196, 'pid_ki': 2.091, 'pid_kd': 364.295, 'heater_pin': 'PA2', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'probe': {'z_offset': 0.0, 'deactivate_on_each_sample': True, 'activate_gcode': '', 'deactivate_gcode': '', 'pin': 'PG15', 'speed': 10.0, 'lift_speed': 10.0, 'x_offset': 0.0, 'y_offset': 25.0, 'samples': 5, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.006, 'samples_tolerance_retries': 3}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE5', 'fan_speed': 1.0}, 'controller_fan controller_fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD12', 'fan_speed': 1.0, 'idle_speed': 1.0, 'idle_timeout': 30, 'heater': ['heater_bed']}, 'heater_fan exhaust_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 5.0, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13', 'fan_speed': 1.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PD15', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 1.0, 'maximum_mcu_duration': 0.0, 'value': 1.0, 'shutdown_value': 0.0}, 'neopixel headlight': {'pin': 'PB0', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 0.0, 'initial_green': 0.2157, 'initial_blue': 1.0, 'initial_white': 0.0}, 'temperature_sensor chamber_temp': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF5', 'min_temp': 0.0, 'max_temp': 100.0, 'gcode_id': 'chamber_th'}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [150.0, 348.0], [350.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 5.0], [150.0, 245.0], [270.0, 5.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'gcode_macro _user_variables': {'gcode': '\n{% set Mx = printer[\'configfile\'].config["stepper_x"]["position_max"]|float %}\n{% set My = printer[\'configfile\'].config["stepper_y"]["position_max"]|float %}\n{% set Ox = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set Oy = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set Oz = printer[\'configfile\'].config["probe"]["z_offset"]|float %}\n\n\n{% if z_endstop_x != 0 or z_endstop_y != 0 %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ z_endstop_x }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ z_endstop_y }\n\n\n{% else %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ (Mx * 0.5) - Ox }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ (My * 0.5) - Oy }\n{% endif %}', 'description': 'G-Code macro', 'variable_verbose': 'True', 'variable_debug': 'False', 'variable_travel_speed': '200', 'variable_move_accel': '1000', 'variable_dock_speed': '50', 'variable_release_speed': '75', 'variable_z_drop_speed': '20', 'variable_safe_z': '25', 'variable_enable_z_hop': 'True', 'variable_max_bed_y': '300', 'variable_max_bed_x': '300', 'variable_z_endstop_x': '172', 'variable_z_endstop_y': '301', 'variable_docklocation_x': '40.5', 'variable_docklocation_y': '303.5', 'variable_docklocation_z': '-128', 'variable_enable_dock_servo': 'False', 'variable_servo_name': "'NAME'", 'variable_servo_deploy': '10', 'variable_servo_retract': '11', 'variable_servo_delay': '250', 'variable_dockmove_x': '40', 'variable_dockmove_y': '0', 'variable_dockmove_z': '0', 'variable_attachmove_x': '0', 'variable_attachmove_y': '30', 'variable_attachmove_z': '0', 'variable_umbilical': 'False', 'variable_umbilical_x': '15', 'variable_umbilical_y': '15', 'variable_park_toolhead': 'False', 'variable_parkposition_x': '125', 'variable_parkposition_y': '125', 'variable_parkposition_z': '30', 'variable_version': '1', 'variable_attachmove2_x': '0', 'variable_attachmove2_y': '0', 'variable_attachmove2_z': '0', 'variable_home_backoff_x': '10', 'variable_home_backoff_y': '10', 'variable_override_homing': "''", 'variable_dock_on_zhome': 'True'}, 'gcode_macro print_start': {'gcode': '\nM117 Homing...\nG28\nATTACH_PROBE\nZ_TILT_ADJUST\nDOCK_PROBE\nG28\n\n\n\n\n\n\n\nG0 X150 Y150 Z30 F3600', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1500.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-02-15 22:11:05,783 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-15 22:11:05,783 [printer.py:reinit()] - Klipper version: v0.12.0-103-g6ce6fbbc-dirty
2024-02-15 22:11:05,784 [printer.py:reinit()] - # Extruders: 1
2024-02-15 22:11:05,784 [printer.py:reinit()] - # Temperature devices: 2
2024-02-15 22:11:05,784 [printer.py:reinit()] - # Fans: 4
2024-02-15 22:11:05,784 [printer.py:reinit()] - # Output pins: 1
2024-02-15 22:11:05,784 [printer.py:reinit()] - # Leds: 1
2024-02-15 22:11:05,796 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2024-02-15 22:11:05,798 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-02-15 22:11:06,076 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor chamber_temp&fan&controller_fan controller_fan&heater_fan hotend_fan&heater_fan exhaust_fan&output_pin caselight&neopixel headlight
2024-02-15 22:11:06,078 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-02-15 22:11:06,078 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-02-15 22:11:06,079 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-02-15 22:11:06,079 [screen.py:init_klipper()] - Printer initialized
2024-02-15 22:11:06,080 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2024-02-15 22:11:06,080 [printer.py:change_state()] - Adding callback for state: ready
2024-02-15 22:11:06,083 [files.py:remove_file_callback()] - callback not found <bound method Panel._callback_metadata of <panels.job_status.Panel object at 0x7f682a76a0>>
2024-02-15 22:11:06,083 [screen.py:show_panel()] - Reinitializing panel
2024-02-15 22:11:06,137 [main_menu.py:__init__()] - ### Making MainMenu
2024-02-15 22:11:06,142 [main_menu.py:add_device()] - Adding device: extruder
2024-02-15 22:11:06,147 [main_menu.py:add_device()] - Adding device: heater_bed
2024-02-15 22:11:06,151 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber_temp
2024-02-15 22:11:06,175 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-02-15 22:11:06,191 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-02-15 22:11:06,194 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'temperature_sensor chamber_temp', 'extruder']
2024-02-15 22:11:06,203 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2024-02-15 22:11:06,204 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-02-15 22:11:39,597 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_DEFINE"
2024-02-15 22:11:39,652 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2024-02-15 22:11:39,653 [printer.py:change_state()] - Adding callback for state: printing
2024-02-15 22:11:39,663 [files.py:remove_file_callback()] - callback not found <bound method Panel._callback_metadata of <panels.job_status.Panel object at 0x7f682a76a0>>
2024-02-15 22:11:39,663 [screen.py:show_panel()] - Reinitializing panel
2024-02-15 22:11:39,778 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-02-15 22:11:39,782 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-02-15 22:11:39,788 [job_status.py:update_file_metadata()] - Update Metadata. File: Voron_Design_Cube_v7_PETG_35m47s.gcode Size: 2884279
2024-02-15 22:11:39,793 [job_status.py:show_file_thumbnail()] - Voron_Design_Cube_v7_PETG_35m47s.gcode
2024-02-15 22:12:42,133 [screen.py:show_popup_message()] - error: Probe triggered prior to movement
2024-02-15 22:12:42,303 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2024-02-15 22:12:42,304 [printer.py:change_state()] - Adding callback for state: ready
2024-02-15 22:12:42,320 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'cancelled'
2024-02-15 22:12:48,729 [KlippyWebsocket.py:print_start()] - Sending printer.print.start
2024-02-15 22:12:48,733 [job_status.py:restart()] - Starting print: Voron_Design_Cube_v7_PETG_35m47s.gcode
2024-02-15 22:12:48,765 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_DEFINE"
2024-02-15 22:12:48,826 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2024-02-15 22:12:48,827 [printer.py:change_state()] - Adding callback for state: printing
2024-02-15 22:12:48,836 [job_status.py:set_state()] - Changing job_status state from 'cancelled' to 'printing'
2024-02-15 22:12:48,855 [files.py:remove_file_callback()] - callback not found <bound method Panel._callback_metadata of <panels.job_status.Panel object at 0x7f682a76a0>>
2024-02-15 22:12:48,855 [screen.py:show_panel()] - Reinitializing panel
2024-02-15 22:12:48,943 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-02-15 22:12:48,948 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-02-15 22:12:48,954 [job_status.py:update_file_metadata()] - Update Metadata. File: Voron_Design_Cube_v7_PETG_35m47s.gcode Size: 2884279
2024-02-15 22:12:48,959 [job_status.py:show_file_thumbnail()] - Voron_Design_Cube_v7_PETG_35m47s.gcode
2024-02-15 22:13:54,679 [screen.py:show_popup_message()] - error: Error evaluating 'gcode_macro _SetProbeState:gcode': gcode.CommandError: Probe attach failed!
2024-02-15 22:13:54,770 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2024-02-15 22:13:54,770 [printer.py:change_state()] - Adding callback for state: ready
2024-02-15 22:13:54,783 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'cancelled'
2024-02-15 22:14:22,339 [KlippyWebsocket.py:print_start()] - Sending printer.print.start
2024-02-15 22:14:22,341 [job_status.py:restart()] - Starting print: Voron_Design_Cube_v7_PETG_35m47s.gcode
2024-02-15 22:14:22,373 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_DEFINE"
2024-02-15 22:14:22,578 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2024-02-15 22:14:22,578 [printer.py:change_state()] - Adding callback for state: printing
2024-02-15 22:14:22,586 [job_status.py:set_state()] - Changing job_status state from 'cancelled' to 'printing'
2024-02-15 22:14:22,604 [files.py:remove_file_callback()] - callback not found <bound method Panel._callback_metadata of <panels.job_status.Panel object at 0x7f682a76a0>>
2024-02-15 22:14:22,605 [screen.py:show_panel()] - Reinitializing panel
2024-02-15 22:14:22,694 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-02-15 22:14:22,698 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-02-15 22:14:22,705 [job_status.py:update_file_metadata()] - Update Metadata. File: Voron_Design_Cube_v7_PETG_35m47s.gcode Size: 2884279
2024-02-15 22:14:22,709 [job_status.py:show_file_thumbnail()] - Voron_Design_Cube_v7_PETG_35m47s.gcode
2024-02-15 22:16:47,230 [screen.py:show_popup_message()] - error: Probe samples exceed samples_tolerance
2024-02-15 22:16:47,267 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2024-02-15 22:16:47,268 [printer.py:change_state()] - Adding callback for state: ready
2024-02-15 22:16:47,276 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'cancelled'
2024-02-15 22:16:57,638 [KlippyWebsocket.py:print_start()] - Sending printer.print.start
2024-02-15 22:16:57,640 [job_status.py:restart()] - Starting print: Voron_Design_Cube_v7_PETG_35m47s.gcode
2024-02-15 22:16:57,663 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_DEFINE"
2024-02-15 22:16:57,778 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2024-02-15 22:16:57,778 [printer.py:change_state()] - Adding callback for state: printing
2024-02-15 22:16:57,784 [job_status.py:set_state()] - Changing job_status state from 'cancelled' to 'printing'
2024-02-15 22:16:57,803 [files.py:remove_file_callback()] - callback not found <bound method Panel._callback_metadata of <panels.job_status.Panel object at 0x7f682a76a0>>
2024-02-15 22:16:57,803 [screen.py:show_panel()] - Reinitializing panel
2024-02-15 22:16:57,891 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-02-15 22:16:57,896 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-02-15 22:16:57,902 [job_status.py:update_file_metadata()] - Update Metadata. File: Voron_Design_Cube_v7_PETG_35m47s.gcode Size: 2884279
2024-02-15 22:16:57,907 [job_status.py:show_file_thumbnail()] - Voron_Design_Cube_v7_PETG_35m47s.gcode
2024-02-15 22:17:02,360 [screen.py:_go_to_submenu()] - #### Go to submenu 
2024-02-15 22:17:02,361 [screen.py:_go_to_submenu()] - #### Menu __print
2024-02-15 22:17:02,364 [files.py:remove_file_callback()] - callback not found <bound method Panel._callback_metadata of <panels.job_status.Panel object at 0x7f682a76a0>>
2024-02-15 22:17:02,364 [screen.py:_load_panel()] - Loading panel: menu
2024-02-15 22:17:02,507 [screen.py:attach_panel()] - Current panel hierarchy: job_status > 
2024-02-15 22:17:02,518 [menu.py:arrangeMenuItems()] - X > move
2024-02-15 22:17:02,522 [menu.py:arrangeMenuItems()] - X > power
2024-02-15 22:17:02,529 [menu.py:arrangeMenuItems()] - X > camera
2024-02-15 22:17:02,536 [menu.py:arrangeMenuItems()] - X > retraction
2024-02-15 22:17:02,540 [menu.py:arrangeMenuItems()] - X > spoolman
2024-02-15 22:17:06,334 [screen.py:_menu_go_back()] - #### Menu go back
2024-02-15 22:17:06,374 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-02-15 22:17:06,391 [job_status.py:update_file_metadata()] - Update Metadata. File: Voron_Design_Cube_v7_PETG_35m47s.gcode Size: 2884279
2024-02-15 22:17:06,398 [job_status.py:show_file_thumbnail()] - Voron_Design_Cube_v7_PETG_35m47s.gcode
2024-02-15 22:17:14,364 [files.py:remove_file_callback()] - callback not found <bound method Panel._callback_metadata of <panels.job_status.Panel object at 0x7f682a76a0>>
2024-02-15 22:17:14,364 [screen.py:_load_panel()] - Loading panel: fine_tune
2024-02-15 22:17:14,453 [screen.py:attach_panel()] - Current panel hierarchy: job_status > fine_tune
2024-02-15 22:17:17,004 [screen.py:_menu_go_back()] - #### Menu go back
2024-02-15 22:17:17,022 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-02-15 22:17:17,030 [job_status.py:update_file_metadata()] - Update Metadata. File: Voron_Design_Cube_v7_PETG_35m47s.gcode Size: 2884279
2024-02-15 22:17:17,034 [job_status.py:show_file_thumbnail()] - Voron_Design_Cube_v7_PETG_35m47s.gcode
2024-02-15 22:17:17,824 [screen.py:_go_to_submenu()] - #### Go to submenu 
2024-02-15 22:17:17,825 [screen.py:_go_to_submenu()] - #### Menu __print
2024-02-15 22:17:17,830 [files.py:remove_file_callback()] - callback not found <bound method Panel._callback_metadata of <panels.job_status.Panel object at 0x7f682a76a0>>
2024-02-15 22:17:17,847 [screen.py:attach_panel()] - Current panel hierarchy: job_status > 
2024-02-15 22:17:17,858 [menu.py:arrangeMenuItems()] - X > move
2024-02-15 22:17:17,863 [menu.py:arrangeMenuItems()] - X > power
2024-02-15 22:17:17,870 [menu.py:arrangeMenuItems()] - X > camera
2024-02-15 22:17:17,876 [menu.py:arrangeMenuItems()] - X > retraction
2024-02-15 22:17:17,879 [menu.py:arrangeMenuItems()] - X > spoolman
2024-02-15 22:17:19,029 [screen.py:show_panel()] - Reinitializing panel
2024-02-15 22:17:19,040 [temperature.py:add_device()] - Adding device: extruder
2024-02-15 22:17:19,045 [temperature.py:add_device()] - Adding device: heater_bed
2024-02-15 22:17:19,050 [temperature.py:add_device()] - Adding device: temperature_sensor chamber_temp
2024-02-15 22:17:19,135 [screen.py:attach_panel()] - Current panel hierarchy: job_status >  > temperature
2024-02-15 22:17:53,180 [screen.py:show_popup_message()] - error: Nothing selected
2024-02-15 22:17:55,780 [temperature.py:select_heater()] - Selecting extruder
2024-02-15 22:17:56,453 [KlippyWebsocket.py:set_tool_temp()] - Sending set_tool_temp: M104 T0 S245.0
2024-02-15 22:17:56,456 [temperature.py:change_target_temp_incremental()] - Setting extruder to 245.0
2024-02-15 22:17:57,777 [temperature.py:change_temp_delta()] - ### tempdelta 5
2024-02-15 22:17:58,406 [KlippyWebsocket.py:set_tool_temp()] - Sending set_tool_temp: M104 T0 S240
2024-02-15 22:17:58,407 [temperature.py:change_target_temp_incremental()] - Setting extruder to 240
2024-02-15 22:18:00,921 [screen.py:_menu_go_back()] - #### Menu go back
2024-02-15 22:18:00,963 [screen.py:attach_panel()] - Current panel hierarchy: job_status > 
2024-02-15 22:18:00,982 [menu.py:arrangeMenuItems()] - X > move
2024-02-15 22:18:00,990 [menu.py:arrangeMenuItems()] - X > power
2024-02-15 22:18:01,001 [menu.py:arrangeMenuItems()] - X > camera
2024-02-15 22:18:01,011 [menu.py:arrangeMenuItems()] - X > retraction
2024-02-15 22:18:01,015 [menu.py:arrangeMenuItems()] - X > spoolman
2024-02-15 22:18:48,438 [screen.py:show_popup_message()] - error: Probe samples exceed samples_tolerance
2024-02-15 22:18:48,608 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2024-02-15 22:18:48,608 [printer.py:change_state()] - Adding callback for state: ready
2024-02-15 22:20:43,658 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_DEFINE"
2024-02-15 22:20:43,689 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2024-02-15 22:20:43,690 [printer.py:change_state()] - Adding callback for state: printing
2024-02-15 22:20:43,693 [files.py:remove_file_callback()] - callback not found <bound method Panel._callback_metadata of <panels.job_status.Panel object at 0x7f682a76a0>>
2024-02-15 22:20:43,693 [screen.py:show_panel()] - Reinitializing panel
2024-02-15 22:20:43,807 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-02-15 22:20:43,811 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-02-15 22:20:43,818 [job_status.py:update_file_metadata()] - Update Metadata. File: Voron_Design_Cube_v7_PETG_35m47s.gcode Size: 2884279
2024-02-15 22:20:43,823 [job_status.py:show_file_thumbnail()] - Voron_Design_Cube_v7_PETG_35m47s.gcode
2024-02-15 22:23:00,383 [screen.py:show_popup_message()] - error: Probe samples exceed samples_tolerance
2024-02-15 22:23:00,582 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2024-02-15 22:23:00,582 [printer.py:change_state()] - Adding callback for state: ready
2024-02-15 22:23:00,589 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'cancelled'
2024-02-15 22:24:20,241 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-02-15 22:24:20,241 [printer.py:change_state()] - Adding callback for state: disconnected
2024-02-15 22:24:20,242 [screen.py:state_disconnected()] - ### Going to disconnected
2024-02-15 22:24:20,242 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-15 22:24:20,245 [files.py:remove_file_callback()] - callback not found <bound method Panel._callback_metadata of <panels.job_status.Panel object at 0x7f682a76a0>>
2024-02-15 22:24:20,245 [screen.py:show_panel()] - Reinitializing panel
2024-02-15 22:24:20,301 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-02-15 22:24:23,743 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-15 22:24:23,751 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2024-02-15 22:24:23,753 [printer.py:configure_cameras()] - Cameras: []
2024-02-15 22:24:23,753 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'octoprint_compat', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-310-g67c98f6', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-02-15 22:24:23,762 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2024-02-15 22:24:23,785 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2024-02-15 22:24:23,788 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro _Probe_Variables': {'variable_probe_attached': 'False', 'variable_probe_state': 'False', 'variable_probe_lock': 'False', 'variable_probe_z_homed': 'False', 'variable_z_endstop_x': '0', 'variable_z_endstop_y': '0', 'gcode': ''}, 'gcode_macro _klicky_check_variables_version': {'gcode': '\n{% set version = printer["gcode_macro _User_Variables"].version|default(0) %}\n\n{% if version != 1 %}\n{ action_raise_error("Please update your klicky variables, there are some functionality changes") }\n{% endif %}'}, 'gcode_macro _KlickyDebug': {'gcode': '\n{% set message  = params.MSG %}\n{% set debug = printer["gcode_macro _User_Variables"].debug|default(False) %}\n\n{% if debug %}\n{ action_respond_info(message) }\n{% endif %}'}, 'gcode_macro _exit_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move  = params.MOVE|default(0) %}\n{% set speed = printer["gcode_macro _User_Variables"].travel_speed %}\n\n\nM400\nSET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\nRESTORE_GCODE_STATE NAME={function} MOVE={move} MOVE_SPEED={speed}'}, 'gcode_macro _entry_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move_accel = printer["gcode_macro _User_Variables"].move_accel|default(1000) %}\n\nM400\nSAVE_GCODE_STATE NAME={function}\n\nSET_GCODE_OFFSET Z=0\n\nG90\n\nSET_VELOCITY_LIMIT ACCEL={move_accel}'}, 'gcode_macro _Homing_Variables': {'gcode': '\n{% set reset  = params.RESET|default(0) %}\n{% if reset %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }\n{% endif %}'}, 'gcode_macro Attach_Probe_Lock': {'description': 'Attaches Klicky Probe, can only be docked after unlocking', 'gcode': '\nAttach_Probe\n_Probe_Lock'}, 'gcode_macro Dock_Probe_Unlock': {'description': 'Docks Klicky Probe even if it was locked', 'gcode': '\n_Probe_Unlock\nDock_Probe'}, 'gcode_macro _Probe_Unlock': {'description': 'Unlocks Klicky Probe state', 'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to False"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }'}, 'gcode_macro _Probe_Lock': {'description': 'Locks Klicky Probe state', 'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to True"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ True }'}, 'gcode_macro _DeployKlickyDock': {'description': 'Deploys Klicky servo-controlled dock', 'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_deploy = printer["gcode_macro _User_Variables"].servo_deploy|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_DeployKlickyDock Klicky servo configuration enabled"\n{% if servo_deploy == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo deploy angle specified") }\n{% endif %}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _DeployDock"] is defined %}\n_KlickyDebug msg="_DeployKlickyDock calling _DeployDock"\n_DeployDock\n{% endif %}'}, 'gcode_macro _RetractKlickyDock': {'description': 'Retracts Klicky servo-controlled dock', 'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_retract = printer["gcode_macro _User_Variables"].servo_retract|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_RetractKlickyDock Klicky servo configuration enabled"\n{% if servo_retract == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo retract angle specified") }\n{% endif %}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _RetractDock"] is defined %}\n_KlickyDebug msg="_RetractKlickyDock calling _RetractDock"\n_RetractDock\n{% endif %}'}, 'gcode_macro Attach_Probe': {'description': 'Attaches Klicky Probe', 'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set attachmove2_x = printer["gcode_macro _User_Variables"].attachmove2_x|default(0) %}\n{% set attachmove2_y = printer["gcode_macro _User_Variables"].attachmove2_y|default(0) %}\n{% set attachmove2_z = printer["gcode_macro _User_Variables"].attachmove2_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n_entry_point function=Attach_Probe\n\n{% if bypass_probe_docking == False %}\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n_KlickyDebug msg="Attach_Probe Axis homed"\n\n\n{% elif not probe_attached and not probe_lock %}\n_KlickyDebug msg="Attach_Probe going to attach probe"\n{% if verbose %}\n{ action_respond_info("Attaching Probe") }\n{% endif %}\n_KLICKY_STATUS_BUSY\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% if not enable_z_hop %}\n_KlickyDebug msg="Attach_Probe z_hop disabled"\n{% set safe_z = 0 %}\n{% endif %}\n{% endif %}\n\n\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero, duplicate?") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Umbilical_Path\n\n_entry_point function=Attach_Probe_intern\n\n\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n_DeployKlickyDock\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}"\nG0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}\n\n_RetractKlickyDock\n\n{% if ((printer.gcode_move.gcode_position.z < safe_z) or (docklocation_z != -128 and docklocation_z < safe_z ))%}\n_KlickyDebug msg="Attach_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\n_CheckProbe action=attach\n\n_exit_point function=Attach_Probe_intern move={goback}\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe locked not attaching probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already attached!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe already attached, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Attach_Probe\n{% else %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}'}, 'gcode_macro Dock_Probe': {'description': 'Docks Klicky Probe', 'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n{% if bypass_probe_docking == True %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}\n\n{% if bypass_probe_docking != True %}\n_entry_point function=Dock_Probe\n\n\n{% if probe_attached and not probe_lock %}\n_KLICKY_STATUS_BUSY\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Dock_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n_Umbilical_Path\n\n\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n\n_DeployKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\n\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}"\nG0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}\n{% endif %}\n\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}\n\n\n_RetractKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving away from the dock to G0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}\n\n\n{% if (printer.gcode_move.gcode_position.z < safe_z) %}\n_KlickyDebug msg="Dock_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\nG4 P1000\n_CheckProbe action=dock\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe locked not docking probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already docked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe already docked, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Dock_Probe move={goback}\n{% else %}\n_KlickyDebug msg="Dock_Probe probe docking bypassed, doing nothing"\n{% endif %}'}, 'gcode_macro PROBE_CALIBRATE': {'rename_existing': '_PROBE_CALIBRATE', 'description': 'Calibrate the probes z_offset with klicky automount', 'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_calibrate Axis homed"\n_KlickyDebug msg="probe_calibrate Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_CALIBRATE with the probe above the BED, check klicky_variables bed size!") }\n{% endif %}\n\n{% if bypass_probe_docking == False %}\n_CheckProbe action=query\nG90\nAttach_Probe back=1\n_KLICKY_STATUS_CALIBRATING_Z\n\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nM118 moving the toolhead 20 mm from the bed\n_KlickyDebug msg="probe_calibrate Moving Z up by 20mm"\nTESTZ Z=20\nM118 remove manually the probe and continue calibration\n_KLICKY_STATUS_READY\n{% else %}\n_KLICKY_STATUS_CALIBRATING_Z\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n_KLICKY_STATUS_READY\n{% endif %}'}, 'gcode_macro PROBE_ACCURACY': {'rename_existing': '_PROBE_ACCURACY', 'description': 'Probe Z-height accuracy at current XY position with klicky automount', 'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_accuracy Axis homed"\n_KlickyDebug msg="probe_accuracy Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n_entry_point function=PROBE_ACCURACY\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_ACCURACY with the probe above the BED, check klicky_variables bed size!") }\n{% endif%}\n\n_CheckProbe action=query\nAttach_Probe back=1\n\n_KlickyDebug msg="probe_accuracy calling klipper probe accuracy"\n_PROBE_ACCURACY {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nDock_Probe back=1\n\n_exit_point function=PROBE_ACCURACY move=1'}, 'force_move': {'enable_force_move': 'True'}, 'homing_override': {'axes': 'xyz', 'gcode': '\n\n_User_Variables\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n{% set kinematic_z = 0 %}\n{% set dock_on_zhome = printer["gcode_macro _User_Variables"].dock_on_zhome|default(True) %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set home_backoff_x = printer["gcode_macro _User_Variables"].home_backoff_x|default(0) %}\n{% set home_backoff_y = printer["gcode_macro _User_Variables"].home_backoff_y|default(0) %}\n{% set override_homing = printer["gcode_macro _User_Variables"].override_homing|default(\'\') %}\n\n\n_klicky_check_variables_version\n\n_CheckProbe action=query\n\n\n{% set home_x, home_y, home_z, leave_probe_attached = False, False, False, False %}\n\n{% if \'PROBE_LOCK\' in params%}\n{% if verbose %}\n{ action_respond_info("PROBE_LOCK = True") }\n{% endif %}\n{% set leave_probe_attached = True %}\n{% endif %}\n\n\n{% if not \'X\' in params\nand not \'Y\' in params\nand not \'Z\' in params %}\n\n{% set home_x, home_y, home_z = True, True, True %}\n_KlickyDebug msg="homing_override goint to home all axes"\n\n{% else %}\n{% if \'X\' in params %}\n{% set home_x = True %}\n_KlickyDebug msg="homing_override goint to home X"\n\n{% endif %}\n\n{% if \'Y\' in params %}\n{% set home_y = True %}\n_KlickyDebug msg="homing_override goint to home Y"\n{% endif %}\n\n{% if \'Z\' in params %}\n{% set home_z = True %}\n_KlickyDebug msg="homing_override goint to home Z"\n{% endif %}\n\n{% if \'X\' in params\nand \'Y\' in params\nand \'Z\' in params %}\n\n\n_Homing_Variables reset=1\n_KlickyDebug msg="homing_override goint to home all axes"\n{% endif %}\n\n{% endif %}\n\n_entry_point function=homing_override\n_KLICKY_STATUS_HOMING\n\n\n{% if \'z\' not in printer.toolhead.homed_axes %}\n{% if enable_z_hop == False %}\n_KlickyDebug msg="homing_override z_hop disabled"\n\n{% set kinematic_z = safe_z %}\n{% set safe_z = safe_z %}\n{% endif %}\n{% endif %}\n\n\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes and \'z\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("No axis homed") }\n{% endif %}\n_KlickyDebug msg="homing_override no axis homed, setting position as X=Y=0 Z={kinematic_z}"\nSET_KINEMATIC_POSITION X=0 Y=0 Z={kinematic_z}\nM400\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% if home_z != True %}\n_KlickyDebug msg="homing_override clearing axis homed state if not already homing Z"\nM84\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("X or Y not homed, forcing full G28") }\n{% endif %}\n{% set home_x, home_y, home_z = True, True, True %}\n{% endif %}\n{% endif %}\n\n\n{% if ((attachmove_y == 0 and override_homing == \'\' ) or (override_homing == \'Y\'))%}\n\n{% if home_y %}\n{% if override_homing == \'Y\' %}\n_KlickyDebug msg="homing_override Y homing first override, due to override_homing = Y"\n{% else %}\n_KlickyDebug msg="homing_override Y homing first override, due to attachmove_y = 0"\n{% endif %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y G28 Y0"\nG28 Y0\n\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop-home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n{% set home_y = False %}\n{% endif %}\n\n\n\n{% if home_x %}\n{% if verbose %}\n{ action_respond_info("Homing X") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in X homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_X"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_X external script to handle the X homing"\n_HOME_X\n{% else %}\n_KlickyDebug msg="homing_override Homing X, G28 X0"\nG28 X0\n\n{% if home_backoff_x != 0 %}\n{% if (printer.configfile.settings.stepper_x.position_endstop > (printer.configfile.settings.stepper_x.position_min|default(0) + printer.configfile.settings.stepper_x.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n\n{% if home_y %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y, G28 Y0"\nG28 Y0\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if verbose %}\n{ action_respond_info("Homing Z") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe configured as a virtual Z endstop attaching probe"\nAttach_Probe\n\n{% if leave_probe_attached %}\n_Probe_Lock\n{% endif %}\n{% elif dock_on_zhome == True %}\nDock_Probe\n{% endif %}\n\n_Home_Z_\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe no longer required, docking probe"\nDock_Probe\n{% elif dock_on_zhome == False %}\nDock_Probe\n{% endif %}\n{% endif %}\n_CheckProbe action=query\n\n\n_Park_Toolhead\n\n_exit_point function=homing_override\n_KLICKY_STATUS_READY'}, 'gcode_macro _Umbilical_Path': {'gcode': '\n{% set umbilical = printer["gcode_macro _User_Variables"].umbilical %}\n{% set umbilical_x = printer["gcode_macro _User_Variables"].umbilical_x %}\n{% set umbilical_y = printer["gcode_macro _User_Variables"].umbilical_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n\n{% if umbilical %}\n\n_entry_point function=Umbilical_Path\n\n_KlickyDebug msg="_Umbilical_Path moving to G0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}"\nG0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}\n\n_exit_point function=Umbilical_Path\n{% endif %}'}, 'gcode_macro _Home_Z_': {'gcode': '\n{% set z_endstop_x = printer["gcode_macro _Probe_Variables"].z_endstop_x %}\n{% set z_endstop_y = printer["gcode_macro _Probe_Variables"].z_endstop_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}    {% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Home_Z\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n{% else %}\n_KlickyDebug msg="_Home_Z_ XY Axis homed"\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="_Home_Z_ Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n\n\n_KlickyDebug msg="_Home_Z_ moving to Z endstop position G0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}"\nG0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}\n_KlickyDebug msg="_Home_Z_ Homing Z G28 Z"\nG28 Z0\n_KlickyDebug msg="_Home_Z_ toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_exit_point function=Home_Z'}, 'gcode_macro _CheckProbe': {'variable_probe_state': '0', 'gcode': '\nQuery_Probe\n_SetProbeState action={ params.ACTION }'}, 'gcode_macro _SetProbeState': {'gcode': '\n{% set query_probe_triggered = printer.probe.last_query %}\n{% set action  = params.ACTION|default(\'\') %}\n\n\n{% if query_probe_triggered %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ False }\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ True }\n{% endif %}\n\n{% if action == \'query\' %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_state VALUE={ query_probe_triggered }\n{% endif %}\n\n\n\n\n{% if not query_probe_triggered and action == \'dock\' %}\n{ action_raise_error("Probe dock failed!") }\n{% endif %}\n\n\n{% if query_probe_triggered and action == \'attach\' %}\n{ action_raise_error("Probe attach failed!") }\n{% endif %}'}, 'gcode_macro _Park_Toolhead': {'gcode': '\n{% set park_toolhead = printer["gcode_macro _User_Variables"].park_toolhead %}\n{% set parkposition_x = printer["gcode_macro _User_Variables"].parkposition_x %}\n{% set parkposition_y = printer["gcode_macro _User_Variables"].parkposition_y %}\n{% set parkposition_z = printer["gcode_macro _User_Variables"].parkposition_z %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Park_Toolhead\n\n{% if park_toolhead and \'xyz\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Parking Toolhead") }\n{% endif %}\n{% if parkposition_z == -128 %}\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}\n\n{% else %}\n\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}\n\n{% endif %}\n\n{% endif %}\n_exit_point function=Park_Toolhead'}, 'gcode_macro _klicky_status_ready': {'gcode': '\n{% if printer[\'gcode_macro status_ready\'] is defined %}\n_KlickyDebug msg="_klicky_status_ready activating the LED STATUS_READY"\nSTATUS_READY\n{% endif %}'}, 'gcode_macro _klicky_status_busy': {'gcode': '\n{% if printer[\'gcode_macro status_busy\'] is defined %}\n_KlickyDebug msg="_klicky_status_busy activating the LED STATUS_BUSY"\nSTATUS_BUSY\n{% endif %}'}, 'gcode_macro _klicky_status_leveling': {'gcode': '\n{% if printer[\'gcode_macro status_leveling\'] is defined %}\n_KlickyDebug msg="_klicky_status_leveling activating the LED STATUS_LEVELING"\nSTATUS_LEVELING\n{% endif %}'}, 'gcode_macro _klicky_status_homing': {'gcode': '\n{% if printer[\'gcode_macro status_homing\'] is defined %}\n_KlickyDebug msg="_klicky_status_homing activating the LED STATUS_HOMING"\nSTATUS_HOMING\n{% endif %}'}, 'gcode_macro _klicky_status_cleaning': {'gcode': '\n{% if printer[\'gcode_macro status_cleaning\'] is defined %}\n_KlickyDebug msg="_klicky_status_cleaning activating the LED STATUS_CLEANING"\nSTATUS_CLEANING\n{% endif %}'}, 'gcode_macro _klicky_status_meshing': {'gcode': '\n{% if printer[\'gcode_macro status_meshing\'] is defined %}\n_KlickyDebug msg="_klicky_status_meshing activating the LED STATUS_MESHING"\nSTATUS_MESHING\n{% endif %}'}, 'gcode_macro _klicky_status_calibrating_z': {'gcode': '\n{% if printer[\'gcode_macro status_calibrating_z\'] is defined %}\n_KlickyDebug msg="_klicky_status_calibrating_z activating the LED STATUS_CALIBRATING_Z"\nSTATUS_CALIBRATING_Z\n{% endif %}'}, 'z_calibration': {'nozzle_xy_position': '172, 301', 'switch_xy_position': '171.5, 282', 'bed_xy_position': '150, 150', 'switch_offset': '0.09', 'offset_margins': '-1.0,1.0', 'speed': '50', 'probing_first_fast': 'false', 'start_gcode': 'Attach_Probe', 'end_gcode': 'Dock_Probe'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_28003C001150535556323420-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '^PG6', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '25', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'PG9', 'position_min': '0', 'position_endstop': '300', 'position_max': '303.5', 'homing_speed': '25', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': '!PG3', 'enable_pin': '!PG5', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'PG10', 'position_max': '290', 'position_min': '-4.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3', 'position_endstop': '-0.711'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA0', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': '!PF10', 'enable_pin': '!PG2', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PC13', 'dir_pin': 'PF0', 'enable_pin': '!PF1', 'rotation_distance': '21.9459674016', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.75', 'heater_pin': 'PA1', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF4', 'min_temp': '10', 'max_temp': '270', 'max_power': '1.0', 'min_extrude_temp': '170', 'pressure_advance': '0.05', 'pressure_advance_smooth_time': '0.040', 'control': 'pid', 'pid_kp': '26.572', 'pid_ki': '2.036', 'pid_kd': '86.691'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.5', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PA2', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF3', 'max_power': '1', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '55.196', 'pid_ki': '2.091', 'pid_kd': '364.295'}, 'probe': {'pin': 'PG15', 'x_offset': '0', 'y_offset': '25.0', 'z_offset': '0', 'speed': '10.0', 'samples': '5', 'samples_result': 'median', 'sample_retract_dist': '3.0', 'samples_tolerance': '0.006', 'samples_tolerance_retries': '6'}, 'fan': {'pin': 'PA8', 'kick_start_time': '0.5', 'off_below': '0.10'}, 'heater_fan hotend_fan': {'pin': 'PE5', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'controller_fan controller_fan': {'pin': 'PD12', 'kick_start_time': '0.5', 'heater': 'heater_bed'}, 'heater_fan exhaust_fan': {'pin': 'PD13', 'max_power': '1.0', 'shutdown_speed': '0.0', 'kick_start_time': '5.0', 'heater': 'heater_bed', 'heater_temp': '60', 'fan_speed': '1.0'}, 'output_pin caselight': {'pin': 'PD15', 'pwm': 'true', 'shutdown_value': '0', 'value': '1', 'cycle_time': '0.01'}, 'neopixel headlight': {'pin': 'PB0', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '0.0', 'initial_green': '0.2157', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'temperature_sensor chamber_temp': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF5', 'min_temp': '0', 'max_temp': '100', 'gcode_id': 'chamber_th'}, 'idle_timeout': {'timeout': '1800'}, 'z_tilt': {'z_positions': '\n-50, 18\n150, 348\n350, 18', 'points': '\n30, 5\n150, 245\n270, 5', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'gcode_macro _User_Variables': {'variable_verbose': 'True', 'variable_debug': 'False', 'variable_travel_speed': '200', 'variable_move_accel': '1000', 'variable_dock_speed': '50', 'variable_release_speed': '75', 'variable_z_drop_speed': '20', 'variable_safe_z': '25', 'variable_enable_z_hop': 'True', 'variable_max_bed_y': '300', 'variable_max_bed_x': '300', 'variable_z_endstop_x': '172', 'variable_z_endstop_y': '301', 'variable_docklocation_x': '40.5', 'variable_docklocation_y': '303.5', 'variable_docklocation_z': '-128', 'variable_enable_dock_servo': 'False', 'variable_servo_name': "'NAME'", 'variable_servo_deploy': '10', 'variable_servo_retract': '11', 'variable_servo_delay': '250', 'variable_dockmove_x': '40', 'variable_dockmove_y': '0', 'variable_dockmove_z': '0', 'variable_attachmove_x': '0', 'variable_attachmove_y': '30', 'variable_attachmove_z': '0', 'variable_umbilical': 'False', 'variable_umbilical_x': '15', 'variable_umbilical_y': '15', 'variable_park_toolhead': 'False', 'variable_parkposition_x': '125', 'variable_parkposition_y': '125', 'variable_parkposition_z': '30', 'variable_version': '1', 'variable_attachmove2_x': '0', 'variable_attachmove2_y': '0', 'variable_attachmove2_z': '0', 'variable_home_backoff_x': '10', 'variable_home_backoff_y': '10', 'variable_override_homing': "''", 'variable_dock_on_zhome': 'True', 'gcode': '\n{% set Mx = printer[\'configfile\'].config["stepper_x"]["position_max"]|float %}\n{% set My = printer[\'configfile\'].config["stepper_y"]["position_max"]|float %}\n{% set Ox = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set Oy = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set Oz = printer[\'configfile\'].config["probe"]["z_offset"]|float %}\n\n\n{% if z_endstop_x != 0 or z_endstop_y != 0 %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ z_endstop_x }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ z_endstop_y }\n\n\n{% else %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ (Mx * 0.5) - Ox }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ (My * 0.5) - Oy }\n{% endif %}'}, 'gcode_macro PRINT_START': {'gcode': '\nM117 Homing...\nG28\nATTACH_PROBE\nZ_TILT_ADJUST\nDOCK_PROBE\nG28\n\n\n\n\n\n\n\nG0 X150 Y150 Z30 F3600'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_28003C001150535556323420-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro _probe_variables': {'gcode': '', 'description': 'G-Code macro', 'variable_probe_attached': 'False', 'variable_probe_state': 'False', 'variable_probe_lock': 'False', 'variable_probe_z_homed': 'False', 'variable_z_endstop_x': '0', 'variable_z_endstop_y': '0'}, 'gcode_macro _klicky_check_variables_version': {'gcode': '\n{% set version = printer["gcode_macro _User_Variables"].version|default(0) %}\n\n{% if version != 1 %}\n{ action_raise_error("Please update your klicky variables, there are some functionality changes") }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klickydebug': {'gcode': '\n{% set message  = params.MSG %}\n{% set debug = printer["gcode_macro _User_Variables"].debug|default(False) %}\n\n{% if debug %}\n{ action_respond_info(message) }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _exit_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move  = params.MOVE|default(0) %}\n{% set speed = printer["gcode_macro _User_Variables"].travel_speed %}\n\n\nM400\nSET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\nRESTORE_GCODE_STATE NAME={function} MOVE={move} MOVE_SPEED={speed}', 'description': 'G-Code macro'}, 'gcode_macro _entry_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move_accel = printer["gcode_macro _User_Variables"].move_accel|default(1000) %}\n\nM400\nSAVE_GCODE_STATE NAME={function}\n\nSET_GCODE_OFFSET Z=0\n\nG90\n\nSET_VELOCITY_LIMIT ACCEL={move_accel}', 'description': 'G-Code macro'}, 'gcode_macro _homing_variables': {'gcode': '\n{% set reset  = params.RESET|default(0) %}\n{% if reset %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro attach_probe_lock': {'gcode': '\nAttach_Probe\n_Probe_Lock', 'description': 'Attaches Klicky Probe, can only be docked after unlocking'}, 'gcode_macro dock_probe_unlock': {'gcode': '\n_Probe_Unlock\nDock_Probe', 'description': 'Docks Klicky Probe even if it was locked'}, 'gcode_macro _probe_unlock': {'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to False"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }', 'description': 'Unlocks Klicky Probe state'}, 'gcode_macro _probe_lock': {'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to True"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ True }', 'description': 'Locks Klicky Probe state'}, 'gcode_macro _deployklickydock': {'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_deploy = printer["gcode_macro _User_Variables"].servo_deploy|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_DeployKlickyDock Klicky servo configuration enabled"\n{% if servo_deploy == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo deploy angle specified") }\n{% endif %}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _DeployDock"] is defined %}\n_KlickyDebug msg="_DeployKlickyDock calling _DeployDock"\n_DeployDock\n{% endif %}', 'description': 'Deploys Klicky servo-controlled dock'}, 'gcode_macro _retractklickydock': {'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_retract = printer["gcode_macro _User_Variables"].servo_retract|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_RetractKlickyDock Klicky servo configuration enabled"\n{% if servo_retract == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo retract angle specified") }\n{% endif %}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _RetractDock"] is defined %}\n_KlickyDebug msg="_RetractKlickyDock calling _RetractDock"\n_RetractDock\n{% endif %}', 'description': 'Retracts Klicky servo-controlled dock'}, 'gcode_macro attach_probe': {'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set attachmove2_x = printer["gcode_macro _User_Variables"].attachmove2_x|default(0) %}\n{% set attachmove2_y = printer["gcode_macro _User_Variables"].attachmove2_y|default(0) %}\n{% set attachmove2_z = printer["gcode_macro _User_Variables"].attachmove2_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n_entry_point function=Attach_Probe\n\n{% if bypass_probe_docking == False %}\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n_KlickyDebug msg="Attach_Probe Axis homed"\n\n\n{% elif not probe_attached and not probe_lock %}\n_KlickyDebug msg="Attach_Probe going to attach probe"\n{% if verbose %}\n{ action_respond_info("Attaching Probe") }\n{% endif %}\n_KLICKY_STATUS_BUSY\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% if not enable_z_hop %}\n_KlickyDebug msg="Attach_Probe z_hop disabled"\n{% set safe_z = 0 %}\n{% endif %}\n{% endif %}\n\n\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero, duplicate?") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Umbilical_Path\n\n_entry_point function=Attach_Probe_intern\n\n\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n_DeployKlickyDock\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}"\nG0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}\n\n_RetractKlickyDock\n\n{% if ((printer.gcode_move.gcode_position.z < safe_z) or (docklocation_z != -128 and docklocation_z < safe_z ))%}\n_KlickyDebug msg="Attach_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\n_CheckProbe action=attach\n\n_exit_point function=Attach_Probe_intern move={goback}\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe locked not attaching probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already attached!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe already attached, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Attach_Probe\n{% else %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}', 'description': 'Attaches Klicky Probe'}, 'gcode_macro dock_probe': {'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n{% if bypass_probe_docking == True %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}\n\n{% if bypass_probe_docking != True %}\n_entry_point function=Dock_Probe\n\n\n{% if probe_attached and not probe_lock %}\n_KLICKY_STATUS_BUSY\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Dock_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n_Umbilical_Path\n\n\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n\n_DeployKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\n\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}"\nG0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}\n{% endif %}\n\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}\n\n\n_RetractKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving away from the dock to G0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}\n\n\n{% if (printer.gcode_move.gcode_position.z < safe_z) %}\n_KlickyDebug msg="Dock_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\nG4 P1000\n_CheckProbe action=dock\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe locked not docking probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already docked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe already docked, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Dock_Probe move={goback}\n{% else %}\n_KlickyDebug msg="Dock_Probe probe docking bypassed, doing nothing"\n{% endif %}', 'description': 'Docks Klicky Probe'}, 'gcode_macro probe_calibrate': {'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_calibrate Axis homed"\n_KlickyDebug msg="probe_calibrate Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_CALIBRATE with the probe above the BED, check klicky_variables bed size!") }\n{% endif %}\n\n{% if bypass_probe_docking == False %}\n_CheckProbe action=query\nG90\nAttach_Probe back=1\n_KLICKY_STATUS_CALIBRATING_Z\n\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nM118 moving the toolhead 20 mm from the bed\n_KlickyDebug msg="probe_calibrate Moving Z up by 20mm"\nTESTZ Z=20\nM118 remove manually the probe and continue calibration\n_KLICKY_STATUS_READY\n{% else %}\n_KLICKY_STATUS_CALIBRATING_Z\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n_KLICKY_STATUS_READY\n{% endif %}', 'rename_existing': '_PROBE_CALIBRATE', 'description': 'Calibrate the probes z_offset with klicky automount'}, 'gcode_macro probe_accuracy': {'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_accuracy Axis homed"\n_KlickyDebug msg="probe_accuracy Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n_entry_point function=PROBE_ACCURACY\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_ACCURACY with the probe above the BED, check klicky_variables bed size!") }\n{% endif%}\n\n_CheckProbe action=query\nAttach_Probe back=1\n\n_KlickyDebug msg="probe_accuracy calling klipper probe accuracy"\n_PROBE_ACCURACY {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nDock_Probe back=1\n\n_exit_point function=PROBE_ACCURACY move=1', 'rename_existing': '_PROBE_ACCURACY', 'description': 'Probe Z-height accuracy at current XY position with klicky automount'}, 'force_move': {'enable_force_move': True}, 'homing_override': {'axes': 'xyz', 'gcode': '\n\n_User_Variables\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n{% set kinematic_z = 0 %}\n{% set dock_on_zhome = printer["gcode_macro _User_Variables"].dock_on_zhome|default(True) %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set home_backoff_x = printer["gcode_macro _User_Variables"].home_backoff_x|default(0) %}\n{% set home_backoff_y = printer["gcode_macro _User_Variables"].home_backoff_y|default(0) %}\n{% set override_homing = printer["gcode_macro _User_Variables"].override_homing|default(\'\') %}\n\n\n_klicky_check_variables_version\n\n_CheckProbe action=query\n\n\n{% set home_x, home_y, home_z, leave_probe_attached = False, False, False, False %}\n\n{% if \'PROBE_LOCK\' in params%}\n{% if verbose %}\n{ action_respond_info("PROBE_LOCK = True") }\n{% endif %}\n{% set leave_probe_attached = True %}\n{% endif %}\n\n\n{% if not \'X\' in params\nand not \'Y\' in params\nand not \'Z\' in params %}\n\n{% set home_x, home_y, home_z = True, True, True %}\n_KlickyDebug msg="homing_override goint to home all axes"\n\n{% else %}\n{% if \'X\' in params %}\n{% set home_x = True %}\n_KlickyDebug msg="homing_override goint to home X"\n\n{% endif %}\n\n{% if \'Y\' in params %}\n{% set home_y = True %}\n_KlickyDebug msg="homing_override goint to home Y"\n{% endif %}\n\n{% if \'Z\' in params %}\n{% set home_z = True %}\n_KlickyDebug msg="homing_override goint to home Z"\n{% endif %}\n\n{% if \'X\' in params\nand \'Y\' in params\nand \'Z\' in params %}\n\n\n_Homing_Variables reset=1\n_KlickyDebug msg="homing_override goint to home all axes"\n{% endif %}\n\n{% endif %}\n\n_entry_point function=homing_override\n_KLICKY_STATUS_HOMING\n\n\n{% if \'z\' not in printer.toolhead.homed_axes %}\n{% if enable_z_hop == False %}\n_KlickyDebug msg="homing_override z_hop disabled"\n\n{% set kinematic_z = safe_z %}\n{% set safe_z = safe_z %}\n{% endif %}\n{% endif %}\n\n\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes and \'z\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("No axis homed") }\n{% endif %}\n_KlickyDebug msg="homing_override no axis homed, setting position as X=Y=0 Z={kinematic_z}"\nSET_KINEMATIC_POSITION X=0 Y=0 Z={kinematic_z}\nM400\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% if home_z != True %}\n_KlickyDebug msg="homing_override clearing axis homed state if not already homing Z"\nM84\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("X or Y not homed, forcing full G28") }\n{% endif %}\n{% set home_x, home_y, home_z = True, True, True %}\n{% endif %}\n{% endif %}\n\n\n{% if ((attachmove_y == 0 and override_homing == \'\' ) or (override_homing == \'Y\'))%}\n\n{% if home_y %}\n{% if override_homing == \'Y\' %}\n_KlickyDebug msg="homing_override Y homing first override, due to override_homing = Y"\n{% else %}\n_KlickyDebug msg="homing_override Y homing first override, due to attachmove_y = 0"\n{% endif %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y G28 Y0"\nG28 Y0\n\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop-home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n{% set home_y = False %}\n{% endif %}\n\n\n\n{% if home_x %}\n{% if verbose %}\n{ action_respond_info("Homing X") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in X homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_X"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_X external script to handle the X homing"\n_HOME_X\n{% else %}\n_KlickyDebug msg="homing_override Homing X, G28 X0"\nG28 X0\n\n{% if home_backoff_x != 0 %}\n{% if (printer.configfile.settings.stepper_x.position_endstop > (printer.configfile.settings.stepper_x.position_min|default(0) + printer.configfile.settings.stepper_x.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n\n{% if home_y %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y, G28 Y0"\nG28 Y0\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if verbose %}\n{ action_respond_info("Homing Z") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe configured as a virtual Z endstop attaching probe"\nAttach_Probe\n\n{% if leave_probe_attached %}\n_Probe_Lock\n{% endif %}\n{% elif dock_on_zhome == True %}\nDock_Probe\n{% endif %}\n\n_Home_Z_\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe no longer required, docking probe"\nDock_Probe\n{% elif dock_on_zhome == False %}\nDock_Probe\n{% endif %}\n{% endif %}\n_CheckProbe action=query\n\n\n_Park_Toolhead\n\n_exit_point function=homing_override\n_KLICKY_STATUS_READY'}, 'gcode_macro _umbilical_path': {'gcode': '\n{% set umbilical = printer["gcode_macro _User_Variables"].umbilical %}\n{% set umbilical_x = printer["gcode_macro _User_Variables"].umbilical_x %}\n{% set umbilical_y = printer["gcode_macro _User_Variables"].umbilical_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n\n{% if umbilical %}\n\n_entry_point function=Umbilical_Path\n\n_KlickyDebug msg="_Umbilical_Path moving to G0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}"\nG0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}\n\n_exit_point function=Umbilical_Path\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _home_z_': {'gcode': '\n{% set z_endstop_x = printer["gcode_macro _Probe_Variables"].z_endstop_x %}\n{% set z_endstop_y = printer["gcode_macro _Probe_Variables"].z_endstop_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}    {% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Home_Z\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n{% else %}\n_KlickyDebug msg="_Home_Z_ XY Axis homed"\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="_Home_Z_ Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n\n\n_KlickyDebug msg="_Home_Z_ moving to Z endstop position G0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}"\nG0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}\n_KlickyDebug msg="_Home_Z_ Homing Z G28 Z"\nG28 Z0\n_KlickyDebug msg="_Home_Z_ toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_exit_point function=Home_Z', 'description': 'G-Code macro'}, 'gcode_macro _checkprobe': {'gcode': '\nQuery_Probe\n_SetProbeState action={ params.ACTION }', 'description': 'G-Code macro', 'variable_probe_state': '0'}, 'gcode_macro _setprobestate': {'gcode': '\n{% set query_probe_triggered = printer.probe.last_query %}\n{% set action  = params.ACTION|default(\'\') %}\n\n\n{% if query_probe_triggered %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ False }\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ True }\n{% endif %}\n\n{% if action == \'query\' %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_state VALUE={ query_probe_triggered }\n{% endif %}\n\n\n\n\n{% if not query_probe_triggered and action == \'dock\' %}\n{ action_raise_error("Probe dock failed!") }\n{% endif %}\n\n\n{% if query_probe_triggered and action == \'attach\' %}\n{ action_raise_error("Probe attach failed!") }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _park_toolhead': {'gcode': '\n{% set park_toolhead = printer["gcode_macro _User_Variables"].park_toolhead %}\n{% set parkposition_x = printer["gcode_macro _User_Variables"].parkposition_x %}\n{% set parkposition_y = printer["gcode_macro _User_Variables"].parkposition_y %}\n{% set parkposition_z = printer["gcode_macro _User_Variables"].parkposition_z %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Park_Toolhead\n\n{% if park_toolhead and \'xyz\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Parking Toolhead") }\n{% endif %}\n{% if parkposition_z == -128 %}\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}\n\n{% else %}\n\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}\n\n{% endif %}\n\n{% endif %}\n_exit_point function=Park_Toolhead', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_ready': {'gcode': '\n{% if printer[\'gcode_macro status_ready\'] is defined %}\n_KlickyDebug msg="_klicky_status_ready activating the LED STATUS_READY"\nSTATUS_READY\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_busy': {'gcode': '\n{% if printer[\'gcode_macro status_busy\'] is defined %}\n_KlickyDebug msg="_klicky_status_busy activating the LED STATUS_BUSY"\nSTATUS_BUSY\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_leveling': {'gcode': '\n{% if printer[\'gcode_macro status_leveling\'] is defined %}\n_KlickyDebug msg="_klicky_status_leveling activating the LED STATUS_LEVELING"\nSTATUS_LEVELING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_homing': {'gcode': '\n{% if printer[\'gcode_macro status_homing\'] is defined %}\n_KlickyDebug msg="_klicky_status_homing activating the LED STATUS_HOMING"\nSTATUS_HOMING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_cleaning': {'gcode': '\n{% if printer[\'gcode_macro status_cleaning\'] is defined %}\n_KlickyDebug msg="_klicky_status_cleaning activating the LED STATUS_CLEANING"\nSTATUS_CLEANING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_meshing': {'gcode': '\n{% if printer[\'gcode_macro status_meshing\'] is defined %}\n_KlickyDebug msg="_klicky_status_meshing activating the LED STATUS_MESHING"\nSTATUS_MESHING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_calibrating_z': {'gcode': '\n{% if printer[\'gcode_macro status_calibrating_z\'] is defined %}\n_KlickyDebug msg="_klicky_status_calibrating_z activating the LED STATUS_CALIBRATING_Z"\nSTATUS_CALIBRATING_Z\n{% endif %}', 'description': 'G-Code macro'}, 'z_calibration': {'switch_offset': 0.09, 'offset_margins': '-1.0,1.0', 'speed': 50.0, 'samples_result': 'none', 'probing_first_fast': False, 'nozzle_xy_position': '172, 301', 'switch_xy_position': '171.5, 282', 'bed_xy_position': '150, 150', 'start_gcode': 'Attach_Probe', 'before_switch_gcode': '', 'end_gcode': 'Dock_Probe'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': '^PG6', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'PG9', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 303.5, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PF11', 'dir_pin': '!PG3', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG5', 'endstop_pin': 'PG10', 'position_endstop': -0.711, 'position_min': -4.5, 'position_max': 290.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA0'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PF9', 'dir_pin': '!PF10', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG2'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF4', 'min_temp': 10.0, 'max_temp': 270.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 26.572, 'pid_ki': 2.036, 'pid_kd': 86.691, 'heater_pin': 'PA1', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PC13', 'pressure_advance': 0.05, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'PF0', 'rotation_distance': 21.9459674016, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 55.196, 'pid_ki': 2.091, 'pid_kd': 364.295, 'heater_pin': 'PA2', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'probe': {'z_offset': 0.0, 'deactivate_on_each_sample': True, 'activate_gcode': '', 'deactivate_gcode': '', 'pin': 'PG15', 'speed': 10.0, 'lift_speed': 10.0, 'x_offset': 0.0, 'y_offset': 25.0, 'samples': 5, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.006, 'samples_tolerance_retries': 6}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE5', 'fan_speed': 1.0}, 'controller_fan controller_fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD12', 'fan_speed': 1.0, 'idle_speed': 1.0, 'idle_timeout': 30, 'heater': ['heater_bed']}, 'heater_fan exhaust_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 5.0, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13', 'fan_speed': 1.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PD15', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 1.0, 'maximum_mcu_duration': 0.0, 'value': 1.0, 'shutdown_value': 0.0}, 'neopixel headlight': {'pin': 'PB0', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 0.0, 'initial_green': 0.2157, 'initial_blue': 1.0, 'initial_white': 0.0}, 'temperature_sensor chamber_temp': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF5', 'min_temp': 0.0, 'max_temp': 100.0, 'gcode_id': 'chamber_th'}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [150.0, 348.0], [350.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 5.0], [150.0, 245.0], [270.0, 5.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'gcode_macro _user_variables': {'gcode': '\n{% set Mx = printer[\'configfile\'].config["stepper_x"]["position_max"]|float %}\n{% set My = printer[\'configfile\'].config["stepper_y"]["position_max"]|float %}\n{% set Ox = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set Oy = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set Oz = printer[\'configfile\'].config["probe"]["z_offset"]|float %}\n\n\n{% if z_endstop_x != 0 or z_endstop_y != 0 %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ z_endstop_x }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ z_endstop_y }\n\n\n{% else %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ (Mx * 0.5) - Ox }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ (My * 0.5) - Oy }\n{% endif %}', 'description': 'G-Code macro', 'variable_verbose': 'True', 'variable_debug': 'False', 'variable_travel_speed': '200', 'variable_move_accel': '1000', 'variable_dock_speed': '50', 'variable_release_speed': '75', 'variable_z_drop_speed': '20', 'variable_safe_z': '25', 'variable_enable_z_hop': 'True', 'variable_max_bed_y': '300', 'variable_max_bed_x': '300', 'variable_z_endstop_x': '172', 'variable_z_endstop_y': '301', 'variable_docklocation_x': '40.5', 'variable_docklocation_y': '303.5', 'variable_docklocation_z': '-128', 'variable_enable_dock_servo': 'False', 'variable_servo_name': "'NAME'", 'variable_servo_deploy': '10', 'variable_servo_retract': '11', 'variable_servo_delay': '250', 'variable_dockmove_x': '40', 'variable_dockmove_y': '0', 'variable_dockmove_z': '0', 'variable_attachmove_x': '0', 'variable_attachmove_y': '30', 'variable_attachmove_z': '0', 'variable_umbilical': 'False', 'variable_umbilical_x': '15', 'variable_umbilical_y': '15', 'variable_park_toolhead': 'False', 'variable_parkposition_x': '125', 'variable_parkposition_y': '125', 'variable_parkposition_z': '30', 'variable_version': '1', 'variable_attachmove2_x': '0', 'variable_attachmove2_y': '0', 'variable_attachmove2_z': '0', 'variable_home_backoff_x': '10', 'variable_home_backoff_y': '10', 'variable_override_homing': "''", 'variable_dock_on_zhome': 'True'}, 'gcode_macro print_start': {'gcode': '\nM117 Homing...\nG28\nATTACH_PROBE\nZ_TILT_ADJUST\nDOCK_PROBE\nG28\n\n\n\n\n\n\n\nG0 X150 Y150 Z30 F3600', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1500.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-02-15 22:24:23,791 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-15 22:24:23,792 [printer.py:reinit()] - Klipper version: v0.12.0-103-g6ce6fbbc-dirty
2024-02-15 22:24:23,792 [printer.py:reinit()] - # Extruders: 1
2024-02-15 22:24:23,792 [printer.py:reinit()] - # Temperature devices: 2
2024-02-15 22:24:23,792 [printer.py:reinit()] - # Fans: 4
2024-02-15 22:24:23,792 [printer.py:reinit()] - # Output pins: 1
2024-02-15 22:24:23,792 [printer.py:reinit()] - # Leds: 1
2024-02-15 22:24:23,803 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2024-02-15 22:24:23,804 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-02-15 22:24:24,089 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor chamber_temp&fan&controller_fan controller_fan&heater_fan hotend_fan&heater_fan exhaust_fan&output_pin caselight&neopixel headlight
2024-02-15 22:24:24,092 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-02-15 22:24:24,092 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-02-15 22:24:24,092 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-02-15 22:24:24,093 [screen.py:init_klipper()] - Printer initialized
2024-02-15 22:24:24,094 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2024-02-15 22:24:24,094 [printer.py:change_state()] - Adding callback for state: ready
2024-02-15 22:24:24,098 [files.py:remove_file_callback()] - callback not found <bound method Panel._callback_metadata of <panels.job_status.Panel object at 0x7f682a76a0>>
2024-02-15 22:24:24,098 [screen.py:show_panel()] - Reinitializing panel
2024-02-15 22:24:24,154 [main_menu.py:__init__()] - ### Making MainMenu
2024-02-15 22:24:24,160 [main_menu.py:add_device()] - Adding device: extruder
2024-02-15 22:24:24,164 [main_menu.py:add_device()] - Adding device: heater_bed
2024-02-15 22:24:24,169 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber_temp
2024-02-15 22:24:24,193 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-02-15 22:24:24,209 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-02-15 22:24:24,212 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'temperature_sensor chamber_temp', 'extruder']
2024-02-15 22:24:24,221 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2024-02-15 22:24:24,222 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-02-15 22:24:37,681 [screen.py:show_popup_message()] - error: Error evaluating 'gcode_macro PROBE_ACCURACY:gcode': gcode.CommandError: Must Home X, Y and Z Axis First!
2024-02-15 22:25:21,821 [screen.py:show_popup_message()] - error: Error evaluating 'gcode_macro PROBE_ACCURACY:gcode': gcode.CommandError: Must perform PROBE_ACCURACY with the probe above the BED, check klicky_variables bed size!
2024-02-15 22:26:21,843 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_DEFINE"
2024-02-15 22:26:21,889 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2024-02-15 22:26:21,889 [printer.py:change_state()] - Adding callback for state: printing
2024-02-15 22:26:21,893 [files.py:remove_file_callback()] - callback not found <bound method Panel._callback_metadata of <panels.job_status.Panel object at 0x7f682a76a0>>
2024-02-15 22:26:21,893 [screen.py:show_panel()] - Reinitializing panel
2024-02-15 22:26:21,999 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-02-15 22:26:22,003 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-02-15 22:26:22,010 [job_status.py:update_file_metadata()] - Update Metadata. File: Voron_Design_Cube_v7_PETG_35m47s.gcode Size: 2884279
2024-02-15 22:26:22,016 [job_status.py:show_file_thumbnail()] - Voron_Design_Cube_v7_PETG_35m47s.gcode
2024-02-15 22:28:23,194 [files.py:remove_file_callback()] - callback not found <bound method Panel._callback_metadata of <panels.job_status.Panel object at 0x7f682a76a0>>
2024-02-15 22:28:23,194 [screen.py:show_panel()] - Reinitializing panel
2024-02-15 22:28:23,246 [screen.py:attach_panel()] - Current panel hierarchy: job_status > fine_tune
2024-02-15 22:29:01,775 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_START"
2024-02-15 22:29:32,551 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.05 MOVE=1'}
2024-02-15 22:29:33,439 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.05 MOVE=1'}
2024-02-15 22:29:35,153 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.05 MOVE=1'}
2024-02-15 22:29:36,723 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.05 MOVE=1'}
2024-02-15 22:29:37,619 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.05 MOVE=1'}
2024-02-15 22:29:38,583 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.05 MOVE=1'}
2024-02-15 22:29:40,075 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.05 MOVE=1'}
2024-02-15 22:29:43,884 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.05 MOVE=1'}
2024-02-15 22:29:45,964 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-15 22:29:48,394 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.05 MOVE=1'}
2024-02-15 22:29:49,191 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.05 MOVE=1'}
2024-02-15 22:29:50,008 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.05 MOVE=1'}
2024-02-15 22:29:53,899 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=+0.05 MOVE=1'}
2024-02-15 22:29:54,286 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=+0.05 MOVE=1'}
2024-02-15 22:29:54,699 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=+0.05 MOVE=1'}
2024-02-15 22:29:55,037 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=+0.05 MOVE=1'}
2024-02-15 22:29:55,395 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=+0.05 MOVE=1'}
2024-02-15 22:29:55,754 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=+0.05 MOVE=1'}
2024-02-15 22:29:56,114 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=+0.05 MOVE=1'}
2024-02-15 22:29:56,691 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=+0.05 MOVE=1'}
2024-02-15 22:29:57,106 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=+0.05 MOVE=1'}
2024-02-15 22:29:57,663 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=+0.05 MOVE=1'}
2024-02-15 22:29:58,047 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=+0.05 MOVE=1'}
2024-02-15 22:29:58,647 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=+0.05 MOVE=1'}
2024-02-15 22:29:59,151 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=+0.05 MOVE=1'}
2024-02-15 22:29:59,542 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=+0.05 MOVE=1'}
2024-02-15 22:29:59,950 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=+0.05 MOVE=1'}
2024-02-15 22:30:00,767 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=+0.05 MOVE=1'}
2024-02-15 22:30:01,374 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=+0.05 MOVE=1'}
2024-02-15 22:30:01,826 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=+0.05 MOVE=1'}
2024-02-15 22:30:02,403 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=+0.05 MOVE=1'}
2024-02-15 22:30:02,823 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=+0.05 MOVE=1'}
2024-02-15 22:30:03,230 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=+0.05 MOVE=1'}
2024-02-15 22:30:03,642 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=+0.05 MOVE=1'}
2024-02-15 22:30:04,294 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=+0.05 MOVE=1'}
2024-02-15 22:30:04,755 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=+0.05 MOVE=1'}
2024-02-15 22:30:05,187 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=+0.05 MOVE=1'}
2024-02-15 22:30:05,598 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=+0.05 MOVE=1'}
2024-02-15 22:30:06,011 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=+0.05 MOVE=1'}
2024-02-15 22:30:06,642 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=+0.05 MOVE=1'}
2024-02-15 22:30:07,098 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=+0.05 MOVE=1'}
2024-02-15 22:30:07,943 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=+0.05 MOVE=1'}
2024-02-15 22:30:08,461 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-15 22:30:08,843 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=+0.05 MOVE=1'}
2024-02-15 22:30:09,543 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=+0.05 MOVE=1'}
2024-02-15 22:30:10,267 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=+0.05 MOVE=1'}
2024-02-15 22:30:11,035 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=+0.05 MOVE=1'}
2024-02-15 22:30:11,467 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=+0.05 MOVE=1'}
2024-02-15 22:30:11,826 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=+0.05 MOVE=1'}
2024-02-15 22:30:12,219 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=+0.05 MOVE=1'}
2024-02-15 22:30:13,186 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=+0.05 MOVE=1'}
2024-02-15 22:30:16,535 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=+0.05 MOVE=1'}
2024-02-15 22:30:29,548 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-15 22:30:33,341 [screen.py:_menu_go_back()] - #### Menu go back
2024-02-15 22:30:33,361 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-02-15 22:30:33,368 [job_status.py:update_file_metadata()] - Update Metadata. File: Voron_Design_Cube_v7_PETG_35m47s.gcode Size: 2884279
2024-02-15 22:30:33,373 [job_status.py:show_file_thumbnail()] - Voron_Design_Cube_v7_PETG_35m47s.gcode
2024-02-15 22:30:35,314 [KlippyGtk.py:Dialog()] - Showing dialog Cancel (width=800, height=480)
2024-02-15 22:30:36,741 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-02-15 22:30:36,741 [job_status.py:cancel_confirm()] - Canceling print
2024-02-15 22:30:36,742 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'cancelling'
2024-02-15 22:30:36,749 [KlippyWebsocket.py:print_cancel()] - Sending printer.print.cancel
2024-02-15 22:30:37,107 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2024-02-15 22:30:37,107 [printer.py:change_state()] - Adding callback for state: ready
2024-02-15 22:30:37,119 [job_status.py:set_state()] - Changing job_status state from 'cancelling' to 'cancelled'
2024-02-15 22:31:11,346 [KlippyWebsocket.py:print_start()] - Sending printer.print.start
2024-02-15 22:31:11,348 [job_status.py:restart()] - Starting print: Voron_Design_Cube_v7_PETG_35m47s.gcode
2024-02-15 22:31:11,375 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_DEFINE"
2024-02-15 22:31:11,466 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2024-02-15 22:31:11,467 [printer.py:change_state()] - Adding callback for state: printing
2024-02-15 22:31:11,470 [job_status.py:set_state()] - Changing job_status state from 'cancelled' to 'printing'
2024-02-15 22:31:11,495 [files.py:remove_file_callback()] - callback not found <bound method Panel._callback_metadata of <panels.job_status.Panel object at 0x7f682a76a0>>
2024-02-15 22:31:11,495 [screen.py:show_panel()] - Reinitializing panel
2024-02-15 22:31:11,585 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-02-15 22:31:11,589 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-02-15 22:31:11,596 [job_status.py:update_file_metadata()] - Update Metadata. File: Voron_Design_Cube_v7_PETG_35m47s.gcode Size: 2884279
2024-02-15 22:31:11,601 [job_status.py:show_file_thumbnail()] - Voron_Design_Cube_v7_PETG_35m47s.gcode
2024-02-15 22:31:13,786 [files.py:remove_file_callback()] - callback not found <bound method Panel._callback_metadata of <panels.job_status.Panel object at 0x7f682a76a0>>
2024-02-15 22:31:13,786 [screen.py:show_panel()] - Reinitializing panel
2024-02-15 22:31:13,835 [screen.py:attach_panel()] - Current panel hierarchy: job_status > fine_tune
2024-02-15 22:31:15,553 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=-0.05 MOVE=1'}
2024-02-15 22:31:21,222 [screen.py:_menu_go_back()] - #### Menu go back
2024-02-15 22:31:21,255 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-02-15 22:31:21,266 [job_status.py:update_file_metadata()] - Update Metadata. File: Voron_Design_Cube_v7_PETG_35m47s.gcode Size: 2884279
2024-02-15 22:31:21,274 [job_status.py:show_file_thumbnail()] - Voron_Design_Cube_v7_PETG_35m47s.gcode
2024-02-15 22:31:28,637 [screen.py:_go_to_submenu()] - #### Go to submenu 
2024-02-15 22:31:28,637 [screen.py:_go_to_submenu()] - #### Menu __print
2024-02-15 22:31:28,642 [files.py:remove_file_callback()] - callback not found <bound method Panel._callback_metadata of <panels.job_status.Panel object at 0x7f682a76a0>>
2024-02-15 22:31:28,642 [screen.py:show_panel()] - Reinitializing panel
2024-02-15 22:31:28,833 [screen.py:attach_panel()] - Current panel hierarchy: job_status > 
2024-02-15 22:31:28,844 [menu.py:arrangeMenuItems()] - X > move
2024-02-15 22:31:28,848 [menu.py:arrangeMenuItems()] - X > power
2024-02-15 22:31:28,856 [menu.py:arrangeMenuItems()] - X > camera
2024-02-15 22:31:28,862 [menu.py:arrangeMenuItems()] - X > retraction
2024-02-15 22:31:28,865 [menu.py:arrangeMenuItems()] - X > spoolman
2024-02-15 22:31:30,210 [screen.py:show_panel()] - Reinitializing panel
2024-02-15 22:31:30,221 [temperature.py:add_device()] - Adding device: extruder
2024-02-15 22:31:30,226 [temperature.py:add_device()] - Adding device: heater_bed
2024-02-15 22:31:30,231 [temperature.py:add_device()] - Adding device: temperature_sensor chamber_temp
2024-02-15 22:31:30,262 [screen.py:attach_panel()] - Current panel hierarchy: job_status >  > temperature
2024-02-15 22:31:31,389 [temperature.py:select_heater()] - Selecting extruder
2024-02-15 22:31:34,542 [temperature.py:verify_max_temp()] - 245/270
2024-02-15 22:31:34,543 [KlippyWebsocket.py:set_tool_temp()] - Sending set_tool_temp: M104 T0 S245
2024-02-15 22:31:35,985 [screen.py:_menu_go_back()] - #### Menu go back
2024-02-15 22:31:36,056 [screen.py:attach_panel()] - Current panel hierarchy: job_status > 
2024-02-15 22:31:36,075 [menu.py:arrangeMenuItems()] - X > move
2024-02-15 22:31:36,083 [menu.py:arrangeMenuItems()] - X > power
2024-02-15 22:31:36,095 [menu.py:arrangeMenuItems()] - X > camera
2024-02-15 22:31:36,108 [menu.py:arrangeMenuItems()] - X > retraction
2024-02-15 22:31:36,114 [menu.py:arrangeMenuItems()] - X > spoolman
2024-02-15 22:31:36,952 [screen.py:_menu_go_back()] - #### Menu go back
2024-02-15 22:31:36,970 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-02-15 22:31:36,978 [job_status.py:update_file_metadata()] - Update Metadata. File: Voron_Design_Cube_v7_PETG_35m47s.gcode Size: 2884279
2024-02-15 22:31:36,982 [job_status.py:show_file_thumbnail()] - Voron_Design_Cube_v7_PETG_35m47s.gcode
2024-02-15 22:32:36,414 [KlippyWebsocket.py:emergency_stop()] - Sending printer.emergency_stop
2024-02-15 22:32:36,450 [printer.py:change_state()] - Changing state from 'printing' to 'shutdown'
2024-02-15 22:32:36,451 [printer.py:change_state()] - Adding callback for state: shutdown
2024-02-15 22:32:36,483 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-15 22:32:36,486 [files.py:remove_file_callback()] - callback not found <bound method Panel._callback_metadata of <panels.job_status.Panel object at 0x7f682a76a0>>
2024-02-15 22:32:36,486 [screen.py:show_panel()] - Reinitializing panel
2024-02-15 22:32:36,533 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-02-15 22:32:40,089 [KlippyWebsocket.py:restart_firmware()] - Sending printer.firmware_restart
2024-02-15 22:32:40,115 [printer.py:change_state()] - Changing state from 'shutdown' to 'disconnected'
2024-02-15 22:32:40,116 [printer.py:change_state()] - Adding callback for state: disconnected
2024-02-15 22:32:40,116 [screen.py:state_disconnected()] - ### Going to disconnected
2024-02-15 22:32:40,116 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-15 22:32:40,118 [files.py:remove_file_callback()] - callback not found <bound method Panel._callback_metadata of <panels.job_status.Panel object at 0x7f682a76a0>>
2024-02-15 22:32:40,118 [screen.py:show_panel()] - Reinitializing panel
2024-02-15 22:32:40,150 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-02-15 22:32:43,742 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-15 22:32:43,750 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2024-02-15 22:32:43,751 [printer.py:configure_cameras()] - Cameras: []
2024-02-15 22:32:43,751 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'octoprint_compat', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-310-g67c98f6', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-02-15 22:32:43,760 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2024-02-15 22:32:43,923 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2024-02-15 22:32:43,926 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro _Probe_Variables': {'variable_probe_attached': 'False', 'variable_probe_state': 'False', 'variable_probe_lock': 'False', 'variable_probe_z_homed': 'False', 'variable_z_endstop_x': '0', 'variable_z_endstop_y': '0', 'gcode': ''}, 'gcode_macro _klicky_check_variables_version': {'gcode': '\n{% set version = printer["gcode_macro _User_Variables"].version|default(0) %}\n\n{% if version != 1 %}\n{ action_raise_error("Please update your klicky variables, there are some functionality changes") }\n{% endif %}'}, 'gcode_macro _KlickyDebug': {'gcode': '\n{% set message  = params.MSG %}\n{% set debug = printer["gcode_macro _User_Variables"].debug|default(False) %}\n\n{% if debug %}\n{ action_respond_info(message) }\n{% endif %}'}, 'gcode_macro _exit_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move  = params.MOVE|default(0) %}\n{% set speed = printer["gcode_macro _User_Variables"].travel_speed %}\n\n\nM400\nSET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\nRESTORE_GCODE_STATE NAME={function} MOVE={move} MOVE_SPEED={speed}'}, 'gcode_macro _entry_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move_accel = printer["gcode_macro _User_Variables"].move_accel|default(1000) %}\n\nM400\nSAVE_GCODE_STATE NAME={function}\n\nSET_GCODE_OFFSET Z=0\n\nG90\n\nSET_VELOCITY_LIMIT ACCEL={move_accel}'}, 'gcode_macro _Homing_Variables': {'gcode': '\n{% set reset  = params.RESET|default(0) %}\n{% if reset %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }\n{% endif %}'}, 'gcode_macro Attach_Probe_Lock': {'description': 'Attaches Klicky Probe, can only be docked after unlocking', 'gcode': '\nAttach_Probe\n_Probe_Lock'}, 'gcode_macro Dock_Probe_Unlock': {'description': 'Docks Klicky Probe even if it was locked', 'gcode': '\n_Probe_Unlock\nDock_Probe'}, 'gcode_macro _Probe_Unlock': {'description': 'Unlocks Klicky Probe state', 'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to False"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }'}, 'gcode_macro _Probe_Lock': {'description': 'Locks Klicky Probe state', 'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to True"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ True }'}, 'gcode_macro _DeployKlickyDock': {'description': 'Deploys Klicky servo-controlled dock', 'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_deploy = printer["gcode_macro _User_Variables"].servo_deploy|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_DeployKlickyDock Klicky servo configuration enabled"\n{% if servo_deploy == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo deploy angle specified") }\n{% endif %}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _DeployDock"] is defined %}\n_KlickyDebug msg="_DeployKlickyDock calling _DeployDock"\n_DeployDock\n{% endif %}'}, 'gcode_macro _RetractKlickyDock': {'description': 'Retracts Klicky servo-controlled dock', 'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_retract = printer["gcode_macro _User_Variables"].servo_retract|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_RetractKlickyDock Klicky servo configuration enabled"\n{% if servo_retract == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo retract angle specified") }\n{% endif %}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _RetractDock"] is defined %}\n_KlickyDebug msg="_RetractKlickyDock calling _RetractDock"\n_RetractDock\n{% endif %}'}, 'gcode_macro Attach_Probe': {'description': 'Attaches Klicky Probe', 'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set attachmove2_x = printer["gcode_macro _User_Variables"].attachmove2_x|default(0) %}\n{% set attachmove2_y = printer["gcode_macro _User_Variables"].attachmove2_y|default(0) %}\n{% set attachmove2_z = printer["gcode_macro _User_Variables"].attachmove2_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n_entry_point function=Attach_Probe\n\n{% if bypass_probe_docking == False %}\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n_KlickyDebug msg="Attach_Probe Axis homed"\n\n\n{% elif not probe_attached and not probe_lock %}\n_KlickyDebug msg="Attach_Probe going to attach probe"\n{% if verbose %}\n{ action_respond_info("Attaching Probe") }\n{% endif %}\n_KLICKY_STATUS_BUSY\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% if not enable_z_hop %}\n_KlickyDebug msg="Attach_Probe z_hop disabled"\n{% set safe_z = 0 %}\n{% endif %}\n{% endif %}\n\n\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero, duplicate?") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Umbilical_Path\n\n_entry_point function=Attach_Probe_intern\n\n\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n_DeployKlickyDock\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}"\nG0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}\n\n_RetractKlickyDock\n\n{% if ((printer.gcode_move.gcode_position.z < safe_z) or (docklocation_z != -128 and docklocation_z < safe_z ))%}\n_KlickyDebug msg="Attach_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\n_CheckProbe action=attach\n\n_exit_point function=Attach_Probe_intern move={goback}\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe locked not attaching probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already attached!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe already attached, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Attach_Probe\n{% else %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}'}, 'gcode_macro Dock_Probe': {'description': 'Docks Klicky Probe', 'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n{% if bypass_probe_docking == True %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}\n\n{% if bypass_probe_docking != True %}\n_entry_point function=Dock_Probe\n\n\n{% if probe_attached and not probe_lock %}\n_KLICKY_STATUS_BUSY\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Dock_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n_Umbilical_Path\n\n\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n\n_DeployKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\n\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}"\nG0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}\n{% endif %}\n\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}\n\n\n_RetractKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving away from the dock to G0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}\n\n\n{% if (printer.gcode_move.gcode_position.z < safe_z) %}\n_KlickyDebug msg="Dock_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\nG4 P1000\n_CheckProbe action=dock\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe locked not docking probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already docked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe already docked, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Dock_Probe move={goback}\n{% else %}\n_KlickyDebug msg="Dock_Probe probe docking bypassed, doing nothing"\n{% endif %}'}, 'gcode_macro PROBE_CALIBRATE': {'rename_existing': '_PROBE_CALIBRATE', 'description': 'Calibrate the probes z_offset with klicky automount', 'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_calibrate Axis homed"\n_KlickyDebug msg="probe_calibrate Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_CALIBRATE with the probe above the BED, check klicky_variables bed size!") }\n{% endif %}\n\n{% if bypass_probe_docking == False %}\n_CheckProbe action=query\nG90\nAttach_Probe back=1\n_KLICKY_STATUS_CALIBRATING_Z\n\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nM118 moving the toolhead 20 mm from the bed\n_KlickyDebug msg="probe_calibrate Moving Z up by 20mm"\nTESTZ Z=20\nM118 remove manually the probe and continue calibration\n_KLICKY_STATUS_READY\n{% else %}\n_KLICKY_STATUS_CALIBRATING_Z\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n_KLICKY_STATUS_READY\n{% endif %}'}, 'gcode_macro PROBE_ACCURACY': {'rename_existing': '_PROBE_ACCURACY', 'description': 'Probe Z-height accuracy at current XY position with klicky automount', 'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_accuracy Axis homed"\n_KlickyDebug msg="probe_accuracy Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n_entry_point function=PROBE_ACCURACY\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_ACCURACY with the probe above the BED, check klicky_variables bed size!") }\n{% endif%}\n\n_CheckProbe action=query\nAttach_Probe back=1\n\n_KlickyDebug msg="probe_accuracy calling klipper probe accuracy"\n_PROBE_ACCURACY {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nDock_Probe back=1\n\n_exit_point function=PROBE_ACCURACY move=1'}, 'force_move': {'enable_force_move': 'True'}, 'homing_override': {'axes': 'xyz', 'gcode': '\n\n_User_Variables\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n{% set kinematic_z = 0 %}\n{% set dock_on_zhome = printer["gcode_macro _User_Variables"].dock_on_zhome|default(True) %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set home_backoff_x = printer["gcode_macro _User_Variables"].home_backoff_x|default(0) %}\n{% set home_backoff_y = printer["gcode_macro _User_Variables"].home_backoff_y|default(0) %}\n{% set override_homing = printer["gcode_macro _User_Variables"].override_homing|default(\'\') %}\n\n\n_klicky_check_variables_version\n\n_CheckProbe action=query\n\n\n{% set home_x, home_y, home_z, leave_probe_attached = False, False, False, False %}\n\n{% if \'PROBE_LOCK\' in params%}\n{% if verbose %}\n{ action_respond_info("PROBE_LOCK = True") }\n{% endif %}\n{% set leave_probe_attached = True %}\n{% endif %}\n\n\n{% if not \'X\' in params\nand not \'Y\' in params\nand not \'Z\' in params %}\n\n{% set home_x, home_y, home_z = True, True, True %}\n_KlickyDebug msg="homing_override goint to home all axes"\n\n{% else %}\n{% if \'X\' in params %}\n{% set home_x = True %}\n_KlickyDebug msg="homing_override goint to home X"\n\n{% endif %}\n\n{% if \'Y\' in params %}\n{% set home_y = True %}\n_KlickyDebug msg="homing_override goint to home Y"\n{% endif %}\n\n{% if \'Z\' in params %}\n{% set home_z = True %}\n_KlickyDebug msg="homing_override goint to home Z"\n{% endif %}\n\n{% if \'X\' in params\nand \'Y\' in params\nand \'Z\' in params %}\n\n\n_Homing_Variables reset=1\n_KlickyDebug msg="homing_override goint to home all axes"\n{% endif %}\n\n{% endif %}\n\n_entry_point function=homing_override\n_KLICKY_STATUS_HOMING\n\n\n{% if \'z\' not in printer.toolhead.homed_axes %}\n{% if enable_z_hop == False %}\n_KlickyDebug msg="homing_override z_hop disabled"\n\n{% set kinematic_z = safe_z %}\n{% set safe_z = safe_z %}\n{% endif %}\n{% endif %}\n\n\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes and \'z\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("No axis homed") }\n{% endif %}\n_KlickyDebug msg="homing_override no axis homed, setting position as X=Y=0 Z={kinematic_z}"\nSET_KINEMATIC_POSITION X=0 Y=0 Z={kinematic_z}\nM400\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% if home_z != True %}\n_KlickyDebug msg="homing_override clearing axis homed state if not already homing Z"\nM84\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("X or Y not homed, forcing full G28") }\n{% endif %}\n{% set home_x, home_y, home_z = True, True, True %}\n{% endif %}\n{% endif %}\n\n\n{% if ((attachmove_y == 0 and override_homing == \'\' ) or (override_homing == \'Y\'))%}\n\n{% if home_y %}\n{% if override_homing == \'Y\' %}\n_KlickyDebug msg="homing_override Y homing first override, due to override_homing = Y"\n{% else %}\n_KlickyDebug msg="homing_override Y homing first override, due to attachmove_y = 0"\n{% endif %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y G28 Y0"\nG28 Y0\n\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop-home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n{% set home_y = False %}\n{% endif %}\n\n\n\n{% if home_x %}\n{% if verbose %}\n{ action_respond_info("Homing X") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in X homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_X"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_X external script to handle the X homing"\n_HOME_X\n{% else %}\n_KlickyDebug msg="homing_override Homing X, G28 X0"\nG28 X0\n\n{% if home_backoff_x != 0 %}\n{% if (printer.configfile.settings.stepper_x.position_endstop > (printer.configfile.settings.stepper_x.position_min|default(0) + printer.configfile.settings.stepper_x.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n\n{% if home_y %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y, G28 Y0"\nG28 Y0\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if verbose %}\n{ action_respond_info("Homing Z") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe configured as a virtual Z endstop attaching probe"\nAttach_Probe\n\n{% if leave_probe_attached %}\n_Probe_Lock\n{% endif %}\n{% elif dock_on_zhome == True %}\nDock_Probe\n{% endif %}\n\n_Home_Z_\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe no longer required, docking probe"\nDock_Probe\n{% elif dock_on_zhome == False %}\nDock_Probe\n{% endif %}\n{% endif %}\n_CheckProbe action=query\n\n\n_Park_Toolhead\n\n_exit_point function=homing_override\n_KLICKY_STATUS_READY'}, 'gcode_macro _Umbilical_Path': {'gcode': '\n{% set umbilical = printer["gcode_macro _User_Variables"].umbilical %}\n{% set umbilical_x = printer["gcode_macro _User_Variables"].umbilical_x %}\n{% set umbilical_y = printer["gcode_macro _User_Variables"].umbilical_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n\n{% if umbilical %}\n\n_entry_point function=Umbilical_Path\n\n_KlickyDebug msg="_Umbilical_Path moving to G0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}"\nG0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}\n\n_exit_point function=Umbilical_Path\n{% endif %}'}, 'gcode_macro _Home_Z_': {'gcode': '\n{% set z_endstop_x = printer["gcode_macro _Probe_Variables"].z_endstop_x %}\n{% set z_endstop_y = printer["gcode_macro _Probe_Variables"].z_endstop_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}    {% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Home_Z\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n{% else %}\n_KlickyDebug msg="_Home_Z_ XY Axis homed"\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="_Home_Z_ Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n\n\n_KlickyDebug msg="_Home_Z_ moving to Z endstop position G0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}"\nG0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}\n_KlickyDebug msg="_Home_Z_ Homing Z G28 Z"\nG28 Z0\n_KlickyDebug msg="_Home_Z_ toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_exit_point function=Home_Z'}, 'gcode_macro _CheckProbe': {'variable_probe_state': '0', 'gcode': '\nQuery_Probe\n_SetProbeState action={ params.ACTION }'}, 'gcode_macro _SetProbeState': {'gcode': '\n{% set query_probe_triggered = printer.probe.last_query %}\n{% set action  = params.ACTION|default(\'\') %}\n\n\n{% if query_probe_triggered %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ False }\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ True }\n{% endif %}\n\n{% if action == \'query\' %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_state VALUE={ query_probe_triggered }\n{% endif %}\n\n\n\n\n{% if not query_probe_triggered and action == \'dock\' %}\n{ action_raise_error("Probe dock failed!") }\n{% endif %}\n\n\n{% if query_probe_triggered and action == \'attach\' %}\n{ action_raise_error("Probe attach failed!") }\n{% endif %}'}, 'gcode_macro _Park_Toolhead': {'gcode': '\n{% set park_toolhead = printer["gcode_macro _User_Variables"].park_toolhead %}\n{% set parkposition_x = printer["gcode_macro _User_Variables"].parkposition_x %}\n{% set parkposition_y = printer["gcode_macro _User_Variables"].parkposition_y %}\n{% set parkposition_z = printer["gcode_macro _User_Variables"].parkposition_z %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Park_Toolhead\n\n{% if park_toolhead and \'xyz\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Parking Toolhead") }\n{% endif %}\n{% if parkposition_z == -128 %}\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}\n\n{% else %}\n\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}\n\n{% endif %}\n\n{% endif %}\n_exit_point function=Park_Toolhead'}, 'gcode_macro _klicky_status_ready': {'gcode': '\n{% if printer[\'gcode_macro status_ready\'] is defined %}\n_KlickyDebug msg="_klicky_status_ready activating the LED STATUS_READY"\nSTATUS_READY\n{% endif %}'}, 'gcode_macro _klicky_status_busy': {'gcode': '\n{% if printer[\'gcode_macro status_busy\'] is defined %}\n_KlickyDebug msg="_klicky_status_busy activating the LED STATUS_BUSY"\nSTATUS_BUSY\n{% endif %}'}, 'gcode_macro _klicky_status_leveling': {'gcode': '\n{% if printer[\'gcode_macro status_leveling\'] is defined %}\n_KlickyDebug msg="_klicky_status_leveling activating the LED STATUS_LEVELING"\nSTATUS_LEVELING\n{% endif %}'}, 'gcode_macro _klicky_status_homing': {'gcode': '\n{% if printer[\'gcode_macro status_homing\'] is defined %}\n_KlickyDebug msg="_klicky_status_homing activating the LED STATUS_HOMING"\nSTATUS_HOMING\n{% endif %}'}, 'gcode_macro _klicky_status_cleaning': {'gcode': '\n{% if printer[\'gcode_macro status_cleaning\'] is defined %}\n_KlickyDebug msg="_klicky_status_cleaning activating the LED STATUS_CLEANING"\nSTATUS_CLEANING\n{% endif %}'}, 'gcode_macro _klicky_status_meshing': {'gcode': '\n{% if printer[\'gcode_macro status_meshing\'] is defined %}\n_KlickyDebug msg="_klicky_status_meshing activating the LED STATUS_MESHING"\nSTATUS_MESHING\n{% endif %}'}, 'gcode_macro _klicky_status_calibrating_z': {'gcode': '\n{% if printer[\'gcode_macro status_calibrating_z\'] is defined %}\n_KlickyDebug msg="_klicky_status_calibrating_z activating the LED STATUS_CALIBRATING_Z"\nSTATUS_CALIBRATING_Z\n{% endif %}'}, 'z_calibration': {'nozzle_xy_position': '172, 301', 'switch_xy_position': '171.5, 282', 'bed_xy_position': '150, 150', 'switch_offset': '0.09', 'offset_margins': '-1.0,1.0', 'speed': '50', 'probing_first_fast': 'false', 'start_gcode': 'Attach_Probe', 'end_gcode': 'Dock_Probe'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_28003C001150535556323420-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '^PG6', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '25', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'PG9', 'position_min': '0', 'position_endstop': '300', 'position_max': '303.5', 'homing_speed': '25', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': '!PG3', 'enable_pin': '!PG5', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'PG10', 'position_max': '290', 'position_min': '-4.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3', 'position_endstop': '-0.711'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA0', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': '!PF10', 'enable_pin': '!PG2', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PC13', 'dir_pin': 'PF0', 'enable_pin': '!PF1', 'rotation_distance': '21.9459674016', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.75', 'heater_pin': 'PA1', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF4', 'min_temp': '10', 'max_temp': '270', 'max_power': '1.0', 'min_extrude_temp': '170', 'pressure_advance': '0.05', 'pressure_advance_smooth_time': '0.040', 'control': 'pid', 'pid_kp': '26.572', 'pid_ki': '2.036', 'pid_kd': '86.691'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.5', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PA2', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF3', 'max_power': '1', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '55.196', 'pid_ki': '2.091', 'pid_kd': '364.295'}, 'probe': {'pin': 'PG15', 'x_offset': '0', 'y_offset': '25.0', 'z_offset': '0', 'speed': '10.0', 'samples': '5', 'samples_result': 'median', 'sample_retract_dist': '3.0', 'samples_tolerance': '0.006', 'samples_tolerance_retries': '6'}, 'fan': {'pin': 'PA8', 'kick_start_time': '0.5', 'off_below': '0.10'}, 'heater_fan hotend_fan': {'pin': 'PE5', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'controller_fan controller_fan': {'pin': 'PD12', 'kick_start_time': '0.5', 'heater': 'heater_bed'}, 'heater_fan exhaust_fan': {'pin': 'PD13', 'max_power': '1.0', 'shutdown_speed': '0.0', 'kick_start_time': '5.0', 'heater': 'heater_bed', 'heater_temp': '60', 'fan_speed': '1.0'}, 'output_pin caselight': {'pin': 'PD15', 'pwm': 'true', 'shutdown_value': '0', 'value': '1', 'cycle_time': '0.01'}, 'neopixel headlight': {'pin': 'PB0', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '0.0', 'initial_green': '0.2157', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'temperature_sensor chamber_temp': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF5', 'min_temp': '0', 'max_temp': '100', 'gcode_id': 'chamber_th'}, 'idle_timeout': {'timeout': '1800'}, 'z_tilt': {'z_positions': '\n-50, 18\n150, 348\n350, 18', 'points': '\n30, 5\n150, 245\n270, 5', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'gcode_macro _User_Variables': {'variable_verbose': 'True', 'variable_debug': 'False', 'variable_travel_speed': '200', 'variable_move_accel': '1000', 'variable_dock_speed': '50', 'variable_release_speed': '75', 'variable_z_drop_speed': '20', 'variable_safe_z': '25', 'variable_enable_z_hop': 'True', 'variable_max_bed_y': '300', 'variable_max_bed_x': '300', 'variable_z_endstop_x': '172', 'variable_z_endstop_y': '301', 'variable_docklocation_x': '40.5', 'variable_docklocation_y': '303.5', 'variable_docklocation_z': '-128', 'variable_enable_dock_servo': 'False', 'variable_servo_name': "'NAME'", 'variable_servo_deploy': '10', 'variable_servo_retract': '11', 'variable_servo_delay': '250', 'variable_dockmove_x': '40', 'variable_dockmove_y': '0', 'variable_dockmove_z': '0', 'variable_attachmove_x': '0', 'variable_attachmove_y': '30', 'variable_attachmove_z': '0', 'variable_umbilical': 'False', 'variable_umbilical_x': '15', 'variable_umbilical_y': '15', 'variable_park_toolhead': 'False', 'variable_parkposition_x': '125', 'variable_parkposition_y': '125', 'variable_parkposition_z': '30', 'variable_version': '1', 'variable_attachmove2_x': '0', 'variable_attachmove2_y': '0', 'variable_attachmove2_z': '0', 'variable_home_backoff_x': '10', 'variable_home_backoff_y': '10', 'variable_override_homing': "''", 'variable_dock_on_zhome': 'True', 'gcode': '\n{% set Mx = printer[\'configfile\'].config["stepper_x"]["position_max"]|float %}\n{% set My = printer[\'configfile\'].config["stepper_y"]["position_max"]|float %}\n{% set Ox = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set Oy = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set Oz = printer[\'configfile\'].config["probe"]["z_offset"]|float %}\n\n\n{% if z_endstop_x != 0 or z_endstop_y != 0 %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ z_endstop_x }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ z_endstop_y }\n\n\n{% else %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ (Mx * 0.5) - Ox }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ (My * 0.5) - Oy }\n{% endif %}'}, 'gcode_macro PRINT_START': {'gcode': '\nM117 Homing...\nG28\nATTACH_PROBE\nZ_TILT_ADJUST\nDOCK_PROBE\nG28\n\n\n\n\n\n\n\nG0 X150 Y150 Z30 F3600'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_28003C001150535556323420-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro _probe_variables': {'gcode': '', 'description': 'G-Code macro', 'variable_probe_attached': 'False', 'variable_probe_state': 'False', 'variable_probe_lock': 'False', 'variable_probe_z_homed': 'False', 'variable_z_endstop_x': '0', 'variable_z_endstop_y': '0'}, 'gcode_macro _klicky_check_variables_version': {'gcode': '\n{% set version = printer["gcode_macro _User_Variables"].version|default(0) %}\n\n{% if version != 1 %}\n{ action_raise_error("Please update your klicky variables, there are some functionality changes") }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klickydebug': {'gcode': '\n{% set message  = params.MSG %}\n{% set debug = printer["gcode_macro _User_Variables"].debug|default(False) %}\n\n{% if debug %}\n{ action_respond_info(message) }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _exit_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move  = params.MOVE|default(0) %}\n{% set speed = printer["gcode_macro _User_Variables"].travel_speed %}\n\n\nM400\nSET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\nRESTORE_GCODE_STATE NAME={function} MOVE={move} MOVE_SPEED={speed}', 'description': 'G-Code macro'}, 'gcode_macro _entry_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move_accel = printer["gcode_macro _User_Variables"].move_accel|default(1000) %}\n\nM400\nSAVE_GCODE_STATE NAME={function}\n\nSET_GCODE_OFFSET Z=0\n\nG90\n\nSET_VELOCITY_LIMIT ACCEL={move_accel}', 'description': 'G-Code macro'}, 'gcode_macro _homing_variables': {'gcode': '\n{% set reset  = params.RESET|default(0) %}\n{% if reset %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro attach_probe_lock': {'gcode': '\nAttach_Probe\n_Probe_Lock', 'description': 'Attaches Klicky Probe, can only be docked after unlocking'}, 'gcode_macro dock_probe_unlock': {'gcode': '\n_Probe_Unlock\nDock_Probe', 'description': 'Docks Klicky Probe even if it was locked'}, 'gcode_macro _probe_unlock': {'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to False"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }', 'description': 'Unlocks Klicky Probe state'}, 'gcode_macro _probe_lock': {'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to True"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ True }', 'description': 'Locks Klicky Probe state'}, 'gcode_macro _deployklickydock': {'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_deploy = printer["gcode_macro _User_Variables"].servo_deploy|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_DeployKlickyDock Klicky servo configuration enabled"\n{% if servo_deploy == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo deploy angle specified") }\n{% endif %}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _DeployDock"] is defined %}\n_KlickyDebug msg="_DeployKlickyDock calling _DeployDock"\n_DeployDock\n{% endif %}', 'description': 'Deploys Klicky servo-controlled dock'}, 'gcode_macro _retractklickydock': {'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_retract = printer["gcode_macro _User_Variables"].servo_retract|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_RetractKlickyDock Klicky servo configuration enabled"\n{% if servo_retract == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo retract angle specified") }\n{% endif %}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _RetractDock"] is defined %}\n_KlickyDebug msg="_RetractKlickyDock calling _RetractDock"\n_RetractDock\n{% endif %}', 'description': 'Retracts Klicky servo-controlled dock'}, 'gcode_macro attach_probe': {'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set attachmove2_x = printer["gcode_macro _User_Variables"].attachmove2_x|default(0) %}\n{% set attachmove2_y = printer["gcode_macro _User_Variables"].attachmove2_y|default(0) %}\n{% set attachmove2_z = printer["gcode_macro _User_Variables"].attachmove2_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n_entry_point function=Attach_Probe\n\n{% if bypass_probe_docking == False %}\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n_KlickyDebug msg="Attach_Probe Axis homed"\n\n\n{% elif not probe_attached and not probe_lock %}\n_KlickyDebug msg="Attach_Probe going to attach probe"\n{% if verbose %}\n{ action_respond_info("Attaching Probe") }\n{% endif %}\n_KLICKY_STATUS_BUSY\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% if not enable_z_hop %}\n_KlickyDebug msg="Attach_Probe z_hop disabled"\n{% set safe_z = 0 %}\n{% endif %}\n{% endif %}\n\n\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero, duplicate?") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Umbilical_Path\n\n_entry_point function=Attach_Probe_intern\n\n\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n_DeployKlickyDock\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}"\nG0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}\n\n_RetractKlickyDock\n\n{% if ((printer.gcode_move.gcode_position.z < safe_z) or (docklocation_z != -128 and docklocation_z < safe_z ))%}\n_KlickyDebug msg="Attach_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\n_CheckProbe action=attach\n\n_exit_point function=Attach_Probe_intern move={goback}\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe locked not attaching probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already attached!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe already attached, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Attach_Probe\n{% else %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}', 'description': 'Attaches Klicky Probe'}, 'gcode_macro dock_probe': {'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n{% if bypass_probe_docking == True %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}\n\n{% if bypass_probe_docking != True %}\n_entry_point function=Dock_Probe\n\n\n{% if probe_attached and not probe_lock %}\n_KLICKY_STATUS_BUSY\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Dock_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n_Umbilical_Path\n\n\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n\n_DeployKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\n\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}"\nG0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}\n{% endif %}\n\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}\n\n\n_RetractKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving away from the dock to G0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}\n\n\n{% if (printer.gcode_move.gcode_position.z < safe_z) %}\n_KlickyDebug msg="Dock_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\nG4 P1000\n_CheckProbe action=dock\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe locked not docking probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already docked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe already docked, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Dock_Probe move={goback}\n{% else %}\n_KlickyDebug msg="Dock_Probe probe docking bypassed, doing nothing"\n{% endif %}', 'description': 'Docks Klicky Probe'}, 'gcode_macro probe_calibrate': {'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_calibrate Axis homed"\n_KlickyDebug msg="probe_calibrate Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_CALIBRATE with the probe above the BED, check klicky_variables bed size!") }\n{% endif %}\n\n{% if bypass_probe_docking == False %}\n_CheckProbe action=query\nG90\nAttach_Probe back=1\n_KLICKY_STATUS_CALIBRATING_Z\n\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nM118 moving the toolhead 20 mm from the bed\n_KlickyDebug msg="probe_calibrate Moving Z up by 20mm"\nTESTZ Z=20\nM118 remove manually the probe and continue calibration\n_KLICKY_STATUS_READY\n{% else %}\n_KLICKY_STATUS_CALIBRATING_Z\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n_KLICKY_STATUS_READY\n{% endif %}', 'rename_existing': '_PROBE_CALIBRATE', 'description': 'Calibrate the probes z_offset with klicky automount'}, 'gcode_macro probe_accuracy': {'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_accuracy Axis homed"\n_KlickyDebug msg="probe_accuracy Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n_entry_point function=PROBE_ACCURACY\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_ACCURACY with the probe above the BED, check klicky_variables bed size!") }\n{% endif%}\n\n_CheckProbe action=query\nAttach_Probe back=1\n\n_KlickyDebug msg="probe_accuracy calling klipper probe accuracy"\n_PROBE_ACCURACY {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nDock_Probe back=1\n\n_exit_point function=PROBE_ACCURACY move=1', 'rename_existing': '_PROBE_ACCURACY', 'description': 'Probe Z-height accuracy at current XY position with klicky automount'}, 'force_move': {'enable_force_move': True}, 'homing_override': {'axes': 'xyz', 'gcode': '\n\n_User_Variables\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n{% set kinematic_z = 0 %}\n{% set dock_on_zhome = printer["gcode_macro _User_Variables"].dock_on_zhome|default(True) %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set home_backoff_x = printer["gcode_macro _User_Variables"].home_backoff_x|default(0) %}\n{% set home_backoff_y = printer["gcode_macro _User_Variables"].home_backoff_y|default(0) %}\n{% set override_homing = printer["gcode_macro _User_Variables"].override_homing|default(\'\') %}\n\n\n_klicky_check_variables_version\n\n_CheckProbe action=query\n\n\n{% set home_x, home_y, home_z, leave_probe_attached = False, False, False, False %}\n\n{% if \'PROBE_LOCK\' in params%}\n{% if verbose %}\n{ action_respond_info("PROBE_LOCK = True") }\n{% endif %}\n{% set leave_probe_attached = True %}\n{% endif %}\n\n\n{% if not \'X\' in params\nand not \'Y\' in params\nand not \'Z\' in params %}\n\n{% set home_x, home_y, home_z = True, True, True %}\n_KlickyDebug msg="homing_override goint to home all axes"\n\n{% else %}\n{% if \'X\' in params %}\n{% set home_x = True %}\n_KlickyDebug msg="homing_override goint to home X"\n\n{% endif %}\n\n{% if \'Y\' in params %}\n{% set home_y = True %}\n_KlickyDebug msg="homing_override goint to home Y"\n{% endif %}\n\n{% if \'Z\' in params %}\n{% set home_z = True %}\n_KlickyDebug msg="homing_override goint to home Z"\n{% endif %}\n\n{% if \'X\' in params\nand \'Y\' in params\nand \'Z\' in params %}\n\n\n_Homing_Variables reset=1\n_KlickyDebug msg="homing_override goint to home all axes"\n{% endif %}\n\n{% endif %}\n\n_entry_point function=homing_override\n_KLICKY_STATUS_HOMING\n\n\n{% if \'z\' not in printer.toolhead.homed_axes %}\n{% if enable_z_hop == False %}\n_KlickyDebug msg="homing_override z_hop disabled"\n\n{% set kinematic_z = safe_z %}\n{% set safe_z = safe_z %}\n{% endif %}\n{% endif %}\n\n\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes and \'z\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("No axis homed") }\n{% endif %}\n_KlickyDebug msg="homing_override no axis homed, setting position as X=Y=0 Z={kinematic_z}"\nSET_KINEMATIC_POSITION X=0 Y=0 Z={kinematic_z}\nM400\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% if home_z != True %}\n_KlickyDebug msg="homing_override clearing axis homed state if not already homing Z"\nM84\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("X or Y not homed, forcing full G28") }\n{% endif %}\n{% set home_x, home_y, home_z = True, True, True %}\n{% endif %}\n{% endif %}\n\n\n{% if ((attachmove_y == 0 and override_homing == \'\' ) or (override_homing == \'Y\'))%}\n\n{% if home_y %}\n{% if override_homing == \'Y\' %}\n_KlickyDebug msg="homing_override Y homing first override, due to override_homing = Y"\n{% else %}\n_KlickyDebug msg="homing_override Y homing first override, due to attachmove_y = 0"\n{% endif %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y G28 Y0"\nG28 Y0\n\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop-home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n{% set home_y = False %}\n{% endif %}\n\n\n\n{% if home_x %}\n{% if verbose %}\n{ action_respond_info("Homing X") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in X homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_X"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_X external script to handle the X homing"\n_HOME_X\n{% else %}\n_KlickyDebug msg="homing_override Homing X, G28 X0"\nG28 X0\n\n{% if home_backoff_x != 0 %}\n{% if (printer.configfile.settings.stepper_x.position_endstop > (printer.configfile.settings.stepper_x.position_min|default(0) + printer.configfile.settings.stepper_x.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n\n{% if home_y %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y, G28 Y0"\nG28 Y0\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if verbose %}\n{ action_respond_info("Homing Z") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe configured as a virtual Z endstop attaching probe"\nAttach_Probe\n\n{% if leave_probe_attached %}\n_Probe_Lock\n{% endif %}\n{% elif dock_on_zhome == True %}\nDock_Probe\n{% endif %}\n\n_Home_Z_\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe no longer required, docking probe"\nDock_Probe\n{% elif dock_on_zhome == False %}\nDock_Probe\n{% endif %}\n{% endif %}\n_CheckProbe action=query\n\n\n_Park_Toolhead\n\n_exit_point function=homing_override\n_KLICKY_STATUS_READY'}, 'gcode_macro _umbilical_path': {'gcode': '\n{% set umbilical = printer["gcode_macro _User_Variables"].umbilical %}\n{% set umbilical_x = printer["gcode_macro _User_Variables"].umbilical_x %}\n{% set umbilical_y = printer["gcode_macro _User_Variables"].umbilical_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n\n{% if umbilical %}\n\n_entry_point function=Umbilical_Path\n\n_KlickyDebug msg="_Umbilical_Path moving to G0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}"\nG0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}\n\n_exit_point function=Umbilical_Path\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _home_z_': {'gcode': '\n{% set z_endstop_x = printer["gcode_macro _Probe_Variables"].z_endstop_x %}\n{% set z_endstop_y = printer["gcode_macro _Probe_Variables"].z_endstop_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}    {% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Home_Z\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n{% else %}\n_KlickyDebug msg="_Home_Z_ XY Axis homed"\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="_Home_Z_ Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n\n\n_KlickyDebug msg="_Home_Z_ moving to Z endstop position G0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}"\nG0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}\n_KlickyDebug msg="_Home_Z_ Homing Z G28 Z"\nG28 Z0\n_KlickyDebug msg="_Home_Z_ toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_exit_point function=Home_Z', 'description': 'G-Code macro'}, 'gcode_macro _checkprobe': {'gcode': '\nQuery_Probe\n_SetProbeState action={ params.ACTION }', 'description': 'G-Code macro', 'variable_probe_state': '0'}, 'gcode_macro _setprobestate': {'gcode': '\n{% set query_probe_triggered = printer.probe.last_query %}\n{% set action  = params.ACTION|default(\'\') %}\n\n\n{% if query_probe_triggered %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ False }\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ True }\n{% endif %}\n\n{% if action == \'query\' %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_state VALUE={ query_probe_triggered }\n{% endif %}\n\n\n\n\n{% if not query_probe_triggered and action == \'dock\' %}\n{ action_raise_error("Probe dock failed!") }\n{% endif %}\n\n\n{% if query_probe_triggered and action == \'attach\' %}\n{ action_raise_error("Probe attach failed!") }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _park_toolhead': {'gcode': '\n{% set park_toolhead = printer["gcode_macro _User_Variables"].park_toolhead %}\n{% set parkposition_x = printer["gcode_macro _User_Variables"].parkposition_x %}\n{% set parkposition_y = printer["gcode_macro _User_Variables"].parkposition_y %}\n{% set parkposition_z = printer["gcode_macro _User_Variables"].parkposition_z %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Park_Toolhead\n\n{% if park_toolhead and \'xyz\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Parking Toolhead") }\n{% endif %}\n{% if parkposition_z == -128 %}\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}\n\n{% else %}\n\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}\n\n{% endif %}\n\n{% endif %}\n_exit_point function=Park_Toolhead', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_ready': {'gcode': '\n{% if printer[\'gcode_macro status_ready\'] is defined %}\n_KlickyDebug msg="_klicky_status_ready activating the LED STATUS_READY"\nSTATUS_READY\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_busy': {'gcode': '\n{% if printer[\'gcode_macro status_busy\'] is defined %}\n_KlickyDebug msg="_klicky_status_busy activating the LED STATUS_BUSY"\nSTATUS_BUSY\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_leveling': {'gcode': '\n{% if printer[\'gcode_macro status_leveling\'] is defined %}\n_KlickyDebug msg="_klicky_status_leveling activating the LED STATUS_LEVELING"\nSTATUS_LEVELING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_homing': {'gcode': '\n{% if printer[\'gcode_macro status_homing\'] is defined %}\n_KlickyDebug msg="_klicky_status_homing activating the LED STATUS_HOMING"\nSTATUS_HOMING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_cleaning': {'gcode': '\n{% if printer[\'gcode_macro status_cleaning\'] is defined %}\n_KlickyDebug msg="_klicky_status_cleaning activating the LED STATUS_CLEANING"\nSTATUS_CLEANING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_meshing': {'gcode': '\n{% if printer[\'gcode_macro status_meshing\'] is defined %}\n_KlickyDebug msg="_klicky_status_meshing activating the LED STATUS_MESHING"\nSTATUS_MESHING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_calibrating_z': {'gcode': '\n{% if printer[\'gcode_macro status_calibrating_z\'] is defined %}\n_KlickyDebug msg="_klicky_status_calibrating_z activating the LED STATUS_CALIBRATING_Z"\nSTATUS_CALIBRATING_Z\n{% endif %}', 'description': 'G-Code macro'}, 'z_calibration': {'switch_offset': 0.09, 'offset_margins': '-1.0,1.0', 'speed': 50.0, 'samples_result': 'none', 'probing_first_fast': False, 'nozzle_xy_position': '172, 301', 'switch_xy_position': '171.5, 282', 'bed_xy_position': '150, 150', 'start_gcode': 'Attach_Probe', 'before_switch_gcode': '', 'end_gcode': 'Dock_Probe'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': '^PG6', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'PG9', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 303.5, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PF11', 'dir_pin': '!PG3', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG5', 'endstop_pin': 'PG10', 'position_endstop': -0.711, 'position_min': -4.5, 'position_max': 290.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA0'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PF9', 'dir_pin': '!PF10', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG2'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF4', 'min_temp': 10.0, 'max_temp': 270.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 26.572, 'pid_ki': 2.036, 'pid_kd': 86.691, 'heater_pin': 'PA1', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PC13', 'pressure_advance': 0.05, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'PF0', 'rotation_distance': 21.9459674016, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 55.196, 'pid_ki': 2.091, 'pid_kd': 364.295, 'heater_pin': 'PA2', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'probe': {'z_offset': 0.0, 'deactivate_on_each_sample': True, 'activate_gcode': '', 'deactivate_gcode': '', 'pin': 'PG15', 'speed': 10.0, 'lift_speed': 10.0, 'x_offset': 0.0, 'y_offset': 25.0, 'samples': 5, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.006, 'samples_tolerance_retries': 6}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE5', 'fan_speed': 1.0}, 'controller_fan controller_fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD12', 'fan_speed': 1.0, 'idle_speed': 1.0, 'idle_timeout': 30, 'heater': ['heater_bed']}, 'heater_fan exhaust_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 5.0, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13', 'fan_speed': 1.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PD15', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 1.0, 'maximum_mcu_duration': 0.0, 'value': 1.0, 'shutdown_value': 0.0}, 'neopixel headlight': {'pin': 'PB0', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 0.0, 'initial_green': 0.2157, 'initial_blue': 1.0, 'initial_white': 0.0}, 'temperature_sensor chamber_temp': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF5', 'min_temp': 0.0, 'max_temp': 100.0, 'gcode_id': 'chamber_th'}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [150.0, 348.0], [350.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 5.0], [150.0, 245.0], [270.0, 5.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'gcode_macro _user_variables': {'gcode': '\n{% set Mx = printer[\'configfile\'].config["stepper_x"]["position_max"]|float %}\n{% set My = printer[\'configfile\'].config["stepper_y"]["position_max"]|float %}\n{% set Ox = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set Oy = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set Oz = printer[\'configfile\'].config["probe"]["z_offset"]|float %}\n\n\n{% if z_endstop_x != 0 or z_endstop_y != 0 %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ z_endstop_x }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ z_endstop_y }\n\n\n{% else %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ (Mx * 0.5) - Ox }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ (My * 0.5) - Oy }\n{% endif %}', 'description': 'G-Code macro', 'variable_verbose': 'True', 'variable_debug': 'False', 'variable_travel_speed': '200', 'variable_move_accel': '1000', 'variable_dock_speed': '50', 'variable_release_speed': '75', 'variable_z_drop_speed': '20', 'variable_safe_z': '25', 'variable_enable_z_hop': 'True', 'variable_max_bed_y': '300', 'variable_max_bed_x': '300', 'variable_z_endstop_x': '172', 'variable_z_endstop_y': '301', 'variable_docklocation_x': '40.5', 'variable_docklocation_y': '303.5', 'variable_docklocation_z': '-128', 'variable_enable_dock_servo': 'False', 'variable_servo_name': "'NAME'", 'variable_servo_deploy': '10', 'variable_servo_retract': '11', 'variable_servo_delay': '250', 'variable_dockmove_x': '40', 'variable_dockmove_y': '0', 'variable_dockmove_z': '0', 'variable_attachmove_x': '0', 'variable_attachmove_y': '30', 'variable_attachmove_z': '0', 'variable_umbilical': 'False', 'variable_umbilical_x': '15', 'variable_umbilical_y': '15', 'variable_park_toolhead': 'False', 'variable_parkposition_x': '125', 'variable_parkposition_y': '125', 'variable_parkposition_z': '30', 'variable_version': '1', 'variable_attachmove2_x': '0', 'variable_attachmove2_y': '0', 'variable_attachmove2_z': '0', 'variable_home_backoff_x': '10', 'variable_home_backoff_y': '10', 'variable_override_homing': "''", 'variable_dock_on_zhome': 'True'}, 'gcode_macro print_start': {'gcode': '\nM117 Homing...\nG28\nATTACH_PROBE\nZ_TILT_ADJUST\nDOCK_PROBE\nG28\n\n\n\n\n\n\n\nG0 X150 Y150 Z30 F3600', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1500.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-02-15 22:32:43,930 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-15 22:32:43,930 [printer.py:reinit()] - Klipper version: v0.12.0-103-g6ce6fbbc-dirty
2024-02-15 22:32:43,930 [printer.py:reinit()] - # Extruders: 1
2024-02-15 22:32:43,930 [printer.py:reinit()] - # Temperature devices: 2
2024-02-15 22:32:43,930 [printer.py:reinit()] - # Fans: 4
2024-02-15 22:32:43,931 [printer.py:reinit()] - # Output pins: 1
2024-02-15 22:32:43,931 [printer.py:reinit()] - # Leds: 1
2024-02-15 22:32:43,948 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2024-02-15 22:32:43,949 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-02-15 22:32:44,218 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor chamber_temp&fan&controller_fan controller_fan&heater_fan hotend_fan&heater_fan exhaust_fan&output_pin caselight&neopixel headlight
2024-02-15 22:32:44,221 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-02-15 22:32:44,222 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-02-15 22:32:44,223 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-02-15 22:32:44,224 [screen.py:init_klipper()] - Printer initialized
2024-02-15 22:32:44,224 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2024-02-15 22:32:44,224 [printer.py:change_state()] - Adding callback for state: ready
2024-02-15 22:32:44,227 [files.py:remove_file_callback()] - callback not found <bound method Panel._callback_metadata of <panels.job_status.Panel object at 0x7f682a76a0>>
2024-02-15 22:32:44,227 [screen.py:show_panel()] - Reinitializing panel
2024-02-15 22:32:44,280 [main_menu.py:__init__()] - ### Making MainMenu
2024-02-15 22:32:44,285 [main_menu.py:add_device()] - Adding device: extruder
2024-02-15 22:32:44,289 [main_menu.py:add_device()] - Adding device: heater_bed
2024-02-15 22:32:44,294 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber_temp
2024-02-15 22:32:44,319 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-02-15 22:32:44,334 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-02-15 22:32:44,338 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'temperature_sensor chamber_temp', 'extruder']
2024-02-15 22:32:44,347 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2024-02-15 22:32:44,348 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-02-15 22:32:48,259 [screen.py:_load_panel()] - Loading panel: print
2024-02-15 22:32:48,267 [print.py:__init__()] - 24h time is True
2024-02-15 22:32:48,305 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > print
2024-02-15 22:32:48,307 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-02-15 22:32:48,308 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-02-15 22:32:50,079 [KlippyGtk.py:Dialog()] - Showing dialog Print Voron_Design_Cube_v7_PETG_35m47s.gcode (width=800, height=480)
2024-02-15 22:32:51,238 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-02-15 22:32:51,239 [print.py:confirm_print_response()] - Starting print: Voron_Design_Cube_v7_PETG_35m47s.gcode
2024-02-15 22:32:51,239 [KlippyWebsocket.py:print_start()] - Sending printer.print.start
2024-02-15 22:32:51,252 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_DEFINE"
2024-02-15 22:32:51,432 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2024-02-15 22:32:51,433 [printer.py:change_state()] - Adding callback for state: printing
2024-02-15 22:32:51,435 [files.py:remove_file_callback()] - callback not found <bound method Panel._callback_metadata of <panels.job_status.Panel object at 0x7f682a76a0>>
2024-02-15 22:32:51,435 [screen.py:show_panel()] - Reinitializing panel
2024-02-15 22:32:51,530 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-02-15 22:32:51,535 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-02-15 22:32:51,543 [job_status.py:update_file_metadata()] - Update Metadata. File: Voron_Design_Cube_v7_PETG_35m47s.gcode Size: 2884279
2024-02-15 22:32:51,547 [job_status.py:show_file_thumbnail()] - Voron_Design_Cube_v7_PETG_35m47s.gcode
2024-02-15 22:33:49,628 [screen.py:_go_to_submenu()] - #### Go to submenu 
2024-02-15 22:33:49,628 [screen.py:_go_to_submenu()] - #### Menu __print
2024-02-15 22:33:49,637 [files.py:remove_file_callback()] - callback not found <bound method Panel._callback_metadata of <panels.job_status.Panel object at 0x7f682a76a0>>
2024-02-15 22:33:49,637 [screen.py:show_panel()] - Reinitializing panel
2024-02-15 22:33:49,804 [screen.py:attach_panel()] - Current panel hierarchy: job_status > 
2024-02-15 22:33:49,816 [menu.py:arrangeMenuItems()] - X > move
2024-02-15 22:33:49,821 [menu.py:arrangeMenuItems()] - X > power
2024-02-15 22:33:49,829 [menu.py:arrangeMenuItems()] - X > camera
2024-02-15 22:33:49,835 [menu.py:arrangeMenuItems()] - X > retraction
2024-02-15 22:33:49,839 [menu.py:arrangeMenuItems()] - X > spoolman
2024-02-15 22:33:51,001 [screen.py:show_panel()] - Reinitializing panel
2024-02-15 22:33:51,012 [temperature.py:add_device()] - Adding device: extruder
2024-02-15 22:33:51,018 [temperature.py:add_device()] - Adding device: heater_bed
2024-02-15 22:33:51,024 [temperature.py:add_device()] - Adding device: temperature_sensor chamber_temp
2024-02-15 22:33:51,053 [screen.py:attach_panel()] - Current panel hierarchy: job_status >  > temperature
2024-02-15 22:33:54,185 [temperature.py:verify_max_temp()] - 245/270
2024-02-15 22:33:54,185 [KlippyWebsocket.py:set_tool_temp()] - Sending set_tool_temp: M104 T0 S245
2024-02-15 22:34:30,469 [screen.py:_menu_go_back()] - #### Menu go back
2024-02-15 22:34:30,503 [screen.py:attach_panel()] - Current panel hierarchy: job_status > 
2024-02-15 22:34:30,524 [menu.py:arrangeMenuItems()] - X > move
2024-02-15 22:34:30,533 [menu.py:arrangeMenuItems()] - X > power
2024-02-15 22:34:30,546 [menu.py:arrangeMenuItems()] - X > camera
2024-02-15 22:34:30,555 [menu.py:arrangeMenuItems()] - X > retraction
2024-02-15 22:34:30,560 [menu.py:arrangeMenuItems()] - X > spoolman
2024-02-15 22:34:31,677 [screen.py:_menu_go_back()] - #### Menu go back
2024-02-15 22:34:31,695 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-02-15 22:34:31,706 [job_status.py:update_file_metadata()] - Update Metadata. File: Voron_Design_Cube_v7_PETG_35m47s.gcode Size: 2884279
2024-02-15 22:34:31,711 [job_status.py:show_file_thumbnail()] - Voron_Design_Cube_v7_PETG_35m47s.gcode
2024-02-15 22:34:32,882 [files.py:remove_file_callback()] - callback not found <bound method Panel._callback_metadata of <panels.job_status.Panel object at 0x7f682a76a0>>
2024-02-15 22:34:32,882 [screen.py:show_panel()] - Reinitializing panel
2024-02-15 22:34:32,932 [screen.py:attach_panel()] - Current panel hierarchy: job_status > fine_tune
2024-02-15 22:34:37,222 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=+0.05 MOVE=1'}
2024-02-15 22:35:15,365 [screen.py:_menu_go_back()] - #### Menu go back
2024-02-15 22:35:15,403 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-02-15 22:35:15,415 [job_status.py:update_file_metadata()] - Update Metadata. File: Voron_Design_Cube_v7_PETG_35m47s.gcode Size: 2884279
2024-02-15 22:35:15,422 [job_status.py:show_file_thumbnail()] - Voron_Design_Cube_v7_PETG_35m47s.gcode
2024-02-15 22:35:19,925 [files.py:remove_file_callback()] - callback not found <bound method Panel._callback_metadata of <panels.job_status.Panel object at 0x7f682a76a0>>
2024-02-15 22:35:19,942 [screen.py:attach_panel()] - Current panel hierarchy: job_status > fine_tune
2024-02-15 22:36:07,490 [KlippyWebsocket.py:emergency_stop()] - Sending printer.emergency_stop
2024-02-15 22:36:07,527 [printer.py:change_state()] - Changing state from 'printing' to 'shutdown'
2024-02-15 22:36:07,528 [printer.py:change_state()] - Adding callback for state: shutdown
2024-02-15 22:36:07,531 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-15 22:36:07,539 [files.py:remove_file_callback()] - callback not found <bound method Panel._callback_metadata of <panels.job_status.Panel object at 0x7f682a76a0>>
2024-02-15 22:36:07,539 [screen.py:show_panel()] - Reinitializing panel
2024-02-15 22:36:07,597 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-02-15 22:36:33,146 [KlippyWebsocket.py:restart_firmware()] - Sending printer.firmware_restart
2024-02-15 22:36:33,182 [printer.py:change_state()] - Changing state from 'shutdown' to 'disconnected'
2024-02-15 22:36:33,182 [printer.py:change_state()] - Adding callback for state: disconnected
2024-02-15 22:36:33,186 [screen.py:state_disconnected()] - ### Going to disconnected
2024-02-15 22:36:33,187 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-15 22:36:33,189 [files.py:remove_file_callback()] - callback not found <bound method Panel._callback_metadata of <panels.job_status.Panel object at 0x7f682a76a0>>
2024-02-15 22:36:33,190 [screen.py:show_panel()] - Reinitializing panel
2024-02-15 22:36:33,239 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-02-15 22:36:36,742 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-15 22:36:36,750 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2024-02-15 22:36:36,751 [printer.py:configure_cameras()] - Cameras: []
2024-02-15 22:36:36,751 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'octoprint_compat', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-310-g67c98f6', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-02-15 22:36:36,760 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2024-02-15 22:36:36,927 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2024-02-15 22:36:36,930 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro _Probe_Variables': {'variable_probe_attached': 'False', 'variable_probe_state': 'False', 'variable_probe_lock': 'False', 'variable_probe_z_homed': 'False', 'variable_z_endstop_x': '0', 'variable_z_endstop_y': '0', 'gcode': ''}, 'gcode_macro _klicky_check_variables_version': {'gcode': '\n{% set version = printer["gcode_macro _User_Variables"].version|default(0) %}\n\n{% if version != 1 %}\n{ action_raise_error("Please update your klicky variables, there are some functionality changes") }\n{% endif %}'}, 'gcode_macro _KlickyDebug': {'gcode': '\n{% set message  = params.MSG %}\n{% set debug = printer["gcode_macro _User_Variables"].debug|default(False) %}\n\n{% if debug %}\n{ action_respond_info(message) }\n{% endif %}'}, 'gcode_macro _exit_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move  = params.MOVE|default(0) %}\n{% set speed = printer["gcode_macro _User_Variables"].travel_speed %}\n\n\nM400\nSET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\nRESTORE_GCODE_STATE NAME={function} MOVE={move} MOVE_SPEED={speed}'}, 'gcode_macro _entry_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move_accel = printer["gcode_macro _User_Variables"].move_accel|default(1000) %}\n\nM400\nSAVE_GCODE_STATE NAME={function}\n\nSET_GCODE_OFFSET Z=0\n\nG90\n\nSET_VELOCITY_LIMIT ACCEL={move_accel}'}, 'gcode_macro _Homing_Variables': {'gcode': '\n{% set reset  = params.RESET|default(0) %}\n{% if reset %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }\n{% endif %}'}, 'gcode_macro Attach_Probe_Lock': {'description': 'Attaches Klicky Probe, can only be docked after unlocking', 'gcode': '\nAttach_Probe\n_Probe_Lock'}, 'gcode_macro Dock_Probe_Unlock': {'description': 'Docks Klicky Probe even if it was locked', 'gcode': '\n_Probe_Unlock\nDock_Probe'}, 'gcode_macro _Probe_Unlock': {'description': 'Unlocks Klicky Probe state', 'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to False"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }'}, 'gcode_macro _Probe_Lock': {'description': 'Locks Klicky Probe state', 'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to True"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ True }'}, 'gcode_macro _DeployKlickyDock': {'description': 'Deploys Klicky servo-controlled dock', 'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_deploy = printer["gcode_macro _User_Variables"].servo_deploy|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_DeployKlickyDock Klicky servo configuration enabled"\n{% if servo_deploy == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo deploy angle specified") }\n{% endif %}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _DeployDock"] is defined %}\n_KlickyDebug msg="_DeployKlickyDock calling _DeployDock"\n_DeployDock\n{% endif %}'}, 'gcode_macro _RetractKlickyDock': {'description': 'Retracts Klicky servo-controlled dock', 'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_retract = printer["gcode_macro _User_Variables"].servo_retract|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_RetractKlickyDock Klicky servo configuration enabled"\n{% if servo_retract == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo retract angle specified") }\n{% endif %}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _RetractDock"] is defined %}\n_KlickyDebug msg="_RetractKlickyDock calling _RetractDock"\n_RetractDock\n{% endif %}'}, 'gcode_macro Attach_Probe': {'description': 'Attaches Klicky Probe', 'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set attachmove2_x = printer["gcode_macro _User_Variables"].attachmove2_x|default(0) %}\n{% set attachmove2_y = printer["gcode_macro _User_Variables"].attachmove2_y|default(0) %}\n{% set attachmove2_z = printer["gcode_macro _User_Variables"].attachmove2_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n_entry_point function=Attach_Probe\n\n{% if bypass_probe_docking == False %}\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n_KlickyDebug msg="Attach_Probe Axis homed"\n\n\n{% elif not probe_attached and not probe_lock %}\n_KlickyDebug msg="Attach_Probe going to attach probe"\n{% if verbose %}\n{ action_respond_info("Attaching Probe") }\n{% endif %}\n_KLICKY_STATUS_BUSY\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% if not enable_z_hop %}\n_KlickyDebug msg="Attach_Probe z_hop disabled"\n{% set safe_z = 0 %}\n{% endif %}\n{% endif %}\n\n\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero, duplicate?") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Umbilical_Path\n\n_entry_point function=Attach_Probe_intern\n\n\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n_DeployKlickyDock\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}"\nG0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}\n\n_RetractKlickyDock\n\n{% if ((printer.gcode_move.gcode_position.z < safe_z) or (docklocation_z != -128 and docklocation_z < safe_z ))%}\n_KlickyDebug msg="Attach_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\n_CheckProbe action=attach\n\n_exit_point function=Attach_Probe_intern move={goback}\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe locked not attaching probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already attached!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe already attached, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Attach_Probe\n{% else %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}'}, 'gcode_macro Dock_Probe': {'description': 'Docks Klicky Probe', 'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n{% if bypass_probe_docking == True %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}\n\n{% if bypass_probe_docking != True %}\n_entry_point function=Dock_Probe\n\n\n{% if probe_attached and not probe_lock %}\n_KLICKY_STATUS_BUSY\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Dock_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n_Umbilical_Path\n\n\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n\n_DeployKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\n\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}"\nG0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}\n{% endif %}\n\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}\n\n\n_RetractKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving away from the dock to G0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}\n\n\n{% if (printer.gcode_move.gcode_position.z < safe_z) %}\n_KlickyDebug msg="Dock_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\nG4 P1000\n_CheckProbe action=dock\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe locked not docking probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already docked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe already docked, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Dock_Probe move={goback}\n{% else %}\n_KlickyDebug msg="Dock_Probe probe docking bypassed, doing nothing"\n{% endif %}'}, 'gcode_macro PROBE_CALIBRATE': {'rename_existing': '_PROBE_CALIBRATE', 'description': 'Calibrate the probes z_offset with klicky automount', 'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_calibrate Axis homed"\n_KlickyDebug msg="probe_calibrate Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_CALIBRATE with the probe above the BED, check klicky_variables bed size!") }\n{% endif %}\n\n{% if bypass_probe_docking == False %}\n_CheckProbe action=query\nG90\nAttach_Probe back=1\n_KLICKY_STATUS_CALIBRATING_Z\n\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nM118 moving the toolhead 20 mm from the bed\n_KlickyDebug msg="probe_calibrate Moving Z up by 20mm"\nTESTZ Z=20\nM118 remove manually the probe and continue calibration\n_KLICKY_STATUS_READY\n{% else %}\n_KLICKY_STATUS_CALIBRATING_Z\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n_KLICKY_STATUS_READY\n{% endif %}'}, 'gcode_macro PROBE_ACCURACY': {'rename_existing': '_PROBE_ACCURACY', 'description': 'Probe Z-height accuracy at current XY position with klicky automount', 'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_accuracy Axis homed"\n_KlickyDebug msg="probe_accuracy Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n_entry_point function=PROBE_ACCURACY\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_ACCURACY with the probe above the BED, check klicky_variables bed size!") }\n{% endif%}\n\n_CheckProbe action=query\nAttach_Probe back=1\n\n_KlickyDebug msg="probe_accuracy calling klipper probe accuracy"\n_PROBE_ACCURACY {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nDock_Probe back=1\n\n_exit_point function=PROBE_ACCURACY move=1'}, 'force_move': {'enable_force_move': 'True'}, 'homing_override': {'axes': 'xyz', 'gcode': '\n\n_User_Variables\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n{% set kinematic_z = 0 %}\n{% set dock_on_zhome = printer["gcode_macro _User_Variables"].dock_on_zhome|default(True) %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set home_backoff_x = printer["gcode_macro _User_Variables"].home_backoff_x|default(0) %}\n{% set home_backoff_y = printer["gcode_macro _User_Variables"].home_backoff_y|default(0) %}\n{% set override_homing = printer["gcode_macro _User_Variables"].override_homing|default(\'\') %}\n\n\n_klicky_check_variables_version\n\n_CheckProbe action=query\n\n\n{% set home_x, home_y, home_z, leave_probe_attached = False, False, False, False %}\n\n{% if \'PROBE_LOCK\' in params%}\n{% if verbose %}\n{ action_respond_info("PROBE_LOCK = True") }\n{% endif %}\n{% set leave_probe_attached = True %}\n{% endif %}\n\n\n{% if not \'X\' in params\nand not \'Y\' in params\nand not \'Z\' in params %}\n\n{% set home_x, home_y, home_z = True, True, True %}\n_KlickyDebug msg="homing_override goint to home all axes"\n\n{% else %}\n{% if \'X\' in params %}\n{% set home_x = True %}\n_KlickyDebug msg="homing_override goint to home X"\n\n{% endif %}\n\n{% if \'Y\' in params %}\n{% set home_y = True %}\n_KlickyDebug msg="homing_override goint to home Y"\n{% endif %}\n\n{% if \'Z\' in params %}\n{% set home_z = True %}\n_KlickyDebug msg="homing_override goint to home Z"\n{% endif %}\n\n{% if \'X\' in params\nand \'Y\' in params\nand \'Z\' in params %}\n\n\n_Homing_Variables reset=1\n_KlickyDebug msg="homing_override goint to home all axes"\n{% endif %}\n\n{% endif %}\n\n_entry_point function=homing_override\n_KLICKY_STATUS_HOMING\n\n\n{% if \'z\' not in printer.toolhead.homed_axes %}\n{% if enable_z_hop == False %}\n_KlickyDebug msg="homing_override z_hop disabled"\n\n{% set kinematic_z = safe_z %}\n{% set safe_z = safe_z %}\n{% endif %}\n{% endif %}\n\n\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes and \'z\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("No axis homed") }\n{% endif %}\n_KlickyDebug msg="homing_override no axis homed, setting position as X=Y=0 Z={kinematic_z}"\nSET_KINEMATIC_POSITION X=0 Y=0 Z={kinematic_z}\nM400\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% if home_z != True %}\n_KlickyDebug msg="homing_override clearing axis homed state if not already homing Z"\nM84\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("X or Y not homed, forcing full G28") }\n{% endif %}\n{% set home_x, home_y, home_z = True, True, True %}\n{% endif %}\n{% endif %}\n\n\n{% if ((attachmove_y == 0 and override_homing == \'\' ) or (override_homing == \'Y\'))%}\n\n{% if home_y %}\n{% if override_homing == \'Y\' %}\n_KlickyDebug msg="homing_override Y homing first override, due to override_homing = Y"\n{% else %}\n_KlickyDebug msg="homing_override Y homing first override, due to attachmove_y = 0"\n{% endif %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y G28 Y0"\nG28 Y0\n\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop-home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n{% set home_y = False %}\n{% endif %}\n\n\n\n{% if home_x %}\n{% if verbose %}\n{ action_respond_info("Homing X") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in X homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_X"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_X external script to handle the X homing"\n_HOME_X\n{% else %}\n_KlickyDebug msg="homing_override Homing X, G28 X0"\nG28 X0\n\n{% if home_backoff_x != 0 %}\n{% if (printer.configfile.settings.stepper_x.position_endstop > (printer.configfile.settings.stepper_x.position_min|default(0) + printer.configfile.settings.stepper_x.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n\n{% if home_y %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y, G28 Y0"\nG28 Y0\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if verbose %}\n{ action_respond_info("Homing Z") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe configured as a virtual Z endstop attaching probe"\nAttach_Probe\n\n{% if leave_probe_attached %}\n_Probe_Lock\n{% endif %}\n{% elif dock_on_zhome == True %}\nDock_Probe\n{% endif %}\n\n_Home_Z_\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe no longer required, docking probe"\nDock_Probe\n{% elif dock_on_zhome == False %}\nDock_Probe\n{% endif %}\n{% endif %}\n_CheckProbe action=query\n\n\n_Park_Toolhead\n\n_exit_point function=homing_override\n_KLICKY_STATUS_READY'}, 'gcode_macro _Umbilical_Path': {'gcode': '\n{% set umbilical = printer["gcode_macro _User_Variables"].umbilical %}\n{% set umbilical_x = printer["gcode_macro _User_Variables"].umbilical_x %}\n{% set umbilical_y = printer["gcode_macro _User_Variables"].umbilical_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n\n{% if umbilical %}\n\n_entry_point function=Umbilical_Path\n\n_KlickyDebug msg="_Umbilical_Path moving to G0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}"\nG0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}\n\n_exit_point function=Umbilical_Path\n{% endif %}'}, 'gcode_macro _Home_Z_': {'gcode': '\n{% set z_endstop_x = printer["gcode_macro _Probe_Variables"].z_endstop_x %}\n{% set z_endstop_y = printer["gcode_macro _Probe_Variables"].z_endstop_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}    {% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Home_Z\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n{% else %}\n_KlickyDebug msg="_Home_Z_ XY Axis homed"\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="_Home_Z_ Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n\n\n_KlickyDebug msg="_Home_Z_ moving to Z endstop position G0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}"\nG0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}\n_KlickyDebug msg="_Home_Z_ Homing Z G28 Z"\nG28 Z0\n_KlickyDebug msg="_Home_Z_ toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_exit_point function=Home_Z'}, 'gcode_macro _CheckProbe': {'variable_probe_state': '0', 'gcode': '\nQuery_Probe\n_SetProbeState action={ params.ACTION }'}, 'gcode_macro _SetProbeState': {'gcode': '\n{% set query_probe_triggered = printer.probe.last_query %}\n{% set action  = params.ACTION|default(\'\') %}\n\n\n{% if query_probe_triggered %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ False }\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ True }\n{% endif %}\n\n{% if action == \'query\' %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_state VALUE={ query_probe_triggered }\n{% endif %}\n\n\n\n\n{% if not query_probe_triggered and action == \'dock\' %}\n{ action_raise_error("Probe dock failed!") }\n{% endif %}\n\n\n{% if query_probe_triggered and action == \'attach\' %}\n{ action_raise_error("Probe attach failed!") }\n{% endif %}'}, 'gcode_macro _Park_Toolhead': {'gcode': '\n{% set park_toolhead = printer["gcode_macro _User_Variables"].park_toolhead %}\n{% set parkposition_x = printer["gcode_macro _User_Variables"].parkposition_x %}\n{% set parkposition_y = printer["gcode_macro _User_Variables"].parkposition_y %}\n{% set parkposition_z = printer["gcode_macro _User_Variables"].parkposition_z %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Park_Toolhead\n\n{% if park_toolhead and \'xyz\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Parking Toolhead") }\n{% endif %}\n{% if parkposition_z == -128 %}\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}\n\n{% else %}\n\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}\n\n{% endif %}\n\n{% endif %}\n_exit_point function=Park_Toolhead'}, 'gcode_macro _klicky_status_ready': {'gcode': '\n{% if printer[\'gcode_macro status_ready\'] is defined %}\n_KlickyDebug msg="_klicky_status_ready activating the LED STATUS_READY"\nSTATUS_READY\n{% endif %}'}, 'gcode_macro _klicky_status_busy': {'gcode': '\n{% if printer[\'gcode_macro status_busy\'] is defined %}\n_KlickyDebug msg="_klicky_status_busy activating the LED STATUS_BUSY"\nSTATUS_BUSY\n{% endif %}'}, 'gcode_macro _klicky_status_leveling': {'gcode': '\n{% if printer[\'gcode_macro status_leveling\'] is defined %}\n_KlickyDebug msg="_klicky_status_leveling activating the LED STATUS_LEVELING"\nSTATUS_LEVELING\n{% endif %}'}, 'gcode_macro _klicky_status_homing': {'gcode': '\n{% if printer[\'gcode_macro status_homing\'] is defined %}\n_KlickyDebug msg="_klicky_status_homing activating the LED STATUS_HOMING"\nSTATUS_HOMING\n{% endif %}'}, 'gcode_macro _klicky_status_cleaning': {'gcode': '\n{% if printer[\'gcode_macro status_cleaning\'] is defined %}\n_KlickyDebug msg="_klicky_status_cleaning activating the LED STATUS_CLEANING"\nSTATUS_CLEANING\n{% endif %}'}, 'gcode_macro _klicky_status_meshing': {'gcode': '\n{% if printer[\'gcode_macro status_meshing\'] is defined %}\n_KlickyDebug msg="_klicky_status_meshing activating the LED STATUS_MESHING"\nSTATUS_MESHING\n{% endif %}'}, 'gcode_macro _klicky_status_calibrating_z': {'gcode': '\n{% if printer[\'gcode_macro status_calibrating_z\'] is defined %}\n_KlickyDebug msg="_klicky_status_calibrating_z activating the LED STATUS_CALIBRATING_Z"\nSTATUS_CALIBRATING_Z\n{% endif %}'}, 'z_calibration': {'nozzle_xy_position': '172, 301', 'switch_xy_position': '171.5, 282', 'bed_xy_position': '150, 150', 'switch_offset': '0.09', 'offset_margins': '-1.0,1.0', 'speed': '50', 'probing_first_fast': 'false', 'start_gcode': 'Attach_Probe', 'end_gcode': 'Dock_Probe'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_28003C001150535556323420-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '^PG6', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '25', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'PG9', 'position_min': '0', 'position_endstop': '300', 'position_max': '303.5', 'homing_speed': '25', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': '!PG3', 'enable_pin': '!PG5', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'PG10', 'position_max': '290', 'position_min': '-4.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3', 'position_endstop': '-0.711'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA0', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': '!PF10', 'enable_pin': '!PG2', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PC13', 'dir_pin': 'PF0', 'enable_pin': '!PF1', 'rotation_distance': '21.9459674016', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.75', 'heater_pin': 'PA1', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF4', 'min_temp': '10', 'max_temp': '270', 'max_power': '1.0', 'min_extrude_temp': '170', 'pressure_advance': '0.05', 'pressure_advance_smooth_time': '0.040', 'control': 'pid', 'pid_kp': '26.572', 'pid_ki': '2.036', 'pid_kd': '86.691'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.5', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PA2', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF3', 'max_power': '1', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '55.196', 'pid_ki': '2.091', 'pid_kd': '364.295'}, 'probe': {'pin': 'PG15', 'x_offset': '0', 'y_offset': '25.0', 'z_offset': '0', 'speed': '10.0', 'samples': '5', 'samples_result': 'median', 'sample_retract_dist': '3.0', 'samples_tolerance': '0.006', 'samples_tolerance_retries': '6'}, 'fan': {'pin': 'PA8', 'kick_start_time': '0.5', 'off_below': '0.10'}, 'heater_fan hotend_fan': {'pin': 'PE5', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'controller_fan controller_fan': {'pin': 'PD12', 'kick_start_time': '0.5', 'heater': 'heater_bed'}, 'heater_fan exhaust_fan': {'pin': 'PD13', 'max_power': '1.0', 'shutdown_speed': '0.0', 'kick_start_time': '5.0', 'heater': 'heater_bed', 'heater_temp': '60', 'fan_speed': '1.0'}, 'output_pin caselight': {'pin': 'PD15', 'pwm': 'true', 'shutdown_value': '0', 'value': '1', 'cycle_time': '0.01'}, 'neopixel headlight': {'pin': 'PB0', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '0.0', 'initial_green': '0.2157', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'temperature_sensor chamber_temp': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF5', 'min_temp': '0', 'max_temp': '100', 'gcode_id': 'chamber_th'}, 'idle_timeout': {'timeout': '1800'}, 'z_tilt': {'z_positions': '\n-50, 18\n150, 348\n350, 18', 'points': '\n30, 5\n150, 245\n270, 5', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'gcode_macro _User_Variables': {'variable_verbose': 'True', 'variable_debug': 'False', 'variable_travel_speed': '200', 'variable_move_accel': '1000', 'variable_dock_speed': '50', 'variable_release_speed': '75', 'variable_z_drop_speed': '20', 'variable_safe_z': '25', 'variable_enable_z_hop': 'True', 'variable_max_bed_y': '300', 'variable_max_bed_x': '300', 'variable_z_endstop_x': '172', 'variable_z_endstop_y': '301', 'variable_docklocation_x': '40.5', 'variable_docklocation_y': '303.5', 'variable_docklocation_z': '-128', 'variable_enable_dock_servo': 'False', 'variable_servo_name': "'NAME'", 'variable_servo_deploy': '10', 'variable_servo_retract': '11', 'variable_servo_delay': '250', 'variable_dockmove_x': '40', 'variable_dockmove_y': '0', 'variable_dockmove_z': '0', 'variable_attachmove_x': '0', 'variable_attachmove_y': '30', 'variable_attachmove_z': '0', 'variable_umbilical': 'False', 'variable_umbilical_x': '15', 'variable_umbilical_y': '15', 'variable_park_toolhead': 'False', 'variable_parkposition_x': '125', 'variable_parkposition_y': '125', 'variable_parkposition_z': '30', 'variable_version': '1', 'variable_attachmove2_x': '0', 'variable_attachmove2_y': '0', 'variable_attachmove2_z': '0', 'variable_home_backoff_x': '10', 'variable_home_backoff_y': '10', 'variable_override_homing': "''", 'variable_dock_on_zhome': 'True', 'gcode': '\n{% set Mx = printer[\'configfile\'].config["stepper_x"]["position_max"]|float %}\n{% set My = printer[\'configfile\'].config["stepper_y"]["position_max"]|float %}\n{% set Ox = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set Oy = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set Oz = printer[\'configfile\'].config["probe"]["z_offset"]|float %}\n\n\n{% if z_endstop_x != 0 or z_endstop_y != 0 %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ z_endstop_x }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ z_endstop_y }\n\n\n{% else %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ (Mx * 0.5) - Ox }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ (My * 0.5) - Oy }\n{% endif %}'}, 'gcode_macro PRINT_START': {'gcode': '\nM117 Homing...\nG28\nATTACH_PROBE\nZ_TILT_ADJUST\nDOCK_PROBE\nG28\n\n\n\n\n\n\n\nG0 X150 Y150 Z30 F3600'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_28003C001150535556323420-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro _probe_variables': {'gcode': '', 'description': 'G-Code macro', 'variable_probe_attached': 'False', 'variable_probe_state': 'False', 'variable_probe_lock': 'False', 'variable_probe_z_homed': 'False', 'variable_z_endstop_x': '0', 'variable_z_endstop_y': '0'}, 'gcode_macro _klicky_check_variables_version': {'gcode': '\n{% set version = printer["gcode_macro _User_Variables"].version|default(0) %}\n\n{% if version != 1 %}\n{ action_raise_error("Please update your klicky variables, there are some functionality changes") }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klickydebug': {'gcode': '\n{% set message  = params.MSG %}\n{% set debug = printer["gcode_macro _User_Variables"].debug|default(False) %}\n\n{% if debug %}\n{ action_respond_info(message) }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _exit_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move  = params.MOVE|default(0) %}\n{% set speed = printer["gcode_macro _User_Variables"].travel_speed %}\n\n\nM400\nSET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\nRESTORE_GCODE_STATE NAME={function} MOVE={move} MOVE_SPEED={speed}', 'description': 'G-Code macro'}, 'gcode_macro _entry_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move_accel = printer["gcode_macro _User_Variables"].move_accel|default(1000) %}\n\nM400\nSAVE_GCODE_STATE NAME={function}\n\nSET_GCODE_OFFSET Z=0\n\nG90\n\nSET_VELOCITY_LIMIT ACCEL={move_accel}', 'description': 'G-Code macro'}, 'gcode_macro _homing_variables': {'gcode': '\n{% set reset  = params.RESET|default(0) %}\n{% if reset %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro attach_probe_lock': {'gcode': '\nAttach_Probe\n_Probe_Lock', 'description': 'Attaches Klicky Probe, can only be docked after unlocking'}, 'gcode_macro dock_probe_unlock': {'gcode': '\n_Probe_Unlock\nDock_Probe', 'description': 'Docks Klicky Probe even if it was locked'}, 'gcode_macro _probe_unlock': {'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to False"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }', 'description': 'Unlocks Klicky Probe state'}, 'gcode_macro _probe_lock': {'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to True"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ True }', 'description': 'Locks Klicky Probe state'}, 'gcode_macro _deployklickydock': {'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_deploy = printer["gcode_macro _User_Variables"].servo_deploy|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_DeployKlickyDock Klicky servo configuration enabled"\n{% if servo_deploy == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo deploy angle specified") }\n{% endif %}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _DeployDock"] is defined %}\n_KlickyDebug msg="_DeployKlickyDock calling _DeployDock"\n_DeployDock\n{% endif %}', 'description': 'Deploys Klicky servo-controlled dock'}, 'gcode_macro _retractklickydock': {'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_retract = printer["gcode_macro _User_Variables"].servo_retract|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_RetractKlickyDock Klicky servo configuration enabled"\n{% if servo_retract == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo retract angle specified") }\n{% endif %}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _RetractDock"] is defined %}\n_KlickyDebug msg="_RetractKlickyDock calling _RetractDock"\n_RetractDock\n{% endif %}', 'description': 'Retracts Klicky servo-controlled dock'}, 'gcode_macro attach_probe': {'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set attachmove2_x = printer["gcode_macro _User_Variables"].attachmove2_x|default(0) %}\n{% set attachmove2_y = printer["gcode_macro _User_Variables"].attachmove2_y|default(0) %}\n{% set attachmove2_z = printer["gcode_macro _User_Variables"].attachmove2_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n_entry_point function=Attach_Probe\n\n{% if bypass_probe_docking == False %}\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n_KlickyDebug msg="Attach_Probe Axis homed"\n\n\n{% elif not probe_attached and not probe_lock %}\n_KlickyDebug msg="Attach_Probe going to attach probe"\n{% if verbose %}\n{ action_respond_info("Attaching Probe") }\n{% endif %}\n_KLICKY_STATUS_BUSY\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% if not enable_z_hop %}\n_KlickyDebug msg="Attach_Probe z_hop disabled"\n{% set safe_z = 0 %}\n{% endif %}\n{% endif %}\n\n\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero, duplicate?") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Umbilical_Path\n\n_entry_point function=Attach_Probe_intern\n\n\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n_DeployKlickyDock\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}"\nG0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}\n\n_RetractKlickyDock\n\n{% if ((printer.gcode_move.gcode_position.z < safe_z) or (docklocation_z != -128 and docklocation_z < safe_z ))%}\n_KlickyDebug msg="Attach_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\n_CheckProbe action=attach\n\n_exit_point function=Attach_Probe_intern move={goback}\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe locked not attaching probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already attached!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe already attached, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Attach_Probe\n{% else %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}', 'description': 'Attaches Klicky Probe'}, 'gcode_macro dock_probe': {'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n{% if bypass_probe_docking == True %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}\n\n{% if bypass_probe_docking != True %}\n_entry_point function=Dock_Probe\n\n\n{% if probe_attached and not probe_lock %}\n_KLICKY_STATUS_BUSY\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Dock_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n_Umbilical_Path\n\n\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n\n_DeployKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\n\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}"\nG0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}\n{% endif %}\n\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}\n\n\n_RetractKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving away from the dock to G0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}\n\n\n{% if (printer.gcode_move.gcode_position.z < safe_z) %}\n_KlickyDebug msg="Dock_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\nG4 P1000\n_CheckProbe action=dock\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe locked not docking probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already docked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe already docked, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Dock_Probe move={goback}\n{% else %}\n_KlickyDebug msg="Dock_Probe probe docking bypassed, doing nothing"\n{% endif %}', 'description': 'Docks Klicky Probe'}, 'gcode_macro probe_calibrate': {'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_calibrate Axis homed"\n_KlickyDebug msg="probe_calibrate Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_CALIBRATE with the probe above the BED, check klicky_variables bed size!") }\n{% endif %}\n\n{% if bypass_probe_docking == False %}\n_CheckProbe action=query\nG90\nAttach_Probe back=1\n_KLICKY_STATUS_CALIBRATING_Z\n\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nM118 moving the toolhead 20 mm from the bed\n_KlickyDebug msg="probe_calibrate Moving Z up by 20mm"\nTESTZ Z=20\nM118 remove manually the probe and continue calibration\n_KLICKY_STATUS_READY\n{% else %}\n_KLICKY_STATUS_CALIBRATING_Z\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n_KLICKY_STATUS_READY\n{% endif %}', 'rename_existing': '_PROBE_CALIBRATE', 'description': 'Calibrate the probes z_offset with klicky automount'}, 'gcode_macro probe_accuracy': {'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_accuracy Axis homed"\n_KlickyDebug msg="probe_accuracy Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n_entry_point function=PROBE_ACCURACY\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_ACCURACY with the probe above the BED, check klicky_variables bed size!") }\n{% endif%}\n\n_CheckProbe action=query\nAttach_Probe back=1\n\n_KlickyDebug msg="probe_accuracy calling klipper probe accuracy"\n_PROBE_ACCURACY {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nDock_Probe back=1\n\n_exit_point function=PROBE_ACCURACY move=1', 'rename_existing': '_PROBE_ACCURACY', 'description': 'Probe Z-height accuracy at current XY position with klicky automount'}, 'force_move': {'enable_force_move': True}, 'homing_override': {'axes': 'xyz', 'gcode': '\n\n_User_Variables\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n{% set kinematic_z = 0 %}\n{% set dock_on_zhome = printer["gcode_macro _User_Variables"].dock_on_zhome|default(True) %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set home_backoff_x = printer["gcode_macro _User_Variables"].home_backoff_x|default(0) %}\n{% set home_backoff_y = printer["gcode_macro _User_Variables"].home_backoff_y|default(0) %}\n{% set override_homing = printer["gcode_macro _User_Variables"].override_homing|default(\'\') %}\n\n\n_klicky_check_variables_version\n\n_CheckProbe action=query\n\n\n{% set home_x, home_y, home_z, leave_probe_attached = False, False, False, False %}\n\n{% if \'PROBE_LOCK\' in params%}\n{% if verbose %}\n{ action_respond_info("PROBE_LOCK = True") }\n{% endif %}\n{% set leave_probe_attached = True %}\n{% endif %}\n\n\n{% if not \'X\' in params\nand not \'Y\' in params\nand not \'Z\' in params %}\n\n{% set home_x, home_y, home_z = True, True, True %}\n_KlickyDebug msg="homing_override goint to home all axes"\n\n{% else %}\n{% if \'X\' in params %}\n{% set home_x = True %}\n_KlickyDebug msg="homing_override goint to home X"\n\n{% endif %}\n\n{% if \'Y\' in params %}\n{% set home_y = True %}\n_KlickyDebug msg="homing_override goint to home Y"\n{% endif %}\n\n{% if \'Z\' in params %}\n{% set home_z = True %}\n_KlickyDebug msg="homing_override goint to home Z"\n{% endif %}\n\n{% if \'X\' in params\nand \'Y\' in params\nand \'Z\' in params %}\n\n\n_Homing_Variables reset=1\n_KlickyDebug msg="homing_override goint to home all axes"\n{% endif %}\n\n{% endif %}\n\n_entry_point function=homing_override\n_KLICKY_STATUS_HOMING\n\n\n{% if \'z\' not in printer.toolhead.homed_axes %}\n{% if enable_z_hop == False %}\n_KlickyDebug msg="homing_override z_hop disabled"\n\n{% set kinematic_z = safe_z %}\n{% set safe_z = safe_z %}\n{% endif %}\n{% endif %}\n\n\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes and \'z\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("No axis homed") }\n{% endif %}\n_KlickyDebug msg="homing_override no axis homed, setting position as X=Y=0 Z={kinematic_z}"\nSET_KINEMATIC_POSITION X=0 Y=0 Z={kinematic_z}\nM400\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% if home_z != True %}\n_KlickyDebug msg="homing_override clearing axis homed state if not already homing Z"\nM84\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("X or Y not homed, forcing full G28") }\n{% endif %}\n{% set home_x, home_y, home_z = True, True, True %}\n{% endif %}\n{% endif %}\n\n\n{% if ((attachmove_y == 0 and override_homing == \'\' ) or (override_homing == \'Y\'))%}\n\n{% if home_y %}\n{% if override_homing == \'Y\' %}\n_KlickyDebug msg="homing_override Y homing first override, due to override_homing = Y"\n{% else %}\n_KlickyDebug msg="homing_override Y homing first override, due to attachmove_y = 0"\n{% endif %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y G28 Y0"\nG28 Y0\n\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop-home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n{% set home_y = False %}\n{% endif %}\n\n\n\n{% if home_x %}\n{% if verbose %}\n{ action_respond_info("Homing X") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in X homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_X"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_X external script to handle the X homing"\n_HOME_X\n{% else %}\n_KlickyDebug msg="homing_override Homing X, G28 X0"\nG28 X0\n\n{% if home_backoff_x != 0 %}\n{% if (printer.configfile.settings.stepper_x.position_endstop > (printer.configfile.settings.stepper_x.position_min|default(0) + printer.configfile.settings.stepper_x.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n\n{% if home_y %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y, G28 Y0"\nG28 Y0\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if verbose %}\n{ action_respond_info("Homing Z") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe configured as a virtual Z endstop attaching probe"\nAttach_Probe\n\n{% if leave_probe_attached %}\n_Probe_Lock\n{% endif %}\n{% elif dock_on_zhome == True %}\nDock_Probe\n{% endif %}\n\n_Home_Z_\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe no longer required, docking probe"\nDock_Probe\n{% elif dock_on_zhome == False %}\nDock_Probe\n{% endif %}\n{% endif %}\n_CheckProbe action=query\n\n\n_Park_Toolhead\n\n_exit_point function=homing_override\n_KLICKY_STATUS_READY'}, 'gcode_macro _umbilical_path': {'gcode': '\n{% set umbilical = printer["gcode_macro _User_Variables"].umbilical %}\n{% set umbilical_x = printer["gcode_macro _User_Variables"].umbilical_x %}\n{% set umbilical_y = printer["gcode_macro _User_Variables"].umbilical_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n\n{% if umbilical %}\n\n_entry_point function=Umbilical_Path\n\n_KlickyDebug msg="_Umbilical_Path moving to G0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}"\nG0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}\n\n_exit_point function=Umbilical_Path\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _home_z_': {'gcode': '\n{% set z_endstop_x = printer["gcode_macro _Probe_Variables"].z_endstop_x %}\n{% set z_endstop_y = printer["gcode_macro _Probe_Variables"].z_endstop_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}    {% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Home_Z\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n{% else %}\n_KlickyDebug msg="_Home_Z_ XY Axis homed"\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="_Home_Z_ Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n\n\n_KlickyDebug msg="_Home_Z_ moving to Z endstop position G0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}"\nG0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}\n_KlickyDebug msg="_Home_Z_ Homing Z G28 Z"\nG28 Z0\n_KlickyDebug msg="_Home_Z_ toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_exit_point function=Home_Z', 'description': 'G-Code macro'}, 'gcode_macro _checkprobe': {'gcode': '\nQuery_Probe\n_SetProbeState action={ params.ACTION }', 'description': 'G-Code macro', 'variable_probe_state': '0'}, 'gcode_macro _setprobestate': {'gcode': '\n{% set query_probe_triggered = printer.probe.last_query %}\n{% set action  = params.ACTION|default(\'\') %}\n\n\n{% if query_probe_triggered %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ False }\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ True }\n{% endif %}\n\n{% if action == \'query\' %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_state VALUE={ query_probe_triggered }\n{% endif %}\n\n\n\n\n{% if not query_probe_triggered and action == \'dock\' %}\n{ action_raise_error("Probe dock failed!") }\n{% endif %}\n\n\n{% if query_probe_triggered and action == \'attach\' %}\n{ action_raise_error("Probe attach failed!") }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _park_toolhead': {'gcode': '\n{% set park_toolhead = printer["gcode_macro _User_Variables"].park_toolhead %}\n{% set parkposition_x = printer["gcode_macro _User_Variables"].parkposition_x %}\n{% set parkposition_y = printer["gcode_macro _User_Variables"].parkposition_y %}\n{% set parkposition_z = printer["gcode_macro _User_Variables"].parkposition_z %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Park_Toolhead\n\n{% if park_toolhead and \'xyz\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Parking Toolhead") }\n{% endif %}\n{% if parkposition_z == -128 %}\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}\n\n{% else %}\n\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}\n\n{% endif %}\n\n{% endif %}\n_exit_point function=Park_Toolhead', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_ready': {'gcode': '\n{% if printer[\'gcode_macro status_ready\'] is defined %}\n_KlickyDebug msg="_klicky_status_ready activating the LED STATUS_READY"\nSTATUS_READY\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_busy': {'gcode': '\n{% if printer[\'gcode_macro status_busy\'] is defined %}\n_KlickyDebug msg="_klicky_status_busy activating the LED STATUS_BUSY"\nSTATUS_BUSY\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_leveling': {'gcode': '\n{% if printer[\'gcode_macro status_leveling\'] is defined %}\n_KlickyDebug msg="_klicky_status_leveling activating the LED STATUS_LEVELING"\nSTATUS_LEVELING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_homing': {'gcode': '\n{% if printer[\'gcode_macro status_homing\'] is defined %}\n_KlickyDebug msg="_klicky_status_homing activating the LED STATUS_HOMING"\nSTATUS_HOMING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_cleaning': {'gcode': '\n{% if printer[\'gcode_macro status_cleaning\'] is defined %}\n_KlickyDebug msg="_klicky_status_cleaning activating the LED STATUS_CLEANING"\nSTATUS_CLEANING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_meshing': {'gcode': '\n{% if printer[\'gcode_macro status_meshing\'] is defined %}\n_KlickyDebug msg="_klicky_status_meshing activating the LED STATUS_MESHING"\nSTATUS_MESHING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_calibrating_z': {'gcode': '\n{% if printer[\'gcode_macro status_calibrating_z\'] is defined %}\n_KlickyDebug msg="_klicky_status_calibrating_z activating the LED STATUS_CALIBRATING_Z"\nSTATUS_CALIBRATING_Z\n{% endif %}', 'description': 'G-Code macro'}, 'z_calibration': {'switch_offset': 0.09, 'offset_margins': '-1.0,1.0', 'speed': 50.0, 'samples_result': 'none', 'probing_first_fast': False, 'nozzle_xy_position': '172, 301', 'switch_xy_position': '171.5, 282', 'bed_xy_position': '150, 150', 'start_gcode': 'Attach_Probe', 'before_switch_gcode': '', 'end_gcode': 'Dock_Probe'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': '^PG6', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'PG9', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 303.5, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PF11', 'dir_pin': '!PG3', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG5', 'endstop_pin': 'PG10', 'position_endstop': -0.711, 'position_min': -4.5, 'position_max': 290.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA0'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PF9', 'dir_pin': '!PF10', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG2'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF4', 'min_temp': 10.0, 'max_temp': 270.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 26.572, 'pid_ki': 2.036, 'pid_kd': 86.691, 'heater_pin': 'PA1', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PC13', 'pressure_advance': 0.05, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'PF0', 'rotation_distance': 21.9459674016, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 55.196, 'pid_ki': 2.091, 'pid_kd': 364.295, 'heater_pin': 'PA2', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'probe': {'z_offset': 0.0, 'deactivate_on_each_sample': True, 'activate_gcode': '', 'deactivate_gcode': '', 'pin': 'PG15', 'speed': 10.0, 'lift_speed': 10.0, 'x_offset': 0.0, 'y_offset': 25.0, 'samples': 5, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.006, 'samples_tolerance_retries': 6}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE5', 'fan_speed': 1.0}, 'controller_fan controller_fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD12', 'fan_speed': 1.0, 'idle_speed': 1.0, 'idle_timeout': 30, 'heater': ['heater_bed']}, 'heater_fan exhaust_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 5.0, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13', 'fan_speed': 1.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PD15', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 1.0, 'maximum_mcu_duration': 0.0, 'value': 1.0, 'shutdown_value': 0.0}, 'neopixel headlight': {'pin': 'PB0', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 0.0, 'initial_green': 0.2157, 'initial_blue': 1.0, 'initial_white': 0.0}, 'temperature_sensor chamber_temp': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF5', 'min_temp': 0.0, 'max_temp': 100.0, 'gcode_id': 'chamber_th'}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [150.0, 348.0], [350.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 5.0], [150.0, 245.0], [270.0, 5.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'gcode_macro _user_variables': {'gcode': '\n{% set Mx = printer[\'configfile\'].config["stepper_x"]["position_max"]|float %}\n{% set My = printer[\'configfile\'].config["stepper_y"]["position_max"]|float %}\n{% set Ox = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set Oy = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set Oz = printer[\'configfile\'].config["probe"]["z_offset"]|float %}\n\n\n{% if z_endstop_x != 0 or z_endstop_y != 0 %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ z_endstop_x }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ z_endstop_y }\n\n\n{% else %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ (Mx * 0.5) - Ox }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ (My * 0.5) - Oy }\n{% endif %}', 'description': 'G-Code macro', 'variable_verbose': 'True', 'variable_debug': 'False', 'variable_travel_speed': '200', 'variable_move_accel': '1000', 'variable_dock_speed': '50', 'variable_release_speed': '75', 'variable_z_drop_speed': '20', 'variable_safe_z': '25', 'variable_enable_z_hop': 'True', 'variable_max_bed_y': '300', 'variable_max_bed_x': '300', 'variable_z_endstop_x': '172', 'variable_z_endstop_y': '301', 'variable_docklocation_x': '40.5', 'variable_docklocation_y': '303.5', 'variable_docklocation_z': '-128', 'variable_enable_dock_servo': 'False', 'variable_servo_name': "'NAME'", 'variable_servo_deploy': '10', 'variable_servo_retract': '11', 'variable_servo_delay': '250', 'variable_dockmove_x': '40', 'variable_dockmove_y': '0', 'variable_dockmove_z': '0', 'variable_attachmove_x': '0', 'variable_attachmove_y': '30', 'variable_attachmove_z': '0', 'variable_umbilical': 'False', 'variable_umbilical_x': '15', 'variable_umbilical_y': '15', 'variable_park_toolhead': 'False', 'variable_parkposition_x': '125', 'variable_parkposition_y': '125', 'variable_parkposition_z': '30', 'variable_version': '1', 'variable_attachmove2_x': '0', 'variable_attachmove2_y': '0', 'variable_attachmove2_z': '0', 'variable_home_backoff_x': '10', 'variable_home_backoff_y': '10', 'variable_override_homing': "''", 'variable_dock_on_zhome': 'True'}, 'gcode_macro print_start': {'gcode': '\nM117 Homing...\nG28\nATTACH_PROBE\nZ_TILT_ADJUST\nDOCK_PROBE\nG28\n\n\n\n\n\n\n\nG0 X150 Y150 Z30 F3600', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1500.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-02-15 22:36:36,933 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-15 22:36:36,934 [printer.py:reinit()] - Klipper version: v0.12.0-103-g6ce6fbbc-dirty
2024-02-15 22:36:36,934 [printer.py:reinit()] - # Extruders: 1
2024-02-15 22:36:36,934 [printer.py:reinit()] - # Temperature devices: 2
2024-02-15 22:36:36,934 [printer.py:reinit()] - # Fans: 4
2024-02-15 22:36:36,934 [printer.py:reinit()] - # Output pins: 1
2024-02-15 22:36:36,934 [printer.py:reinit()] - # Leds: 1
2024-02-15 22:36:36,954 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2024-02-15 22:36:36,955 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-02-15 22:36:37,221 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor chamber_temp&fan&controller_fan controller_fan&heater_fan hotend_fan&heater_fan exhaust_fan&output_pin caselight&neopixel headlight
2024-02-15 22:36:37,224 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-02-15 22:36:37,224 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-02-15 22:36:37,225 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-02-15 22:36:37,225 [screen.py:init_klipper()] - Printer initialized
2024-02-15 22:36:37,225 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2024-02-15 22:36:37,226 [printer.py:change_state()] - Adding callback for state: ready
2024-02-15 22:36:37,229 [files.py:remove_file_callback()] - callback not found <bound method Panel._callback_metadata of <panels.job_status.Panel object at 0x7f682a76a0>>
2024-02-15 22:36:37,229 [screen.py:show_panel()] - Reinitializing panel
2024-02-15 22:36:37,282 [main_menu.py:__init__()] - ### Making MainMenu
2024-02-15 22:36:37,287 [main_menu.py:add_device()] - Adding device: extruder
2024-02-15 22:36:37,292 [main_menu.py:add_device()] - Adding device: heater_bed
2024-02-15 22:36:37,296 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber_temp
2024-02-15 22:36:37,320 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-02-15 22:36:37,336 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-02-15 22:36:37,339 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'temperature_sensor chamber_temp', 'extruder']
2024-02-15 22:36:37,348 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2024-02-15 22:36:37,349 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-02-15 22:36:43,831 [screen.py:show_panel()] - Reinitializing panel
2024-02-15 22:36:43,835 [print.py:__init__()] - 24h time is True
2024-02-15 22:36:43,871 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > print
2024-02-15 22:36:43,872 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-02-15 22:36:43,873 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-02-15 22:36:45,099 [KlippyGtk.py:Dialog()] - Showing dialog Print Voron_Design_Cube_v7_PETG_35m47s.gcode (width=800, height=480)
2024-02-15 22:36:45,981 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-02-15 22:36:45,981 [print.py:confirm_print_response()] - Starting print: Voron_Design_Cube_v7_PETG_35m47s.gcode
2024-02-15 22:36:45,981 [KlippyWebsocket.py:print_start()] - Sending printer.print.start
2024-02-15 22:36:46,006 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_DEFINE"
2024-02-15 22:36:46,197 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2024-02-15 22:36:46,197 [printer.py:change_state()] - Adding callback for state: printing
2024-02-15 22:36:46,208 [files.py:remove_file_callback()] - callback not found <bound method Panel._callback_metadata of <panels.job_status.Panel object at 0x7f682a76a0>>
2024-02-15 22:36:46,209 [screen.py:show_panel()] - Reinitializing panel
2024-02-15 22:36:46,339 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-02-15 22:36:46,343 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-02-15 22:36:46,350 [job_status.py:update_file_metadata()] - Update Metadata. File: Voron_Design_Cube_v7_PETG_35m47s.gcode Size: 2884279
2024-02-15 22:36:46,355 [job_status.py:show_file_thumbnail()] - Voron_Design_Cube_v7_PETG_35m47s.gcode
2024-02-15 22:36:47,946 [files.py:remove_file_callback()] - callback not found <bound method Panel._callback_metadata of <panels.job_status.Panel object at 0x7f682a76a0>>
2024-02-15 22:36:47,946 [screen.py:show_panel()] - Reinitializing panel
2024-02-15 22:36:47,997 [screen.py:attach_panel()] - Current panel hierarchy: job_status > fine_tune
2024-02-15 22:36:51,866 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=+0.05 MOVE=1'}
2024-02-15 22:36:52,980 [screen.py:_menu_go_back()] - #### Menu go back
2024-02-15 22:36:53,023 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-02-15 22:36:53,041 [job_status.py:update_file_metadata()] - Update Metadata. File: Voron_Design_Cube_v7_PETG_35m47s.gcode Size: 2884279
2024-02-15 22:36:53,052 [job_status.py:show_file_thumbnail()] - Voron_Design_Cube_v7_PETG_35m47s.gcode
2024-02-15 22:36:54,248 [screen.py:_go_to_submenu()] - #### Go to submenu 
2024-02-15 22:36:54,249 [screen.py:_go_to_submenu()] - #### Menu __print
2024-02-15 22:36:54,252 [files.py:remove_file_callback()] - callback not found <bound method Panel._callback_metadata of <panels.job_status.Panel object at 0x7f682a76a0>>
2024-02-15 22:36:54,252 [screen.py:show_panel()] - Reinitializing panel
2024-02-15 22:36:54,394 [screen.py:attach_panel()] - Current panel hierarchy: job_status > 
2024-02-15 22:36:54,406 [menu.py:arrangeMenuItems()] - X > move
2024-02-15 22:36:54,411 [menu.py:arrangeMenuItems()] - X > power
2024-02-15 22:36:54,418 [menu.py:arrangeMenuItems()] - X > camera
2024-02-15 22:36:54,424 [menu.py:arrangeMenuItems()] - X > retraction
2024-02-15 22:36:54,427 [menu.py:arrangeMenuItems()] - X > spoolman
2024-02-15 22:36:55,473 [screen.py:_menu_go_back()] - #### Menu go back
2024-02-15 22:36:55,491 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-02-15 22:36:55,499 [job_status.py:update_file_metadata()] - Update Metadata. File: Voron_Design_Cube_v7_PETG_35m47s.gcode Size: 2884279
2024-02-15 22:36:55,503 [job_status.py:show_file_thumbnail()] - Voron_Design_Cube_v7_PETG_35m47s.gcode
2024-02-15 22:36:56,846 [files.py:remove_file_callback()] - callback not found <bound method Panel._callback_metadata of <panels.job_status.Panel object at 0x7f682a76a0>>
2024-02-15 22:36:56,862 [screen.py:attach_panel()] - Current panel hierarchy: job_status > fine_tune
2024-02-15 22:36:58,194 [screen.py:_menu_go_back()] - #### Menu go back
2024-02-15 22:36:58,234 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-02-15 22:36:58,249 [job_status.py:update_file_metadata()] - Update Metadata. File: Voron_Design_Cube_v7_PETG_35m47s.gcode Size: 2884279
2024-02-15 22:36:58,259 [job_status.py:show_file_thumbnail()] - Voron_Design_Cube_v7_PETG_35m47s.gcode
2024-02-15 22:36:58,720 [screen.py:_go_to_submenu()] - #### Go to submenu 
2024-02-15 22:36:58,721 [screen.py:_go_to_submenu()] - #### Menu __print
2024-02-15 22:36:58,724 [files.py:remove_file_callback()] - callback not found <bound method Panel._callback_metadata of <panels.job_status.Panel object at 0x7f682a76a0>>
2024-02-15 22:36:58,744 [screen.py:attach_panel()] - Current panel hierarchy: job_status > 
2024-02-15 22:36:58,755 [menu.py:arrangeMenuItems()] - X > move
2024-02-15 22:36:58,761 [menu.py:arrangeMenuItems()] - X > power
2024-02-15 22:36:58,768 [menu.py:arrangeMenuItems()] - X > camera
2024-02-15 22:36:58,773 [menu.py:arrangeMenuItems()] - X > retraction
2024-02-15 22:36:58,777 [menu.py:arrangeMenuItems()] - X > spoolman
2024-02-15 22:36:59,014 [screen.py:show_popup_message()] - error: Must home axis first: 0.000 0.000 0.050 [0.000]
2024-02-15 22:37:00,197 [screen.py:show_panel()] - Reinitializing panel
2024-02-15 22:37:00,207 [temperature.py:add_device()] - Adding device: extruder
2024-02-15 22:37:00,212 [temperature.py:add_device()] - Adding device: heater_bed
2024-02-15 22:37:00,218 [temperature.py:add_device()] - Adding device: temperature_sensor chamber_temp
2024-02-15 22:37:00,250 [screen.py:attach_panel()] - Current panel hierarchy: job_status >  > temperature
2024-02-15 22:37:06,929 [temperature.py:select_heater()] - Selecting extruder
2024-02-15 22:37:07,625 [KlippyWebsocket.py:set_tool_temp()] - Sending set_tool_temp: M104 T0 S245.0
2024-02-15 22:37:07,625 [temperature.py:change_target_temp_incremental()] - Setting extruder to 245.0
2024-02-15 22:37:08,789 [screen.py:_menu_go_back()] - #### Menu go back
2024-02-15 22:37:08,807 [screen.py:attach_panel()] - Current panel hierarchy: job_status > 
2024-02-15 22:37:08,820 [menu.py:arrangeMenuItems()] - X > move
2024-02-15 22:37:08,825 [menu.py:arrangeMenuItems()] - X > power
2024-02-15 22:37:08,832 [menu.py:arrangeMenuItems()] - X > camera
2024-02-15 22:37:08,838 [menu.py:arrangeMenuItems()] - X > retraction
2024-02-15 22:37:08,841 [menu.py:arrangeMenuItems()] - X > spoolman
2024-02-15 22:37:09,565 [screen.py:_menu_go_back()] - #### Menu go back
2024-02-15 22:37:09,606 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-02-15 22:37:09,623 [job_status.py:update_file_metadata()] - Update Metadata. File: Voron_Design_Cube_v7_PETG_35m47s.gcode Size: 2884279
2024-02-15 22:37:09,634 [job_status.py:show_file_thumbnail()] - Voron_Design_Cube_v7_PETG_35m47s.gcode
2024-02-15 22:37:14,150 [files.py:remove_file_callback()] - callback not found <bound method Panel._callback_metadata of <panels.job_status.Panel object at 0x7f682a76a0>>
2024-02-15 22:37:14,166 [screen.py:attach_panel()] - Current panel hierarchy: job_status > fine_tune
2024-02-15 22:37:35,574 [screen.py:_menu_go_back()] - #### Menu go back
2024-02-15 22:37:35,617 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-02-15 22:37:35,635 [job_status.py:update_file_metadata()] - Update Metadata. File: Voron_Design_Cube_v7_PETG_35m47s.gcode Size: 2884279
2024-02-15 22:37:35,645 [job_status.py:show_file_thumbnail()] - Voron_Design_Cube_v7_PETG_35m47s.gcode
2024-02-15 22:38:11,133 [screen.py:show_popup_message()] - error: Error evaluating 'gcode_macro _SetProbeState:gcode': gcode.CommandError: Probe attach failed!
2024-02-15 22:38:11,226 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2024-02-15 22:38:11,227 [printer.py:change_state()] - Adding callback for state: ready
2024-02-15 22:38:11,236 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'cancelled'
2024-02-15 22:38:18,973 [KlippyWebsocket.py:print_start()] - Sending printer.print.start
2024-02-15 22:38:18,976 [job_status.py:restart()] - Starting print: Voron_Design_Cube_v7_PETG_35m47s.gcode
2024-02-15 22:38:19,000 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2024-02-15 22:38:19,000 [printer.py:change_state()] - Adding callback for state: printing
2024-02-15 22:38:19,011 [job_status.py:set_state()] - Changing job_status state from 'cancelled' to 'printing'
2024-02-15 22:38:19,050 [files.py:remove_file_callback()] - callback not found <bound method Panel._callback_metadata of <panels.job_status.Panel object at 0x7f682a76a0>>
2024-02-15 22:38:19,050 [screen.py:show_panel()] - Reinitializing panel
2024-02-15 22:38:19,155 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-02-15 22:38:19,159 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-02-15 22:38:19,165 [job_status.py:update_file_metadata()] - Update Metadata. File: Voron_Design_Cube_v7_PETG_35m47s.gcode Size: 2884279
2024-02-15 22:38:19,170 [job_status.py:show_file_thumbnail()] - Voron_Design_Cube_v7_PETG_35m47s.gcode
2024-02-15 22:38:19,173 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_DEFINE"
2024-02-15 22:38:21,810 [files.py:remove_file_callback()] - callback not found <bound method Panel._callback_metadata of <panels.job_status.Panel object at 0x7f682a76a0>>
2024-02-15 22:38:21,810 [screen.py:show_panel()] - Reinitializing panel
2024-02-15 22:38:21,861 [screen.py:attach_panel()] - Current panel hierarchy: job_status > fine_tune
2024-02-15 22:38:25,669 [screen.py:_menu_go_back()] - #### Menu go back
2024-02-15 22:38:25,705 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-02-15 22:38:25,720 [job_status.py:update_file_metadata()] - Update Metadata. File: Voron_Design_Cube_v7_PETG_35m47s.gcode Size: 2884279
2024-02-15 22:38:25,729 [job_status.py:show_file_thumbnail()] - Voron_Design_Cube_v7_PETG_35m47s.gcode
2024-02-15 22:38:26,877 [screen.py:_go_to_submenu()] - #### Go to submenu 
2024-02-15 22:38:26,877 [screen.py:_go_to_submenu()] - #### Menu __print
2024-02-15 22:38:26,880 [files.py:remove_file_callback()] - callback not found <bound method Panel._callback_metadata of <panels.job_status.Panel object at 0x7f682a76a0>>
2024-02-15 22:38:26,880 [screen.py:show_panel()] - Reinitializing panel
2024-02-15 22:38:27,031 [screen.py:attach_panel()] - Current panel hierarchy: job_status > 
2024-02-15 22:38:27,042 [menu.py:arrangeMenuItems()] - X > move
2024-02-15 22:38:27,048 [menu.py:arrangeMenuItems()] - X > power
2024-02-15 22:38:27,055 [menu.py:arrangeMenuItems()] - X > camera
2024-02-15 22:38:27,061 [menu.py:arrangeMenuItems()] - X > retraction
2024-02-15 22:38:27,065 [menu.py:arrangeMenuItems()] - X > spoolman
2024-02-15 22:38:28,255 [screen.py:show_panel()] - Reinitializing panel
2024-02-15 22:38:28,266 [temperature.py:add_device()] - Adding device: extruder
2024-02-15 22:38:28,272 [temperature.py:add_device()] - Adding device: heater_bed
2024-02-15 22:38:28,278 [temperature.py:add_device()] - Adding device: temperature_sensor chamber_temp
2024-02-15 22:38:28,307 [screen.py:attach_panel()] - Current panel hierarchy: job_status >  > temperature
2024-02-15 22:38:28,997 [temperature.py:select_heater()] - Selecting extruder
2024-02-15 22:38:30,248 [KlippyWebsocket.py:set_tool_temp()] - Sending set_tool_temp: M104 T0 S245.0
2024-02-15 22:38:30,249 [temperature.py:change_target_temp_incremental()] - Setting extruder to 245.0
2024-02-15 22:38:31,457 [screen.py:_menu_go_back()] - #### Menu go back
2024-02-15 22:38:31,495 [screen.py:attach_panel()] - Current panel hierarchy: job_status > 
2024-02-15 22:38:31,515 [menu.py:arrangeMenuItems()] - X > move
2024-02-15 22:38:31,523 [menu.py:arrangeMenuItems()] - X > power
2024-02-15 22:38:31,537 [menu.py:arrangeMenuItems()] - X > camera
2024-02-15 22:38:31,545 [menu.py:arrangeMenuItems()] - X > retraction
2024-02-15 22:38:31,551 [menu.py:arrangeMenuItems()] - X > spoolman
2024-02-15 22:38:32,088 [screen.py:_menu_go_back()] - #### Menu go back
2024-02-15 22:38:32,108 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-02-15 22:38:32,116 [job_status.py:update_file_metadata()] - Update Metadata. File: Voron_Design_Cube_v7_PETG_35m47s.gcode Size: 2884279
2024-02-15 22:38:32,121 [job_status.py:show_file_thumbnail()] - Voron_Design_Cube_v7_PETG_35m47s.gcode
2024-02-15 22:38:46,044 [files.py:remove_file_callback()] - callback not found <bound method Panel._callback_metadata of <panels.job_status.Panel object at 0x7f682a76a0>>
2024-02-15 22:38:46,087 [screen.py:attach_panel()] - Current panel hierarchy: job_status > temperature
2024-02-15 22:38:50,516 [screen.py:_menu_go_back()] - #### Menu go back
2024-02-15 22:38:50,536 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-02-15 22:38:50,543 [job_status.py:update_file_metadata()] - Update Metadata. File: Voron_Design_Cube_v7_PETG_35m47s.gcode Size: 2884279
2024-02-15 22:38:50,548 [job_status.py:show_file_thumbnail()] - Voron_Design_Cube_v7_PETG_35m47s.gcode
2024-02-15 22:39:31,690 [screen.py:show_popup_message()] - error: Error evaluating 'gcode_macro _SetProbeState:gcode': gcode.CommandError: Probe attach failed!
2024-02-15 22:39:31,743 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2024-02-15 22:39:31,743 [printer.py:change_state()] - Adding callback for state: ready
2024-02-15 22:39:31,751 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'cancelled'
2024-02-15 22:39:48,758 [KlippyWebsocket.py:print_start()] - Sending printer.print.start
2024-02-15 22:39:48,759 [job_status.py:restart()] - Starting print: Voron_Design_Cube_v7_PETG_35m47s.gcode
2024-02-15 22:39:48,780 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_DEFINE"
2024-02-15 22:39:49,008 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2024-02-15 22:39:49,008 [printer.py:change_state()] - Adding callback for state: printing
2024-02-15 22:39:49,015 [job_status.py:set_state()] - Changing job_status state from 'cancelled' to 'printing'
2024-02-15 22:39:49,035 [files.py:remove_file_callback()] - callback not found <bound method Panel._callback_metadata of <panels.job_status.Panel object at 0x7f682a76a0>>
2024-02-15 22:39:49,035 [screen.py:show_panel()] - Reinitializing panel
2024-02-15 22:39:49,126 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-02-15 22:39:49,131 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-02-15 22:39:49,138 [job_status.py:update_file_metadata()] - Update Metadata. File: Voron_Design_Cube_v7_PETG_35m47s.gcode Size: 2884279
2024-02-15 22:39:49,143 [job_status.py:show_file_thumbnail()] - Voron_Design_Cube_v7_PETG_35m47s.gcode
2024-02-15 22:39:51,152 [screen.py:_go_to_submenu()] - #### Go to submenu 
2024-02-15 22:39:51,153 [screen.py:_go_to_submenu()] - #### Menu __print
2024-02-15 22:39:51,156 [files.py:remove_file_callback()] - callback not found <bound method Panel._callback_metadata of <panels.job_status.Panel object at 0x7f682a76a0>>
2024-02-15 22:39:51,156 [screen.py:show_panel()] - Reinitializing panel
2024-02-15 22:39:51,304 [screen.py:attach_panel()] - Current panel hierarchy: job_status > 
2024-02-15 22:39:51,315 [menu.py:arrangeMenuItems()] - X > move
2024-02-15 22:39:51,320 [menu.py:arrangeMenuItems()] - X > power
2024-02-15 22:39:51,327 [menu.py:arrangeMenuItems()] - X > camera
2024-02-15 22:39:51,333 [menu.py:arrangeMenuItems()] - X > retraction
2024-02-15 22:39:51,335 [menu.py:arrangeMenuItems()] - X > spoolman
2024-02-15 22:39:52,021 [screen.py:show_panel()] - Reinitializing panel
2024-02-15 22:39:52,032 [temperature.py:add_device()] - Adding device: extruder
2024-02-15 22:39:52,037 [temperature.py:add_device()] - Adding device: heater_bed
2024-02-15 22:39:52,042 [temperature.py:add_device()] - Adding device: temperature_sensor chamber_temp
2024-02-15 22:39:52,072 [screen.py:attach_panel()] - Current panel hierarchy: job_status >  > temperature
2024-02-15 22:39:52,817 [temperature.py:select_heater()] - Selecting heater_bed
2024-02-15 22:39:53,249 [temperature.py:select_heater()] - Selecting extruder
2024-02-15 22:39:54,267 [temperature.py:select_heater()] - Deselecting heater_bed
2024-02-15 22:39:56,802 [screen.py:_menu_go_back()] - #### Menu go back
2024-02-15 22:39:56,838 [screen.py:attach_panel()] - Current panel hierarchy: job_status > 
2024-02-15 22:39:56,858 [menu.py:arrangeMenuItems()] - X > move
2024-02-15 22:39:56,867 [menu.py:arrangeMenuItems()] - X > power
2024-02-15 22:39:56,879 [menu.py:arrangeMenuItems()] - X > camera
2024-02-15 22:39:56,887 [menu.py:arrangeMenuItems()] - X > retraction
2024-02-15 22:39:56,893 [menu.py:arrangeMenuItems()] - X > spoolman
2024-02-15 22:39:57,655 [screen.py:attach_panel()] - Current panel hierarchy: job_status >  > temperature
2024-02-15 22:39:58,109 [temperature.py:select_heater()] - Deselecting extruder
2024-02-15 22:40:00,681 [temperature.py:verify_max_temp()] - 245/270
2024-02-15 22:40:00,681 [KlippyWebsocket.py:set_tool_temp()] - Sending set_tool_temp: M104 T0 S245
2024-02-15 22:40:01,720 [screen.py:_menu_go_back()] - #### Menu go back
2024-02-15 22:40:01,754 [screen.py:attach_panel()] - Current panel hierarchy: job_status > 
2024-02-15 22:40:01,765 [menu.py:arrangeMenuItems()] - X > move
2024-02-15 22:40:01,770 [menu.py:arrangeMenuItems()] - X > power
2024-02-15 22:40:01,777 [menu.py:arrangeMenuItems()] - X > camera
2024-02-15 22:40:01,782 [menu.py:arrangeMenuItems()] - X > retraction
2024-02-15 22:40:01,786 [menu.py:arrangeMenuItems()] - X > spoolman
2024-02-15 22:40:02,206 [screen.py:_menu_go_back()] - #### Menu go back
2024-02-15 22:40:02,245 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-02-15 22:40:02,257 [job_status.py:update_file_metadata()] - Update Metadata. File: Voron_Design_Cube_v7_PETG_35m47s.gcode Size: 2884279
2024-02-15 22:40:02,265 [job_status.py:show_file_thumbnail()] - Voron_Design_Cube_v7_PETG_35m47s.gcode
2024-02-15 22:41:13,311 [screen.py:show_popup_message()] - error: Error evaluating 'gcode_macro _SetProbeState:gcode': gcode.CommandError: Probe attach failed!
2024-02-15 22:41:13,479 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2024-02-15 22:41:13,479 [printer.py:change_state()] - Adding callback for state: ready
2024-02-15 22:41:13,486 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'cancelled'
2024-02-15 22:41:25,963 [screen.py:show_popup_message()] - error: Error evaluating 'gcode_macro _SetProbeState:gcode': gcode.CommandError: Probe attach failed!
2024-02-15 22:41:44,361 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_DEFINE"
2024-02-15 22:41:44,588 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2024-02-15 22:41:44,588 [printer.py:change_state()] - Adding callback for state: printing
2024-02-15 22:41:44,593 [job_status.py:set_state()] - Changing job_status state from 'cancelled' to 'printing'
2024-02-15 22:41:44,612 [files.py:remove_file_callback()] - callback not found <bound method Panel._callback_metadata of <panels.job_status.Panel object at 0x7f682a76a0>>
2024-02-15 22:41:44,613 [screen.py:show_panel()] - Reinitializing panel
2024-02-15 22:41:44,704 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-02-15 22:41:44,708 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-02-15 22:41:44,714 [job_status.py:update_file_metadata()] - Update Metadata. File: Voron_Design_Cube_v7_PETG_35m47s.gcode Size: 2884279
2024-02-15 22:41:44,719 [job_status.py:show_file_thumbnail()] - Voron_Design_Cube_v7_PETG_35m47s.gcode
2024-02-15 22:43:17,329 [screen.py:show_popup_message()] - error: Error evaluating 'gcode_macro _SetProbeState:gcode': gcode.CommandError: Probe attach failed!
2024-02-15 22:43:17,377 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2024-02-15 22:43:17,377 [printer.py:change_state()] - Adding callback for state: ready
2024-02-15 22:43:17,386 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'cancelled'
2024-02-15 22:43:40,174 [job_status.py:close_panel()] - Closing job_status panel
2024-02-15 22:43:40,178 [files.py:remove_file_callback()] - callback not found <bound method Panel._callback_metadata of <panels.job_status.Panel object at 0x7f682a76a0>>
2024-02-15 22:43:40,179 [screen.py:show_panel()] - Reinitializing panel
2024-02-15 22:43:40,271 [main_menu.py:__init__()] - ### Making MainMenu
2024-02-15 22:43:40,277 [main_menu.py:add_device()] - Adding device: extruder
2024-02-15 22:43:40,281 [main_menu.py:add_device()] - Adding device: heater_bed
2024-02-15 22:43:40,286 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber_temp
2024-02-15 22:43:40,310 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-02-15 22:43:41,470 [screen.py:_load_panel()] - Loading panel: move
2024-02-15 22:43:41,528 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-02-15 22:43:42,554 [screen.py:_load_panel()] - Loading panel: menu
2024-02-15 22:43:42,630 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move > menu
2024-02-15 22:43:42,639 [menu.py:arrangeMenuItems()] - X > homing quad_gantry_level
2024-02-15 22:43:43,085 [screen.py:_menu_go_back()] - #### Menu go back
2024-02-15 22:43:43,103 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-02-15 22:43:43,400 [screen.py:_menu_go_back()] - #### Menu go back
2024-02-15 22:43:43,419 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-02-15 22:43:44,240 [screen.py:_go_to_submenu()] - #### Go to submenu more
2024-02-15 22:43:44,241 [screen.py:_go_to_submenu()] - #### Menu __main
2024-02-15 22:43:44,244 [screen.py:_load_panel()] - Loading panel: menu
2024-02-15 22:43:44,413 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more
2024-02-15 22:43:44,416 [menu.py:arrangeMenuItems()] - X > more bedlevel
2024-02-15 22:43:44,419 [menu.py:arrangeMenuItems()] - X > more bedmesh
2024-02-15 22:43:44,424 [menu.py:arrangeMenuItems()] - X > more retraction
2024-02-15 22:43:44,436 [menu.py:arrangeMenuItems()] - X > more power
2024-02-15 22:43:44,438 [menu.py:arrangeMenuItems()] - X > more camera
2024-02-15 22:43:44,443 [menu.py:arrangeMenuItems()] - X > more input_shaper
2024-02-15 22:43:44,449 [menu.py:arrangeMenuItems()] - X > more spoolman
2024-02-15 22:43:45,154 [screen.py:_load_panel()] - Loading panel: gcode_macros
2024-02-15 22:43:45,185 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more > gcode_macros
2024-02-15 22:43:46,219 [screen.py:show_popup_message()] - echo: Attach_Probe 
2024-02-15 22:43:46,224 [screen.py:_send_action()] - printer.gcode.script: {'script': 'Attach_Probe'}
2024-02-15 22:43:47,961 [screen.py:show_popup_message()] - error: Error evaluating 'gcode_macro _SetProbeState:gcode': gcode.CommandError: Probe attach failed!
2024-02-15 22:43:50,386 [screen.py:show_popup_message()] - echo: Dock_Probe 
2024-02-15 22:43:50,389 [screen.py:_send_action()] - printer.gcode.script: {'script': 'Dock_Probe'}
2024-02-15 22:43:52,527 [screen.py:show_popup_message()] - echo: Attach_Probe 
2024-02-15 22:43:52,537 [screen.py:_send_action()] - printer.gcode.script: {'script': 'Attach_Probe'}
2024-02-15 22:43:54,276 [screen.py:show_popup_message()] - error: Error evaluating 'gcode_macro _SetProbeState:gcode': gcode.CommandError: Probe attach failed!
2024-02-15 22:43:56,825 [screen.py:show_popup_message()] - echo: Attach_Probe 
2024-02-15 22:43:56,830 [screen.py:_send_action()] - printer.gcode.script: {'script': 'Attach_Probe'}
2024-02-15 22:43:58,563 [screen.py:show_popup_message()] - error: Error evaluating 'gcode_macro _SetProbeState:gcode': gcode.CommandError: Probe attach failed!
2024-02-15 22:43:59,385 [screen.py:_send_action()] - printer.gcode.script: {'script': 'Attach_Probe'}
2024-02-15 22:44:01,109 [screen.py:show_popup_message()] - error: Error evaluating 'gcode_macro _SetProbeState:gcode': gcode.CommandError: Probe attach failed!
2024-02-15 22:45:05,052 [screen.py:show_popup_message()] - echo: Attach_Probe 
2024-02-15 22:45:05,059 [screen.py:_send_action()] - printer.gcode.script: {'script': 'Attach_Probe'}
2024-02-15 22:45:06,798 [screen.py:show_popup_message()] - error: Error evaluating 'gcode_macro _SetProbeState:gcode': gcode.CommandError: Probe attach failed!
2024-02-15 22:45:12,184 [screen.py:show_popup_message()] - echo: Attach_Probe 
2024-02-15 22:45:12,192 [screen.py:_send_action()] - printer.gcode.script: {'script': 'Attach_Probe'}
2024-02-15 22:45:13,938 [screen.py:show_popup_message()] - error: Error evaluating 'gcode_macro _SetProbeState:gcode': gcode.CommandError: Probe attach failed!
2024-02-15 22:45:31,299 [screen.py:show_popup_message()] - echo: Dock_Probe 
2024-02-15 22:45:31,305 [screen.py:_send_action()] - printer.gcode.script: {'script': 'Dock_Probe'}
2024-02-15 22:45:33,186 [screen.py:show_popup_message()] - echo: Attach_Probe 
2024-02-15 22:45:33,192 [screen.py:_send_action()] - printer.gcode.script: {'script': 'Attach_Probe'}
2024-02-15 22:45:34,926 [screen.py:show_popup_message()] - error: Error evaluating 'gcode_macro _SetProbeState:gcode': gcode.CommandError: Probe attach failed!
2024-02-15 22:45:40,430 [screen.py:show_popup_message()] - echo: Attach_Probe 
2024-02-15 22:45:40,434 [screen.py:_send_action()] - printer.gcode.script: {'script': 'Attach_Probe'}
2024-02-15 22:45:42,161 [screen.py:show_popup_message()] - error: Error evaluating 'gcode_macro _SetProbeState:gcode': gcode.CommandError: Probe attach failed!
2024-02-15 22:45:54,998 [screen.py:show_popup_message()] - echo: Attach_Probe 
2024-02-15 22:45:55,001 [screen.py:_send_action()] - printer.gcode.script: {'script': 'Attach_Probe'}
2024-02-15 22:45:56,729 [screen.py:show_popup_message()] - error: Error evaluating 'gcode_macro _SetProbeState:gcode': gcode.CommandError: Probe attach failed!
2024-02-15 22:46:06,351 [screen.py:show_popup_message()] - echo: Attach_Probe 
2024-02-15 22:46:06,357 [screen.py:_send_action()] - printer.gcode.script: {'script': 'Attach_Probe'}
2024-02-15 22:46:08,095 [screen.py:show_popup_message()] - error: Error evaluating 'gcode_macro _SetProbeState:gcode': gcode.CommandError: Probe attach failed!
2024-02-15 22:46:26,544 [screen.py:show_popup_message()] - echo: Attach_Probe 
2024-02-15 22:46:26,550 [screen.py:_send_action()] - printer.gcode.script: {'script': 'Attach_Probe'}
2024-02-15 22:46:28,295 [screen.py:show_popup_message()] - error: Error evaluating 'gcode_macro _SetProbeState:gcode': gcode.CommandError: Probe attach failed!
2024-02-15 22:46:45,281 [screen_panel.py:load_menu()] - loading menu options
2024-02-15 22:46:46,792 [screen_panel.py:unload_menu()] - self.menu: ['macros_menu', 'options_menu']
2024-02-15 22:46:47,614 [screen.py:show_popup_message()] - echo: Attach_Probe 
2024-02-15 22:46:47,617 [screen.py:_send_action()] - printer.gcode.script: {'script': 'Attach_Probe'}
2024-02-15 22:46:49,344 [screen.py:show_popup_message()] - error: Error evaluating 'gcode_macro _SetProbeState:gcode': gcode.CommandError: Probe attach failed!
2024-02-15 22:46:56,424 [screen.py:show_popup_message()] - echo: Attach_Probe 
2024-02-15 22:46:56,430 [screen.py:_send_action()] - printer.gcode.script: {'script': 'Attach_Probe'}
2024-02-15 22:46:58,167 [screen.py:show_popup_message()] - error: Error evaluating 'gcode_macro _SetProbeState:gcode': gcode.CommandError: Probe attach failed!
2024-02-15 22:46:59,917 [screen.py:show_popup_message()] - echo: Dock_Probe 
2024-02-15 22:46:59,922 [screen.py:_send_action()] - printer.gcode.script: {'script': 'Dock_Probe'}
2024-02-15 22:47:33,756 [screen.py:show_popup_message()] - echo: Attach_Probe 
2024-02-15 22:47:33,763 [screen.py:_send_action()] - printer.gcode.script: {'script': 'Attach_Probe'}
2024-02-15 22:47:37,950 [screen.py:show_popup_message()] - echo: Dock_Probe 
2024-02-15 22:47:37,953 [screen.py:_send_action()] - printer.gcode.script: {'script': 'Dock_Probe'}
2024-02-15 22:47:41,259 [screen.py:show_popup_message()] - echo: Attach_Probe 
2024-02-15 22:47:41,265 [screen.py:_send_action()] - printer.gcode.script: {'script': 'Attach_Probe'}
2024-02-15 22:53:59,836 [screen.py:show_popup_message()] - echo: Attach_Probe 
2024-02-15 22:53:59,844 [screen.py:_send_action()] - printer.gcode.script: {'script': 'Attach_Probe'}
2024-02-15 22:54:04,814 [screen.py:show_popup_message()] - echo: Attach_Probe 
2024-02-15 22:54:04,818 [screen.py:_send_action()] - printer.gcode.script: {'script': 'Attach_Probe'}
2024-02-15 22:54:06,549 [screen.py:show_popup_message()] - error: Error evaluating 'gcode_macro _SetProbeState:gcode': gcode.CommandError: Probe attach failed!
2024-02-15 22:54:08,105 [screen.py:show_popup_message()] - echo: Attach_Probe 
2024-02-15 22:54:08,109 [screen.py:_send_action()] - printer.gcode.script: {'script': 'Attach_Probe'}
2024-02-15 22:54:09,839 [screen.py:show_popup_message()] - error: Error evaluating 'gcode_macro _SetProbeState:gcode': gcode.CommandError: Probe attach failed!
2024-02-15 22:54:50,172 [screen.py:show_popup_message()] - echo: Attach_Probe 
2024-02-15 22:54:50,180 [screen.py:_send_action()] - printer.gcode.script: {'script': 'Attach_Probe'}
2024-02-15 22:54:51,925 [screen.py:show_popup_message()] - error: Error evaluating 'gcode_macro _SetProbeState:gcode': gcode.CommandError: Probe attach failed!
2024-02-15 22:54:53,826 [screen.py:show_popup_message()] - echo: Attach_Probe 
2024-02-15 22:54:53,830 [screen.py:_send_action()] - printer.gcode.script: {'script': 'Attach_Probe'}
2024-02-15 22:54:55,570 [screen.py:show_popup_message()] - error: Error evaluating 'gcode_macro _SetProbeState:gcode': gcode.CommandError: Probe attach failed!
2024-02-15 22:55:00,957 [screen.py:_menu_go_back()] - #### Menu go back
2024-02-15 22:55:00,999 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more
2024-02-15 22:55:01,010 [menu.py:arrangeMenuItems()] - X > more bedlevel
2024-02-15 22:55:01,014 [menu.py:arrangeMenuItems()] - X > more bedmesh
2024-02-15 22:55:01,022 [menu.py:arrangeMenuItems()] - X > more retraction
2024-02-15 22:55:01,042 [menu.py:arrangeMenuItems()] - X > more power
2024-02-15 22:55:01,046 [menu.py:arrangeMenuItems()] - X > more camera
2024-02-15 22:55:01,054 [menu.py:arrangeMenuItems()] - X > more input_shaper
2024-02-15 22:55:01,065 [menu.py:arrangeMenuItems()] - X > more spoolman
2024-02-15 22:55:02,209 [screen.py:_menu_go_back()] - #### Menu go back
2024-02-15 22:55:02,226 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-02-15 22:55:03,050 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-02-15 22:55:03,651 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move > menu
2024-02-15 22:55:03,661 [menu.py:arrangeMenuItems()] - X > homing quad_gantry_level
2024-02-15 22:55:05,181 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G28 X Y'}
2024-02-15 22:55:23,593 [screen.py:_menu_go_back()] - #### Menu go back
2024-02-15 22:55:23,639 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-02-15 22:55:24,752 [screen.py:_menu_go_back()] - #### Menu go back
2024-02-15 22:55:24,772 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-02-15 22:55:26,166 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-02-15 22:55:26,652 [screen.py:_menu_go_back()] - #### Menu go back
2024-02-15 22:55:26,670 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-02-15 22:55:27,640 [screen.py:_go_to_submenu()] - #### Go to submenu more
2024-02-15 22:55:27,641 [screen.py:_go_to_submenu()] - #### Menu __main
2024-02-15 22:55:27,662 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more
2024-02-15 22:55:27,667 [menu.py:arrangeMenuItems()] - X > more bedlevel
2024-02-15 22:55:27,670 [menu.py:arrangeMenuItems()] - X > more bedmesh
2024-02-15 22:55:27,674 [menu.py:arrangeMenuItems()] - X > more retraction
2024-02-15 22:55:27,686 [menu.py:arrangeMenuItems()] - X > more power
2024-02-15 22:55:27,688 [menu.py:arrangeMenuItems()] - X > more camera
2024-02-15 22:55:27,693 [menu.py:arrangeMenuItems()] - X > more input_shaper
2024-02-15 22:55:27,699 [menu.py:arrangeMenuItems()] - X > more spoolman
2024-02-15 22:55:28,360 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more > gcode_macros
2024-02-15 22:55:29,652 [screen.py:show_popup_message()] - echo: Attach_Probe 
2024-02-15 22:55:29,660 [screen.py:_send_action()] - printer.gcode.script: {'script': 'Attach_Probe'}
2024-02-15 22:55:35,355 [screen.py:show_popup_message()] - echo: Dock_Probe 
2024-02-15 22:55:35,362 [screen.py:_send_action()] - printer.gcode.script: {'script': 'Dock_Probe'}
2024-02-15 22:55:40,469 [screen.py:show_popup_message()] - echo: Attach_Probe 
2024-02-15 22:55:40,474 [screen.py:_send_action()] - printer.gcode.script: {'script': 'Attach_Probe'}
2024-02-15 22:55:43,293 [screen.py:show_popup_message()] - error: Error evaluating 'gcode_macro _SetProbeState:gcode': gcode.CommandError: Probe attach failed!
2024-02-15 22:55:44,706 [screen.py:show_popup_message()] - echo: Attach_Probe 
2024-02-15 22:55:44,710 [screen.py:_send_action()] - printer.gcode.script: {'script': 'Attach_Probe'}
2024-02-15 22:55:46,522 [screen.py:show_popup_message()] - error: Error evaluating 'gcode_macro _SetProbeState:gcode': gcode.CommandError: Probe attach failed!
2024-02-15 22:55:48,121 [screen.py:show_popup_message()] - echo: Attach_Probe 
2024-02-15 22:55:48,126 [screen.py:_send_action()] - printer.gcode.script: {'script': 'Attach_Probe'}
2024-02-15 22:55:49,852 [screen.py:show_popup_message()] - error: Error evaluating 'gcode_macro _SetProbeState:gcode': gcode.CommandError: Probe attach failed!
2024-02-15 22:55:52,027 [screen.py:show_popup_message()] - echo: Attach_Probe 
2024-02-15 22:55:52,036 [screen.py:_send_action()] - printer.gcode.script: {'script': 'Attach_Probe'}
2024-02-15 22:55:53,776 [screen.py:show_popup_message()] - error: Error evaluating 'gcode_macro _SetProbeState:gcode': gcode.CommandError: Probe attach failed!
2024-02-15 22:55:56,713 [screen.py:show_popup_message()] - echo: Attach_Probe 
2024-02-15 22:55:56,717 [screen.py:_send_action()] - printer.gcode.script: {'script': 'Attach_Probe'}
2024-02-15 22:55:58,450 [screen.py:show_popup_message()] - error: Error evaluating 'gcode_macro _SetProbeState:gcode': gcode.CommandError: Probe attach failed!
2024-02-15 22:56:10,688 [screen.py:show_popup_message()] - echo: Attach_Probe 
2024-02-15 22:56:10,696 [screen.py:_send_action()] - printer.gcode.script: {'script': 'Attach_Probe'}
2024-02-15 22:56:12,440 [screen.py:show_popup_message()] - error: Error evaluating 'gcode_macro _SetProbeState:gcode': gcode.CommandError: Probe attach failed!
2024-02-15 22:56:13,761 [screen.py:show_popup_message()] - echo: Attach_Probe 
2024-02-15 22:56:13,765 [screen.py:_send_action()] - printer.gcode.script: {'script': 'Attach_Probe'}
2024-02-15 22:56:15,492 [screen.py:show_popup_message()] - error: Error evaluating 'gcode_macro _SetProbeState:gcode': gcode.CommandError: Probe attach failed!
2024-02-15 22:56:24,403 [screen.py:show_popup_message()] - echo: Attach_Probe 
2024-02-15 22:56:24,411 [screen.py:_send_action()] - printer.gcode.script: {'script': 'Attach_Probe'}
2024-02-15 22:56:26,151 [screen.py:show_popup_message()] - error: Error evaluating 'gcode_macro _SetProbeState:gcode': gcode.CommandError: Probe attach failed!
2024-02-15 22:56:31,761 [screen.py:show_popup_message()] - echo: Attach_Probe 
2024-02-15 22:56:31,766 [screen.py:_send_action()] - printer.gcode.script: {'script': 'Attach_Probe'}
2024-02-15 22:56:33,558 [screen.py:show_popup_message()] - error: Error evaluating 'gcode_macro _SetProbeState:gcode': gcode.CommandError: Probe attach failed!
2024-02-15 22:56:35,177 [screen.py:show_popup_message()] - echo: Attach_Probe 
2024-02-15 22:56:35,181 [screen.py:_send_action()] - printer.gcode.script: {'script': 'Attach_Probe'}
2024-02-15 22:56:36,914 [screen.py:show_popup_message()] - error: Error evaluating 'gcode_macro _SetProbeState:gcode': gcode.CommandError: Probe attach failed!
2024-02-15 22:57:06,223 [screen.py:show_popup_message()] - echo: Attach_Probe 
2024-02-15 22:57:06,231 [screen.py:_send_action()] - printer.gcode.script: {'script': 'Attach_Probe'}
                                                                                               2024-02-15 22:17:22,522 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-02-15 22:17:22,523 [functions.py:log_start()] - KlipperScreen Version: v0.3.8-89-g2a5e9b3
2024-02-15 22:17:22,523 [functions.py:log_start()] - Python version: 3.9
2024-02-15 22:17:22,679 [config.py:get_config_file_location()] - Passed config (-c): .
2024-02-15 22:17:22,679 [config.py:__init__()] - Config path location: /home/pi/printer_data/config/KlipperScreen.conf
2024-02-15 22:17:22,694 [config.py:log_config()] -  ===== Config File =====

=======================
2024-02-15 22:17:22,696 [config.py:__init__()] - ====== Saved Def ======

[graph Printer]
heater_bed = False
extruder = False

=======================
2024-02-15 22:17:22,696 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-02-15 22:17:22,799 [config.py:create_translations()] - Selected lang: None OS lang: en_GB
2024-02-15 22:17:22,799 [config.py:install_language()] - Using lang en
2024-02-15 22:17:22,816 [screen.py:__init__()] - Screen resolution: 800x480
2024-02-15 22:17:22,818 [KlippyGtk.py:__init__()] - Font size: 16.6 (medium)
2024-02-15 22:17:23,271 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2024-02-15 22:17:23,279 [screen.py:set_screenblanking_timeout()] - Using DPMS
2024-02-15 22:17:23,286 [screen.py:initial_connection()] - Default printer: None
2024-02-15 22:17:23,315 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-02-15 22:17:23,316 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-02-15 22:17:23,351 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-02-15 22:17:23,357 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-02-15 22:17:23,371 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-15 22:17:23,380 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/access/oneshot_token
2024-02-15 22:17:23,381 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-02-15 22:17:23,390 [_logging.py:info()] - Websocket connected
2024-02-15 22:17:23,390 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-02-15 22:17:23,420 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-15 22:17:23,428 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2024-02-15 22:17:23,429 [printer.py:configure_cameras()] - Cameras: []
2024-02-15 22:17:23,429 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'history', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-310-g67c98f6', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-02-15 22:17:23,445 [KlippyRest.py:_do_request()] - 404 Client Error>>Not Found for url>>http://127.0.0.1:7125/printer/info
2024-02-15 22:17:26,422 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-15 22:17:26,430 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2024-02-15 22:17:26,431 [printer.py:configure_cameras()] - Cameras: []
2024-02-15 22:17:26,431 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'history', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-310-g67c98f6', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-02-15 22:17:26,440 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2024-02-15 22:17:26,519 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2024-02-15 22:17:26,521 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro _Probe_Variables': {'variable_probe_attached': 'False', 'variable_probe_state': 'False', 'variable_probe_lock': 'False', 'variable_probe_z_homed': 'False', 'variable_z_endstop_x': '0', 'variable_z_endstop_y': '0', 'gcode': ''}, 'gcode_macro _klicky_check_variables_version': {'gcode': '\n{% set version = printer["gcode_macro _User_Variables"].version|default(0) %}\n\n{% if version != 1 %}\n{ action_raise_error("Please update your klicky variables, there are some functionality changes") }\n{% endif %}'}, 'gcode_macro _KlickyDebug': {'gcode': '\n{% set message  = params.MSG %}\n{% set debug = printer["gcode_macro _User_Variables"].debug|default(False) %}\n\n{% if debug %}\n{ action_respond_info(message) }\n{% endif %}'}, 'gcode_macro _exit_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move  = params.MOVE|default(0) %}\n{% set speed = printer["gcode_macro _User_Variables"].travel_speed %}\n\n\nM400\nSET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\nRESTORE_GCODE_STATE NAME={function} MOVE={move} MOVE_SPEED={speed}'}, 'gcode_macro _entry_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move_accel = printer["gcode_macro _User_Variables"].move_accel|default(1000) %}\n\nM400\nSAVE_GCODE_STATE NAME={function}\n\nSET_GCODE_OFFSET Z=0\n\nG90\n\nSET_VELOCITY_LIMIT ACCEL={move_accel}'}, 'gcode_macro _Homing_Variables': {'gcode': '\n{% set reset  = params.RESET|default(0) %}\n{% if reset %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }\n{% endif %}'}, 'gcode_macro Attach_Probe_Lock': {'description': 'Attaches Klicky Probe, can only be docked after unlocking', 'gcode': '\nAttach_Probe\n_Probe_Lock'}, 'gcode_macro Dock_Probe_Unlock': {'description': 'Docks Klicky Probe even if it was locked', 'gcode': '\n_Probe_Unlock\nDock_Probe'}, 'gcode_macro _Probe_Unlock': {'description': 'Unlocks Klicky Probe state', 'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to False"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }'}, 'gcode_macro _Probe_Lock': {'description': 'Locks Klicky Probe state', 'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to True"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ True }'}, 'gcode_macro _DeployKlickyDock': {'description': 'Deploys Klicky servo-controlled dock', 'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_deploy = printer["gcode_macro _User_Variables"].servo_deploy|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_DeployKlickyDock Klicky servo configuration enabled"\n{% if servo_deploy == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo deploy angle specified") }\n{% endif %}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _DeployDock"] is defined %}\n_KlickyDebug msg="_DeployKlickyDock calling _DeployDock"\n_DeployDock\n{% endif %}'}, 'gcode_macro _RetractKlickyDock': {'description': 'Retracts Klicky servo-controlled dock', 'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_retract = printer["gcode_macro _User_Variables"].servo_retract|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_RetractKlickyDock Klicky servo configuration enabled"\n{% if servo_retract == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo retract angle specified") }\n{% endif %}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _RetractDock"] is defined %}\n_KlickyDebug msg="_RetractKlickyDock calling _RetractDock"\n_RetractDock\n{% endif %}'}, 'gcode_macro Attach_Probe': {'description': 'Attaches Klicky Probe', 'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set attachmove2_x = printer["gcode_macro _User_Variables"].attachmove2_x|default(0) %}\n{% set attachmove2_y = printer["gcode_macro _User_Variables"].attachmove2_y|default(0) %}\n{% set attachmove2_z = printer["gcode_macro _User_Variables"].attachmove2_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n_entry_point function=Attach_Probe\n\n{% if bypass_probe_docking == False %}\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n_KlickyDebug msg="Attach_Probe Axis homed"\n\n\n{% elif not probe_attached and not probe_lock %}\n_KlickyDebug msg="Attach_Probe going to attach probe"\n{% if verbose %}\n{ action_respond_info("Attaching Probe") }\n{% endif %}\n_KLICKY_STATUS_BUSY\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% if not enable_z_hop %}\n_KlickyDebug msg="Attach_Probe z_hop disabled"\n{% set safe_z = 0 %}\n{% endif %}\n{% endif %}\n\n\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero, duplicate?") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Umbilical_Path\n\n_entry_point function=Attach_Probe_intern\n\n\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n_DeployKlickyDock\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}"\nG0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}\n\n_RetractKlickyDock\n\n{% if ((printer.gcode_move.gcode_position.z < safe_z) or (docklocation_z != -128 and docklocation_z < safe_z ))%}\n_KlickyDebug msg="Attach_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\n_CheckProbe action=attach\n\n_exit_point function=Attach_Probe_intern move={goback}\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe locked not attaching probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already attached!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe already attached, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Attach_Probe\n{% else %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}'}, 'gcode_macro Dock_Probe': {'description': 'Docks Klicky Probe', 'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n{% if bypass_probe_docking == True %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}\n\n{% if bypass_probe_docking != True %}\n_entry_point function=Dock_Probe\n\n\n{% if probe_attached and not probe_lock %}\n_KLICKY_STATUS_BUSY\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Dock_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n_Umbilical_Path\n\n\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n\n_DeployKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\n\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}"\nG0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}\n{% endif %}\n\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}\n\n\n_RetractKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving away from the dock to G0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}\n\n\n{% if (printer.gcode_move.gcode_position.z < safe_z) %}\n_KlickyDebug msg="Dock_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\nG4 P1000\n_CheckProbe action=dock\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe locked not docking probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already docked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe already docked, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Dock_Probe move={goback}\n{% else %}\n_KlickyDebug msg="Dock_Probe probe docking bypassed, doing nothing"\n{% endif %}'}, 'gcode_macro PROBE_CALIBRATE': {'rename_existing': '_PROBE_CALIBRATE', 'description': 'Calibrate the probes z_offset with klicky automount', 'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_calibrate Axis homed"\n_KlickyDebug msg="probe_calibrate Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_CALIBRATE with the probe above the BED, check klicky_variables bed size!") }\n{% endif %}\n\n{% if bypass_probe_docking == False %}\n_CheckProbe action=query\nG90\nAttach_Probe back=1\n_KLICKY_STATUS_CALIBRATING_Z\n\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nM118 moving the toolhead 20 mm from the bed\n_KlickyDebug msg="probe_calibrate Moving Z up by 20mm"\nTESTZ Z=20\nM118 remove manually the probe and continue calibration\n_KLICKY_STATUS_READY\n{% else %}\n_KLICKY_STATUS_CALIBRATING_Z\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n_KLICKY_STATUS_READY\n{% endif %}'}, 'gcode_macro PROBE_ACCURACY': {'rename_existing': '_PROBE_ACCURACY', 'description': 'Probe Z-height accuracy at current XY position with klicky automount', 'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_accuracy Axis homed"\n_KlickyDebug msg="probe_accuracy Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n_entry_point function=PROBE_ACCURACY\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_ACCURACY with the probe above the BED, check klicky_variables bed size!") }\n{% endif%}\n\n_CheckProbe action=query\nAttach_Probe back=1\n\n_KlickyDebug msg="probe_accuracy calling klipper probe accuracy"\n_PROBE_ACCURACY {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nDock_Probe back=1\n\n_exit_point function=PROBE_ACCURACY move=1'}, 'force_move': {'enable_force_move': 'True'}, 'homing_override': {'axes': 'xyz', 'gcode': '\n\n_User_Variables\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n{% set kinematic_z = 0 %}\n{% set dock_on_zhome = printer["gcode_macro _User_Variables"].dock_on_zhome|default(True) %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set home_backoff_x = printer["gcode_macro _User_Variables"].home_backoff_x|default(0) %}\n{% set home_backoff_y = printer["gcode_macro _User_Variables"].home_backoff_y|default(0) %}\n{% set override_homing = printer["gcode_macro _User_Variables"].override_homing|default(\'\') %}\n\n\n_klicky_check_variables_version\n\n_CheckProbe action=query\n\n\n{% set home_x, home_y, home_z, leave_probe_attached = False, False, False, False %}\n\n{% if \'PROBE_LOCK\' in params%}\n{% if verbose %}\n{ action_respond_info("PROBE_LOCK = True") }\n{% endif %}\n{% set leave_probe_attached = True %}\n{% endif %}\n\n\n{% if not \'X\' in params\nand not \'Y\' in params\nand not \'Z\' in params %}\n\n{% set home_x, home_y, home_z = True, True, True %}\n_KlickyDebug msg="homing_override goint to home all axes"\n\n{% else %}\n{% if \'X\' in params %}\n{% set home_x = True %}\n_KlickyDebug msg="homing_override goint to home X"\n\n{% endif %}\n\n{% if \'Y\' in params %}\n{% set home_y = True %}\n_KlickyDebug msg="homing_override goint to home Y"\n{% endif %}\n\n{% if \'Z\' in params %}\n{% set home_z = True %}\n_KlickyDebug msg="homing_override goint to home Z"\n{% endif %}\n\n{% if \'X\' in params\nand \'Y\' in params\nand \'Z\' in params %}\n\n\n_Homing_Variables reset=1\n_KlickyDebug msg="homing_override goint to home all axes"\n{% endif %}\n\n{% endif %}\n\n_entry_point function=homing_override\n_KLICKY_STATUS_HOMING\n\n\n{% if \'z\' not in printer.toolhead.homed_axes %}\n{% if enable_z_hop == False %}\n_KlickyDebug msg="homing_override z_hop disabled"\n\n{% set kinematic_z = safe_z %}\n{% set safe_z = safe_z %}\n{% endif %}\n{% endif %}\n\n\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes and \'z\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("No axis homed") }\n{% endif %}\n_KlickyDebug msg="homing_override no axis homed, setting position as X=Y=0 Z={kinematic_z}"\nSET_KINEMATIC_POSITION X=0 Y=0 Z={kinematic_z}\nM400\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% if home_z != True %}\n_KlickyDebug msg="homing_override clearing axis homed state if not already homing Z"\nM84\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("X or Y not homed, forcing full G28") }\n{% endif %}\n{% set home_x, home_y, home_z = True, True, True %}\n{% endif %}\n{% endif %}\n\n\n{% if ((attachmove_y == 0 and override_homing == \'\' ) or (override_homing == \'Y\'))%}\n\n{% if home_y %}\n{% if override_homing == \'Y\' %}\n_KlickyDebug msg="homing_override Y homing first override, due to override_homing = Y"\n{% else %}\n_KlickyDebug msg="homing_override Y homing first override, due to attachmove_y = 0"\n{% endif %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y G28 Y0"\nG28 Y0\n\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop-home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n{% set home_y = False %}\n{% endif %}\n\n\n\n{% if home_x %}\n{% if verbose %}\n{ action_respond_info("Homing X") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in X homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_X"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_X external script to handle the X homing"\n_HOME_X\n{% else %}\n_KlickyDebug msg="homing_override Homing X, G28 X0"\nG28 X0\n\n{% if home_backoff_x != 0 %}\n{% if (printer.configfile.settings.stepper_x.position_endstop > (printer.configfile.settings.stepper_x.position_min|default(0) + printer.configfile.settings.stepper_x.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n\n{% if home_y %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y, G28 Y0"\nG28 Y0\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if verbose %}\n{ action_respond_info("Homing Z") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe configured as a virtual Z endstop attaching probe"\nAttach_Probe\n\n{% if leave_probe_attached %}\n_Probe_Lock\n{% endif %}\n{% elif dock_on_zhome == True %}\nDock_Probe\n{% endif %}\n\n_Home_Z_\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe no longer required, docking probe"\nDock_Probe\n{% elif dock_on_zhome == False %}\nDock_Probe\n{% endif %}\n{% endif %}\n_CheckProbe action=query\n\n\n_Park_Toolhead\n\n_exit_point function=homing_override\n_KLICKY_STATUS_READY'}, 'gcode_macro _Umbilical_Path': {'gcode': '\n{% set umbilical = printer["gcode_macro _User_Variables"].umbilical %}\n{% set umbilical_x = printer["gcode_macro _User_Variables"].umbilical_x %}\n{% set umbilical_y = printer["gcode_macro _User_Variables"].umbilical_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n\n{% if umbilical %}\n\n_entry_point function=Umbilical_Path\n\n_KlickyDebug msg="_Umbilical_Path moving to G0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}"\nG0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}\n\n_exit_point function=Umbilical_Path\n{% endif %}'}, 'gcode_macro _Home_Z_': {'gcode': '\n{% set z_endstop_x = printer["gcode_macro _Probe_Variables"].z_endstop_x %}\n{% set z_endstop_y = printer["gcode_macro _Probe_Variables"].z_endstop_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}    {% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Home_Z\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n{% else %}\n_KlickyDebug msg="_Home_Z_ XY Axis homed"\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="_Home_Z_ Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n\n\n_KlickyDebug msg="_Home_Z_ moving to Z endstop position G0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}"\nG0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}\n_KlickyDebug msg="_Home_Z_ Homing Z G28 Z"\nG28 Z0\n_KlickyDebug msg="_Home_Z_ toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_exit_point function=Home_Z'}, 'gcode_macro _CheckProbe': {'variable_probe_state': '0', 'gcode': '\nQuery_Probe\n_SetProbeState action={ params.ACTION }'}, 'gcode_macro _SetProbeState': {'gcode': '\n{% set query_probe_triggered = printer.probe.last_query %}\n{% set action  = params.ACTION|default(\'\') %}\n\n\n{% if query_probe_triggered %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ False }\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ True }\n{% endif %}\n\n{% if action == \'query\' %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_state VALUE={ query_probe_triggered }\n{% endif %}\n\n\n\n\n{% if not query_probe_triggered and action == \'dock\' %}\n{ action_raise_error("Probe dock failed!") }\n{% endif %}\n\n\n{% if query_probe_triggered and action == \'attach\' %}\n{ action_raise_error("Probe attach failed!") }\n{% endif %}'}, 'gcode_macro _Park_Toolhead': {'gcode': '\n{% set park_toolhead = printer["gcode_macro _User_Variables"].park_toolhead %}\n{% set parkposition_x = printer["gcode_macro _User_Variables"].parkposition_x %}\n{% set parkposition_y = printer["gcode_macro _User_Variables"].parkposition_y %}\n{% set parkposition_z = printer["gcode_macro _User_Variables"].parkposition_z %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Park_Toolhead\n\n{% if park_toolhead and \'xyz\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Parking Toolhead") }\n{% endif %}\n{% if parkposition_z == -128 %}\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}\n\n{% else %}\n\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}\n\n{% endif %}\n\n{% endif %}\n_exit_point function=Park_Toolhead'}, 'gcode_macro _klicky_status_ready': {'gcode': '\n{% if printer[\'gcode_macro status_ready\'] is defined %}\n_KlickyDebug msg="_klicky_status_ready activating the LED STATUS_READY"\nSTATUS_READY\n{% endif %}'}, 'gcode_macro _klicky_status_busy': {'gcode': '\n{% if printer[\'gcode_macro status_busy\'] is defined %}\n_KlickyDebug msg="_klicky_status_busy activating the LED STATUS_BUSY"\nSTATUS_BUSY\n{% endif %}'}, 'gcode_macro _klicky_status_leveling': {'gcode': '\n{% if printer[\'gcode_macro status_leveling\'] is defined %}\n_KlickyDebug msg="_klicky_status_leveling activating the LED STATUS_LEVELING"\nSTATUS_LEVELING\n{% endif %}'}, 'gcode_macro _klicky_status_homing': {'gcode': '\n{% if printer[\'gcode_macro status_homing\'] is defined %}\n_KlickyDebug msg="_klicky_status_homing activating the LED STATUS_HOMING"\nSTATUS_HOMING\n{% endif %}'}, 'gcode_macro _klicky_status_cleaning': {'gcode': '\n{% if printer[\'gcode_macro status_cleaning\'] is defined %}\n_KlickyDebug msg="_klicky_status_cleaning activating the LED STATUS_CLEANING"\nSTATUS_CLEANING\n{% endif %}'}, 'gcode_macro _klicky_status_meshing': {'gcode': '\n{% if printer[\'gcode_macro status_meshing\'] is defined %}\n_KlickyDebug msg="_klicky_status_meshing activating the LED STATUS_MESHING"\nSTATUS_MESHING\n{% endif %}'}, 'gcode_macro _klicky_status_calibrating_z': {'gcode': '\n{% if printer[\'gcode_macro status_calibrating_z\'] is defined %}\n_KlickyDebug msg="_klicky_status_calibrating_z activating the LED STATUS_CALIBRATING_Z"\nSTATUS_CALIBRATING_Z\n{% endif %}'}, 'z_calibration': {'nozzle_xy_position': '172, 301', 'switch_xy_position': '171.5, 282', 'bed_xy_position': '150, 150', 'switch_offset': '0.09', 'offset_margins': '-1.0,1.0', 'speed': '50', 'probing_first_fast': 'false', 'start_gcode': 'Attach_Probe', 'end_gcode': 'Dock_Probe'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_28003C001150535556323420-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '^PG6', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '25', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'PG9', 'position_min': '0', 'position_endstop': '300', 'position_max': '303.5', 'homing_speed': '25', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': '!PG3', 'enable_pin': '!PG5', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'PG10', 'position_max': '290', 'position_min': '-4.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3', 'position_endstop': '-0.711'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA0', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': '!PF10', 'enable_pin': '!PG2', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PC13', 'dir_pin': 'PF0', 'enable_pin': '!PF1', 'rotation_distance': '21.9459674016', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.75', 'heater_pin': 'PA1', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF4', 'min_temp': '10', 'max_temp': '270', 'max_power': '1.0', 'min_extrude_temp': '170', 'pressure_advance': '0.05', 'pressure_advance_smooth_time': '0.040', 'control': 'pid', 'pid_kp': '26.572', 'pid_ki': '2.036', 'pid_kd': '86.691'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.5', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PA2', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF3', 'max_power': '1', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '55.196', 'pid_ki': '2.091', 'pid_kd': '364.295'}, 'probe': {'pin': 'PG15', 'x_offset': '0', 'y_offset': '25.0', 'z_offset': '0', 'speed': '10.0', 'samples': '5', 'samples_result': 'median', 'sample_retract_dist': '3.0', 'samples_tolerance': '0.006', 'samples_tolerance_retries': '6'}, 'fan': {'pin': 'PA8', 'kick_start_time': '0.5', 'off_below': '0.10'}, 'heater_fan hotend_fan': {'pin': 'PE5', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'controller_fan controller_fan': {'pin': 'PD12', 'kick_start_time': '0.5', 'heater': 'heater_bed'}, 'heater_fan exhaust_fan': {'pin': 'PD13', 'max_power': '1.0', 'shutdown_speed': '0.0', 'kick_start_time': '5.0', 'heater': 'heater_bed', 'heater_temp': '60', 'fan_speed': '1.0'}, 'output_pin caselight': {'pin': 'PD15', 'pwm': 'true', 'shutdown_value': '0', 'value': '1', 'cycle_time': '0.01'}, 'neopixel headlight': {'pin': 'PB0', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '0.0', 'initial_green': '0.2157', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'temperature_sensor chamber_temp': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF5', 'min_temp': '0', 'max_temp': '100', 'gcode_id': 'chamber_th'}, 'idle_timeout': {'timeout': '1800'}, 'z_tilt': {'z_positions': '\n-50, 18\n150, 348\n350, 18', 'points': '\n30, 5\n150, 245\n270, 5', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'gcode_macro _User_Variables': {'variable_verbose': 'True', 'variable_debug': 'False', 'variable_travel_speed': '200', 'variable_move_accel': '1000', 'variable_dock_speed': '50', 'variable_release_speed': '75', 'variable_z_drop_speed': '20', 'variable_safe_z': '25', 'variable_enable_z_hop': 'True', 'variable_max_bed_y': '300', 'variable_max_bed_x': '300', 'variable_z_endstop_x': '172', 'variable_z_endstop_y': '301', 'variable_docklocation_x': '40.5', 'variable_docklocation_y': '303.5', 'variable_docklocation_z': '-128', 'variable_enable_dock_servo': 'False', 'variable_servo_name': "'NAME'", 'variable_servo_deploy': '10', 'variable_servo_retract': '11', 'variable_servo_delay': '250', 'variable_dockmove_x': '40', 'variable_dockmove_y': '0', 'variable_dockmove_z': '0', 'variable_attachmove_x': '0', 'variable_attachmove_y': '30', 'variable_attachmove_z': '0', 'variable_umbilical': 'False', 'variable_umbilical_x': '15', 'variable_umbilical_y': '15', 'variable_park_toolhead': 'False', 'variable_parkposition_x': '125', 'variable_parkposition_y': '125', 'variable_parkposition_z': '30', 'variable_version': '1', 'variable_attachmove2_x': '0', 'variable_attachmove2_y': '0', 'variable_attachmove2_z': '0', 'variable_home_backoff_x': '10', 'variable_home_backoff_y': '10', 'variable_override_homing': "''", 'variable_dock_on_zhome': 'True', 'gcode': '\n{% set Mx = printer[\'configfile\'].config["stepper_x"]["position_max"]|float %}\n{% set My = printer[\'configfile\'].config["stepper_y"]["position_max"]|float %}\n{% set Ox = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set Oy = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set Oz = printer[\'configfile\'].config["probe"]["z_offset"]|float %}\n\n\n{% if z_endstop_x != 0 or z_endstop_y != 0 %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ z_endstop_x }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ z_endstop_y }\n\n\n{% else %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ (Mx * 0.5) - Ox }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ (My * 0.5) - Oy }\n{% endif %}'}, 'gcode_macro PRINT_START': {'gcode': '\nM117 Homing...\nG28\nATTACH_PROBE\nZ_TILT_ADJUST\nDOCK_PROBE\nG28\n\n\n\n\n\n\n\nG0 X150 Y150 Z30 F3600'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_28003C001150535556323420-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro _probe_variables': {'gcode': '', 'description': 'G-Code macro', 'variable_probe_attached': 'False', 'variable_probe_state': 'False', 'variable_probe_lock': 'False', 'variable_probe_z_homed': 'False', 'variable_z_endstop_x': '0', 'variable_z_endstop_y': '0'}, 'gcode_macro _klicky_check_variables_version': {'gcode': '\n{% set version = printer["gcode_macro _User_Variables"].version|default(0) %}\n\n{% if version != 1 %}\n{ action_raise_error("Please update your klicky variables, there are some functionality changes") }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klickydebug': {'gcode': '\n{% set message  = params.MSG %}\n{% set debug = printer["gcode_macro _User_Variables"].debug|default(False) %}\n\n{% if debug %}\n{ action_respond_info(message) }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _exit_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move  = params.MOVE|default(0) %}\n{% set speed = printer["gcode_macro _User_Variables"].travel_speed %}\n\n\nM400\nSET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\nRESTORE_GCODE_STATE NAME={function} MOVE={move} MOVE_SPEED={speed}', 'description': 'G-Code macro'}, 'gcode_macro _entry_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move_accel = printer["gcode_macro _User_Variables"].move_accel|default(1000) %}\n\nM400\nSAVE_GCODE_STATE NAME={function}\n\nSET_GCODE_OFFSET Z=0\n\nG90\n\nSET_VELOCITY_LIMIT ACCEL={move_accel}', 'description': 'G-Code macro'}, 'gcode_macro _homing_variables': {'gcode': '\n{% set reset  = params.RESET|default(0) %}\n{% if reset %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro attach_probe_lock': {'gcode': '\nAttach_Probe\n_Probe_Lock', 'description': 'Attaches Klicky Probe, can only be docked after unlocking'}, 'gcode_macro dock_probe_unlock': {'gcode': '\n_Probe_Unlock\nDock_Probe', 'description': 'Docks Klicky Probe even if it was locked'}, 'gcode_macro _probe_unlock': {'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to False"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }', 'description': 'Unlocks Klicky Probe state'}, 'gcode_macro _probe_lock': {'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to True"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ True }', 'description': 'Locks Klicky Probe state'}, 'gcode_macro _deployklickydock': {'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_deploy = printer["gcode_macro _User_Variables"].servo_deploy|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_DeployKlickyDock Klicky servo configuration enabled"\n{% if servo_deploy == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo deploy angle specified") }\n{% endif %}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _DeployDock"] is defined %}\n_KlickyDebug msg="_DeployKlickyDock calling _DeployDock"\n_DeployDock\n{% endif %}', 'description': 'Deploys Klicky servo-controlled dock'}, 'gcode_macro _retractklickydock': {'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_retract = printer["gcode_macro _User_Variables"].servo_retract|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_RetractKlickyDock Klicky servo configuration enabled"\n{% if servo_retract == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo retract angle specified") }\n{% endif %}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _RetractDock"] is defined %}\n_KlickyDebug msg="_RetractKlickyDock calling _RetractDock"\n_RetractDock\n{% endif %}', 'description': 'Retracts Klicky servo-controlled dock'}, 'gcode_macro attach_probe': {'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set attachmove2_x = printer["gcode_macro _User_Variables"].attachmove2_x|default(0) %}\n{% set attachmove2_y = printer["gcode_macro _User_Variables"].attachmove2_y|default(0) %}\n{% set attachmove2_z = printer["gcode_macro _User_Variables"].attachmove2_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n_entry_point function=Attach_Probe\n\n{% if bypass_probe_docking == False %}\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n_KlickyDebug msg="Attach_Probe Axis homed"\n\n\n{% elif not probe_attached and not probe_lock %}\n_KlickyDebug msg="Attach_Probe going to attach probe"\n{% if verbose %}\n{ action_respond_info("Attaching Probe") }\n{% endif %}\n_KLICKY_STATUS_BUSY\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% if not enable_z_hop %}\n_KlickyDebug msg="Attach_Probe z_hop disabled"\n{% set safe_z = 0 %}\n{% endif %}\n{% endif %}\n\n\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero, duplicate?") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Umbilical_Path\n\n_entry_point function=Attach_Probe_intern\n\n\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n_DeployKlickyDock\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}"\nG0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}\n\n_RetractKlickyDock\n\n{% if ((printer.gcode_move.gcode_position.z < safe_z) or (docklocation_z != -128 and docklocation_z < safe_z ))%}\n_KlickyDebug msg="Attach_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\n_CheckProbe action=attach\n\n_exit_point function=Attach_Probe_intern move={goback}\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe locked not attaching probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already attached!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe already attached, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Attach_Probe\n{% else %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}', 'description': 'Attaches Klicky Probe'}, 'gcode_macro dock_probe': {'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n{% if bypass_probe_docking == True %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}\n\n{% if bypass_probe_docking != True %}\n_entry_point function=Dock_Probe\n\n\n{% if probe_attached and not probe_lock %}\n_KLICKY_STATUS_BUSY\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Dock_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n_Umbilical_Path\n\n\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n\n_DeployKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\n\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}"\nG0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}\n{% endif %}\n\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}\n\n\n_RetractKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving away from the dock to G0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}\n\n\n{% if (printer.gcode_move.gcode_position.z < safe_z) %}\n_KlickyDebug msg="Dock_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\nG4 P1000\n_CheckProbe action=dock\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe locked not docking probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already docked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe already docked, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Dock_Probe move={goback}\n{% else %}\n_KlickyDebug msg="Dock_Probe probe docking bypassed, doing nothing"\n{% endif %}', 'description': 'Docks Klicky Probe'}, 'gcode_macro probe_calibrate': {'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_calibrate Axis homed"\n_KlickyDebug msg="probe_calibrate Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_CALIBRATE with the probe above the BED, check klicky_variables bed size!") }\n{% endif %}\n\n{% if bypass_probe_docking == False %}\n_CheckProbe action=query\nG90\nAttach_Probe back=1\n_KLICKY_STATUS_CALIBRATING_Z\n\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nM118 moving the toolhead 20 mm from the bed\n_KlickyDebug msg="probe_calibrate Moving Z up by 20mm"\nTESTZ Z=20\nM118 remove manually the probe and continue calibration\n_KLICKY_STATUS_READY\n{% else %}\n_KLICKY_STATUS_CALIBRATING_Z\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n_KLICKY_STATUS_READY\n{% endif %}', 'rename_existing': '_PROBE_CALIBRATE', 'description': 'Calibrate the probes z_offset with klicky automount'}, 'gcode_macro probe_accuracy': {'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_accuracy Axis homed"\n_KlickyDebug msg="probe_accuracy Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n_entry_point function=PROBE_ACCURACY\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_ACCURACY with the probe above the BED, check klicky_variables bed size!") }\n{% endif%}\n\n_CheckProbe action=query\nAttach_Probe back=1\n\n_KlickyDebug msg="probe_accuracy calling klipper probe accuracy"\n_PROBE_ACCURACY {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nDock_Probe back=1\n\n_exit_point function=PROBE_ACCURACY move=1', 'rename_existing': '_PROBE_ACCURACY', 'description': 'Probe Z-height accuracy at current XY position with klicky automount'}, 'force_move': {'enable_force_move': True}, 'homing_override': {'axes': 'xyz', 'gcode': '\n\n_User_Variables\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n{% set kinematic_z = 0 %}\n{% set dock_on_zhome = printer["gcode_macro _User_Variables"].dock_on_zhome|default(True) %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set home_backoff_x = printer["gcode_macro _User_Variables"].home_backoff_x|default(0) %}\n{% set home_backoff_y = printer["gcode_macro _User_Variables"].home_backoff_y|default(0) %}\n{% set override_homing = printer["gcode_macro _User_Variables"].override_homing|default(\'\') %}\n\n\n_klicky_check_variables_version\n\n_CheckProbe action=query\n\n\n{% set home_x, home_y, home_z, leave_probe_attached = False, False, False, False %}\n\n{% if \'PROBE_LOCK\' in params%}\n{% if verbose %}\n{ action_respond_info("PROBE_LOCK = True") }\n{% endif %}\n{% set leave_probe_attached = True %}\n{% endif %}\n\n\n{% if not \'X\' in params\nand not \'Y\' in params\nand not \'Z\' in params %}\n\n{% set home_x, home_y, home_z = True, True, True %}\n_KlickyDebug msg="homing_override goint to home all axes"\n\n{% else %}\n{% if \'X\' in params %}\n{% set home_x = True %}\n_KlickyDebug msg="homing_override goint to home X"\n\n{% endif %}\n\n{% if \'Y\' in params %}\n{% set home_y = True %}\n_KlickyDebug msg="homing_override goint to home Y"\n{% endif %}\n\n{% if \'Z\' in params %}\n{% set home_z = True %}\n_KlickyDebug msg="homing_override goint to home Z"\n{% endif %}\n\n{% if \'X\' in params\nand \'Y\' in params\nand \'Z\' in params %}\n\n\n_Homing_Variables reset=1\n_KlickyDebug msg="homing_override goint to home all axes"\n{% endif %}\n\n{% endif %}\n\n_entry_point function=homing_override\n_KLICKY_STATUS_HOMING\n\n\n{% if \'z\' not in printer.toolhead.homed_axes %}\n{% if enable_z_hop == False %}\n_KlickyDebug msg="homing_override z_hop disabled"\n\n{% set kinematic_z = safe_z %}\n{% set safe_z = safe_z %}\n{% endif %}\n{% endif %}\n\n\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes and \'z\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("No axis homed") }\n{% endif %}\n_KlickyDebug msg="homing_override no axis homed, setting position as X=Y=0 Z={kinematic_z}"\nSET_KINEMATIC_POSITION X=0 Y=0 Z={kinematic_z}\nM400\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% if home_z != True %}\n_KlickyDebug msg="homing_override clearing axis homed state if not already homing Z"\nM84\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("X or Y not homed, forcing full G28") }\n{% endif %}\n{% set home_x, home_y, home_z = True, True, True %}\n{% endif %}\n{% endif %}\n\n\n{% if ((attachmove_y == 0 and override_homing == \'\' ) or (override_homing == \'Y\'))%}\n\n{% if home_y %}\n{% if override_homing == \'Y\' %}\n_KlickyDebug msg="homing_override Y homing first override, due to override_homing = Y"\n{% else %}\n_KlickyDebug msg="homing_override Y homing first override, due to attachmove_y = 0"\n{% endif %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y G28 Y0"\nG28 Y0\n\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop-home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n{% set home_y = False %}\n{% endif %}\n\n\n\n{% if home_x %}\n{% if verbose %}\n{ action_respond_info("Homing X") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in X homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_X"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_X external script to handle the X homing"\n_HOME_X\n{% else %}\n_KlickyDebug msg="homing_override Homing X, G28 X0"\nG28 X0\n\n{% if home_backoff_x != 0 %}\n{% if (printer.configfile.settings.stepper_x.position_endstop > (printer.configfile.settings.stepper_x.position_min|default(0) + printer.configfile.settings.stepper_x.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n\n{% if home_y %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y, G28 Y0"\nG28 Y0\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if verbose %}\n{ action_respond_info("Homing Z") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe configured as a virtual Z endstop attaching probe"\nAttach_Probe\n\n{% if leave_probe_attached %}\n_Probe_Lock\n{% endif %}\n{% elif dock_on_zhome == True %}\nDock_Probe\n{% endif %}\n\n_Home_Z_\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe no longer required, docking probe"\nDock_Probe\n{% elif dock_on_zhome == False %}\nDock_Probe\n{% endif %}\n{% endif %}\n_CheckProbe action=query\n\n\n_Park_Toolhead\n\n_exit_point function=homing_override\n_KLICKY_STATUS_READY'}, 'gcode_macro _umbilical_path': {'gcode': '\n{% set umbilical = printer["gcode_macro _User_Variables"].umbilical %}\n{% set umbilical_x = printer["gcode_macro _User_Variables"].umbilical_x %}\n{% set umbilical_y = printer["gcode_macro _User_Variables"].umbilical_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n\n{% if umbilical %}\n\n_entry_point function=Umbilical_Path\n\n_KlickyDebug msg="_Umbilical_Path moving to G0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}"\nG0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}\n\n_exit_point function=Umbilical_Path\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _home_z_': {'gcode': '\n{% set z_endstop_x = printer["gcode_macro _Probe_Variables"].z_endstop_x %}\n{% set z_endstop_y = printer["gcode_macro _Probe_Variables"].z_endstop_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}    {% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Home_Z\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n{% else %}\n_KlickyDebug msg="_Home_Z_ XY Axis homed"\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="_Home_Z_ Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n\n\n_KlickyDebug msg="_Home_Z_ moving to Z endstop position G0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}"\nG0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}\n_KlickyDebug msg="_Home_Z_ Homing Z G28 Z"\nG28 Z0\n_KlickyDebug msg="_Home_Z_ toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_exit_point function=Home_Z', 'description': 'G-Code macro'}, 'gcode_macro _checkprobe': {'gcode': '\nQuery_Probe\n_SetProbeState action={ params.ACTION }', 'description': 'G-Code macro', 'variable_probe_state': '0'}, 'gcode_macro _setprobestate': {'gcode': '\n{% set query_probe_triggered = printer.probe.last_query %}\n{% set action  = params.ACTION|default(\'\') %}\n\n\n{% if query_probe_triggered %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ False }\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ True }\n{% endif %}\n\n{% if action == \'query\' %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_state VALUE={ query_probe_triggered }\n{% endif %}\n\n\n\n\n{% if not query_probe_triggered and action == \'dock\' %}\n{ action_raise_error("Probe dock failed!") }\n{% endif %}\n\n\n{% if query_probe_triggered and action == \'attach\' %}\n{ action_raise_error("Probe attach failed!") }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _park_toolhead': {'gcode': '\n{% set park_toolhead = printer["gcode_macro _User_Variables"].park_toolhead %}\n{% set parkposition_x = printer["gcode_macro _User_Variables"].parkposition_x %}\n{% set parkposition_y = printer["gcode_macro _User_Variables"].parkposition_y %}\n{% set parkposition_z = printer["gcode_macro _User_Variables"].parkposition_z %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Park_Toolhead\n\n{% if park_toolhead and \'xyz\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Parking Toolhead") }\n{% endif %}\n{% if parkposition_z == -128 %}\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}\n\n{% else %}\n\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}\n\n{% endif %}\n\n{% endif %}\n_exit_point function=Park_Toolhead', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_ready': {'gcode': '\n{% if printer[\'gcode_macro status_ready\'] is defined %}\n_KlickyDebug msg="_klicky_status_ready activating the LED STATUS_READY"\nSTATUS_READY\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_busy': {'gcode': '\n{% if printer[\'gcode_macro status_busy\'] is defined %}\n_KlickyDebug msg="_klicky_status_busy activating the LED STATUS_BUSY"\nSTATUS_BUSY\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_leveling': {'gcode': '\n{% if printer[\'gcode_macro status_leveling\'] is defined %}\n_KlickyDebug msg="_klicky_status_leveling activating the LED STATUS_LEVELING"\nSTATUS_LEVELING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_homing': {'gcode': '\n{% if printer[\'gcode_macro status_homing\'] is defined %}\n_KlickyDebug msg="_klicky_status_homing activating the LED STATUS_HOMING"\nSTATUS_HOMING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_cleaning': {'gcode': '\n{% if printer[\'gcode_macro status_cleaning\'] is defined %}\n_KlickyDebug msg="_klicky_status_cleaning activating the LED STATUS_CLEANING"\nSTATUS_CLEANING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_meshing': {'gcode': '\n{% if printer[\'gcode_macro status_meshing\'] is defined %}\n_KlickyDebug msg="_klicky_status_meshing activating the LED STATUS_MESHING"\nSTATUS_MESHING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_calibrating_z': {'gcode': '\n{% if printer[\'gcode_macro status_calibrating_z\'] is defined %}\n_KlickyDebug msg="_klicky_status_calibrating_z activating the LED STATUS_CALIBRATING_Z"\nSTATUS_CALIBRATING_Z\n{% endif %}', 'description': 'G-Code macro'}, 'z_calibration': {'switch_offset': 0.09, 'offset_margins': '-1.0,1.0', 'speed': 50.0, 'samples_result': 'none', 'probing_first_fast': False, 'nozzle_xy_position': '172, 301', 'switch_xy_position': '171.5, 282', 'bed_xy_position': '150, 150', 'start_gcode': 'Attach_Probe', 'before_switch_gcode': '', 'end_gcode': 'Dock_Probe'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': '^PG6', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'PG9', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 303.5, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PF11', 'dir_pin': '!PG3', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG5', 'endstop_pin': 'PG10', 'position_endstop': -0.711, 'position_min': -4.5, 'position_max': 290.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA0'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PF9', 'dir_pin': '!PF10', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG2'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF4', 'min_temp': 10.0, 'max_temp': 270.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 26.572, 'pid_ki': 2.036, 'pid_kd': 86.691, 'heater_pin': 'PA1', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PC13', 'pressure_advance': 0.05, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'PF0', 'rotation_distance': 21.9459674016, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 55.196, 'pid_ki': 2.091, 'pid_kd': 364.295, 'heater_pin': 'PA2', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'probe': {'z_offset': 0.0, 'deactivate_on_each_sample': True, 'activate_gcode': '', 'deactivate_gcode': '', 'pin': 'PG15', 'speed': 10.0, 'lift_speed': 10.0, 'x_offset': 0.0, 'y_offset': 25.0, 'samples': 5, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.006, 'samples_tolerance_retries': 6}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE5', 'fan_speed': 1.0}, 'controller_fan controller_fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD12', 'fan_speed': 1.0, 'idle_speed': 1.0, 'idle_timeout': 30, 'heater': ['heater_bed']}, 'heater_fan exhaust_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 5.0, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13', 'fan_speed': 1.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PD15', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 1.0, 'maximum_mcu_duration': 0.0, 'value': 1.0, 'shutdown_value': 0.0}, 'neopixel headlight': {'pin': 'PB0', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 0.0, 'initial_green': 0.2157, 'initial_blue': 1.0, 'initial_white': 0.0}, 'temperature_sensor chamber_temp': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF5', 'min_temp': 0.0, 'max_temp': 100.0, 'gcode_id': 'chamber_th'}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [150.0, 348.0], [350.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 5.0], [150.0, 245.0], [270.0, 5.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'gcode_macro _user_variables': {'gcode': '\n{% set Mx = printer[\'configfile\'].config["stepper_x"]["position_max"]|float %}\n{% set My = printer[\'configfile\'].config["stepper_y"]["position_max"]|float %}\n{% set Ox = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set Oy = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set Oz = printer[\'configfile\'].config["probe"]["z_offset"]|float %}\n\n\n{% if z_endstop_x != 0 or z_endstop_y != 0 %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ z_endstop_x }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ z_endstop_y }\n\n\n{% else %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ (Mx * 0.5) - Ox }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ (My * 0.5) - Oy }\n{% endif %}', 'description': 'G-Code macro', 'variable_verbose': 'True', 'variable_debug': 'False', 'variable_travel_speed': '200', 'variable_move_accel': '1000', 'variable_dock_speed': '50', 'variable_release_speed': '75', 'variable_z_drop_speed': '20', 'variable_safe_z': '25', 'variable_enable_z_hop': 'True', 'variable_max_bed_y': '300', 'variable_max_bed_x': '300', 'variable_z_endstop_x': '172', 'variable_z_endstop_y': '301', 'variable_docklocation_x': '40.5', 'variable_docklocation_y': '303.5', 'variable_docklocation_z': '-128', 'variable_enable_dock_servo': 'False', 'variable_servo_name': "'NAME'", 'variable_servo_deploy': '10', 'variable_servo_retract': '11', 'variable_servo_delay': '250', 'variable_dockmove_x': '40', 'variable_dockmove_y': '0', 'variable_dockmove_z': '0', 'variable_attachmove_x': '0', 'variable_attachmove_y': '30', 'variable_attachmove_z': '0', 'variable_umbilical': 'False', 'variable_umbilical_x': '15', 'variable_umbilical_y': '15', 'variable_park_toolhead': 'False', 'variable_parkposition_x': '125', 'variable_parkposition_y': '125', 'variable_parkposition_z': '30', 'variable_version': '1', 'variable_attachmove2_x': '0', 'variable_attachmove2_y': '0', 'variable_attachmove2_z': '0', 'variable_home_backoff_x': '10', 'variable_home_backoff_y': '10', 'variable_override_homing': "''", 'variable_dock_on_zhome': 'True'}, 'gcode_macro print_start': {'gcode': '\nM117 Homing...\nG28\nATTACH_PROBE\nZ_TILT_ADJUST\nDOCK_PROBE\nG28\n\n\n\n\n\n\n\nG0 X150 Y150 Z30 F3600', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1500.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-02-15 22:17:26,524 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-15 22:17:26,525 [printer.py:reinit()] - Klipper version: v0.12.0-103-g6ce6fbbc-dirty
2024-02-15 22:17:26,525 [printer.py:reinit()] - # Extruders: 1
2024-02-15 22:17:26,525 [printer.py:reinit()] - # Temperature devices: 2
2024-02-15 22:17:26,525 [printer.py:reinit()] - # Fans: 4
2024-02-15 22:17:26,525 [printer.py:reinit()] - # Output pins: 1
2024-02-15 22:17:26,525 [printer.py:reinit()] - # Leds: 1
2024-02-15 22:17:26,536 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2024-02-15 22:17:26,538 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-02-15 22:17:26,829 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor chamber_temp&fan&controller_fan controller_fan&heater_fan hotend_fan&heater_fan exhaust_fan&output_pin caselight&neopixel headlight
2024-02-15 22:17:26,832 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-02-15 22:17:26,832 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-02-15 22:17:26,833 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-02-15 22:17:26,833 [screen.py:init_klipper()] - Printer initialized
2024-02-15 22:17:26,834 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2024-02-15 22:17:26,834 [printer.py:change_state()] - Adding callback for state: ready
2024-02-15 22:17:26,837 [screen.py:_load_panel()] - Loading panel: main_menu
2024-02-15 22:17:26,919 [main_menu.py:__init__()] - ### Making MainMenu
2024-02-15 22:17:26,925 [main_menu.py:add_device()] - Adding device: extruder
2024-02-15 22:17:26,932 [main_menu.py:add_device()] - Adding device: heater_bed
2024-02-15 22:17:26,938 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber_temp
2024-02-15 22:17:26,966 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-02-15 22:17:26,977 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-02-15 22:17:26,987 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'temperature_sensor chamber_temp', 'extruder']
2024-02-15 22:17:26,998 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2024-02-15 22:17:26,999 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-02-15 22:17:27,432 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-15 22:17:27,433 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'history', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-310-g67c98f6', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-02-15 22:17:27,450 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2024-02-15 22:17:27,523 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2024-02-15 22:17:27,526 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro _Probe_Variables': {'variable_probe_attached': 'False', 'variable_probe_state': 'False', 'variable_probe_lock': 'False', 'variable_probe_z_homed': 'False', 'variable_z_endstop_x': '0', 'variable_z_endstop_y': '0', 'gcode': ''}, 'gcode_macro _klicky_check_variables_version': {'gcode': '\n{% set version = printer["gcode_macro _User_Variables"].version|default(0) %}\n\n{% if version != 1 %}\n{ action_raise_error("Please update your klicky variables, there are some functionality changes") }\n{% endif %}'}, 'gcode_macro _KlickyDebug': {'gcode': '\n{% set message  = params.MSG %}\n{% set debug = printer["gcode_macro _User_Variables"].debug|default(False) %}\n\n{% if debug %}\n{ action_respond_info(message) }\n{% endif %}'}, 'gcode_macro _exit_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move  = params.MOVE|default(0) %}\n{% set speed = printer["gcode_macro _User_Variables"].travel_speed %}\n\n\nM400\nSET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\nRESTORE_GCODE_STATE NAME={function} MOVE={move} MOVE_SPEED={speed}'}, 'gcode_macro _entry_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move_accel = printer["gcode_macro _User_Variables"].move_accel|default(1000) %}\n\nM400\nSAVE_GCODE_STATE NAME={function}\n\nSET_GCODE_OFFSET Z=0\n\nG90\n\nSET_VELOCITY_LIMIT ACCEL={move_accel}'}, 'gcode_macro _Homing_Variables': {'gcode': '\n{% set reset  = params.RESET|default(0) %}\n{% if reset %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }\n{% endif %}'}, 'gcode_macro Attach_Probe_Lock': {'description': 'Attaches Klicky Probe, can only be docked after unlocking', 'gcode': '\nAttach_Probe\n_Probe_Lock'}, 'gcode_macro Dock_Probe_Unlock': {'description': 'Docks Klicky Probe even if it was locked', 'gcode': '\n_Probe_Unlock\nDock_Probe'}, 'gcode_macro _Probe_Unlock': {'description': 'Unlocks Klicky Probe state', 'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to False"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }'}, 'gcode_macro _Probe_Lock': {'description': 'Locks Klicky Probe state', 'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to True"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ True }'}, 'gcode_macro _DeployKlickyDock': {'description': 'Deploys Klicky servo-controlled dock', 'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_deploy = printer["gcode_macro _User_Variables"].servo_deploy|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_DeployKlickyDock Klicky servo configuration enabled"\n{% if servo_deploy == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo deploy angle specified") }\n{% endif %}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _DeployDock"] is defined %}\n_KlickyDebug msg="_DeployKlickyDock calling _DeployDock"\n_DeployDock\n{% endif %}'}, 'gcode_macro _RetractKlickyDock': {'description': 'Retracts Klicky servo-controlled dock', 'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_retract = printer["gcode_macro _User_Variables"].servo_retract|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_RetractKlickyDock Klicky servo configuration enabled"\n{% if servo_retract == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo retract angle specified") }\n{% endif %}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _RetractDock"] is defined %}\n_KlickyDebug msg="_RetractKlickyDock calling _RetractDock"\n_RetractDock\n{% endif %}'}, 'gcode_macro Attach_Probe': {'description': 'Attaches Klicky Probe', 'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set attachmove2_x = printer["gcode_macro _User_Variables"].attachmove2_x|default(0) %}\n{% set attachmove2_y = printer["gcode_macro _User_Variables"].attachmove2_y|default(0) %}\n{% set attachmove2_z = printer["gcode_macro _User_Variables"].attachmove2_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n_entry_point function=Attach_Probe\n\n{% if bypass_probe_docking == False %}\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n_KlickyDebug msg="Attach_Probe Axis homed"\n\n\n{% elif not probe_attached and not probe_lock %}\n_KlickyDebug msg="Attach_Probe going to attach probe"\n{% if verbose %}\n{ action_respond_info("Attaching Probe") }\n{% endif %}\n_KLICKY_STATUS_BUSY\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% if not enable_z_hop %}\n_KlickyDebug msg="Attach_Probe z_hop disabled"\n{% set safe_z = 0 %}\n{% endif %}\n{% endif %}\n\n\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero, duplicate?") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Umbilical_Path\n\n_entry_point function=Attach_Probe_intern\n\n\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n_DeployKlickyDock\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}"\nG0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}\n\n_RetractKlickyDock\n\n{% if ((printer.gcode_move.gcode_position.z < safe_z) or (docklocation_z != -128 and docklocation_z < safe_z ))%}\n_KlickyDebug msg="Attach_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\n_CheckProbe action=attach\n\n_exit_point function=Attach_Probe_intern move={goback}\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe locked not attaching probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already attached!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe already attached, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Attach_Probe\n{% else %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}'}, 'gcode_macro Dock_Probe': {'description': 'Docks Klicky Probe', 'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n{% if bypass_probe_docking == True %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}\n\n{% if bypass_probe_docking != True %}\n_entry_point function=Dock_Probe\n\n\n{% if probe_attached and not probe_lock %}\n_KLICKY_STATUS_BUSY\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Dock_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n_Umbilical_Path\n\n\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n\n_DeployKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\n\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}"\nG0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}\n{% endif %}\n\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}\n\n\n_RetractKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving away from the dock to G0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}\n\n\n{% if (printer.gcode_move.gcode_position.z < safe_z) %}\n_KlickyDebug msg="Dock_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\nG4 P1000\n_CheckProbe action=dock\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe locked not docking probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already docked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe already docked, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Dock_Probe move={goback}\n{% else %}\n_KlickyDebug msg="Dock_Probe probe docking bypassed, doing nothing"\n{% endif %}'}, 'gcode_macro PROBE_CALIBRATE': {'rename_existing': '_PROBE_CALIBRATE', 'description': 'Calibrate the probes z_offset with klicky automount', 'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_calibrate Axis homed"\n_KlickyDebug msg="probe_calibrate Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_CALIBRATE with the probe above the BED, check klicky_variables bed size!") }\n{% endif %}\n\n{% if bypass_probe_docking == False %}\n_CheckProbe action=query\nG90\nAttach_Probe back=1\n_KLICKY_STATUS_CALIBRATING_Z\n\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nM118 moving the toolhead 20 mm from the bed\n_KlickyDebug msg="probe_calibrate Moving Z up by 20mm"\nTESTZ Z=20\nM118 remove manually the probe and continue calibration\n_KLICKY_STATUS_READY\n{% else %}\n_KLICKY_STATUS_CALIBRATING_Z\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n_KLICKY_STATUS_READY\n{% endif %}'}, 'gcode_macro PROBE_ACCURACY': {'rename_existing': '_PROBE_ACCURACY', 'description': 'Probe Z-height accuracy at current XY position with klicky automount', 'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_accuracy Axis homed"\n_KlickyDebug msg="probe_accuracy Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n_entry_point function=PROBE_ACCURACY\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_ACCURACY with the probe above the BED, check klicky_variables bed size!") }\n{% endif%}\n\n_CheckProbe action=query\nAttach_Probe back=1\n\n_KlickyDebug msg="probe_accuracy calling klipper probe accuracy"\n_PROBE_ACCURACY {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nDock_Probe back=1\n\n_exit_point function=PROBE_ACCURACY move=1'}, 'force_move': {'enable_force_move': 'True'}, 'homing_override': {'axes': 'xyz', 'gcode': '\n\n_User_Variables\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n{% set kinematic_z = 0 %}\n{% set dock_on_zhome = printer["gcode_macro _User_Variables"].dock_on_zhome|default(True) %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set home_backoff_x = printer["gcode_macro _User_Variables"].home_backoff_x|default(0) %}\n{% set home_backoff_y = printer["gcode_macro _User_Variables"].home_backoff_y|default(0) %}\n{% set override_homing = printer["gcode_macro _User_Variables"].override_homing|default(\'\') %}\n\n\n_klicky_check_variables_version\n\n_CheckProbe action=query\n\n\n{% set home_x, home_y, home_z, leave_probe_attached = False, False, False, False %}\n\n{% if \'PROBE_LOCK\' in params%}\n{% if verbose %}\n{ action_respond_info("PROBE_LOCK = True") }\n{% endif %}\n{% set leave_probe_attached = True %}\n{% endif %}\n\n\n{% if not \'X\' in params\nand not \'Y\' in params\nand not \'Z\' in params %}\n\n{% set home_x, home_y, home_z = True, True, True %}\n_KlickyDebug msg="homing_override goint to home all axes"\n\n{% else %}\n{% if \'X\' in params %}\n{% set home_x = True %}\n_KlickyDebug msg="homing_override goint to home X"\n\n{% endif %}\n\n{% if \'Y\' in params %}\n{% set home_y = True %}\n_KlickyDebug msg="homing_override goint to home Y"\n{% endif %}\n\n{% if \'Z\' in params %}\n{% set home_z = True %}\n_KlickyDebug msg="homing_override goint to home Z"\n{% endif %}\n\n{% if \'X\' in params\nand \'Y\' in params\nand \'Z\' in params %}\n\n\n_Homing_Variables reset=1\n_KlickyDebug msg="homing_override goint to home all axes"\n{% endif %}\n\n{% endif %}\n\n_entry_point function=homing_override\n_KLICKY_STATUS_HOMING\n\n\n{% if \'z\' not in printer.toolhead.homed_axes %}\n{% if enable_z_hop == False %}\n_KlickyDebug msg="homing_override z_hop disabled"\n\n{% set kinematic_z = safe_z %}\n{% set safe_z = safe_z %}\n{% endif %}\n{% endif %}\n\n\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes and \'z\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("No axis homed") }\n{% endif %}\n_KlickyDebug msg="homing_override no axis homed, setting position as X=Y=0 Z={kinematic_z}"\nSET_KINEMATIC_POSITION X=0 Y=0 Z={kinematic_z}\nM400\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% if home_z != True %}\n_KlickyDebug msg="homing_override clearing axis homed state if not already homing Z"\nM84\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("X or Y not homed, forcing full G28") }\n{% endif %}\n{% set home_x, home_y, home_z = True, True, True %}\n{% endif %}\n{% endif %}\n\n\n{% if ((attachmove_y == 0 and override_homing == \'\' ) or (override_homing == \'Y\'))%}\n\n{% if home_y %}\n{% if override_homing == \'Y\' %}\n_KlickyDebug msg="homing_override Y homing first override, due to override_homing = Y"\n{% else %}\n_KlickyDebug msg="homing_override Y homing first override, due to attachmove_y = 0"\n{% endif %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y G28 Y0"\nG28 Y0\n\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop-home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n{% set home_y = False %}\n{% endif %}\n\n\n\n{% if home_x %}\n{% if verbose %}\n{ action_respond_info("Homing X") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in X homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_X"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_X external script to handle the X homing"\n_HOME_X\n{% else %}\n_KlickyDebug msg="homing_override Homing X, G28 X0"\nG28 X0\n\n{% if home_backoff_x != 0 %}\n{% if (printer.configfile.settings.stepper_x.position_endstop > (printer.configfile.settings.stepper_x.position_min|default(0) + printer.configfile.settings.stepper_x.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n\n{% if home_y %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y, G28 Y0"\nG28 Y0\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if verbose %}\n{ action_respond_info("Homing Z") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe configured as a virtual Z endstop attaching probe"\nAttach_Probe\n\n{% if leave_probe_attached %}\n_Probe_Lock\n{% endif %}\n{% elif dock_on_zhome == True %}\nDock_Probe\n{% endif %}\n\n_Home_Z_\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe no longer required, docking probe"\nDock_Probe\n{% elif dock_on_zhome == False %}\nDock_Probe\n{% endif %}\n{% endif %}\n_CheckProbe action=query\n\n\n_Park_Toolhead\n\n_exit_point function=homing_override\n_KLICKY_STATUS_READY'}, 'gcode_macro _Umbilical_Path': {'gcode': '\n{% set umbilical = printer["gcode_macro _User_Variables"].umbilical %}\n{% set umbilical_x = printer["gcode_macro _User_Variables"].umbilical_x %}\n{% set umbilical_y = printer["gcode_macro _User_Variables"].umbilical_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n\n{% if umbilical %}\n\n_entry_point function=Umbilical_Path\n\n_KlickyDebug msg="_Umbilical_Path moving to G0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}"\nG0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}\n\n_exit_point function=Umbilical_Path\n{% endif %}'}, 'gcode_macro _Home_Z_': {'gcode': '\n{% set z_endstop_x = printer["gcode_macro _Probe_Variables"].z_endstop_x %}\n{% set z_endstop_y = printer["gcode_macro _Probe_Variables"].z_endstop_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}    {% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Home_Z\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n{% else %}\n_KlickyDebug msg="_Home_Z_ XY Axis homed"\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="_Home_Z_ Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n\n\n_KlickyDebug msg="_Home_Z_ moving to Z endstop position G0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}"\nG0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}\n_KlickyDebug msg="_Home_Z_ Homing Z G28 Z"\nG28 Z0\n_KlickyDebug msg="_Home_Z_ toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_exit_point function=Home_Z'}, 'gcode_macro _CheckProbe': {'variable_probe_state': '0', 'gcode': '\nQuery_Probe\n_SetProbeState action={ params.ACTION }'}, 'gcode_macro _SetProbeState': {'gcode': '\n{% set query_probe_triggered = printer.probe.last_query %}\n{% set action  = params.ACTION|default(\'\') %}\n\n\n{% if query_probe_triggered %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ False }\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ True }\n{% endif %}\n\n{% if action == \'query\' %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_state VALUE={ query_probe_triggered }\n{% endif %}\n\n\n\n\n{% if not query_probe_triggered and action == \'dock\' %}\n{ action_raise_error("Probe dock failed!") }\n{% endif %}\n\n\n{% if query_probe_triggered and action == \'attach\' %}\n{ action_raise_error("Probe attach failed!") }\n{% endif %}'}, 'gcode_macro _Park_Toolhead': {'gcode': '\n{% set park_toolhead = printer["gcode_macro _User_Variables"].park_toolhead %}\n{% set parkposition_x = printer["gcode_macro _User_Variables"].parkposition_x %}\n{% set parkposition_y = printer["gcode_macro _User_Variables"].parkposition_y %}\n{% set parkposition_z = printer["gcode_macro _User_Variables"].parkposition_z %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Park_Toolhead\n\n{% if park_toolhead and \'xyz\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Parking Toolhead") }\n{% endif %}\n{% if parkposition_z == -128 %}\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}\n\n{% else %}\n\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}\n\n{% endif %}\n\n{% endif %}\n_exit_point function=Park_Toolhead'}, 'gcode_macro _klicky_status_ready': {'gcode': '\n{% if printer[\'gcode_macro status_ready\'] is defined %}\n_KlickyDebug msg="_klicky_status_ready activating the LED STATUS_READY"\nSTATUS_READY\n{% endif %}'}, 'gcode_macro _klicky_status_busy': {'gcode': '\n{% if printer[\'gcode_macro status_busy\'] is defined %}\n_KlickyDebug msg="_klicky_status_busy activating the LED STATUS_BUSY"\nSTATUS_BUSY\n{% endif %}'}, 'gcode_macro _klicky_status_leveling': {'gcode': '\n{% if printer[\'gcode_macro status_leveling\'] is defined %}\n_KlickyDebug msg="_klicky_status_leveling activating the LED STATUS_LEVELING"\nSTATUS_LEVELING\n{% endif %}'}, 'gcode_macro _klicky_status_homing': {'gcode': '\n{% if printer[\'gcode_macro status_homing\'] is defined %}\n_KlickyDebug msg="_klicky_status_homing activating the LED STATUS_HOMING"\nSTATUS_HOMING\n{% endif %}'}, 'gcode_macro _klicky_status_cleaning': {'gcode': '\n{% if printer[\'gcode_macro status_cleaning\'] is defined %}\n_KlickyDebug msg="_klicky_status_cleaning activating the LED STATUS_CLEANING"\nSTATUS_CLEANING\n{% endif %}'}, 'gcode_macro _klicky_status_meshing': {'gcode': '\n{% if printer[\'gcode_macro status_meshing\'] is defined %}\n_KlickyDebug msg="_klicky_status_meshing activating the LED STATUS_MESHING"\nSTATUS_MESHING\n{% endif %}'}, 'gcode_macro _klicky_status_calibrating_z': {'gcode': '\n{% if printer[\'gcode_macro status_calibrating_z\'] is defined %}\n_KlickyDebug msg="_klicky_status_calibrating_z activating the LED STATUS_CALIBRATING_Z"\nSTATUS_CALIBRATING_Z\n{% endif %}'}, 'z_calibration': {'nozzle_xy_position': '172, 301', 'switch_xy_position': '171.5, 282', 'bed_xy_position': '150, 150', 'switch_offset': '0.09', 'offset_margins': '-1.0,1.0', 'speed': '50', 'probing_first_fast': 'false', 'start_gcode': 'Attach_Probe', 'end_gcode': 'Dock_Probe'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_28003C001150535556323420-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '^PG6', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '25', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'PG9', 'position_min': '0', 'position_endstop': '300', 'position_max': '303.5', 'homing_speed': '25', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': '!PG3', 'enable_pin': '!PG5', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'PG10', 'position_max': '290', 'position_min': '-4.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3', 'position_endstop': '-0.711'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA0', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': '!PF10', 'enable_pin': '!PG2', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PC13', 'dir_pin': 'PF0', 'enable_pin': '!PF1', 'rotation_distance': '21.9459674016', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.75', 'heater_pin': 'PA1', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF4', 'min_temp': '10', 'max_temp': '270', 'max_power': '1.0', 'min_extrude_temp': '170', 'pressure_advance': '0.05', 'pressure_advance_smooth_time': '0.040', 'control': 'pid', 'pid_kp': '26.572', 'pid_ki': '2.036', 'pid_kd': '86.691'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.5', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PA2', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF3', 'max_power': '1', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '55.196', 'pid_ki': '2.091', 'pid_kd': '364.295'}, 'probe': {'pin': 'PG15', 'x_offset': '0', 'y_offset': '25.0', 'z_offset': '0', 'speed': '10.0', 'samples': '5', 'samples_result': 'median', 'sample_retract_dist': '3.0', 'samples_tolerance': '0.006', 'samples_tolerance_retries': '6'}, 'fan': {'pin': 'PA8', 'kick_start_time': '0.5', 'off_below': '0.10'}, 'heater_fan hotend_fan': {'pin': 'PE5', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'controller_fan controller_fan': {'pin': 'PD12', 'kick_start_time': '0.5', 'heater': 'heater_bed'}, 'heater_fan exhaust_fan': {'pin': 'PD13', 'max_power': '1.0', 'shutdown_speed': '0.0', 'kick_start_time': '5.0', 'heater': 'heater_bed', 'heater_temp': '60', 'fan_speed': '1.0'}, 'output_pin caselight': {'pin': 'PD15', 'pwm': 'true', 'shutdown_value': '0', 'value': '1', 'cycle_time': '0.01'}, 'neopixel headlight': {'pin': 'PB0', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '0.0', 'initial_green': '0.2157', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'temperature_sensor chamber_temp': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF5', 'min_temp': '0', 'max_temp': '100', 'gcode_id': 'chamber_th'}, 'idle_timeout': {'timeout': '1800'}, 'z_tilt': {'z_positions': '\n-50, 18\n150, 348\n350, 18', 'points': '\n30, 5\n150, 245\n270, 5', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'gcode_macro _User_Variables': {'variable_verbose': 'True', 'variable_debug': 'False', 'variable_travel_speed': '200', 'variable_move_accel': '1000', 'variable_dock_speed': '50', 'variable_release_speed': '75', 'variable_z_drop_speed': '20', 'variable_safe_z': '25', 'variable_enable_z_hop': 'True', 'variable_max_bed_y': '300', 'variable_max_bed_x': '300', 'variable_z_endstop_x': '172', 'variable_z_endstop_y': '301', 'variable_docklocation_x': '40.5', 'variable_docklocation_y': '303.5', 'variable_docklocation_z': '-128', 'variable_enable_dock_servo': 'False', 'variable_servo_name': "'NAME'", 'variable_servo_deploy': '10', 'variable_servo_retract': '11', 'variable_servo_delay': '250', 'variable_dockmove_x': '40', 'variable_dockmove_y': '0', 'variable_dockmove_z': '0', 'variable_attachmove_x': '0', 'variable_attachmove_y': '30', 'variable_attachmove_z': '0', 'variable_umbilical': 'False', 'variable_umbilical_x': '15', 'variable_umbilical_y': '15', 'variable_park_toolhead': 'False', 'variable_parkposition_x': '125', 'variable_parkposition_y': '125', 'variable_parkposition_z': '30', 'variable_version': '1', 'variable_attachmove2_x': '0', 'variable_attachmove2_y': '0', 'variable_attachmove2_z': '0', 'variable_home_backoff_x': '10', 'variable_home_backoff_y': '10', 'variable_override_homing': "''", 'variable_dock_on_zhome': 'True', 'gcode': '\n{% set Mx = printer[\'configfile\'].config["stepper_x"]["position_max"]|float %}\n{% set My = printer[\'configfile\'].config["stepper_y"]["position_max"]|float %}\n{% set Ox = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set Oy = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set Oz = printer[\'configfile\'].config["probe"]["z_offset"]|float %}\n\n\n{% if z_endstop_x != 0 or z_endstop_y != 0 %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ z_endstop_x }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ z_endstop_y }\n\n\n{% else %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ (Mx * 0.5) - Ox }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ (My * 0.5) - Oy }\n{% endif %}'}, 'gcode_macro PRINT_START': {'gcode': '\nM117 Homing...\nG28\nATTACH_PROBE\nZ_TILT_ADJUST\nDOCK_PROBE\nG28\n\n\n\n\n\n\n\nG0 X150 Y150 Z30 F3600'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_28003C001150535556323420-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro _probe_variables': {'gcode': '', 'description': 'G-Code macro', 'variable_probe_attached': 'False', 'variable_probe_state': 'False', 'variable_probe_lock': 'False', 'variable_probe_z_homed': 'False', 'variable_z_endstop_x': '0', 'variable_z_endstop_y': '0'}, 'gcode_macro _klicky_check_variables_version': {'gcode': '\n{% set version = printer["gcode_macro _User_Variables"].version|default(0) %}\n\n{% if version != 1 %}\n{ action_raise_error("Please update your klicky variables, there are some functionality changes") }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klickydebug': {'gcode': '\n{% set message  = params.MSG %}\n{% set debug = printer["gcode_macro _User_Variables"].debug|default(False) %}\n\n{% if debug %}\n{ action_respond_info(message) }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _exit_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move  = params.MOVE|default(0) %}\n{% set speed = printer["gcode_macro _User_Variables"].travel_speed %}\n\n\nM400\nSET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\nRESTORE_GCODE_STATE NAME={function} MOVE={move} MOVE_SPEED={speed}', 'description': 'G-Code macro'}, 'gcode_macro _entry_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move_accel = printer["gcode_macro _User_Variables"].move_accel|default(1000) %}\n\nM400\nSAVE_GCODE_STATE NAME={function}\n\nSET_GCODE_OFFSET Z=0\n\nG90\n\nSET_VELOCITY_LIMIT ACCEL={move_accel}', 'description': 'G-Code macro'}, 'gcode_macro _homing_variables': {'gcode': '\n{% set reset  = params.RESET|default(0) %}\n{% if reset %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro attach_probe_lock': {'gcode': '\nAttach_Probe\n_Probe_Lock', 'description': 'Attaches Klicky Probe, can only be docked after unlocking'}, 'gcode_macro dock_probe_unlock': {'gcode': '\n_Probe_Unlock\nDock_Probe', 'description': 'Docks Klicky Probe even if it was locked'}, 'gcode_macro _probe_unlock': {'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to False"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }', 'description': 'Unlocks Klicky Probe state'}, 'gcode_macro _probe_lock': {'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to True"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ True }', 'description': 'Locks Klicky Probe state'}, 'gcode_macro _deployklickydock': {'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_deploy = printer["gcode_macro _User_Variables"].servo_deploy|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_DeployKlickyDock Klicky servo configuration enabled"\n{% if servo_deploy == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo deploy angle specified") }\n{% endif %}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _DeployDock"] is defined %}\n_KlickyDebug msg="_DeployKlickyDock calling _DeployDock"\n_DeployDock\n{% endif %}', 'description': 'Deploys Klicky servo-controlled dock'}, 'gcode_macro _retractklickydock': {'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_retract = printer["gcode_macro _User_Variables"].servo_retract|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_RetractKlickyDock Klicky servo configuration enabled"\n{% if servo_retract == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo retract angle specified") }\n{% endif %}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _RetractDock"] is defined %}\n_KlickyDebug msg="_RetractKlickyDock calling _RetractDock"\n_RetractDock\n{% endif %}', 'description': 'Retracts Klicky servo-controlled dock'}, 'gcode_macro attach_probe': {'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set attachmove2_x = printer["gcode_macro _User_Variables"].attachmove2_x|default(0) %}\n{% set attachmove2_y = printer["gcode_macro _User_Variables"].attachmove2_y|default(0) %}\n{% set attachmove2_z = printer["gcode_macro _User_Variables"].attachmove2_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n_entry_point function=Attach_Probe\n\n{% if bypass_probe_docking == False %}\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n_KlickyDebug msg="Attach_Probe Axis homed"\n\n\n{% elif not probe_attached and not probe_lock %}\n_KlickyDebug msg="Attach_Probe going to attach probe"\n{% if verbose %}\n{ action_respond_info("Attaching Probe") }\n{% endif %}\n_KLICKY_STATUS_BUSY\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% if not enable_z_hop %}\n_KlickyDebug msg="Attach_Probe z_hop disabled"\n{% set safe_z = 0 %}\n{% endif %}\n{% endif %}\n\n\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero, duplicate?") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Umbilical_Path\n\n_entry_point function=Attach_Probe_intern\n\n\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n_DeployKlickyDock\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}"\nG0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}\n\n_RetractKlickyDock\n\n{% if ((printer.gcode_move.gcode_position.z < safe_z) or (docklocation_z != -128 and docklocation_z < safe_z ))%}\n_KlickyDebug msg="Attach_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\n_CheckProbe action=attach\n\n_exit_point function=Attach_Probe_intern move={goback}\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe locked not attaching probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already attached!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe already attached, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Attach_Probe\n{% else %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}', 'description': 'Attaches Klicky Probe'}, 'gcode_macro dock_probe': {'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n{% if bypass_probe_docking == True %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}\n\n{% if bypass_probe_docking != True %}\n_entry_point function=Dock_Probe\n\n\n{% if probe_attached and not probe_lock %}\n_KLICKY_STATUS_BUSY\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Dock_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n_Umbilical_Path\n\n\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n\n_DeployKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\n\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}"\nG0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}\n{% endif %}\n\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}\n\n\n_RetractKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving away from the dock to G0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}\n\n\n{% if (printer.gcode_move.gcode_position.z < safe_z) %}\n_KlickyDebug msg="Dock_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\nG4 P1000\n_CheckProbe action=dock\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe locked not docking probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already docked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe already docked, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Dock_Probe move={goback}\n{% else %}\n_KlickyDebug msg="Dock_Probe probe docking bypassed, doing nothing"\n{% endif %}', 'description': 'Docks Klicky Probe'}, 'gcode_macro probe_calibrate': {'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_calibrate Axis homed"\n_KlickyDebug msg="probe_calibrate Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_CALIBRATE with the probe above the BED, check klicky_variables bed size!") }\n{% endif %}\n\n{% if bypass_probe_docking == False %}\n_CheckProbe action=query\nG90\nAttach_Probe back=1\n_KLICKY_STATUS_CALIBRATING_Z\n\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nM118 moving the toolhead 20 mm from the bed\n_KlickyDebug msg="probe_calibrate Moving Z up by 20mm"\nTESTZ Z=20\nM118 remove manually the probe and continue calibration\n_KLICKY_STATUS_READY\n{% else %}\n_KLICKY_STATUS_CALIBRATING_Z\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n_KLICKY_STATUS_READY\n{% endif %}', 'rename_existing': '_PROBE_CALIBRATE', 'description': 'Calibrate the probes z_offset with klicky automount'}, 'gcode_macro probe_accuracy': {'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_accuracy Axis homed"\n_KlickyDebug msg="probe_accuracy Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n_entry_point function=PROBE_ACCURACY\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_ACCURACY with the probe above the BED, check klicky_variables bed size!") }\n{% endif%}\n\n_CheckProbe action=query\nAttach_Probe back=1\n\n_KlickyDebug msg="probe_accuracy calling klipper probe accuracy"\n_PROBE_ACCURACY {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nDock_Probe back=1\n\n_exit_point function=PROBE_ACCURACY move=1', 'rename_existing': '_PROBE_ACCURACY', 'description': 'Probe Z-height accuracy at current XY position with klicky automount'}, 'force_move': {'enable_force_move': True}, 'homing_override': {'axes': 'xyz', 'gcode': '\n\n_User_Variables\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n{% set kinematic_z = 0 %}\n{% set dock_on_zhome = printer["gcode_macro _User_Variables"].dock_on_zhome|default(True) %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set home_backoff_x = printer["gcode_macro _User_Variables"].home_backoff_x|default(0) %}\n{% set home_backoff_y = printer["gcode_macro _User_Variables"].home_backoff_y|default(0) %}\n{% set override_homing = printer["gcode_macro _User_Variables"].override_homing|default(\'\') %}\n\n\n_klicky_check_variables_version\n\n_CheckProbe action=query\n\n\n{% set home_x, home_y, home_z, leave_probe_attached = False, False, False, False %}\n\n{% if \'PROBE_LOCK\' in params%}\n{% if verbose %}\n{ action_respond_info("PROBE_LOCK = True") }\n{% endif %}\n{% set leave_probe_attached = True %}\n{% endif %}\n\n\n{% if not \'X\' in params\nand not \'Y\' in params\nand not \'Z\' in params %}\n\n{% set home_x, home_y, home_z = True, True, True %}\n_KlickyDebug msg="homing_override goint to home all axes"\n\n{% else %}\n{% if \'X\' in params %}\n{% set home_x = True %}\n_KlickyDebug msg="homing_override goint to home X"\n\n{% endif %}\n\n{% if \'Y\' in params %}\n{% set home_y = True %}\n_KlickyDebug msg="homing_override goint to home Y"\n{% endif %}\n\n{% if \'Z\' in params %}\n{% set home_z = True %}\n_KlickyDebug msg="homing_override goint to home Z"\n{% endif %}\n\n{% if \'X\' in params\nand \'Y\' in params\nand \'Z\' in params %}\n\n\n_Homing_Variables reset=1\n_KlickyDebug msg="homing_override goint to home all axes"\n{% endif %}\n\n{% endif %}\n\n_entry_point function=homing_override\n_KLICKY_STATUS_HOMING\n\n\n{% if \'z\' not in printer.toolhead.homed_axes %}\n{% if enable_z_hop == False %}\n_KlickyDebug msg="homing_override z_hop disabled"\n\n{% set kinematic_z = safe_z %}\n{% set safe_z = safe_z %}\n{% endif %}\n{% endif %}\n\n\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes and \'z\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("No axis homed") }\n{% endif %}\n_KlickyDebug msg="homing_override no axis homed, setting position as X=Y=0 Z={kinematic_z}"\nSET_KINEMATIC_POSITION X=0 Y=0 Z={kinematic_z}\nM400\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% if home_z != True %}\n_KlickyDebug msg="homing_override clearing axis homed state if not already homing Z"\nM84\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("X or Y not homed, forcing full G28") }\n{% endif %}\n{% set home_x, home_y, home_z = True, True, True %}\n{% endif %}\n{% endif %}\n\n\n{% if ((attachmove_y == 0 and override_homing == \'\' ) or (override_homing == \'Y\'))%}\n\n{% if home_y %}\n{% if override_homing == \'Y\' %}\n_KlickyDebug msg="homing_override Y homing first override, due to override_homing = Y"\n{% else %}\n_KlickyDebug msg="homing_override Y homing first override, due to attachmove_y = 0"\n{% endif %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y G28 Y0"\nG28 Y0\n\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop-home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n{% set home_y = False %}\n{% endif %}\n\n\n\n{% if home_x %}\n{% if verbose %}\n{ action_respond_info("Homing X") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in X homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_X"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_X external script to handle the X homing"\n_HOME_X\n{% else %}\n_KlickyDebug msg="homing_override Homing X, G28 X0"\nG28 X0\n\n{% if home_backoff_x != 0 %}\n{% if (printer.configfile.settings.stepper_x.position_endstop > (printer.configfile.settings.stepper_x.position_min|default(0) + printer.configfile.settings.stepper_x.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n\n{% if home_y %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y, G28 Y0"\nG28 Y0\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if verbose %}\n{ action_respond_info("Homing Z") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe configured as a virtual Z endstop attaching probe"\nAttach_Probe\n\n{% if leave_probe_attached %}\n_Probe_Lock\n{% endif %}\n{% elif dock_on_zhome == True %}\nDock_Probe\n{% endif %}\n\n_Home_Z_\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe no longer required, docking probe"\nDock_Probe\n{% elif dock_on_zhome == False %}\nDock_Probe\n{% endif %}\n{% endif %}\n_CheckProbe action=query\n\n\n_Park_Toolhead\n\n_exit_point function=homing_override\n_KLICKY_STATUS_READY'}, 'gcode_macro _umbilical_path': {'gcode': '\n{% set umbilical = printer["gcode_macro _User_Variables"].umbilical %}\n{% set umbilical_x = printer["gcode_macro _User_Variables"].umbilical_x %}\n{% set umbilical_y = printer["gcode_macro _User_Variables"].umbilical_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n\n{% if umbilical %}\n\n_entry_point function=Umbilical_Path\n\n_KlickyDebug msg="_Umbilical_Path moving to G0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}"\nG0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}\n\n_exit_point function=Umbilical_Path\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _home_z_': {'gcode': '\n{% set z_endstop_x = printer["gcode_macro _Probe_Variables"].z_endstop_x %}\n{% set z_endstop_y = printer["gcode_macro _Probe_Variables"].z_endstop_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}    {% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Home_Z\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n{% else %}\n_KlickyDebug msg="_Home_Z_ XY Axis homed"\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="_Home_Z_ Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n\n\n_KlickyDebug msg="_Home_Z_ moving to Z endstop position G0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}"\nG0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}\n_KlickyDebug msg="_Home_Z_ Homing Z G28 Z"\nG28 Z0\n_KlickyDebug msg="_Home_Z_ toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_exit_point function=Home_Z', 'description': 'G-Code macro'}, 'gcode_macro _checkprobe': {'gcode': '\nQuery_Probe\n_SetProbeState action={ params.ACTION }', 'description': 'G-Code macro', 'variable_probe_state': '0'}, 'gcode_macro _setprobestate': {'gcode': '\n{% set query_probe_triggered = printer.probe.last_query %}\n{% set action  = params.ACTION|default(\'\') %}\n\n\n{% if query_probe_triggered %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ False }\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ True }\n{% endif %}\n\n{% if action == \'query\' %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_state VALUE={ query_probe_triggered }\n{% endif %}\n\n\n\n\n{% if not query_probe_triggered and action == \'dock\' %}\n{ action_raise_error("Probe dock failed!") }\n{% endif %}\n\n\n{% if query_probe_triggered and action == \'attach\' %}\n{ action_raise_error("Probe attach failed!") }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _park_toolhead': {'gcode': '\n{% set park_toolhead = printer["gcode_macro _User_Variables"].park_toolhead %}\n{% set parkposition_x = printer["gcode_macro _User_Variables"].parkposition_x %}\n{% set parkposition_y = printer["gcode_macro _User_Variables"].parkposition_y %}\n{% set parkposition_z = printer["gcode_macro _User_Variables"].parkposition_z %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Park_Toolhead\n\n{% if park_toolhead and \'xyz\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Parking Toolhead") }\n{% endif %}\n{% if parkposition_z == -128 %}\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}\n\n{% else %}\n\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}\n\n{% endif %}\n\n{% endif %}\n_exit_point function=Park_Toolhead', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_ready': {'gcode': '\n{% if printer[\'gcode_macro status_ready\'] is defined %}\n_KlickyDebug msg="_klicky_status_ready activating the LED STATUS_READY"\nSTATUS_READY\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_busy': {'gcode': '\n{% if printer[\'gcode_macro status_busy\'] is defined %}\n_KlickyDebug msg="_klicky_status_busy activating the LED STATUS_BUSY"\nSTATUS_BUSY\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_leveling': {'gcode': '\n{% if printer[\'gcode_macro status_leveling\'] is defined %}\n_KlickyDebug msg="_klicky_status_leveling activating the LED STATUS_LEVELING"\nSTATUS_LEVELING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_homing': {'gcode': '\n{% if printer[\'gcode_macro status_homing\'] is defined %}\n_KlickyDebug msg="_klicky_status_homing activating the LED STATUS_HOMING"\nSTATUS_HOMING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_cleaning': {'gcode': '\n{% if printer[\'gcode_macro status_cleaning\'] is defined %}\n_KlickyDebug msg="_klicky_status_cleaning activating the LED STATUS_CLEANING"\nSTATUS_CLEANING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_meshing': {'gcode': '\n{% if printer[\'gcode_macro status_meshing\'] is defined %}\n_KlickyDebug msg="_klicky_status_meshing activating the LED STATUS_MESHING"\nSTATUS_MESHING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_calibrating_z': {'gcode': '\n{% if printer[\'gcode_macro status_calibrating_z\'] is defined %}\n_KlickyDebug msg="_klicky_status_calibrating_z activating the LED STATUS_CALIBRATING_Z"\nSTATUS_CALIBRATING_Z\n{% endif %}', 'description': 'G-Code macro'}, 'z_calibration': {'switch_offset': 0.09, 'offset_margins': '-1.0,1.0', 'speed': 50.0, 'samples_result': 'none', 'probing_first_fast': False, 'nozzle_xy_position': '172, 301', 'switch_xy_position': '171.5, 282', 'bed_xy_position': '150, 150', 'start_gcode': 'Attach_Probe', 'before_switch_gcode': '', 'end_gcode': 'Dock_Probe'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': '^PG6', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'PG9', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 303.5, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PF11', 'dir_pin': '!PG3', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG5', 'endstop_pin': 'PG10', 'position_endstop': -0.711, 'position_min': -4.5, 'position_max': 290.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA0'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PF9', 'dir_pin': '!PF10', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG2'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF4', 'min_temp': 10.0, 'max_temp': 270.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 26.572, 'pid_ki': 2.036, 'pid_kd': 86.691, 'heater_pin': 'PA1', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PC13', 'pressure_advance': 0.05, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'PF0', 'rotation_distance': 21.9459674016, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 55.196, 'pid_ki': 2.091, 'pid_kd': 364.295, 'heater_pin': 'PA2', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'probe': {'z_offset': 0.0, 'deactivate_on_each_sample': True, 'activate_gcode': '', 'deactivate_gcode': '', 'pin': 'PG15', 'speed': 10.0, 'lift_speed': 10.0, 'x_offset': 0.0, 'y_offset': 25.0, 'samples': 5, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.006, 'samples_tolerance_retries': 6}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE5', 'fan_speed': 1.0}, 'controller_fan controller_fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD12', 'fan_speed': 1.0, 'idle_speed': 1.0, 'idle_timeout': 30, 'heater': ['heater_bed']}, 'heater_fan exhaust_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 5.0, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13', 'fan_speed': 1.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PD15', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 1.0, 'maximum_mcu_duration': 0.0, 'value': 1.0, 'shutdown_value': 0.0}, 'neopixel headlight': {'pin': 'PB0', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 0.0, 'initial_green': 0.2157, 'initial_blue': 1.0, 'initial_white': 0.0}, 'temperature_sensor chamber_temp': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF5', 'min_temp': 0.0, 'max_temp': 100.0, 'gcode_id': 'chamber_th'}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [150.0, 348.0], [350.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 5.0], [150.0, 245.0], [270.0, 5.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'gcode_macro _user_variables': {'gcode': '\n{% set Mx = printer[\'configfile\'].config["stepper_x"]["position_max"]|float %}\n{% set My = printer[\'configfile\'].config["stepper_y"]["position_max"]|float %}\n{% set Ox = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set Oy = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set Oz = printer[\'configfile\'].config["probe"]["z_offset"]|float %}\n\n\n{% if z_endstop_x != 0 or z_endstop_y != 0 %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ z_endstop_x }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ z_endstop_y }\n\n\n{% else %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ (Mx * 0.5) - Ox }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ (My * 0.5) - Oy }\n{% endif %}', 'description': 'G-Code macro', 'variable_verbose': 'True', 'variable_debug': 'False', 'variable_travel_speed': '200', 'variable_move_accel': '1000', 'variable_dock_speed': '50', 'variable_release_speed': '75', 'variable_z_drop_speed': '20', 'variable_safe_z': '25', 'variable_enable_z_hop': 'True', 'variable_max_bed_y': '300', 'variable_max_bed_x': '300', 'variable_z_endstop_x': '172', 'variable_z_endstop_y': '301', 'variable_docklocation_x': '40.5', 'variable_docklocation_y': '303.5', 'variable_docklocation_z': '-128', 'variable_enable_dock_servo': 'False', 'variable_servo_name': "'NAME'", 'variable_servo_deploy': '10', 'variable_servo_retract': '11', 'variable_servo_delay': '250', 'variable_dockmove_x': '40', 'variable_dockmove_y': '0', 'variable_dockmove_z': '0', 'variable_attachmove_x': '0', 'variable_attachmove_y': '30', 'variable_attachmove_z': '0', 'variable_umbilical': 'False', 'variable_umbilical_x': '15', 'variable_umbilical_y': '15', 'variable_park_toolhead': 'False', 'variable_parkposition_x': '125', 'variable_parkposition_y': '125', 'variable_parkposition_z': '30', 'variable_version': '1', 'variable_attachmove2_x': '0', 'variable_attachmove2_y': '0', 'variable_attachmove2_z': '0', 'variable_home_backoff_x': '10', 'variable_home_backoff_y': '10', 'variable_override_homing': "''", 'variable_dock_on_zhome': 'True'}, 'gcode_macro print_start': {'gcode': '\nM117 Homing...\nG28\nATTACH_PROBE\nZ_TILT_ADJUST\nDOCK_PROBE\nG28\n\n\n\n\n\n\n\nG0 X150 Y150 Z30 F3600', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1500.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-02-15 22:17:27,529 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-15 22:17:27,532 [printer.py:reinit()] - Klipper version: v0.12.0-103-g6ce6fbbc-dirty
2024-02-15 22:17:27,533 [printer.py:reinit()] - # Extruders: 1
2024-02-15 22:17:27,533 [printer.py:reinit()] - # Temperature devices: 2
2024-02-15 22:17:27,533 [printer.py:reinit()] - # Fans: 4
2024-02-15 22:17:27,533 [printer.py:reinit()] - # Output pins: 1
2024-02-15 22:17:27,533 [printer.py:reinit()] - # Leds: 1
2024-02-15 22:17:27,544 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2024-02-15 22:17:27,546 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-02-15 22:17:27,836 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor chamber_temp&fan&controller_fan controller_fan&heater_fan hotend_fan&heater_fan exhaust_fan&output_pin caselight&neopixel headlight
2024-02-15 22:17:27,840 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-02-15 22:17:27,840 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-02-15 22:17:27,841 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-02-15 22:17:27,841 [screen.py:init_klipper()] - Printer initialized
2024-02-15 22:17:32,424 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-16 20:40:19,417 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-16 20:40:24,417 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-16 20:40:29,417 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-16 20:40:34,417 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-16 20:40:39,421 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-16 20:40:44,417 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-16 20:40:48,361 [screen.py:show_popup_message()] - error: Error evaluating 'gcode_macro Attach_Probe:gcode': gcode.CommandError: Must Home X and Y Axis First!
2024-02-16 20:40:48,377 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-16 20:40:49,416 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-16 20:40:54,419 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-16 20:40:58,595 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-16 20:40:59,419 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-16 20:41:04,420 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-16 20:41:09,419 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-16 20:41:14,421 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-16 20:41:19,420 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-16 20:41:24,153 [screen.py:_load_panel()] - Loading panel: move
2024-02-16 20:41:24,246 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-02-16 20:41:25,141 [screen.py:_load_panel()] - Loading panel: menu
2024-02-16 20:41:25,217 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move > menu
2024-02-16 20:41:25,226 [menu.py:arrangeMenuItems()] - X > homing quad_gantry_level
2024-02-16 20:41:26,251 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G28'}
2024-02-16 20:42:31,076 [screen.py:show_popup_message()] - error: Error evaluating 'gcode_macro _SetProbeState:gcode': gcode.CommandError: Probe attach failed!
2024-02-16 20:42:35,152 [screen.py:show_popup_message()] - error: Error evaluating 'gcode_macro _SetProbeState:gcode': gcode.CommandError: Probe attach failed!
2024-02-16 20:44:09,232 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-02-16 20:44:09,233 [functions.py:log_start()] - KlipperScreen Version: v0.3.8-89-g2a5e9b3
2024-02-16 20:44:09,233 [functions.py:log_start()] - Python version: 3.9
2024-02-16 20:44:09,400 [config.py:get_config_file_location()] - Passed config (-c): .
2024-02-16 20:44:09,402 [config.py:__init__()] - Config path location: /home/pi/printer_data/config/KlipperScreen.conf
2024-02-16 20:44:09,413 [config.py:log_config()] -  ===== Config File =====

=======================
2024-02-16 20:44:09,414 [config.py:__init__()] - ====== Saved Def ======

[graph Printer]
heater_bed = False
extruder = False

=======================
2024-02-16 20:44:09,415 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-02-16 20:44:09,519 [config.py:create_translations()] - Selected lang: None OS lang: en_GB
2024-02-16 20:44:09,519 [config.py:install_language()] - Using lang en
2024-02-16 20:44:09,534 [screen.py:__init__()] - Screen resolution: 800x480
2024-02-16 20:44:09,535 [KlippyGtk.py:__init__()] - Font size: 16.6 (medium)
2024-02-16 20:44:09,982 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2024-02-16 20:44:09,989 [screen.py:set_screenblanking_timeout()] - Using DPMS
2024-02-16 20:44:09,995 [screen.py:initial_connection()] - Default printer: None
2024-02-16 20:44:10,025 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-02-16 20:44:10,025 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-02-16 20:44:10,069 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-02-16 20:44:10,075 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-02-16 20:44:10,084 [KlippyRest.py:_do_request()] - host=127.0.0.1, port=7125>>Max retries exceeded with url>>Failed to establish a new connection>>[Errno 111] Connection refused
2024-02-16 20:44:20,528 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-02-16 20:44:20,543 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-16 20:44:20,554 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/access/oneshot_token
2024-02-16 20:44:20,555 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-02-16 20:44:20,565 [_logging.py:info()] - Websocket connected
2024-02-16 20:44:20,566 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-02-16 20:44:20,578 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-16 20:44:20,588 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2024-02-16 20:44:20,589 [printer.py:configure_cameras()] - Cameras: []
2024-02-16 20:44:20,589 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'history', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-310-g67c98f6', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-02-16 20:44:20,601 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2024-02-16 20:44:20,805 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2024-02-16 20:44:20,807 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro _Probe_Variables': {'variable_probe_attached': 'False', 'variable_probe_state': 'False', 'variable_probe_lock': 'False', 'variable_probe_z_homed': 'False', 'variable_z_endstop_x': '0', 'variable_z_endstop_y': '0', 'gcode': ''}, 'gcode_macro _klicky_check_variables_version': {'gcode': '\n{% set version = printer["gcode_macro _User_Variables"].version|default(0) %}\n\n{% if version != 1 %}\n{ action_raise_error("Please update your klicky variables, there are some functionality changes") }\n{% endif %}'}, 'gcode_macro _KlickyDebug': {'gcode': '\n{% set message  = params.MSG %}\n{% set debug = printer["gcode_macro _User_Variables"].debug|default(False) %}\n\n{% if debug %}\n{ action_respond_info(message) }\n{% endif %}'}, 'gcode_macro _exit_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move  = params.MOVE|default(0) %}\n{% set speed = printer["gcode_macro _User_Variables"].travel_speed %}\n\n\nM400\nSET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\nRESTORE_GCODE_STATE NAME={function} MOVE={move} MOVE_SPEED={speed}'}, 'gcode_macro _entry_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move_accel = printer["gcode_macro _User_Variables"].move_accel|default(1000) %}\n\nM400\nSAVE_GCODE_STATE NAME={function}\n\nSET_GCODE_OFFSET Z=0\n\nG90\n\nSET_VELOCITY_LIMIT ACCEL={move_accel}'}, 'gcode_macro _Homing_Variables': {'gcode': '\n{% set reset  = params.RESET|default(0) %}\n{% if reset %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }\n{% endif %}'}, 'gcode_macro Attach_Probe_Lock': {'description': 'Attaches Klicky Probe, can only be docked after unlocking', 'gcode': '\nAttach_Probe\n_Probe_Lock'}, 'gcode_macro Dock_Probe_Unlock': {'description': 'Docks Klicky Probe even if it was locked', 'gcode': '\n_Probe_Unlock\nDock_Probe'}, 'gcode_macro _Probe_Unlock': {'description': 'Unlocks Klicky Probe state', 'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to False"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }'}, 'gcode_macro _Probe_Lock': {'description': 'Locks Klicky Probe state', 'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to True"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ True }'}, 'gcode_macro _DeployKlickyDock': {'description': 'Deploys Klicky servo-controlled dock', 'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_deploy = printer["gcode_macro _User_Variables"].servo_deploy|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_DeployKlickyDock Klicky servo configuration enabled"\n{% if servo_deploy == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo deploy angle specified") }\n{% endif %}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _DeployDock"] is defined %}\n_KlickyDebug msg="_DeployKlickyDock calling _DeployDock"\n_DeployDock\n{% endif %}'}, 'gcode_macro _RetractKlickyDock': {'description': 'Retracts Klicky servo-controlled dock', 'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_retract = printer["gcode_macro _User_Variables"].servo_retract|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_RetractKlickyDock Klicky servo configuration enabled"\n{% if servo_retract == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo retract angle specified") }\n{% endif %}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _RetractDock"] is defined %}\n_KlickyDebug msg="_RetractKlickyDock calling _RetractDock"\n_RetractDock\n{% endif %}'}, 'gcode_macro Attach_Probe': {'description': 'Attaches Klicky Probe', 'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set attachmove2_x = printer["gcode_macro _User_Variables"].attachmove2_x|default(0) %}\n{% set attachmove2_y = printer["gcode_macro _User_Variables"].attachmove2_y|default(0) %}\n{% set attachmove2_z = printer["gcode_macro _User_Variables"].attachmove2_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n_entry_point function=Attach_Probe\n\n{% if bypass_probe_docking == False %}\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n_KlickyDebug msg="Attach_Probe Axis homed"\n\n\n{% elif not probe_attached and not probe_lock %}\n_KlickyDebug msg="Attach_Probe going to attach probe"\n{% if verbose %}\n{ action_respond_info("Attaching Probe") }\n{% endif %}\n_KLICKY_STATUS_BUSY\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% if not enable_z_hop %}\n_KlickyDebug msg="Attach_Probe z_hop disabled"\n{% set safe_z = 0 %}\n{% endif %}\n{% endif %}\n\n\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero, duplicate?") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Umbilical_Path\n\n_entry_point function=Attach_Probe_intern\n\n\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n_DeployKlickyDock\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}"\nG0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}\n\n_RetractKlickyDock\n\n{% if ((printer.gcode_move.gcode_position.z < safe_z) or (docklocation_z != -128 and docklocation_z < safe_z ))%}\n_KlickyDebug msg="Attach_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\n_CheckProbe action=attach\n\n_exit_point function=Attach_Probe_intern move={goback}\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe locked not attaching probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already attached!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe already attached, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Attach_Probe\n{% else %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}'}, 'gcode_macro Dock_Probe': {'description': 'Docks Klicky Probe', 'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n{% if bypass_probe_docking == True %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}\n\n{% if bypass_probe_docking != True %}\n_entry_point function=Dock_Probe\n\n\n{% if probe_attached and not probe_lock %}\n_KLICKY_STATUS_BUSY\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Dock_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n_Umbilical_Path\n\n\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n\n_DeployKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\n\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}"\nG0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}\n{% endif %}\n\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}\n\n\n_RetractKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving away from the dock to G0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}\n\n\n{% if (printer.gcode_move.gcode_position.z < safe_z) %}\n_KlickyDebug msg="Dock_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\nG4 P1000\n_CheckProbe action=dock\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe locked not docking probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already docked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe already docked, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Dock_Probe move={goback}\n{% else %}\n_KlickyDebug msg="Dock_Probe probe docking bypassed, doing nothing"\n{% endif %}'}, 'gcode_macro PROBE_CALIBRATE': {'rename_existing': '_PROBE_CALIBRATE', 'description': 'Calibrate the probes z_offset with klicky automount', 'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_calibrate Axis homed"\n_KlickyDebug msg="probe_calibrate Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_CALIBRATE with the probe above the BED, check klicky_variables bed size!") }\n{% endif %}\n\n{% if bypass_probe_docking == False %}\n_CheckProbe action=query\nG90\nAttach_Probe back=1\n_KLICKY_STATUS_CALIBRATING_Z\n\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nM118 moving the toolhead 20 mm from the bed\n_KlickyDebug msg="probe_calibrate Moving Z up by 20mm"\nTESTZ Z=20\nM118 remove manually the probe and continue calibration\n_KLICKY_STATUS_READY\n{% else %}\n_KLICKY_STATUS_CALIBRATING_Z\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n_KLICKY_STATUS_READY\n{% endif %}'}, 'gcode_macro PROBE_ACCURACY': {'rename_existing': '_PROBE_ACCURACY', 'description': 'Probe Z-height accuracy at current XY position with klicky automount', 'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_accuracy Axis homed"\n_KlickyDebug msg="probe_accuracy Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n_entry_point function=PROBE_ACCURACY\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_ACCURACY with the probe above the BED, check klicky_variables bed size!") }\n{% endif%}\n\n_CheckProbe action=query\nAttach_Probe back=1\n\n_KlickyDebug msg="probe_accuracy calling klipper probe accuracy"\n_PROBE_ACCURACY {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nDock_Probe back=1\n\n_exit_point function=PROBE_ACCURACY move=1'}, 'force_move': {'enable_force_move': 'True'}, 'homing_override': {'axes': 'xyz', 'gcode': '\n\n_User_Variables\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n{% set kinematic_z = 0 %}\n{% set dock_on_zhome = printer["gcode_macro _User_Variables"].dock_on_zhome|default(True) %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set home_backoff_x = printer["gcode_macro _User_Variables"].home_backoff_x|default(0) %}\n{% set home_backoff_y = printer["gcode_macro _User_Variables"].home_backoff_y|default(0) %}\n{% set override_homing = printer["gcode_macro _User_Variables"].override_homing|default(\'\') %}\n\n\n_klicky_check_variables_version\n\n_CheckProbe action=query\n\n\n{% set home_x, home_y, home_z, leave_probe_attached = False, False, False, False %}\n\n{% if \'PROBE_LOCK\' in params%}\n{% if verbose %}\n{ action_respond_info("PROBE_LOCK = True") }\n{% endif %}\n{% set leave_probe_attached = True %}\n{% endif %}\n\n\n{% if not \'X\' in params\nand not \'Y\' in params\nand not \'Z\' in params %}\n\n{% set home_x, home_y, home_z = True, True, True %}\n_KlickyDebug msg="homing_override goint to home all axes"\n\n{% else %}\n{% if \'X\' in params %}\n{% set home_x = True %}\n_KlickyDebug msg="homing_override goint to home X"\n\n{% endif %}\n\n{% if \'Y\' in params %}\n{% set home_y = True %}\n_KlickyDebug msg="homing_override goint to home Y"\n{% endif %}\n\n{% if \'Z\' in params %}\n{% set home_z = True %}\n_KlickyDebug msg="homing_override goint to home Z"\n{% endif %}\n\n{% if \'X\' in params\nand \'Y\' in params\nand \'Z\' in params %}\n\n\n_Homing_Variables reset=1\n_KlickyDebug msg="homing_override goint to home all axes"\n{% endif %}\n\n{% endif %}\n\n_entry_point function=homing_override\n_KLICKY_STATUS_HOMING\n\n\n{% if \'z\' not in printer.toolhead.homed_axes %}\n{% if enable_z_hop == False %}\n_KlickyDebug msg="homing_override z_hop disabled"\n\n{% set kinematic_z = safe_z %}\n{% set safe_z = safe_z %}\n{% endif %}\n{% endif %}\n\n\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes and \'z\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("No axis homed") }\n{% endif %}\n_KlickyDebug msg="homing_override no axis homed, setting position as X=Y=0 Z={kinematic_z}"\nSET_KINEMATIC_POSITION X=0 Y=0 Z={kinematic_z}\nM400\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% if home_z != True %}\n_KlickyDebug msg="homing_override clearing axis homed state if not already homing Z"\nM84\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("X or Y not homed, forcing full G28") }\n{% endif %}\n{% set home_x, home_y, home_z = True, True, True %}\n{% endif %}\n{% endif %}\n\n\n{% if ((attachmove_y == 0 and override_homing == \'\' ) or (override_homing == \'Y\'))%}\n\n{% if home_y %}\n{% if override_homing == \'Y\' %}\n_KlickyDebug msg="homing_override Y homing first override, due to override_homing = Y"\n{% else %}\n_KlickyDebug msg="homing_override Y homing first override, due to attachmove_y = 0"\n{% endif %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y G28 Y0"\nG28 Y0\n\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop-home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n{% set home_y = False %}\n{% endif %}\n\n\n\n{% if home_x %}\n{% if verbose %}\n{ action_respond_info("Homing X") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in X homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_X"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_X external script to handle the X homing"\n_HOME_X\n{% else %}\n_KlickyDebug msg="homing_override Homing X, G28 X0"\nG28 X0\n\n{% if home_backoff_x != 0 %}\n{% if (printer.configfile.settings.stepper_x.position_endstop > (printer.configfile.settings.stepper_x.position_min|default(0) + printer.configfile.settings.stepper_x.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n\n{% if home_y %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y, G28 Y0"\nG28 Y0\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if verbose %}\n{ action_respond_info("Homing Z") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe configured as a virtual Z endstop attaching probe"\nAttach_Probe\n\n{% if leave_probe_attached %}\n_Probe_Lock\n{% endif %}\n{% elif dock_on_zhome == True %}\nDock_Probe\n{% endif %}\n\n_Home_Z_\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe no longer required, docking probe"\nDock_Probe\n{% elif dock_on_zhome == False %}\nDock_Probe\n{% endif %}\n{% endif %}\n_CheckProbe action=query\n\n\n_Park_Toolhead\n\n_exit_point function=homing_override\n_KLICKY_STATUS_READY'}, 'gcode_macro _Umbilical_Path': {'gcode': '\n{% set umbilical = printer["gcode_macro _User_Variables"].umbilical %}\n{% set umbilical_x = printer["gcode_macro _User_Variables"].umbilical_x %}\n{% set umbilical_y = printer["gcode_macro _User_Variables"].umbilical_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n\n{% if umbilical %}\n\n_entry_point function=Umbilical_Path\n\n_KlickyDebug msg="_Umbilical_Path moving to G0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}"\nG0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}\n\n_exit_point function=Umbilical_Path\n{% endif %}'}, 'gcode_macro _Home_Z_': {'gcode': '\n{% set z_endstop_x = printer["gcode_macro _Probe_Variables"].z_endstop_x %}\n{% set z_endstop_y = printer["gcode_macro _Probe_Variables"].z_endstop_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}    {% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Home_Z\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n{% else %}\n_KlickyDebug msg="_Home_Z_ XY Axis homed"\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="_Home_Z_ Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n\n\n_KlickyDebug msg="_Home_Z_ moving to Z endstop position G0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}"\nG0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}\n_KlickyDebug msg="_Home_Z_ Homing Z G28 Z"\nG28 Z0\n_KlickyDebug msg="_Home_Z_ toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_exit_point function=Home_Z'}, 'gcode_macro _CheckProbe': {'variable_probe_state': '0', 'gcode': '\nQuery_Probe\n_SetProbeState action={ params.ACTION }'}, 'gcode_macro _SetProbeState': {'gcode': '\n{% set query_probe_triggered = printer.probe.last_query %}\n{% set action  = params.ACTION|default(\'\') %}\n\n\n{% if query_probe_triggered %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ False }\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ True }\n{% endif %}\n\n{% if action == \'query\' %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_state VALUE={ query_probe_triggered }\n{% endif %}\n\n\n\n\n{% if not query_probe_triggered and action == \'dock\' %}\n{ action_raise_error("Probe dock failed!") }\n{% endif %}\n\n\n{% if query_probe_triggered and action == \'attach\' %}\n{ action_raise_error("Probe attach failed!") }\n{% endif %}'}, 'gcode_macro _Park_Toolhead': {'gcode': '\n{% set park_toolhead = printer["gcode_macro _User_Variables"].park_toolhead %}\n{% set parkposition_x = printer["gcode_macro _User_Variables"].parkposition_x %}\n{% set parkposition_y = printer["gcode_macro _User_Variables"].parkposition_y %}\n{% set parkposition_z = printer["gcode_macro _User_Variables"].parkposition_z %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Park_Toolhead\n\n{% if park_toolhead and \'xyz\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Parking Toolhead") }\n{% endif %}\n{% if parkposition_z == -128 %}\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}\n\n{% else %}\n\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}\n\n{% endif %}\n\n{% endif %}\n_exit_point function=Park_Toolhead'}, 'gcode_macro _klicky_status_ready': {'gcode': '\n{% if printer[\'gcode_macro status_ready\'] is defined %}\n_KlickyDebug msg="_klicky_status_ready activating the LED STATUS_READY"\nSTATUS_READY\n{% endif %}'}, 'gcode_macro _klicky_status_busy': {'gcode': '\n{% if printer[\'gcode_macro status_busy\'] is defined %}\n_KlickyDebug msg="_klicky_status_busy activating the LED STATUS_BUSY"\nSTATUS_BUSY\n{% endif %}'}, 'gcode_macro _klicky_status_leveling': {'gcode': '\n{% if printer[\'gcode_macro status_leveling\'] is defined %}\n_KlickyDebug msg="_klicky_status_leveling activating the LED STATUS_LEVELING"\nSTATUS_LEVELING\n{% endif %}'}, 'gcode_macro _klicky_status_homing': {'gcode': '\n{% if printer[\'gcode_macro status_homing\'] is defined %}\n_KlickyDebug msg="_klicky_status_homing activating the LED STATUS_HOMING"\nSTATUS_HOMING\n{% endif %}'}, 'gcode_macro _klicky_status_cleaning': {'gcode': '\n{% if printer[\'gcode_macro status_cleaning\'] is defined %}\n_KlickyDebug msg="_klicky_status_cleaning activating the LED STATUS_CLEANING"\nSTATUS_CLEANING\n{% endif %}'}, 'gcode_macro _klicky_status_meshing': {'gcode': '\n{% if printer[\'gcode_macro status_meshing\'] is defined %}\n_KlickyDebug msg="_klicky_status_meshing activating the LED STATUS_MESHING"\nSTATUS_MESHING\n{% endif %}'}, 'gcode_macro _klicky_status_calibrating_z': {'gcode': '\n{% if printer[\'gcode_macro status_calibrating_z\'] is defined %}\n_KlickyDebug msg="_klicky_status_calibrating_z activating the LED STATUS_CALIBRATING_Z"\nSTATUS_CALIBRATING_Z\n{% endif %}'}, 'z_calibration': {'nozzle_xy_position': '172, 301', 'switch_xy_position': '171.5, 282', 'bed_xy_position': '150, 150', 'switch_offset': '0.09', 'offset_margins': '-1.0,1.0', 'speed': '50', 'probing_first_fast': 'false', 'start_gcode': 'Attach_Probe', 'end_gcode': 'Dock_Probe'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_28003C001150535556323420-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '^PG6', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '25', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'PG9', 'position_min': '0', 'position_endstop': '300', 'position_max': '303.5', 'homing_speed': '25', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': '!PG3', 'enable_pin': '!PG5', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'PG10', 'position_max': '290', 'position_min': '-4.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3', 'position_endstop': '-0.711'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA0', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': '!PF10', 'enable_pin': '!PG2', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PC13', 'dir_pin': 'PF0', 'enable_pin': '!PF1', 'rotation_distance': '21.9459674016', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.75', 'heater_pin': 'PA1', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF4', 'min_temp': '10', 'max_temp': '270', 'max_power': '1.0', 'min_extrude_temp': '170', 'pressure_advance': '0.05', 'pressure_advance_smooth_time': '0.040', 'control': 'pid', 'pid_kp': '26.572', 'pid_ki': '2.036', 'pid_kd': '86.691'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.5', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PA2', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF3', 'max_power': '1', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '55.196', 'pid_ki': '2.091', 'pid_kd': '364.295'}, 'probe': {'pin': 'PG15', 'x_offset': '0', 'y_offset': '25.0', 'z_offset': '0', 'speed': '10.0', 'samples': '5', 'samples_result': 'median', 'sample_retract_dist': '3.0', 'samples_tolerance': '0.006', 'samples_tolerance_retries': '6'}, 'fan': {'pin': 'PA8', 'kick_start_time': '0.5', 'off_below': '0.10'}, 'heater_fan hotend_fan': {'pin': 'PE5', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'controller_fan controller_fan': {'pin': 'PD12', 'kick_start_time': '0.5', 'heater': 'heater_bed'}, 'heater_fan exhaust_fan': {'pin': 'PD13', 'max_power': '1.0', 'shutdown_speed': '0.0', 'kick_start_time': '5.0', 'heater': 'heater_bed', 'heater_temp': '60', 'fan_speed': '1.0'}, 'output_pin caselight': {'pin': 'PD15', 'pwm': 'true', 'shutdown_value': '0', 'value': '1', 'cycle_time': '0.01'}, 'neopixel headlight': {'pin': 'PB0', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '0.0', 'initial_green': '0.2157', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'temperature_sensor chamber_temp': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF5', 'min_temp': '0', 'max_temp': '100', 'gcode_id': 'chamber_th'}, 'idle_timeout': {'timeout': '1800'}, 'z_tilt': {'z_positions': '\n-50, 18\n150, 348\n350, 18', 'points': '\n30, 5\n150, 245\n270, 5', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'gcode_macro _User_Variables': {'variable_verbose': 'True', 'variable_debug': 'False', 'variable_travel_speed': '200', 'variable_move_accel': '1000', 'variable_dock_speed': '50', 'variable_release_speed': '75', 'variable_z_drop_speed': '20', 'variable_safe_z': '25', 'variable_enable_z_hop': 'True', 'variable_max_bed_y': '300', 'variable_max_bed_x': '300', 'variable_z_endstop_x': '172', 'variable_z_endstop_y': '301', 'variable_docklocation_x': '40.5', 'variable_docklocation_y': '303.5', 'variable_docklocation_z': '-128', 'variable_enable_dock_servo': 'False', 'variable_servo_name': "'NAME'", 'variable_servo_deploy': '10', 'variable_servo_retract': '11', 'variable_servo_delay': '250', 'variable_dockmove_x': '40', 'variable_dockmove_y': '0', 'variable_dockmove_z': '0', 'variable_attachmove_x': '0', 'variable_attachmove_y': '30', 'variable_attachmove_z': '0', 'variable_umbilical': 'False', 'variable_umbilical_x': '15', 'variable_umbilical_y': '15', 'variable_park_toolhead': 'False', 'variable_parkposition_x': '125', 'variable_parkposition_y': '125', 'variable_parkposition_z': '30', 'variable_version': '1', 'variable_attachmove2_x': '0', 'variable_attachmove2_y': '0', 'variable_attachmove2_z': '0', 'variable_home_backoff_x': '10', 'variable_home_backoff_y': '10', 'variable_override_homing': "''", 'variable_dock_on_zhome': 'True', 'gcode': '\n{% set Mx = printer[\'configfile\'].config["stepper_x"]["position_max"]|float %}\n{% set My = printer[\'configfile\'].config["stepper_y"]["position_max"]|float %}\n{% set Ox = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set Oy = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set Oz = printer[\'configfile\'].config["probe"]["z_offset"]|float %}\n\n\n{% if z_endstop_x != 0 or z_endstop_y != 0 %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ z_endstop_x }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ z_endstop_y }\n\n\n{% else %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ (Mx * 0.5) - Ox }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ (My * 0.5) - Oy }\n{% endif %}'}, 'gcode_macro PRINT_START': {'gcode': '\nM117 Homing...\nG28\nATTACH_PROBE\nZ_TILT_ADJUST\nDOCK_PROBE\nG28\n\n\n\n\n\n\n\nG0 X150 Y150 Z30 F3600'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_28003C001150535556323420-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro _probe_variables': {'gcode': '', 'description': 'G-Code macro', 'variable_probe_attached': 'False', 'variable_probe_state': 'False', 'variable_probe_lock': 'False', 'variable_probe_z_homed': 'False', 'variable_z_endstop_x': '0', 'variable_z_endstop_y': '0'}, 'gcode_macro _klicky_check_variables_version': {'gcode': '\n{% set version = printer["gcode_macro _User_Variables"].version|default(0) %}\n\n{% if version != 1 %}\n{ action_raise_error("Please update your klicky variables, there are some functionality changes") }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klickydebug': {'gcode': '\n{% set message  = params.MSG %}\n{% set debug = printer["gcode_macro _User_Variables"].debug|default(False) %}\n\n{% if debug %}\n{ action_respond_info(message) }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _exit_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move  = params.MOVE|default(0) %}\n{% set speed = printer["gcode_macro _User_Variables"].travel_speed %}\n\n\nM400\nSET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\nRESTORE_GCODE_STATE NAME={function} MOVE={move} MOVE_SPEED={speed}', 'description': 'G-Code macro'}, 'gcode_macro _entry_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move_accel = printer["gcode_macro _User_Variables"].move_accel|default(1000) %}\n\nM400\nSAVE_GCODE_STATE NAME={function}\n\nSET_GCODE_OFFSET Z=0\n\nG90\n\nSET_VELOCITY_LIMIT ACCEL={move_accel}', 'description': 'G-Code macro'}, 'gcode_macro _homing_variables': {'gcode': '\n{% set reset  = params.RESET|default(0) %}\n{% if reset %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro attach_probe_lock': {'gcode': '\nAttach_Probe\n_Probe_Lock', 'description': 'Attaches Klicky Probe, can only be docked after unlocking'}, 'gcode_macro dock_probe_unlock': {'gcode': '\n_Probe_Unlock\nDock_Probe', 'description': 'Docks Klicky Probe even if it was locked'}, 'gcode_macro _probe_unlock': {'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to False"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }', 'description': 'Unlocks Klicky Probe state'}, 'gcode_macro _probe_lock': {'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to True"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ True }', 'description': 'Locks Klicky Probe state'}, 'gcode_macro _deployklickydock': {'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_deploy = printer["gcode_macro _User_Variables"].servo_deploy|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_DeployKlickyDock Klicky servo configuration enabled"\n{% if servo_deploy == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo deploy angle specified") }\n{% endif %}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _DeployDock"] is defined %}\n_KlickyDebug msg="_DeployKlickyDock calling _DeployDock"\n_DeployDock\n{% endif %}', 'description': 'Deploys Klicky servo-controlled dock'}, 'gcode_macro _retractklickydock': {'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_retract = printer["gcode_macro _User_Variables"].servo_retract|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_RetractKlickyDock Klicky servo configuration enabled"\n{% if servo_retract == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo retract angle specified") }\n{% endif %}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _RetractDock"] is defined %}\n_KlickyDebug msg="_RetractKlickyDock calling _RetractDock"\n_RetractDock\n{% endif %}', 'description': 'Retracts Klicky servo-controlled dock'}, 'gcode_macro attach_probe': {'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set attachmove2_x = printer["gcode_macro _User_Variables"].attachmove2_x|default(0) %}\n{% set attachmove2_y = printer["gcode_macro _User_Variables"].attachmove2_y|default(0) %}\n{% set attachmove2_z = printer["gcode_macro _User_Variables"].attachmove2_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n_entry_point function=Attach_Probe\n\n{% if bypass_probe_docking == False %}\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n_KlickyDebug msg="Attach_Probe Axis homed"\n\n\n{% elif not probe_attached and not probe_lock %}\n_KlickyDebug msg="Attach_Probe going to attach probe"\n{% if verbose %}\n{ action_respond_info("Attaching Probe") }\n{% endif %}\n_KLICKY_STATUS_BUSY\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% if not enable_z_hop %}\n_KlickyDebug msg="Attach_Probe z_hop disabled"\n{% set safe_z = 0 %}\n{% endif %}\n{% endif %}\n\n\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero, duplicate?") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Umbilical_Path\n\n_entry_point function=Attach_Probe_intern\n\n\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n_DeployKlickyDock\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}"\nG0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}\n\n_RetractKlickyDock\n\n{% if ((printer.gcode_move.gcode_position.z < safe_z) or (docklocation_z != -128 and docklocation_z < safe_z ))%}\n_KlickyDebug msg="Attach_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\n_CheckProbe action=attach\n\n_exit_point function=Attach_Probe_intern move={goback}\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe locked not attaching probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already attached!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe already attached, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Attach_Probe\n{% else %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}', 'description': 'Attaches Klicky Probe'}, 'gcode_macro dock_probe': {'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n{% if bypass_probe_docking == True %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}\n\n{% if bypass_probe_docking != True %}\n_entry_point function=Dock_Probe\n\n\n{% if probe_attached and not probe_lock %}\n_KLICKY_STATUS_BUSY\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Dock_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n_Umbilical_Path\n\n\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n\n_DeployKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\n\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}"\nG0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}\n{% endif %}\n\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}\n\n\n_RetractKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving away from the dock to G0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}\n\n\n{% if (printer.gcode_move.gcode_position.z < safe_z) %}\n_KlickyDebug msg="Dock_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\nG4 P1000\n_CheckProbe action=dock\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe locked not docking probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already docked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe already docked, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Dock_Probe move={goback}\n{% else %}\n_KlickyDebug msg="Dock_Probe probe docking bypassed, doing nothing"\n{% endif %}', 'description': 'Docks Klicky Probe'}, 'gcode_macro probe_calibrate': {'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_calibrate Axis homed"\n_KlickyDebug msg="probe_calibrate Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_CALIBRATE with the probe above the BED, check klicky_variables bed size!") }\n{% endif %}\n\n{% if bypass_probe_docking == False %}\n_CheckProbe action=query\nG90\nAttach_Probe back=1\n_KLICKY_STATUS_CALIBRATING_Z\n\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nM118 moving the toolhead 20 mm from the bed\n_KlickyDebug msg="probe_calibrate Moving Z up by 20mm"\nTESTZ Z=20\nM118 remove manually the probe and continue calibration\n_KLICKY_STATUS_READY\n{% else %}\n_KLICKY_STATUS_CALIBRATING_Z\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n_KLICKY_STATUS_READY\n{% endif %}', 'rename_existing': '_PROBE_CALIBRATE', 'description': 'Calibrate the probes z_offset with klicky automount'}, 'gcode_macro probe_accuracy': {'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_accuracy Axis homed"\n_KlickyDebug msg="probe_accuracy Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n_entry_point function=PROBE_ACCURACY\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_ACCURACY with the probe above the BED, check klicky_variables bed size!") }\n{% endif%}\n\n_CheckProbe action=query\nAttach_Probe back=1\n\n_KlickyDebug msg="probe_accuracy calling klipper probe accuracy"\n_PROBE_ACCURACY {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nDock_Probe back=1\n\n_exit_point function=PROBE_ACCURACY move=1', 'rename_existing': '_PROBE_ACCURACY', 'description': 'Probe Z-height accuracy at current XY position with klicky automount'}, 'force_move': {'enable_force_move': True}, 'homing_override': {'axes': 'xyz', 'gcode': '\n\n_User_Variables\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n{% set kinematic_z = 0 %}\n{% set dock_on_zhome = printer["gcode_macro _User_Variables"].dock_on_zhome|default(True) %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set home_backoff_x = printer["gcode_macro _User_Variables"].home_backoff_x|default(0) %}\n{% set home_backoff_y = printer["gcode_macro _User_Variables"].home_backoff_y|default(0) %}\n{% set override_homing = printer["gcode_macro _User_Variables"].override_homing|default(\'\') %}\n\n\n_klicky_check_variables_version\n\n_CheckProbe action=query\n\n\n{% set home_x, home_y, home_z, leave_probe_attached = False, False, False, False %}\n\n{% if \'PROBE_LOCK\' in params%}\n{% if verbose %}\n{ action_respond_info("PROBE_LOCK = True") }\n{% endif %}\n{% set leave_probe_attached = True %}\n{% endif %}\n\n\n{% if not \'X\' in params\nand not \'Y\' in params\nand not \'Z\' in params %}\n\n{% set home_x, home_y, home_z = True, True, True %}\n_KlickyDebug msg="homing_override goint to home all axes"\n\n{% else %}\n{% if \'X\' in params %}\n{% set home_x = True %}\n_KlickyDebug msg="homing_override goint to home X"\n\n{% endif %}\n\n{% if \'Y\' in params %}\n{% set home_y = True %}\n_KlickyDebug msg="homing_override goint to home Y"\n{% endif %}\n\n{% if \'Z\' in params %}\n{% set home_z = True %}\n_KlickyDebug msg="homing_override goint to home Z"\n{% endif %}\n\n{% if \'X\' in params\nand \'Y\' in params\nand \'Z\' in params %}\n\n\n_Homing_Variables reset=1\n_KlickyDebug msg="homing_override goint to home all axes"\n{% endif %}\n\n{% endif %}\n\n_entry_point function=homing_override\n_KLICKY_STATUS_HOMING\n\n\n{% if \'z\' not in printer.toolhead.homed_axes %}\n{% if enable_z_hop == False %}\n_KlickyDebug msg="homing_override z_hop disabled"\n\n{% set kinematic_z = safe_z %}\n{% set safe_z = safe_z %}\n{% endif %}\n{% endif %}\n\n\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes and \'z\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("No axis homed") }\n{% endif %}\n_KlickyDebug msg="homing_override no axis homed, setting position as X=Y=0 Z={kinematic_z}"\nSET_KINEMATIC_POSITION X=0 Y=0 Z={kinematic_z}\nM400\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% if home_z != True %}\n_KlickyDebug msg="homing_override clearing axis homed state if not already homing Z"\nM84\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("X or Y not homed, forcing full G28") }\n{% endif %}\n{% set home_x, home_y, home_z = True, True, True %}\n{% endif %}\n{% endif %}\n\n\n{% if ((attachmove_y == 0 and override_homing == \'\' ) or (override_homing == \'Y\'))%}\n\n{% if home_y %}\n{% if override_homing == \'Y\' %}\n_KlickyDebug msg="homing_override Y homing first override, due to override_homing = Y"\n{% else %}\n_KlickyDebug msg="homing_override Y homing first override, due to attachmove_y = 0"\n{% endif %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y G28 Y0"\nG28 Y0\n\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop-home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n{% set home_y = False %}\n{% endif %}\n\n\n\n{% if home_x %}\n{% if verbose %}\n{ action_respond_info("Homing X") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in X homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_X"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_X external script to handle the X homing"\n_HOME_X\n{% else %}\n_KlickyDebug msg="homing_override Homing X, G28 X0"\nG28 X0\n\n{% if home_backoff_x != 0 %}\n{% if (printer.configfile.settings.stepper_x.position_endstop > (printer.configfile.settings.stepper_x.position_min|default(0) + printer.configfile.settings.stepper_x.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n\n{% if home_y %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y, G28 Y0"\nG28 Y0\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if verbose %}\n{ action_respond_info("Homing Z") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe configured as a virtual Z endstop attaching probe"\nAttach_Probe\n\n{% if leave_probe_attached %}\n_Probe_Lock\n{% endif %}\n{% elif dock_on_zhome == True %}\nDock_Probe\n{% endif %}\n\n_Home_Z_\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe no longer required, docking probe"\nDock_Probe\n{% elif dock_on_zhome == False %}\nDock_Probe\n{% endif %}\n{% endif %}\n_CheckProbe action=query\n\n\n_Park_Toolhead\n\n_exit_point function=homing_override\n_KLICKY_STATUS_READY'}, 'gcode_macro _umbilical_path': {'gcode': '\n{% set umbilical = printer["gcode_macro _User_Variables"].umbilical %}\n{% set umbilical_x = printer["gcode_macro _User_Variables"].umbilical_x %}\n{% set umbilical_y = printer["gcode_macro _User_Variables"].umbilical_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n\n{% if umbilical %}\n\n_entry_point function=Umbilical_Path\n\n_KlickyDebug msg="_Umbilical_Path moving to G0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}"\nG0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}\n\n_exit_point function=Umbilical_Path\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _home_z_': {'gcode': '\n{% set z_endstop_x = printer["gcode_macro _Probe_Variables"].z_endstop_x %}\n{% set z_endstop_y = printer["gcode_macro _Probe_Variables"].z_endstop_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}    {% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Home_Z\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n{% else %}\n_KlickyDebug msg="_Home_Z_ XY Axis homed"\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="_Home_Z_ Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n\n\n_KlickyDebug msg="_Home_Z_ moving to Z endstop position G0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}"\nG0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}\n_KlickyDebug msg="_Home_Z_ Homing Z G28 Z"\nG28 Z0\n_KlickyDebug msg="_Home_Z_ toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_exit_point function=Home_Z', 'description': 'G-Code macro'}, 'gcode_macro _checkprobe': {'gcode': '\nQuery_Probe\n_SetProbeState action={ params.ACTION }', 'description': 'G-Code macro', 'variable_probe_state': '0'}, 'gcode_macro _setprobestate': {'gcode': '\n{% set query_probe_triggered = printer.probe.last_query %}\n{% set action  = params.ACTION|default(\'\') %}\n\n\n{% if query_probe_triggered %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ False }\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ True }\n{% endif %}\n\n{% if action == \'query\' %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_state VALUE={ query_probe_triggered }\n{% endif %}\n\n\n\n\n{% if not query_probe_triggered and action == \'dock\' %}\n{ action_raise_error("Probe dock failed!") }\n{% endif %}\n\n\n{% if query_probe_triggered and action == \'attach\' %}\n{ action_raise_error("Probe attach failed!") }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _park_toolhead': {'gcode': '\n{% set park_toolhead = printer["gcode_macro _User_Variables"].park_toolhead %}\n{% set parkposition_x = printer["gcode_macro _User_Variables"].parkposition_x %}\n{% set parkposition_y = printer["gcode_macro _User_Variables"].parkposition_y %}\n{% set parkposition_z = printer["gcode_macro _User_Variables"].parkposition_z %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Park_Toolhead\n\n{% if park_toolhead and \'xyz\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Parking Toolhead") }\n{% endif %}\n{% if parkposition_z == -128 %}\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}\n\n{% else %}\n\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}\n\n{% endif %}\n\n{% endif %}\n_exit_point function=Park_Toolhead', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_ready': {'gcode': '\n{% if printer[\'gcode_macro status_ready\'] is defined %}\n_KlickyDebug msg="_klicky_status_ready activating the LED STATUS_READY"\nSTATUS_READY\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_busy': {'gcode': '\n{% if printer[\'gcode_macro status_busy\'] is defined %}\n_KlickyDebug msg="_klicky_status_busy activating the LED STATUS_BUSY"\nSTATUS_BUSY\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_leveling': {'gcode': '\n{% if printer[\'gcode_macro status_leveling\'] is defined %}\n_KlickyDebug msg="_klicky_status_leveling activating the LED STATUS_LEVELING"\nSTATUS_LEVELING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_homing': {'gcode': '\n{% if printer[\'gcode_macro status_homing\'] is defined %}\n_KlickyDebug msg="_klicky_status_homing activating the LED STATUS_HOMING"\nSTATUS_HOMING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_cleaning': {'gcode': '\n{% if printer[\'gcode_macro status_cleaning\'] is defined %}\n_KlickyDebug msg="_klicky_status_cleaning activating the LED STATUS_CLEANING"\nSTATUS_CLEANING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_meshing': {'gcode': '\n{% if printer[\'gcode_macro status_meshing\'] is defined %}\n_KlickyDebug msg="_klicky_status_meshing activating the LED STATUS_MESHING"\nSTATUS_MESHING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_calibrating_z': {'gcode': '\n{% if printer[\'gcode_macro status_calibrating_z\'] is defined %}\n_KlickyDebug msg="_klicky_status_calibrating_z activating the LED STATUS_CALIBRATING_Z"\nSTATUS_CALIBRATING_Z\n{% endif %}', 'description': 'G-Code macro'}, 'z_calibration': {'switch_offset': 0.09, 'offset_margins': '-1.0,1.0', 'speed': 50.0, 'samples_result': 'none', 'probing_first_fast': False, 'nozzle_xy_position': '172, 301', 'switch_xy_position': '171.5, 282', 'bed_xy_position': '150, 150', 'start_gcode': 'Attach_Probe', 'before_switch_gcode': '', 'end_gcode': 'Dock_Probe'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': '^PG6', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'PG9', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 303.5, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PF11', 'dir_pin': '!PG3', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG5', 'endstop_pin': 'PG10', 'position_endstop': -0.711, 'position_min': -4.5, 'position_max': 290.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA0'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PF9', 'dir_pin': '!PF10', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG2'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF4', 'min_temp': 10.0, 'max_temp': 270.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 26.572, 'pid_ki': 2.036, 'pid_kd': 86.691, 'heater_pin': 'PA1', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PC13', 'pressure_advance': 0.05, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'PF0', 'rotation_distance': 21.9459674016, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 55.196, 'pid_ki': 2.091, 'pid_kd': 364.295, 'heater_pin': 'PA2', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'probe': {'z_offset': 0.0, 'deactivate_on_each_sample': True, 'activate_gcode': '', 'deactivate_gcode': '', 'pin': 'PG15', 'speed': 10.0, 'lift_speed': 10.0, 'x_offset': 0.0, 'y_offset': 25.0, 'samples': 5, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.006, 'samples_tolerance_retries': 6}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE5', 'fan_speed': 1.0}, 'controller_fan controller_fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD12', 'fan_speed': 1.0, 'idle_speed': 1.0, 'idle_timeout': 30, 'heater': ['heater_bed']}, 'heater_fan exhaust_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 5.0, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13', 'fan_speed': 1.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PD15', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 1.0, 'maximum_mcu_duration': 0.0, 'value': 1.0, 'shutdown_value': 0.0}, 'neopixel headlight': {'pin': 'PB0', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 0.0, 'initial_green': 0.2157, 'initial_blue': 1.0, 'initial_white': 0.0}, 'temperature_sensor chamber_temp': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF5', 'min_temp': 0.0, 'max_temp': 100.0, 'gcode_id': 'chamber_th'}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [150.0, 348.0], [350.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 5.0], [150.0, 245.0], [270.0, 5.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'gcode_macro _user_variables': {'gcode': '\n{% set Mx = printer[\'configfile\'].config["stepper_x"]["position_max"]|float %}\n{% set My = printer[\'configfile\'].config["stepper_y"]["position_max"]|float %}\n{% set Ox = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set Oy = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set Oz = printer[\'configfile\'].config["probe"]["z_offset"]|float %}\n\n\n{% if z_endstop_x != 0 or z_endstop_y != 0 %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ z_endstop_x }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ z_endstop_y }\n\n\n{% else %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ (Mx * 0.5) - Ox }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ (My * 0.5) - Oy }\n{% endif %}', 'description': 'G-Code macro', 'variable_verbose': 'True', 'variable_debug': 'False', 'variable_travel_speed': '200', 'variable_move_accel': '1000', 'variable_dock_speed': '50', 'variable_release_speed': '75', 'variable_z_drop_speed': '20', 'variable_safe_z': '25', 'variable_enable_z_hop': 'True', 'variable_max_bed_y': '300', 'variable_max_bed_x': '300', 'variable_z_endstop_x': '172', 'variable_z_endstop_y': '301', 'variable_docklocation_x': '40.5', 'variable_docklocation_y': '303.5', 'variable_docklocation_z': '-128', 'variable_enable_dock_servo': 'False', 'variable_servo_name': "'NAME'", 'variable_servo_deploy': '10', 'variable_servo_retract': '11', 'variable_servo_delay': '250', 'variable_dockmove_x': '40', 'variable_dockmove_y': '0', 'variable_dockmove_z': '0', 'variable_attachmove_x': '0', 'variable_attachmove_y': '30', 'variable_attachmove_z': '0', 'variable_umbilical': 'False', 'variable_umbilical_x': '15', 'variable_umbilical_y': '15', 'variable_park_toolhead': 'False', 'variable_parkposition_x': '125', 'variable_parkposition_y': '125', 'variable_parkposition_z': '30', 'variable_version': '1', 'variable_attachmove2_x': '0', 'variable_attachmove2_y': '0', 'variable_attachmove2_z': '0', 'variable_home_backoff_x': '10', 'variable_home_backoff_y': '10', 'variable_override_homing': "''", 'variable_dock_on_zhome': 'True'}, 'gcode_macro print_start': {'gcode': '\nM117 Homing...\nG28\nATTACH_PROBE\nZ_TILT_ADJUST\nDOCK_PROBE\nG28\n\n\n\n\n\n\n\nG0 X150 Y150 Z30 F3600', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1500.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-02-16 20:44:20,810 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-16 20:44:20,810 [printer.py:reinit()] - Klipper version: v0.12.0-103-g6ce6fbbc-dirty
2024-02-16 20:44:20,811 [printer.py:reinit()] - # Extruders: 1
2024-02-16 20:44:20,811 [printer.py:reinit()] - # Temperature devices: 2
2024-02-16 20:44:20,811 [printer.py:reinit()] - # Fans: 4
2024-02-16 20:44:20,811 [printer.py:reinit()] - # Output pins: 1
2024-02-16 20:44:20,811 [printer.py:reinit()] - # Leds: 1
2024-02-16 20:44:20,823 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2024-02-16 20:44:20,825 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-02-16 20:44:21,119 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor chamber_temp&fan&controller_fan controller_fan&heater_fan hotend_fan&heater_fan exhaust_fan&output_pin caselight&neopixel headlight
2024-02-16 20:44:21,123 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-02-16 20:44:21,123 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-02-16 20:44:21,124 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-02-16 20:44:21,125 [screen.py:init_klipper()] - Printer initialized
2024-02-16 20:44:21,125 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2024-02-16 20:44:21,125 [printer.py:change_state()] - Adding callback for state: ready
2024-02-16 20:44:21,128 [screen.py:_load_panel()] - Loading panel: main_menu
2024-02-16 20:44:21,187 [main_menu.py:__init__()] - ### Making MainMenu
2024-02-16 20:44:21,192 [main_menu.py:add_device()] - Adding device: extruder
2024-02-16 20:44:21,198 [main_menu.py:add_device()] - Adding device: heater_bed
2024-02-16 20:44:21,203 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber_temp
2024-02-16 20:44:21,226 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-02-16 20:44:21,234 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-02-16 20:44:21,244 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'temperature_sensor chamber_temp', 'extruder']
2024-02-16 20:44:21,254 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2024-02-16 20:44:21,255 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-02-19 17:49:52,215 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-02-19 17:49:52,215 [functions.py:log_start()] - KlipperScreen Version: v0.3.8-89-g2a5e9b3
2024-02-19 17:49:52,215 [functions.py:log_start()] - Python version: 3.9
2024-02-19 17:49:52,403 [config.py:get_config_file_location()] - Passed config (-c): .
2024-02-19 17:49:52,405 [config.py:__init__()] - Config path location: /home/pi/printer_data/config/KlipperScreen.conf
2024-02-19 17:49:52,416 [config.py:log_config()] -  ===== Config File =====

=======================
2024-02-19 17:49:52,417 [config.py:__init__()] - ====== Saved Def ======

[graph Printer]
heater_bed = False
extruder = False

=======================
2024-02-19 17:49:52,418 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-02-19 17:49:52,502 [config.py:create_translations()] - Selected lang: None OS lang: en_GB
2024-02-19 17:49:52,502 [config.py:install_language()] - Using lang en
2024-02-19 17:49:52,518 [screen.py:__init__()] - Screen resolution: 800x480
2024-02-19 17:49:52,520 [KlippyGtk.py:__init__()] - Font size: 16.6 (medium)
2024-02-19 17:49:54,103 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2024-02-19 17:49:54,116 [screen.py:set_screenblanking_timeout()] - Using DPMS
2024-02-19 17:49:54,124 [screen.py:initial_connection()] - Default printer: None
2024-02-19 17:49:54,159 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-02-19 17:49:54,159 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-02-19 17:49:54,207 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-02-19 17:49:54,217 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-02-19 17:49:54,237 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-19 17:49:54,250 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/access/oneshot_token
2024-02-19 17:49:54,251 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-02-19 17:49:54,263 [_logging.py:info()] - Websocket connected
2024-02-19 17:49:54,263 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-02-19 17:49:54,297 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-19 17:49:54,307 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2024-02-19 17:49:54,308 [printer.py:configure_cameras()] - Cameras: []
2024-02-19 17:49:54,308 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'update_manager', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-310-g67c98f6', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-02-19 17:49:54,319 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2024-02-19 17:49:54,368 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2024-02-19 17:49:54,371 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro _Probe_Variables': {'variable_probe_attached': 'False', 'variable_probe_state': 'False', 'variable_probe_lock': 'False', 'variable_probe_z_homed': 'False', 'variable_z_endstop_x': '0', 'variable_z_endstop_y': '0', 'gcode': ''}, 'gcode_macro _klicky_check_variables_version': {'gcode': '\n{% set version = printer["gcode_macro _User_Variables"].version|default(0) %}\n\n{% if version != 1 %}\n{ action_raise_error("Please update your klicky variables, there are some functionality changes") }\n{% endif %}'}, 'gcode_macro _KlickyDebug': {'gcode': '\n{% set message  = params.MSG %}\n{% set debug = printer["gcode_macro _User_Variables"].debug|default(False) %}\n\n{% if debug %}\n{ action_respond_info(message) }\n{% endif %}'}, 'gcode_macro _exit_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move  = params.MOVE|default(0) %}\n{% set speed = printer["gcode_macro _User_Variables"].travel_speed %}\n\n\nM400\nSET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\nRESTORE_GCODE_STATE NAME={function} MOVE={move} MOVE_SPEED={speed}'}, 'gcode_macro _entry_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move_accel = printer["gcode_macro _User_Variables"].move_accel|default(1000) %}\n\nM400\nSAVE_GCODE_STATE NAME={function}\n\nSET_GCODE_OFFSET Z=0\n\nG90\n\nSET_VELOCITY_LIMIT ACCEL={move_accel}'}, 'gcode_macro _Homing_Variables': {'gcode': '\n{% set reset  = params.RESET|default(0) %}\n{% if reset %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }\n{% endif %}'}, 'gcode_macro Attach_Probe_Lock': {'description': 'Attaches Klicky Probe, can only be docked after unlocking', 'gcode': '\nAttach_Probe\n_Probe_Lock'}, 'gcode_macro Dock_Probe_Unlock': {'description': 'Docks Klicky Probe even if it was locked', 'gcode': '\n_Probe_Unlock\nDock_Probe'}, 'gcode_macro _Probe_Unlock': {'description': 'Unlocks Klicky Probe state', 'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to False"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }'}, 'gcode_macro _Probe_Lock': {'description': 'Locks Klicky Probe state', 'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to True"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ True }'}, 'gcode_macro _DeployKlickyDock': {'description': 'Deploys Klicky servo-controlled dock', 'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_deploy = printer["gcode_macro _User_Variables"].servo_deploy|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_DeployKlickyDock Klicky servo configuration enabled"\n{% if servo_deploy == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo deploy angle specified") }\n{% endif %}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _DeployDock"] is defined %}\n_KlickyDebug msg="_DeployKlickyDock calling _DeployDock"\n_DeployDock\n{% endif %}'}, 'gcode_macro _RetractKlickyDock': {'description': 'Retracts Klicky servo-controlled dock', 'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_retract = printer["gcode_macro _User_Variables"].servo_retract|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_RetractKlickyDock Klicky servo configuration enabled"\n{% if servo_retract == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo retract angle specified") }\n{% endif %}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _RetractDock"] is defined %}\n_KlickyDebug msg="_RetractKlickyDock calling _RetractDock"\n_RetractDock\n{% endif %}'}, 'gcode_macro Attach_Probe': {'description': 'Attaches Klicky Probe', 'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set attachmove2_x = printer["gcode_macro _User_Variables"].attachmove2_x|default(0) %}\n{% set attachmove2_y = printer["gcode_macro _User_Variables"].attachmove2_y|default(0) %}\n{% set attachmove2_z = printer["gcode_macro _User_Variables"].attachmove2_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n_entry_point function=Attach_Probe\n\n{% if bypass_probe_docking == False %}\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n_KlickyDebug msg="Attach_Probe Axis homed"\n\n\n{% elif not probe_attached and not probe_lock %}\n_KlickyDebug msg="Attach_Probe going to attach probe"\n{% if verbose %}\n{ action_respond_info("Attaching Probe") }\n{% endif %}\n_KLICKY_STATUS_BUSY\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% if not enable_z_hop %}\n_KlickyDebug msg="Attach_Probe z_hop disabled"\n{% set safe_z = 0 %}\n{% endif %}\n{% endif %}\n\n\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero, duplicate?") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Umbilical_Path\n\n_entry_point function=Attach_Probe_intern\n\n\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n_DeployKlickyDock\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}"\nG0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}\n\n_RetractKlickyDock\n\n{% if ((printer.gcode_move.gcode_position.z < safe_z) or (docklocation_z != -128 and docklocation_z < safe_z ))%}\n_KlickyDebug msg="Attach_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\n_CheckProbe action=attach\n\n_exit_point function=Attach_Probe_intern move={goback}\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe locked not attaching probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already attached!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe already attached, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Attach_Probe\n{% else %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}'}, 'gcode_macro Dock_Probe': {'description': 'Docks Klicky Probe', 'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n{% if bypass_probe_docking == True %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}\n\n{% if bypass_probe_docking != True %}\n_entry_point function=Dock_Probe\n\n\n{% if probe_attached and not probe_lock %}\n_KLICKY_STATUS_BUSY\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Dock_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n_Umbilical_Path\n\n\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n\n_DeployKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\n\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}"\nG0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}\n{% endif %}\n\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}\n\n\n_RetractKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving away from the dock to G0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}\n\n\n{% if (printer.gcode_move.gcode_position.z < safe_z) %}\n_KlickyDebug msg="Dock_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\nG4 P1000\n_CheckProbe action=dock\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe locked not docking probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already docked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe already docked, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Dock_Probe move={goback}\n{% else %}\n_KlickyDebug msg="Dock_Probe probe docking bypassed, doing nothing"\n{% endif %}'}, 'gcode_macro PROBE_CALIBRATE': {'rename_existing': '_PROBE_CALIBRATE', 'description': 'Calibrate the probes z_offset with klicky automount', 'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_calibrate Axis homed"\n_KlickyDebug msg="probe_calibrate Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_CALIBRATE with the probe above the BED, check klicky_variables bed size!") }\n{% endif %}\n\n{% if bypass_probe_docking == False %}\n_CheckProbe action=query\nG90\nAttach_Probe back=1\n_KLICKY_STATUS_CALIBRATING_Z\n\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nM118 moving the toolhead 20 mm from the bed\n_KlickyDebug msg="probe_calibrate Moving Z up by 20mm"\nTESTZ Z=20\nM118 remove manually the probe and continue calibration\n_KLICKY_STATUS_READY\n{% else %}\n_KLICKY_STATUS_CALIBRATING_Z\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n_KLICKY_STATUS_READY\n{% endif %}'}, 'gcode_macro PROBE_ACCURACY': {'rename_existing': '_PROBE_ACCURACY', 'description': 'Probe Z-height accuracy at current XY position with klicky automount', 'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_accuracy Axis homed"\n_KlickyDebug msg="probe_accuracy Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n_entry_point function=PROBE_ACCURACY\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_ACCURACY with the probe above the BED, check klicky_variables bed size!") }\n{% endif%}\n\n_CheckProbe action=query\nAttach_Probe back=1\n\n_KlickyDebug msg="probe_accuracy calling klipper probe accuracy"\n_PROBE_ACCURACY {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nDock_Probe back=1\n\n_exit_point function=PROBE_ACCURACY move=1'}, 'force_move': {'enable_force_move': 'True'}, 'homing_override': {'axes': 'xyz', 'gcode': '\n\n_User_Variables\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n{% set kinematic_z = 0 %}\n{% set dock_on_zhome = printer["gcode_macro _User_Variables"].dock_on_zhome|default(True) %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set home_backoff_x = printer["gcode_macro _User_Variables"].home_backoff_x|default(0) %}\n{% set home_backoff_y = printer["gcode_macro _User_Variables"].home_backoff_y|default(0) %}\n{% set override_homing = printer["gcode_macro _User_Variables"].override_homing|default(\'\') %}\n\n\n_klicky_check_variables_version\n\n_CheckProbe action=query\n\n\n{% set home_x, home_y, home_z, leave_probe_attached = False, False, False, False %}\n\n{% if \'PROBE_LOCK\' in params%}\n{% if verbose %}\n{ action_respond_info("PROBE_LOCK = True") }\n{% endif %}\n{% set leave_probe_attached = True %}\n{% endif %}\n\n\n{% if not \'X\' in params\nand not \'Y\' in params\nand not \'Z\' in params %}\n\n{% set home_x, home_y, home_z = True, True, True %}\n_KlickyDebug msg="homing_override goint to home all axes"\n\n{% else %}\n{% if \'X\' in params %}\n{% set home_x = True %}\n_KlickyDebug msg="homing_override goint to home X"\n\n{% endif %}\n\n{% if \'Y\' in params %}\n{% set home_y = True %}\n_KlickyDebug msg="homing_override goint to home Y"\n{% endif %}\n\n{% if \'Z\' in params %}\n{% set home_z = True %}\n_KlickyDebug msg="homing_override goint to home Z"\n{% endif %}\n\n{% if \'X\' in params\nand \'Y\' in params\nand \'Z\' in params %}\n\n\n_Homing_Variables reset=1\n_KlickyDebug msg="homing_override goint to home all axes"\n{% endif %}\n\n{% endif %}\n\n_entry_point function=homing_override\n_KLICKY_STATUS_HOMING\n\n\n{% if \'z\' not in printer.toolhead.homed_axes %}\n{% if enable_z_hop == False %}\n_KlickyDebug msg="homing_override z_hop disabled"\n\n{% set kinematic_z = safe_z %}\n{% set safe_z = safe_z %}\n{% endif %}\n{% endif %}\n\n\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes and \'z\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("No axis homed") }\n{% endif %}\n_KlickyDebug msg="homing_override no axis homed, setting position as X=Y=0 Z={kinematic_z}"\nSET_KINEMATIC_POSITION X=0 Y=0 Z={kinematic_z}\nM400\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% if home_z != True %}\n_KlickyDebug msg="homing_override clearing axis homed state if not already homing Z"\nM84\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("X or Y not homed, forcing full G28") }\n{% endif %}\n{% set home_x, home_y, home_z = True, True, True %}\n{% endif %}\n{% endif %}\n\n\n{% if ((attachmove_y == 0 and override_homing == \'\' ) or (override_homing == \'Y\'))%}\n\n{% if home_y %}\n{% if override_homing == \'Y\' %}\n_KlickyDebug msg="homing_override Y homing first override, due to override_homing = Y"\n{% else %}\n_KlickyDebug msg="homing_override Y homing first override, due to attachmove_y = 0"\n{% endif %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y G28 Y0"\nG28 Y0\n\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop-home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n{% set home_y = False %}\n{% endif %}\n\n\n\n{% if home_x %}\n{% if verbose %}\n{ action_respond_info("Homing X") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in X homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_X"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_X external script to handle the X homing"\n_HOME_X\n{% else %}\n_KlickyDebug msg="homing_override Homing X, G28 X0"\nG28 X0\n\n{% if home_backoff_x != 0 %}\n{% if (printer.configfile.settings.stepper_x.position_endstop > (printer.configfile.settings.stepper_x.position_min|default(0) + printer.configfile.settings.stepper_x.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n\n{% if home_y %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y, G28 Y0"\nG28 Y0\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if verbose %}\n{ action_respond_info("Homing Z") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe configured as a virtual Z endstop attaching probe"\nAttach_Probe\n\n{% if leave_probe_attached %}\n_Probe_Lock\n{% endif %}\n{% elif dock_on_zhome == True %}\nDock_Probe\n{% endif %}\n\n_Home_Z_\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe no longer required, docking probe"\nDock_Probe\n{% elif dock_on_zhome == False %}\nDock_Probe\n{% endif %}\n{% endif %}\n_CheckProbe action=query\n\n\n_Park_Toolhead\n\n_exit_point function=homing_override\n_KLICKY_STATUS_READY'}, 'gcode_macro _Umbilical_Path': {'gcode': '\n{% set umbilical = printer["gcode_macro _User_Variables"].umbilical %}\n{% set umbilical_x = printer["gcode_macro _User_Variables"].umbilical_x %}\n{% set umbilical_y = printer["gcode_macro _User_Variables"].umbilical_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n\n{% if umbilical %}\n\n_entry_point function=Umbilical_Path\n\n_KlickyDebug msg="_Umbilical_Path moving to G0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}"\nG0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}\n\n_exit_point function=Umbilical_Path\n{% endif %}'}, 'gcode_macro _Home_Z_': {'gcode': '\n{% set z_endstop_x = printer["gcode_macro _Probe_Variables"].z_endstop_x %}\n{% set z_endstop_y = printer["gcode_macro _Probe_Variables"].z_endstop_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}    {% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Home_Z\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n{% else %}\n_KlickyDebug msg="_Home_Z_ XY Axis homed"\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="_Home_Z_ Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n\n\n_KlickyDebug msg="_Home_Z_ moving to Z endstop position G0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}"\nG0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}\n_KlickyDebug msg="_Home_Z_ Homing Z G28 Z"\nG28 Z0\n_KlickyDebug msg="_Home_Z_ toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_exit_point function=Home_Z'}, 'gcode_macro _CheckProbe': {'variable_probe_state': '0', 'gcode': '\nQuery_Probe\n_SetProbeState action={ params.ACTION }'}, 'gcode_macro _SetProbeState': {'gcode': '\n{% set query_probe_triggered = printer.probe.last_query %}\n{% set action  = params.ACTION|default(\'\') %}\n\n\n{% if query_probe_triggered %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ False }\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ True }\n{% endif %}\n\n{% if action == \'query\' %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_state VALUE={ query_probe_triggered }\n{% endif %}\n\n\n\n\n{% if not query_probe_triggered and action == \'dock\' %}\n{ action_raise_error("Probe dock failed!") }\n{% endif %}\n\n\n{% if query_probe_triggered and action == \'attach\' %}\n{ action_raise_error("Probe attach failed!") }\n{% endif %}'}, 'gcode_macro _Park_Toolhead': {'gcode': '\n{% set park_toolhead = printer["gcode_macro _User_Variables"].park_toolhead %}\n{% set parkposition_x = printer["gcode_macro _User_Variables"].parkposition_x %}\n{% set parkposition_y = printer["gcode_macro _User_Variables"].parkposition_y %}\n{% set parkposition_z = printer["gcode_macro _User_Variables"].parkposition_z %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Park_Toolhead\n\n{% if park_toolhead and \'xyz\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Parking Toolhead") }\n{% endif %}\n{% if parkposition_z == -128 %}\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}\n\n{% else %}\n\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}\n\n{% endif %}\n\n{% endif %}\n_exit_point function=Park_Toolhead'}, 'gcode_macro _klicky_status_ready': {'gcode': '\n{% if printer[\'gcode_macro status_ready\'] is defined %}\n_KlickyDebug msg="_klicky_status_ready activating the LED STATUS_READY"\nSTATUS_READY\n{% endif %}'}, 'gcode_macro _klicky_status_busy': {'gcode': '\n{% if printer[\'gcode_macro status_busy\'] is defined %}\n_KlickyDebug msg="_klicky_status_busy activating the LED STATUS_BUSY"\nSTATUS_BUSY\n{% endif %}'}, 'gcode_macro _klicky_status_leveling': {'gcode': '\n{% if printer[\'gcode_macro status_leveling\'] is defined %}\n_KlickyDebug msg="_klicky_status_leveling activating the LED STATUS_LEVELING"\nSTATUS_LEVELING\n{% endif %}'}, 'gcode_macro _klicky_status_homing': {'gcode': '\n{% if printer[\'gcode_macro status_homing\'] is defined %}\n_KlickyDebug msg="_klicky_status_homing activating the LED STATUS_HOMING"\nSTATUS_HOMING\n{% endif %}'}, 'gcode_macro _klicky_status_cleaning': {'gcode': '\n{% if printer[\'gcode_macro status_cleaning\'] is defined %}\n_KlickyDebug msg="_klicky_status_cleaning activating the LED STATUS_CLEANING"\nSTATUS_CLEANING\n{% endif %}'}, 'gcode_macro _klicky_status_meshing': {'gcode': '\n{% if printer[\'gcode_macro status_meshing\'] is defined %}\n_KlickyDebug msg="_klicky_status_meshing activating the LED STATUS_MESHING"\nSTATUS_MESHING\n{% endif %}'}, 'gcode_macro _klicky_status_calibrating_z': {'gcode': '\n{% if printer[\'gcode_macro status_calibrating_z\'] is defined %}\n_KlickyDebug msg="_klicky_status_calibrating_z activating the LED STATUS_CALIBRATING_Z"\nSTATUS_CALIBRATING_Z\n{% endif %}'}, 'z_calibration': {'nozzle_xy_position': '172, 301', 'switch_xy_position': '171.5, 282', 'bed_xy_position': '150, 150', 'switch_offset': '0.09', 'offset_margins': '-1.0,1.0', 'speed': '50', 'probing_first_fast': 'false', 'start_gcode': 'Attach_Probe', 'end_gcode': 'Dock_Probe'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_28003C001150535556323420-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '^PG6', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '25', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'PG9', 'position_min': '0', 'position_endstop': '300', 'position_max': '303.5', 'homing_speed': '25', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': '!PG3', 'enable_pin': '!PG5', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'PG10', 'position_max': '290', 'position_min': '-4.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3', 'position_endstop': '-0.711'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA0', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': '!PF10', 'enable_pin': '!PG2', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PC13', 'dir_pin': 'PF0', 'enable_pin': '!PF1', 'rotation_distance': '21.9459674016', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.75', 'heater_pin': 'PA1', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF4', 'min_temp': '10', 'max_temp': '270', 'max_power': '1.0', 'min_extrude_temp': '170', 'pressure_advance': '0.05', 'pressure_advance_smooth_time': '0.040', 'control': 'pid', 'pid_kp': '26.572', 'pid_ki': '2.036', 'pid_kd': '86.691'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.5', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PA2', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF3', 'max_power': '1', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '55.196', 'pid_ki': '2.091', 'pid_kd': '364.295'}, 'probe': {'pin': 'PG15', 'x_offset': '0', 'y_offset': '25.0', 'z_offset': '0', 'speed': '10.0', 'samples': '5', 'samples_result': 'median', 'sample_retract_dist': '3.0', 'samples_tolerance': '0.006', 'samples_tolerance_retries': '6'}, 'fan': {'pin': 'PA8', 'kick_start_time': '0.5', 'off_below': '0.10'}, 'heater_fan hotend_fan': {'pin': 'PE5', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'controller_fan controller_fan': {'pin': 'PD12', 'kick_start_time': '0.5', 'heater': 'heater_bed'}, 'heater_fan exhaust_fan': {'pin': 'PD13', 'max_power': '1.0', 'shutdown_speed': '0.0', 'kick_start_time': '5.0', 'heater': 'heater_bed', 'heater_temp': '60', 'fan_speed': '1.0'}, 'output_pin caselight': {'pin': 'PD15', 'pwm': 'true', 'shutdown_value': '0', 'value': '1', 'cycle_time': '0.01'}, 'neopixel headlight': {'pin': 'PB0', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '0.0', 'initial_green': '0.2157', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'temperature_sensor chamber_temp': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF5', 'min_temp': '0', 'max_temp': '100', 'gcode_id': 'chamber_th'}, 'idle_timeout': {'timeout': '1800'}, 'z_tilt': {'z_positions': '\n-50, 18\n150, 348\n350, 18', 'points': '\n30, 5\n150, 245\n270, 5', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'gcode_macro _User_Variables': {'variable_verbose': 'True', 'variable_debug': 'False', 'variable_travel_speed': '200', 'variable_move_accel': '1000', 'variable_dock_speed': '50', 'variable_release_speed': '75', 'variable_z_drop_speed': '20', 'variable_safe_z': '25', 'variable_enable_z_hop': 'True', 'variable_max_bed_y': '300', 'variable_max_bed_x': '300', 'variable_z_endstop_x': '172', 'variable_z_endstop_y': '301', 'variable_docklocation_x': '40.5', 'variable_docklocation_y': '303.5', 'variable_docklocation_z': '-128', 'variable_enable_dock_servo': 'False', 'variable_servo_name': "'NAME'", 'variable_servo_deploy': '10', 'variable_servo_retract': '11', 'variable_servo_delay': '250', 'variable_dockmove_x': '40', 'variable_dockmove_y': '0', 'variable_dockmove_z': '0', 'variable_attachmove_x': '0', 'variable_attachmove_y': '30', 'variable_attachmove_z': '0', 'variable_umbilical': 'False', 'variable_umbilical_x': '15', 'variable_umbilical_y': '15', 'variable_park_toolhead': 'False', 'variable_parkposition_x': '125', 'variable_parkposition_y': '125', 'variable_parkposition_z': '30', 'variable_version': '1', 'variable_attachmove2_x': '0', 'variable_attachmove2_y': '0', 'variable_attachmove2_z': '0', 'variable_home_backoff_x': '10', 'variable_home_backoff_y': '10', 'variable_override_homing': "''", 'variable_dock_on_zhome': 'True', 'gcode': '\n{% set Mx = printer[\'configfile\'].config["stepper_x"]["position_max"]|float %}\n{% set My = printer[\'configfile\'].config["stepper_y"]["position_max"]|float %}\n{% set Ox = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set Oy = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set Oz = printer[\'configfile\'].config["probe"]["z_offset"]|float %}\n\n\n{% if z_endstop_x != 0 or z_endstop_y != 0 %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ z_endstop_x }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ z_endstop_y }\n\n\n{% else %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ (Mx * 0.5) - Ox }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ (My * 0.5) - Oy }\n{% endif %}'}, 'gcode_macro PRINT_START': {'gcode': '\nM117 Homing...\nG28\nATTACH_PROBE\nZ_TILT_ADJUST\nDOCK_PROBE\nG28\n\n\n\n\n\n\n\nG0 X150 Y150 Z30 F3600'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_28003C001150535556323420-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro _probe_variables': {'gcode': '', 'description': 'G-Code macro', 'variable_probe_attached': 'False', 'variable_probe_state': 'False', 'variable_probe_lock': 'False', 'variable_probe_z_homed': 'False', 'variable_z_endstop_x': '0', 'variable_z_endstop_y': '0'}, 'gcode_macro _klicky_check_variables_version': {'gcode': '\n{% set version = printer["gcode_macro _User_Variables"].version|default(0) %}\n\n{% if version != 1 %}\n{ action_raise_error("Please update your klicky variables, there are some functionality changes") }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klickydebug': {'gcode': '\n{% set message  = params.MSG %}\n{% set debug = printer["gcode_macro _User_Variables"].debug|default(False) %}\n\n{% if debug %}\n{ action_respond_info(message) }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _exit_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move  = params.MOVE|default(0) %}\n{% set speed = printer["gcode_macro _User_Variables"].travel_speed %}\n\n\nM400\nSET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\nRESTORE_GCODE_STATE NAME={function} MOVE={move} MOVE_SPEED={speed}', 'description': 'G-Code macro'}, 'gcode_macro _entry_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move_accel = printer["gcode_macro _User_Variables"].move_accel|default(1000) %}\n\nM400\nSAVE_GCODE_STATE NAME={function}\n\nSET_GCODE_OFFSET Z=0\n\nG90\n\nSET_VELOCITY_LIMIT ACCEL={move_accel}', 'description': 'G-Code macro'}, 'gcode_macro _homing_variables': {'gcode': '\n{% set reset  = params.RESET|default(0) %}\n{% if reset %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro attach_probe_lock': {'gcode': '\nAttach_Probe\n_Probe_Lock', 'description': 'Attaches Klicky Probe, can only be docked after unlocking'}, 'gcode_macro dock_probe_unlock': {'gcode': '\n_Probe_Unlock\nDock_Probe', 'description': 'Docks Klicky Probe even if it was locked'}, 'gcode_macro _probe_unlock': {'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to False"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }', 'description': 'Unlocks Klicky Probe state'}, 'gcode_macro _probe_lock': {'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to True"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ True }', 'description': 'Locks Klicky Probe state'}, 'gcode_macro _deployklickydock': {'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_deploy = printer["gcode_macro _User_Variables"].servo_deploy|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_DeployKlickyDock Klicky servo configuration enabled"\n{% if servo_deploy == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo deploy angle specified") }\n{% endif %}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _DeployDock"] is defined %}\n_KlickyDebug msg="_DeployKlickyDock calling _DeployDock"\n_DeployDock\n{% endif %}', 'description': 'Deploys Klicky servo-controlled dock'}, 'gcode_macro _retractklickydock': {'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_retract = printer["gcode_macro _User_Variables"].servo_retract|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_RetractKlickyDock Klicky servo configuration enabled"\n{% if servo_retract == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo retract angle specified") }\n{% endif %}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _RetractDock"] is defined %}\n_KlickyDebug msg="_RetractKlickyDock calling _RetractDock"\n_RetractDock\n{% endif %}', 'description': 'Retracts Klicky servo-controlled dock'}, 'gcode_macro attach_probe': {'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set attachmove2_x = printer["gcode_macro _User_Variables"].attachmove2_x|default(0) %}\n{% set attachmove2_y = printer["gcode_macro _User_Variables"].attachmove2_y|default(0) %}\n{% set attachmove2_z = printer["gcode_macro _User_Variables"].attachmove2_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n_entry_point function=Attach_Probe\n\n{% if bypass_probe_docking == False %}\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n_KlickyDebug msg="Attach_Probe Axis homed"\n\n\n{% elif not probe_attached and not probe_lock %}\n_KlickyDebug msg="Attach_Probe going to attach probe"\n{% if verbose %}\n{ action_respond_info("Attaching Probe") }\n{% endif %}\n_KLICKY_STATUS_BUSY\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% if not enable_z_hop %}\n_KlickyDebug msg="Attach_Probe z_hop disabled"\n{% set safe_z = 0 %}\n{% endif %}\n{% endif %}\n\n\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero, duplicate?") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Umbilical_Path\n\n_entry_point function=Attach_Probe_intern\n\n\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n_DeployKlickyDock\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}"\nG0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}\n\n_RetractKlickyDock\n\n{% if ((printer.gcode_move.gcode_position.z < safe_z) or (docklocation_z != -128 and docklocation_z < safe_z ))%}\n_KlickyDebug msg="Attach_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\n_CheckProbe action=attach\n\n_exit_point function=Attach_Probe_intern move={goback}\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe locked not attaching probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already attached!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe already attached, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Attach_Probe\n{% else %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}', 'description': 'Attaches Klicky Probe'}, 'gcode_macro dock_probe': {'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n{% if bypass_probe_docking == True %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}\n\n{% if bypass_probe_docking != True %}\n_entry_point function=Dock_Probe\n\n\n{% if probe_attached and not probe_lock %}\n_KLICKY_STATUS_BUSY\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Dock_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n_Umbilical_Path\n\n\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n\n_DeployKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\n\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}"\nG0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}\n{% endif %}\n\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}\n\n\n_RetractKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving away from the dock to G0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}\n\n\n{% if (printer.gcode_move.gcode_position.z < safe_z) %}\n_KlickyDebug msg="Dock_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\nG4 P1000\n_CheckProbe action=dock\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe locked not docking probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already docked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe already docked, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Dock_Probe move={goback}\n{% else %}\n_KlickyDebug msg="Dock_Probe probe docking bypassed, doing nothing"\n{% endif %}', 'description': 'Docks Klicky Probe'}, 'gcode_macro probe_calibrate': {'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_calibrate Axis homed"\n_KlickyDebug msg="probe_calibrate Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_CALIBRATE with the probe above the BED, check klicky_variables bed size!") }\n{% endif %}\n\n{% if bypass_probe_docking == False %}\n_CheckProbe action=query\nG90\nAttach_Probe back=1\n_KLICKY_STATUS_CALIBRATING_Z\n\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nM118 moving the toolhead 20 mm from the bed\n_KlickyDebug msg="probe_calibrate Moving Z up by 20mm"\nTESTZ Z=20\nM118 remove manually the probe and continue calibration\n_KLICKY_STATUS_READY\n{% else %}\n_KLICKY_STATUS_CALIBRATING_Z\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n_KLICKY_STATUS_READY\n{% endif %}', 'rename_existing': '_PROBE_CALIBRATE', 'description': 'Calibrate the probes z_offset with klicky automount'}, 'gcode_macro probe_accuracy': {'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_accuracy Axis homed"\n_KlickyDebug msg="probe_accuracy Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n_entry_point function=PROBE_ACCURACY\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_ACCURACY with the probe above the BED, check klicky_variables bed size!") }\n{% endif%}\n\n_CheckProbe action=query\nAttach_Probe back=1\n\n_KlickyDebug msg="probe_accuracy calling klipper probe accuracy"\n_PROBE_ACCURACY {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nDock_Probe back=1\n\n_exit_point function=PROBE_ACCURACY move=1', 'rename_existing': '_PROBE_ACCURACY', 'description': 'Probe Z-height accuracy at current XY position with klicky automount'}, 'force_move': {'enable_force_move': True}, 'homing_override': {'axes': 'xyz', 'gcode': '\n\n_User_Variables\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n{% set kinematic_z = 0 %}\n{% set dock_on_zhome = printer["gcode_macro _User_Variables"].dock_on_zhome|default(True) %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set home_backoff_x = printer["gcode_macro _User_Variables"].home_backoff_x|default(0) %}\n{% set home_backoff_y = printer["gcode_macro _User_Variables"].home_backoff_y|default(0) %}\n{% set override_homing = printer["gcode_macro _User_Variables"].override_homing|default(\'\') %}\n\n\n_klicky_check_variables_version\n\n_CheckProbe action=query\n\n\n{% set home_x, home_y, home_z, leave_probe_attached = False, False, False, False %}\n\n{% if \'PROBE_LOCK\' in params%}\n{% if verbose %}\n{ action_respond_info("PROBE_LOCK = True") }\n{% endif %}\n{% set leave_probe_attached = True %}\n{% endif %}\n\n\n{% if not \'X\' in params\nand not \'Y\' in params\nand not \'Z\' in params %}\n\n{% set home_x, home_y, home_z = True, True, True %}\n_KlickyDebug msg="homing_override goint to home all axes"\n\n{% else %}\n{% if \'X\' in params %}\n{% set home_x = True %}\n_KlickyDebug msg="homing_override goint to home X"\n\n{% endif %}\n\n{% if \'Y\' in params %}\n{% set home_y = True %}\n_KlickyDebug msg="homing_override goint to home Y"\n{% endif %}\n\n{% if \'Z\' in params %}\n{% set home_z = True %}\n_KlickyDebug msg="homing_override goint to home Z"\n{% endif %}\n\n{% if \'X\' in params\nand \'Y\' in params\nand \'Z\' in params %}\n\n\n_Homing_Variables reset=1\n_KlickyDebug msg="homing_override goint to home all axes"\n{% endif %}\n\n{% endif %}\n\n_entry_point function=homing_override\n_KLICKY_STATUS_HOMING\n\n\n{% if \'z\' not in printer.toolhead.homed_axes %}\n{% if enable_z_hop == False %}\n_KlickyDebug msg="homing_override z_hop disabled"\n\n{% set kinematic_z = safe_z %}\n{% set safe_z = safe_z %}\n{% endif %}\n{% endif %}\n\n\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes and \'z\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("No axis homed") }\n{% endif %}\n_KlickyDebug msg="homing_override no axis homed, setting position as X=Y=0 Z={kinematic_z}"\nSET_KINEMATIC_POSITION X=0 Y=0 Z={kinematic_z}\nM400\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% if home_z != True %}\n_KlickyDebug msg="homing_override clearing axis homed state if not already homing Z"\nM84\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("X or Y not homed, forcing full G28") }\n{% endif %}\n{% set home_x, home_y, home_z = True, True, True %}\n{% endif %}\n{% endif %}\n\n\n{% if ((attachmove_y == 0 and override_homing == \'\' ) or (override_homing == \'Y\'))%}\n\n{% if home_y %}\n{% if override_homing == \'Y\' %}\n_KlickyDebug msg="homing_override Y homing first override, due to override_homing = Y"\n{% else %}\n_KlickyDebug msg="homing_override Y homing first override, due to attachmove_y = 0"\n{% endif %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y G28 Y0"\nG28 Y0\n\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop-home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n{% set home_y = False %}\n{% endif %}\n\n\n\n{% if home_x %}\n{% if verbose %}\n{ action_respond_info("Homing X") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in X homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_X"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_X external script to handle the X homing"\n_HOME_X\n{% else %}\n_KlickyDebug msg="homing_override Homing X, G28 X0"\nG28 X0\n\n{% if home_backoff_x != 0 %}\n{% if (printer.configfile.settings.stepper_x.position_endstop > (printer.configfile.settings.stepper_x.position_min|default(0) + printer.configfile.settings.stepper_x.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n\n{% if home_y %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y, G28 Y0"\nG28 Y0\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if verbose %}\n{ action_respond_info("Homing Z") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe configured as a virtual Z endstop attaching probe"\nAttach_Probe\n\n{% if leave_probe_attached %}\n_Probe_Lock\n{% endif %}\n{% elif dock_on_zhome == True %}\nDock_Probe\n{% endif %}\n\n_Home_Z_\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe no longer required, docking probe"\nDock_Probe\n{% elif dock_on_zhome == False %}\nDock_Probe\n{% endif %}\n{% endif %}\n_CheckProbe action=query\n\n\n_Park_Toolhead\n\n_exit_point function=homing_override\n_KLICKY_STATUS_READY'}, 'gcode_macro _umbilical_path': {'gcode': '\n{% set umbilical = printer["gcode_macro _User_Variables"].umbilical %}\n{% set umbilical_x = printer["gcode_macro _User_Variables"].umbilical_x %}\n{% set umbilical_y = printer["gcode_macro _User_Variables"].umbilical_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n\n{% if umbilical %}\n\n_entry_point function=Umbilical_Path\n\n_KlickyDebug msg="_Umbilical_Path moving to G0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}"\nG0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}\n\n_exit_point function=Umbilical_Path\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _home_z_': {'gcode': '\n{% set z_endstop_x = printer["gcode_macro _Probe_Variables"].z_endstop_x %}\n{% set z_endstop_y = printer["gcode_macro _Probe_Variables"].z_endstop_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}    {% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Home_Z\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n{% else %}\n_KlickyDebug msg="_Home_Z_ XY Axis homed"\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="_Home_Z_ Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n\n\n_KlickyDebug msg="_Home_Z_ moving to Z endstop position G0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}"\nG0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}\n_KlickyDebug msg="_Home_Z_ Homing Z G28 Z"\nG28 Z0\n_KlickyDebug msg="_Home_Z_ toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_exit_point function=Home_Z', 'description': 'G-Code macro'}, 'gcode_macro _checkprobe': {'gcode': '\nQuery_Probe\n_SetProbeState action={ params.ACTION }', 'description': 'G-Code macro', 'variable_probe_state': '0'}, 'gcode_macro _setprobestate': {'gcode': '\n{% set query_probe_triggered = printer.probe.last_query %}\n{% set action  = params.ACTION|default(\'\') %}\n\n\n{% if query_probe_triggered %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ False }\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ True }\n{% endif %}\n\n{% if action == \'query\' %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_state VALUE={ query_probe_triggered }\n{% endif %}\n\n\n\n\n{% if not query_probe_triggered and action == \'dock\' %}\n{ action_raise_error("Probe dock failed!") }\n{% endif %}\n\n\n{% if query_probe_triggered and action == \'attach\' %}\n{ action_raise_error("Probe attach failed!") }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _park_toolhead': {'gcode': '\n{% set park_toolhead = printer["gcode_macro _User_Variables"].park_toolhead %}\n{% set parkposition_x = printer["gcode_macro _User_Variables"].parkposition_x %}\n{% set parkposition_y = printer["gcode_macro _User_Variables"].parkposition_y %}\n{% set parkposition_z = printer["gcode_macro _User_Variables"].parkposition_z %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Park_Toolhead\n\n{% if park_toolhead and \'xyz\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Parking Toolhead") }\n{% endif %}\n{% if parkposition_z == -128 %}\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}\n\n{% else %}\n\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}\n\n{% endif %}\n\n{% endif %}\n_exit_point function=Park_Toolhead', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_ready': {'gcode': '\n{% if printer[\'gcode_macro status_ready\'] is defined %}\n_KlickyDebug msg="_klicky_status_ready activating the LED STATUS_READY"\nSTATUS_READY\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_busy': {'gcode': '\n{% if printer[\'gcode_macro status_busy\'] is defined %}\n_KlickyDebug msg="_klicky_status_busy activating the LED STATUS_BUSY"\nSTATUS_BUSY\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_leveling': {'gcode': '\n{% if printer[\'gcode_macro status_leveling\'] is defined %}\n_KlickyDebug msg="_klicky_status_leveling activating the LED STATUS_LEVELING"\nSTATUS_LEVELING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_homing': {'gcode': '\n{% if printer[\'gcode_macro status_homing\'] is defined %}\n_KlickyDebug msg="_klicky_status_homing activating the LED STATUS_HOMING"\nSTATUS_HOMING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_cleaning': {'gcode': '\n{% if printer[\'gcode_macro status_cleaning\'] is defined %}\n_KlickyDebug msg="_klicky_status_cleaning activating the LED STATUS_CLEANING"\nSTATUS_CLEANING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_meshing': {'gcode': '\n{% if printer[\'gcode_macro status_meshing\'] is defined %}\n_KlickyDebug msg="_klicky_status_meshing activating the LED STATUS_MESHING"\nSTATUS_MESHING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_calibrating_z': {'gcode': '\n{% if printer[\'gcode_macro status_calibrating_z\'] is defined %}\n_KlickyDebug msg="_klicky_status_calibrating_z activating the LED STATUS_CALIBRATING_Z"\nSTATUS_CALIBRATING_Z\n{% endif %}', 'description': 'G-Code macro'}, 'z_calibration': {'switch_offset': 0.09, 'offset_margins': '-1.0,1.0', 'speed': 50.0, 'samples_result': 'none', 'probing_first_fast': False, 'nozzle_xy_position': '172, 301', 'switch_xy_position': '171.5, 282', 'bed_xy_position': '150, 150', 'start_gcode': 'Attach_Probe', 'before_switch_gcode': '', 'end_gcode': 'Dock_Probe'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': '^PG6', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'PG9', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 303.5, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PF11', 'dir_pin': '!PG3', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG5', 'endstop_pin': 'PG10', 'position_endstop': -0.711, 'position_min': -4.5, 'position_max': 290.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA0'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PF9', 'dir_pin': '!PF10', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG2'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF4', 'min_temp': 10.0, 'max_temp': 270.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 26.572, 'pid_ki': 2.036, 'pid_kd': 86.691, 'heater_pin': 'PA1', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PC13', 'pressure_advance': 0.05, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'PF0', 'rotation_distance': 21.9459674016, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 55.196, 'pid_ki': 2.091, 'pid_kd': 364.295, 'heater_pin': 'PA2', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'probe': {'z_offset': 0.0, 'deactivate_on_each_sample': True, 'activate_gcode': '', 'deactivate_gcode': '', 'pin': 'PG15', 'speed': 10.0, 'lift_speed': 10.0, 'x_offset': 0.0, 'y_offset': 25.0, 'samples': 5, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.006, 'samples_tolerance_retries': 6}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE5', 'fan_speed': 1.0}, 'controller_fan controller_fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD12', 'fan_speed': 1.0, 'idle_speed': 1.0, 'idle_timeout': 30, 'heater': ['heater_bed']}, 'heater_fan exhaust_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 5.0, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13', 'fan_speed': 1.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PD15', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 1.0, 'maximum_mcu_duration': 0.0, 'value': 1.0, 'shutdown_value': 0.0}, 'neopixel headlight': {'pin': 'PB0', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 0.0, 'initial_green': 0.2157, 'initial_blue': 1.0, 'initial_white': 0.0}, 'temperature_sensor chamber_temp': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF5', 'min_temp': 0.0, 'max_temp': 100.0, 'gcode_id': 'chamber_th'}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [150.0, 348.0], [350.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 5.0], [150.0, 245.0], [270.0, 5.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'gcode_macro _user_variables': {'gcode': '\n{% set Mx = printer[\'configfile\'].config["stepper_x"]["position_max"]|float %}\n{% set My = printer[\'configfile\'].config["stepper_y"]["position_max"]|float %}\n{% set Ox = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set Oy = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set Oz = printer[\'configfile\'].config["probe"]["z_offset"]|float %}\n\n\n{% if z_endstop_x != 0 or z_endstop_y != 0 %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ z_endstop_x }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ z_endstop_y }\n\n\n{% else %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ (Mx * 0.5) - Ox }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ (My * 0.5) - Oy }\n{% endif %}', 'description': 'G-Code macro', 'variable_verbose': 'True', 'variable_debug': 'False', 'variable_travel_speed': '200', 'variable_move_accel': '1000', 'variable_dock_speed': '50', 'variable_release_speed': '75', 'variable_z_drop_speed': '20', 'variable_safe_z': '25', 'variable_enable_z_hop': 'True', 'variable_max_bed_y': '300', 'variable_max_bed_x': '300', 'variable_z_endstop_x': '172', 'variable_z_endstop_y': '301', 'variable_docklocation_x': '40.5', 'variable_docklocation_y': '303.5', 'variable_docklocation_z': '-128', 'variable_enable_dock_servo': 'False', 'variable_servo_name': "'NAME'", 'variable_servo_deploy': '10', 'variable_servo_retract': '11', 'variable_servo_delay': '250', 'variable_dockmove_x': '40', 'variable_dockmove_y': '0', 'variable_dockmove_z': '0', 'variable_attachmove_x': '0', 'variable_attachmove_y': '30', 'variable_attachmove_z': '0', 'variable_umbilical': 'False', 'variable_umbilical_x': '15', 'variable_umbilical_y': '15', 'variable_park_toolhead': 'False', 'variable_parkposition_x': '125', 'variable_parkposition_y': '125', 'variable_parkposition_z': '30', 'variable_version': '1', 'variable_attachmove2_x': '0', 'variable_attachmove2_y': '0', 'variable_attachmove2_z': '0', 'variable_home_backoff_x': '10', 'variable_home_backoff_y': '10', 'variable_override_homing': "''", 'variable_dock_on_zhome': 'True'}, 'gcode_macro print_start': {'gcode': '\nM117 Homing...\nG28\nATTACH_PROBE\nZ_TILT_ADJUST\nDOCK_PROBE\nG28\n\n\n\n\n\n\n\nG0 X150 Y150 Z30 F3600', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1500.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-02-19 17:49:54,373 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-19 17:49:54,374 [printer.py:reinit()] - Klipper version: v0.12.0-103-g6ce6fbbc-dirty
2024-02-19 17:49:54,374 [printer.py:reinit()] - # Extruders: 1
2024-02-19 17:49:54,374 [printer.py:reinit()] - # Temperature devices: 2
2024-02-19 17:49:54,374 [printer.py:reinit()] - # Fans: 4
2024-02-19 17:49:54,374 [printer.py:reinit()] - # Output pins: 1
2024-02-19 17:49:54,374 [printer.py:reinit()] - # Leds: 1
2024-02-19 17:49:54,387 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2024-02-19 17:49:54,390 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-02-19 17:49:54,679 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor chamber_temp&fan&controller_fan controller_fan&heater_fan hotend_fan&heater_fan exhaust_fan&output_pin caselight&neopixel headlight
2024-02-19 17:49:54,682 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-02-19 17:49:54,682 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-02-19 17:49:54,683 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-02-19 17:49:54,684 [screen.py:init_klipper()] - Printer initialized
2024-02-19 17:49:54,687 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2024-02-19 17:49:54,687 [printer.py:change_state()] - Adding callback for state: ready
2024-02-19 17:49:54,691 [screen.py:_load_panel()] - Loading panel: main_menu
2024-02-19 17:49:54,771 [main_menu.py:__init__()] - ### Making MainMenu
2024-02-19 17:49:54,778 [main_menu.py:add_device()] - Adding device: extruder
2024-02-19 17:49:54,785 [main_menu.py:add_device()] - Adding device: heater_bed
2024-02-19 17:49:54,793 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber_temp
2024-02-19 17:49:54,822 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-02-19 17:49:54,832 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-02-19 17:49:54,846 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'temperature_sensor chamber_temp', 'extruder']
2024-02-19 17:49:54,858 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2024-02-19 17:49:54,859 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-02-19 19:41:56,022 [screen.py:show_popup_message()] - error: Error evaluating 'gcode_macro _SetProbeState:gcode': gcode.CommandError: Probe attach failed!
2024-02-19 19:42:31,878 [screen.py:_go_to_submenu()] - #### Go to submenu more
2024-02-19 19:42:31,879 [screen.py:_go_to_submenu()] - #### Menu __main
2024-02-19 19:42:31,886 [screen.py:_load_panel()] - Loading panel: menu
2024-02-19 19:42:32,103 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more
2024-02-19 19:42:32,107 [menu.py:arrangeMenuItems()] - X > more bedlevel
2024-02-19 19:42:32,109 [menu.py:arrangeMenuItems()] - X > more bedmesh
2024-02-19 19:42:32,114 [menu.py:arrangeMenuItems()] - X > more retraction
2024-02-19 19:42:32,126 [menu.py:arrangeMenuItems()] - X > more power
2024-02-19 19:42:32,128 [menu.py:arrangeMenuItems()] - X > more camera
2024-02-19 19:42:32,134 [menu.py:arrangeMenuItems()] - X > more input_shaper
2024-02-19 19:42:32,141 [menu.py:arrangeMenuItems()] - X > more spoolman
2024-02-19 19:42:32,802 [screen.py:_load_panel()] - Loading panel: gcode_macros
2024-02-19 19:42:32,829 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more > gcode_macros
2024-02-19 19:42:34,490 [screen.py:show_popup_message()] - echo: Attach_Probe 
2024-02-19 19:42:34,493 [screen.py:_send_action()] - printer.gcode.script: {'script': 'Attach_Probe'}
2024-02-19 19:42:36,927 [screen.py:show_popup_message()] - error: Error evaluating 'gcode_macro _SetProbeState:gcode': gcode.CommandError: Probe attach failed!
2024-02-19 19:42:39,898 [screen.py:show_popup_message()] - echo: Attach_Probe 
2024-02-19 19:42:39,901 [screen.py:_send_action()] - printer.gcode.script: {'script': 'Attach_Probe'}
2024-02-19 19:42:41,627 [screen.py:show_popup_message()] - error: Error evaluating 'gcode_macro _SetProbeState:gcode': gcode.CommandError: Probe attach failed!
2024-02-19 19:42:46,016 [screen.py:show_popup_message()] - echo: Dock_Probe 
2024-02-19 19:42:46,023 [screen.py:_send_action()] - printer.gcode.script: {'script': 'Dock_Probe'}
2024-02-19 19:42:49,170 [screen.py:show_popup_message()] - echo: Dock_Probe 
2024-02-19 19:42:49,174 [screen.py:_send_action()] - printer.gcode.script: {'script': 'Dock_Probe'}
2024-02-19 19:42:54,460 [screen.py:show_popup_message()] - echo: Attach_Probe 
2024-02-19 19:42:54,467 [screen.py:_send_action()] - printer.gcode.script: {'script': 'Attach_Probe'}
2024-02-19 19:42:56,915 [screen.py:show_popup_message()] - error: Error evaluating 'gcode_macro _SetProbeState:gcode': gcode.CommandError: Probe attach failed!
2024-02-19 19:43:10,002 [screen.py:show_popup_message()] - echo: Dock_Probe 
2024-02-19 19:43:10,005 [screen.py:_send_action()] - printer.gcode.script: {'script': 'Dock_Probe'}
2024-02-19 19:43:13,796 [screen.py:show_popup_message()] - echo: Dock_Probe 
2024-02-19 19:43:13,804 [screen.py:_send_action()] - printer.gcode.script: {'script': 'Dock_Probe'}
2024-02-19 19:43:17,969 [screen.py:_menu_go_back()] - #### Menu go back
2024-02-19 19:43:17,990 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more
2024-02-19 19:43:17,995 [menu.py:arrangeMenuItems()] - X > more bedlevel
2024-02-19 19:43:17,997 [menu.py:arrangeMenuItems()] - X > more bedmesh
2024-02-19 19:43:18,001 [menu.py:arrangeMenuItems()] - X > more retraction
2024-02-19 19:43:18,014 [menu.py:arrangeMenuItems()] - X > more power
2024-02-19 19:43:18,016 [menu.py:arrangeMenuItems()] - X > more camera
2024-02-19 19:43:18,020 [menu.py:arrangeMenuItems()] - X > more input_shaper
2024-02-19 19:43:18,028 [menu.py:arrangeMenuItems()] - X > more spoolman
2024-02-19 19:43:18,789 [screen.py:_menu_go_back()] - #### Menu go back
2024-02-19 19:43:18,805 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-02-19 19:43:19,587 [screen.py:_load_panel()] - Loading panel: move
2024-02-19 19:43:19,673 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-02-19 19:43:20,929 [move.py:change_distance()] - ### Distance 10
2024-02-19 19:43:21,313 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 X-10 F3000'}
2024-02-19 19:43:21,316 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:43:22,282 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 X-10 F3000'}
2024-02-19 19:43:22,284 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:43:23,054 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 X-10 F3000'}
2024-02-19 19:43:23,055 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:43:24,161 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 X-10 F3000'}
2024-02-19 19:43:24,162 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:43:30,526 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+10 F3000'}
2024-02-19 19:43:30,530 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:43:31,390 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+10 F3000'}
2024-02-19 19:43:31,393 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:43:33,270 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y-10 F3000'}
2024-02-19 19:43:33,275 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:43:34,650 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+10 F3000'}
2024-02-19 19:43:34,655 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:43:35,619 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+10 F3000'}
2024-02-19 19:43:35,623 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:43:37,302 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 X+10 F3000'}
2024-02-19 19:43:37,307 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:43:38,170 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 X+10 F3000'}
2024-02-19 19:43:38,175 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:43:39,082 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 X+10 F3000'}
2024-02-19 19:43:39,087 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:43:40,066 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 X+10 F3000'}
2024-02-19 19:43:40,069 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:43:45,026 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y-10 F3000'}
2024-02-19 19:43:45,028 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:43:45,602 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y-10 F3000'}
2024-02-19 19:43:45,606 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:43:47,094 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 X-10 F3000'}
2024-02-19 19:43:47,097 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:43:47,671 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 X-10 F3000'}
2024-02-19 19:43:47,673 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:43:48,415 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 X-10 F3000'}
2024-02-19 19:43:48,417 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:43:49,138 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 X-10 F3000'}
2024-02-19 19:43:49,141 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:43:51,358 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 X+10 F3000'}
2024-02-19 19:43:51,361 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:43:51,650 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 X+10 F3000'}
2024-02-19 19:43:51,652 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:43:52,106 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 X+10 F3000'}
2024-02-19 19:43:52,109 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:43:52,618 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 X+10 F3000'}
2024-02-19 19:43:52,621 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:43:53,510 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y-10 F3000'}
2024-02-19 19:43:53,512 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:43:54,182 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 X-10 F3000'}
2024-02-19 19:43:54,185 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:43:54,452 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 X-10 F3000'}
2024-02-19 19:43:54,455 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:43:54,930 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 X-10 F3000'}
2024-02-19 19:43:54,932 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:43:55,706 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 X-10 F3000'}
2024-02-19 19:43:55,709 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:43:58,443 [move.py:change_distance()] - ### Distance 5
2024-02-19 19:43:58,898 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+5 F3000'}
2024-02-19 19:43:58,901 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:43:59,670 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+5 F3000'}
2024-02-19 19:43:59,675 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:44:00,538 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+5 F3000'}
2024-02-19 19:44:00,540 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:44:02,962 [move.py:change_distance()] - ### Distance 1
2024-02-19 19:44:03,346 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y-1 F3000'}
2024-02-19 19:44:03,349 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:44:04,311 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y-1 F3000'}
2024-02-19 19:44:04,314 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:44:13,250 [move.py:change_distance()] - ### Distance 25
2024-02-19 19:44:13,738 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y-25 F3000'}
2024-02-19 19:44:13,741 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:44:15,682 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+25 F3000'}
2024-02-19 19:44:15,685 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:44:17,654 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y-25 F3000'}
2024-02-19 19:44:17,656 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:44:20,879 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+25 F3000'}
2024-02-19 19:44:20,881 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:44:24,054 [move.py:change_distance()] - ### Distance 1
2024-02-19 19:44:24,759 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 X+1 F3000'}
2024-02-19 19:44:24,761 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:44:25,598 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 X+1 F3000'}
2024-02-19 19:44:25,601 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:44:27,002 [move.py:change_distance()] - ### Distance 25
2024-02-19 19:44:27,410 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y-25 F3000'}
2024-02-19 19:44:27,413 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:44:29,234 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+25 F3000'}
2024-02-19 19:44:29,237 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:44:32,006 [move.py:change_distance()] - ### Distance 50
2024-02-19 19:44:32,879 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z+50 F600'}
2024-02-19 19:44:32,882 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:44:34,134 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z+50 F600'}
2024-02-19 19:44:34,137 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:45:05,839 [move.py:change_distance()] - ### Distance 5
2024-02-19 19:45:06,298 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+5 F3000'}
2024-02-19 19:45:06,301 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:45:07,282 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+5 F3000'}
2024-02-19 19:45:07,284 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:45:10,022 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y-5 F3000'}
2024-02-19 19:45:10,026 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:45:11,630 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+5 F3000'}
2024-02-19 19:45:11,632 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:45:12,675 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+5 F3000'}
2024-02-19 19:45:12,677 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:45:15,218 [move.py:change_distance()] - ### Distance 25
2024-02-19 19:45:16,763 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y-25 F3000'}
2024-02-19 19:45:16,765 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:45:18,446 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+25 F3000'}
2024-02-19 19:45:18,450 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:45:20,282 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 X+25 F3000'}
2024-02-19 19:45:20,284 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:45:21,075 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 X+25 F3000'}
2024-02-19 19:45:21,078 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:45:22,346 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y-25 F3000'}
2024-02-19 19:45:22,350 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:45:23,522 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y-25 F3000'}
2024-02-19 19:45:23,528 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:45:24,563 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 X-25 F3000'}
2024-02-19 19:45:24,565 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:45:25,407 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 X-25 F3000'}
2024-02-19 19:45:25,411 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:45:27,194 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+25 F3000'}
2024-02-19 19:45:27,197 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:45:28,178 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+25 F3000'}
2024-02-19 19:45:28,181 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:45:34,154 [move.py:change_distance()] - ### Distance 1
2024-02-19 19:45:34,576 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+1 F3000'}
2024-02-19 19:45:34,579 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:45:35,611 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+1 F3000'}
2024-02-19 19:45:35,614 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:45:37,678 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y-1 F3000'}
2024-02-19 19:45:37,680 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:45:38,903 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y-1 F3000'}
2024-02-19 19:45:38,907 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:45:43,674 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y-1 F3000'}
2024-02-19 19:45:43,676 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:45:46,090 [move.py:change_distance()] - ### Distance 25
2024-02-19 19:45:46,522 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 X+25 F3000'}
2024-02-19 19:45:46,526 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:45:47,554 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 X+25 F3000'}
2024-02-19 19:45:47,558 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:45:48,830 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y-25 F3000'}
2024-02-19 19:45:48,835 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:45:49,575 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y-25 F3000'}
2024-02-19 19:45:49,578 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:45:50,630 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 X-25 F3000'}
2024-02-19 19:45:50,633 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:45:51,422 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 X-25 F3000'}
2024-02-19 19:45:51,427 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:45:52,482 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+25 F3000'}
2024-02-19 19:45:52,487 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:45:53,350 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+25 F3000'}
2024-02-19 19:45:53,356 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:45:56,827 [move.py:change_distance()] - ### Distance 1
2024-02-19 19:46:15,519 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-02-19 19:46:15,519 [printer.py:change_state()] - Adding callback for state: disconnected
2024-02-19 19:46:15,521 [screen.py:state_disconnected()] - ### Going to disconnected
2024-02-19 19:46:15,521 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-19 19:46:15,525 [screen.py:show_panel()] - Reinitializing panel
2024-02-19 19:46:15,599 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-02-19 19:46:19,287 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-19 19:46:19,295 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2024-02-19 19:46:19,297 [printer.py:configure_cameras()] - Cameras: []
2024-02-19 19:46:19,297 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'update_manager', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-310-g67c98f6', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-02-19 19:46:19,306 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2024-02-19 19:46:19,516 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2024-02-19 19:46:19,520 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro _Probe_Variables': {'variable_probe_attached': 'False', 'variable_probe_state': 'False', 'variable_probe_lock': 'False', 'variable_probe_z_homed': 'False', 'variable_z_endstop_x': '0', 'variable_z_endstop_y': '0', 'gcode': ''}, 'gcode_macro _klicky_check_variables_version': {'gcode': '\n{% set version = printer["gcode_macro _User_Variables"].version|default(0) %}\n\n{% if version != 1 %}\n{ action_raise_error("Please update your klicky variables, there are some functionality changes") }\n{% endif %}'}, 'gcode_macro _KlickyDebug': {'gcode': '\n{% set message  = params.MSG %}\n{% set debug = printer["gcode_macro _User_Variables"].debug|default(False) %}\n\n{% if debug %}\n{ action_respond_info(message) }\n{% endif %}'}, 'gcode_macro _exit_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move  = params.MOVE|default(0) %}\n{% set speed = printer["gcode_macro _User_Variables"].travel_speed %}\n\n\nM400\nSET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\nRESTORE_GCODE_STATE NAME={function} MOVE={move} MOVE_SPEED={speed}'}, 'gcode_macro _entry_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move_accel = printer["gcode_macro _User_Variables"].move_accel|default(1000) %}\n\nM400\nSAVE_GCODE_STATE NAME={function}\n\nSET_GCODE_OFFSET Z=0\n\nG90\n\nSET_VELOCITY_LIMIT ACCEL={move_accel}'}, 'gcode_macro _Homing_Variables': {'gcode': '\n{% set reset  = params.RESET|default(0) %}\n{% if reset %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }\n{% endif %}'}, 'gcode_macro Attach_Probe_Lock': {'description': 'Attaches Klicky Probe, can only be docked after unlocking', 'gcode': '\nAttach_Probe\n_Probe_Lock'}, 'gcode_macro Dock_Probe_Unlock': {'description': 'Docks Klicky Probe even if it was locked', 'gcode': '\n_Probe_Unlock\nDock_Probe'}, 'gcode_macro _Probe_Unlock': {'description': 'Unlocks Klicky Probe state', 'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to False"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }'}, 'gcode_macro _Probe_Lock': {'description': 'Locks Klicky Probe state', 'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to True"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ True }'}, 'gcode_macro _DeployKlickyDock': {'description': 'Deploys Klicky servo-controlled dock', 'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_deploy = printer["gcode_macro _User_Variables"].servo_deploy|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_DeployKlickyDock Klicky servo configuration enabled"\n{% if servo_deploy == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo deploy angle specified") }\n{% endif %}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _DeployDock"] is defined %}\n_KlickyDebug msg="_DeployKlickyDock calling _DeployDock"\n_DeployDock\n{% endif %}'}, 'gcode_macro _RetractKlickyDock': {'description': 'Retracts Klicky servo-controlled dock', 'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_retract = printer["gcode_macro _User_Variables"].servo_retract|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_RetractKlickyDock Klicky servo configuration enabled"\n{% if servo_retract == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo retract angle specified") }\n{% endif %}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _RetractDock"] is defined %}\n_KlickyDebug msg="_RetractKlickyDock calling _RetractDock"\n_RetractDock\n{% endif %}'}, 'gcode_macro Attach_Probe': {'description': 'Attaches Klicky Probe', 'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set attachmove2_x = printer["gcode_macro _User_Variables"].attachmove2_x|default(0) %}\n{% set attachmove2_y = printer["gcode_macro _User_Variables"].attachmove2_y|default(0) %}\n{% set attachmove2_z = printer["gcode_macro _User_Variables"].attachmove2_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n_entry_point function=Attach_Probe\n\n{% if bypass_probe_docking == False %}\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n_KlickyDebug msg="Attach_Probe Axis homed"\n\n\n{% elif not probe_attached and not probe_lock %}\n_KlickyDebug msg="Attach_Probe going to attach probe"\n{% if verbose %}\n{ action_respond_info("Attaching Probe") }\n{% endif %}\n_KLICKY_STATUS_BUSY\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% if not enable_z_hop %}\n_KlickyDebug msg="Attach_Probe z_hop disabled"\n{% set safe_z = 0 %}\n{% endif %}\n{% endif %}\n\n\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero, duplicate?") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Umbilical_Path\n\n_entry_point function=Attach_Probe_intern\n\n\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n_DeployKlickyDock\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}"\nG0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}\n\n_RetractKlickyDock\n\n{% if ((printer.gcode_move.gcode_position.z < safe_z) or (docklocation_z != -128 and docklocation_z < safe_z ))%}\n_KlickyDebug msg="Attach_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\n_CheckProbe action=attach\n\n_exit_point function=Attach_Probe_intern move={goback}\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe locked not attaching probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already attached!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe already attached, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Attach_Probe\n{% else %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}'}, 'gcode_macro Dock_Probe': {'description': 'Docks Klicky Probe', 'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n{% if bypass_probe_docking == True %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}\n\n{% if bypass_probe_docking != True %}\n_entry_point function=Dock_Probe\n\n\n{% if probe_attached and not probe_lock %}\n_KLICKY_STATUS_BUSY\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Dock_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n_Umbilical_Path\n\n\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n\n_DeployKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\n\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}"\nG0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}\n{% endif %}\n\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}\n\n\n_RetractKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving away from the dock to G0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}\n\n\n{% if (printer.gcode_move.gcode_position.z < safe_z) %}\n_KlickyDebug msg="Dock_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\nG4 P1000\n_CheckProbe action=dock\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe locked not docking probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already docked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe already docked, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Dock_Probe move={goback}\n{% else %}\n_KlickyDebug msg="Dock_Probe probe docking bypassed, doing nothing"\n{% endif %}'}, 'gcode_macro PROBE_CALIBRATE': {'rename_existing': '_PROBE_CALIBRATE', 'description': 'Calibrate the probes z_offset with klicky automount', 'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_calibrate Axis homed"\n_KlickyDebug msg="probe_calibrate Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_CALIBRATE with the probe above the BED, check klicky_variables bed size!") }\n{% endif %}\n\n{% if bypass_probe_docking == False %}\n_CheckProbe action=query\nG90\nAttach_Probe back=1\n_KLICKY_STATUS_CALIBRATING_Z\n\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nM118 moving the toolhead 20 mm from the bed\n_KlickyDebug msg="probe_calibrate Moving Z up by 20mm"\nTESTZ Z=20\nM118 remove manually the probe and continue calibration\n_KLICKY_STATUS_READY\n{% else %}\n_KLICKY_STATUS_CALIBRATING_Z\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n_KLICKY_STATUS_READY\n{% endif %}'}, 'gcode_macro PROBE_ACCURACY': {'rename_existing': '_PROBE_ACCURACY', 'description': 'Probe Z-height accuracy at current XY position with klicky automount', 'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_accuracy Axis homed"\n_KlickyDebug msg="probe_accuracy Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n_entry_point function=PROBE_ACCURACY\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_ACCURACY with the probe above the BED, check klicky_variables bed size!") }\n{% endif%}\n\n_CheckProbe action=query\nAttach_Probe back=1\n\n_KlickyDebug msg="probe_accuracy calling klipper probe accuracy"\n_PROBE_ACCURACY {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nDock_Probe back=1\n\n_exit_point function=PROBE_ACCURACY move=1'}, 'force_move': {'enable_force_move': 'True'}, 'homing_override': {'axes': 'xyz', 'gcode': '\n\n_User_Variables\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n{% set kinematic_z = 0 %}\n{% set dock_on_zhome = printer["gcode_macro _User_Variables"].dock_on_zhome|default(True) %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set home_backoff_x = printer["gcode_macro _User_Variables"].home_backoff_x|default(0) %}\n{% set home_backoff_y = printer["gcode_macro _User_Variables"].home_backoff_y|default(0) %}\n{% set override_homing = printer["gcode_macro _User_Variables"].override_homing|default(\'\') %}\n\n\n_klicky_check_variables_version\n\n_CheckProbe action=query\n\n\n{% set home_x, home_y, home_z, leave_probe_attached = False, False, False, False %}\n\n{% if \'PROBE_LOCK\' in params%}\n{% if verbose %}\n{ action_respond_info("PROBE_LOCK = True") }\n{% endif %}\n{% set leave_probe_attached = True %}\n{% endif %}\n\n\n{% if not \'X\' in params\nand not \'Y\' in params\nand not \'Z\' in params %}\n\n{% set home_x, home_y, home_z = True, True, True %}\n_KlickyDebug msg="homing_override goint to home all axes"\n\n{% else %}\n{% if \'X\' in params %}\n{% set home_x = True %}\n_KlickyDebug msg="homing_override goint to home X"\n\n{% endif %}\n\n{% if \'Y\' in params %}\n{% set home_y = True %}\n_KlickyDebug msg="homing_override goint to home Y"\n{% endif %}\n\n{% if \'Z\' in params %}\n{% set home_z = True %}\n_KlickyDebug msg="homing_override goint to home Z"\n{% endif %}\n\n{% if \'X\' in params\nand \'Y\' in params\nand \'Z\' in params %}\n\n\n_Homing_Variables reset=1\n_KlickyDebug msg="homing_override goint to home all axes"\n{% endif %}\n\n{% endif %}\n\n_entry_point function=homing_override\n_KLICKY_STATUS_HOMING\n\n\n{% if \'z\' not in printer.toolhead.homed_axes %}\n{% if enable_z_hop == False %}\n_KlickyDebug msg="homing_override z_hop disabled"\n\n{% set kinematic_z = safe_z %}\n{% set safe_z = safe_z %}\n{% endif %}\n{% endif %}\n\n\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes and \'z\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("No axis homed") }\n{% endif %}\n_KlickyDebug msg="homing_override no axis homed, setting position as X=Y=0 Z={kinematic_z}"\nSET_KINEMATIC_POSITION X=0 Y=0 Z={kinematic_z}\nM400\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% if home_z != True %}\n_KlickyDebug msg="homing_override clearing axis homed state if not already homing Z"\nM84\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("X or Y not homed, forcing full G28") }\n{% endif %}\n{% set home_x, home_y, home_z = True, True, True %}\n{% endif %}\n{% endif %}\n\n\n{% if ((attachmove_y == 0 and override_homing == \'\' ) or (override_homing == \'Y\'))%}\n\n{% if home_y %}\n{% if override_homing == \'Y\' %}\n_KlickyDebug msg="homing_override Y homing first override, due to override_homing = Y"\n{% else %}\n_KlickyDebug msg="homing_override Y homing first override, due to attachmove_y = 0"\n{% endif %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y G28 Y0"\nG28 Y0\n\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop-home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n{% set home_y = False %}\n{% endif %}\n\n\n\n{% if home_x %}\n{% if verbose %}\n{ action_respond_info("Homing X") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in X homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_X"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_X external script to handle the X homing"\n_HOME_X\n{% else %}\n_KlickyDebug msg="homing_override Homing X, G28 X0"\nG28 X0\n\n{% if home_backoff_x != 0 %}\n{% if (printer.configfile.settings.stepper_x.position_endstop > (printer.configfile.settings.stepper_x.position_min|default(0) + printer.configfile.settings.stepper_x.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n\n{% if home_y %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y, G28 Y0"\nG28 Y0\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if verbose %}\n{ action_respond_info("Homing Z") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe configured as a virtual Z endstop attaching probe"\nAttach_Probe\n\n{% if leave_probe_attached %}\n_Probe_Lock\n{% endif %}\n{% elif dock_on_zhome == True %}\nDock_Probe\n{% endif %}\n\n_Home_Z_\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe no longer required, docking probe"\nDock_Probe\n{% elif dock_on_zhome == False %}\nDock_Probe\n{% endif %}\n{% endif %}\n_CheckProbe action=query\n\n\n_Park_Toolhead\n\n_exit_point function=homing_override\n_KLICKY_STATUS_READY'}, 'gcode_macro _Umbilical_Path': {'gcode': '\n{% set umbilical = printer["gcode_macro _User_Variables"].umbilical %}\n{% set umbilical_x = printer["gcode_macro _User_Variables"].umbilical_x %}\n{% set umbilical_y = printer["gcode_macro _User_Variables"].umbilical_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n\n{% if umbilical %}\n\n_entry_point function=Umbilical_Path\n\n_KlickyDebug msg="_Umbilical_Path moving to G0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}"\nG0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}\n\n_exit_point function=Umbilical_Path\n{% endif %}'}, 'gcode_macro _Home_Z_': {'gcode': '\n{% set z_endstop_x = printer["gcode_macro _Probe_Variables"].z_endstop_x %}\n{% set z_endstop_y = printer["gcode_macro _Probe_Variables"].z_endstop_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}    {% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Home_Z\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n{% else %}\n_KlickyDebug msg="_Home_Z_ XY Axis homed"\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="_Home_Z_ Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n\n\n_KlickyDebug msg="_Home_Z_ moving to Z endstop position G0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}"\nG0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}\n_KlickyDebug msg="_Home_Z_ Homing Z G28 Z"\nG28 Z0\n_KlickyDebug msg="_Home_Z_ toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_exit_point function=Home_Z'}, 'gcode_macro _CheckProbe': {'variable_probe_state': '0', 'gcode': '\nQuery_Probe\n_SetProbeState action={ params.ACTION }'}, 'gcode_macro _SetProbeState': {'gcode': '\n{% set query_probe_triggered = printer.probe.last_query %}\n{% set action  = params.ACTION|default(\'\') %}\n\n\n{% if query_probe_triggered %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ False }\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ True }\n{% endif %}\n\n{% if action == \'query\' %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_state VALUE={ query_probe_triggered }\n{% endif %}\n\n\n\n\n{% if not query_probe_triggered and action == \'dock\' %}\n{ action_raise_error("Probe dock failed!") }\n{% endif %}\n\n\n{% if query_probe_triggered and action == \'attach\' %}\n{ action_raise_error("Probe attach failed!") }\n{% endif %}'}, 'gcode_macro _Park_Toolhead': {'gcode': '\n{% set park_toolhead = printer["gcode_macro _User_Variables"].park_toolhead %}\n{% set parkposition_x = printer["gcode_macro _User_Variables"].parkposition_x %}\n{% set parkposition_y = printer["gcode_macro _User_Variables"].parkposition_y %}\n{% set parkposition_z = printer["gcode_macro _User_Variables"].parkposition_z %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Park_Toolhead\n\n{% if park_toolhead and \'xyz\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Parking Toolhead") }\n{% endif %}\n{% if parkposition_z == -128 %}\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}\n\n{% else %}\n\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}\n\n{% endif %}\n\n{% endif %}\n_exit_point function=Park_Toolhead'}, 'gcode_macro _klicky_status_ready': {'gcode': '\n{% if printer[\'gcode_macro status_ready\'] is defined %}\n_KlickyDebug msg="_klicky_status_ready activating the LED STATUS_READY"\nSTATUS_READY\n{% endif %}'}, 'gcode_macro _klicky_status_busy': {'gcode': '\n{% if printer[\'gcode_macro status_busy\'] is defined %}\n_KlickyDebug msg="_klicky_status_busy activating the LED STATUS_BUSY"\nSTATUS_BUSY\n{% endif %}'}, 'gcode_macro _klicky_status_leveling': {'gcode': '\n{% if printer[\'gcode_macro status_leveling\'] is defined %}\n_KlickyDebug msg="_klicky_status_leveling activating the LED STATUS_LEVELING"\nSTATUS_LEVELING\n{% endif %}'}, 'gcode_macro _klicky_status_homing': {'gcode': '\n{% if printer[\'gcode_macro status_homing\'] is defined %}\n_KlickyDebug msg="_klicky_status_homing activating the LED STATUS_HOMING"\nSTATUS_HOMING\n{% endif %}'}, 'gcode_macro _klicky_status_cleaning': {'gcode': '\n{% if printer[\'gcode_macro status_cleaning\'] is defined %}\n_KlickyDebug msg="_klicky_status_cleaning activating the LED STATUS_CLEANING"\nSTATUS_CLEANING\n{% endif %}'}, 'gcode_macro _klicky_status_meshing': {'gcode': '\n{% if printer[\'gcode_macro status_meshing\'] is defined %}\n_KlickyDebug msg="_klicky_status_meshing activating the LED STATUS_MESHING"\nSTATUS_MESHING\n{% endif %}'}, 'gcode_macro _klicky_status_calibrating_z': {'gcode': '\n{% if printer[\'gcode_macro status_calibrating_z\'] is defined %}\n_KlickyDebug msg="_klicky_status_calibrating_z activating the LED STATUS_CALIBRATING_Z"\nSTATUS_CALIBRATING_Z\n{% endif %}'}, 'z_calibration': {'nozzle_xy_position': '172, 301', 'switch_xy_position': '171.5, 282', 'bed_xy_position': '150, 150', 'switch_offset': '0.09', 'offset_margins': '-1.0,1.0', 'speed': '50', 'probing_first_fast': 'false', 'start_gcode': 'Attach_Probe', 'end_gcode': 'Dock_Probe'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_28003C001150535556323420-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '^PG6', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '25', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'PG9', 'position_min': '0', 'position_endstop': '300', 'position_max': '303.5', 'homing_speed': '25', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': '!PG3', 'enable_pin': '!PG5', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'PG10', 'position_max': '290', 'position_min': '-4.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3', 'position_endstop': '-0.711'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA0', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': '!PF10', 'enable_pin': '!PG2', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PC13', 'dir_pin': 'PF0', 'enable_pin': '!PF1', 'rotation_distance': '21.9459674016', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.75', 'heater_pin': 'PA1', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF4', 'min_temp': '10', 'max_temp': '270', 'max_power': '1.0', 'min_extrude_temp': '170', 'pressure_advance': '0.05', 'pressure_advance_smooth_time': '0.040', 'control': 'pid', 'pid_kp': '26.572', 'pid_ki': '2.036', 'pid_kd': '86.691'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.5', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PA2', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF3', 'max_power': '1', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '55.196', 'pid_ki': '2.091', 'pid_kd': '364.295'}, 'probe': {'pin': 'PG15', 'x_offset': '0', 'y_offset': '25.0', 'z_offset': '0', 'speed': '10.0', 'samples': '5', 'samples_result': 'median', 'sample_retract_dist': '3.0', 'samples_tolerance': '0.006', 'samples_tolerance_retries': '6'}, 'fan': {'pin': 'PA8', 'kick_start_time': '0.5', 'off_below': '0.10'}, 'heater_fan hotend_fan': {'pin': 'PE5', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'controller_fan controller_fan': {'pin': 'PD12', 'kick_start_time': '0.5', 'heater': 'heater_bed'}, 'heater_fan exhaust_fan': {'pin': 'PD13', 'max_power': '1.0', 'shutdown_speed': '0.0', 'kick_start_time': '5.0', 'heater': 'heater_bed', 'heater_temp': '60', 'fan_speed': '1.0'}, 'output_pin caselight': {'pin': 'PD15', 'pwm': 'true', 'shutdown_value': '0', 'value': '1', 'cycle_time': '0.01'}, 'neopixel headlight': {'pin': 'PB0', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '0.0', 'initial_green': '0.2157', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'temperature_sensor chamber_temp': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF5', 'min_temp': '0', 'max_temp': '100', 'gcode_id': 'chamber_th'}, 'idle_timeout': {'timeout': '1800'}, 'z_tilt': {'z_positions': '\n-50, 18\n150, 348\n350, 18', 'points': '\n30, 5\n150, 245\n270, 5', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'gcode_macro _User_Variables': {'variable_verbose': 'True', 'variable_debug': 'False', 'variable_travel_speed': '200', 'variable_move_accel': '1000', 'variable_dock_speed': '50', 'variable_release_speed': '75', 'variable_z_drop_speed': '20', 'variable_safe_z': '25', 'variable_enable_z_hop': 'True', 'variable_max_bed_y': '300', 'variable_max_bed_x': '300', 'variable_z_endstop_x': '172', 'variable_z_endstop_y': '301', 'variable_docklocation_x': '40.5', 'variable_docklocation_y': '301', 'variable_docklocation_z': '-128', 'variable_enable_dock_servo': 'False', 'variable_servo_name': "'NAME'", 'variable_servo_deploy': '10', 'variable_servo_retract': '11', 'variable_servo_delay': '250', 'variable_dockmove_x': '40', 'variable_dockmove_y': '0', 'variable_dockmove_z': '0', 'variable_attachmove_x': '0', 'variable_attachmove_y': '30', 'variable_attachmove_z': '0', 'variable_umbilical': 'False', 'variable_umbilical_x': '15', 'variable_umbilical_y': '15', 'variable_park_toolhead': 'False', 'variable_parkposition_x': '125', 'variable_parkposition_y': '125', 'variable_parkposition_z': '30', 'variable_version': '1', 'variable_attachmove2_x': '0', 'variable_attachmove2_y': '0', 'variable_attachmove2_z': '0', 'variable_home_backoff_x': '10', 'variable_home_backoff_y': '10', 'variable_override_homing': "''", 'variable_dock_on_zhome': 'True', 'gcode': '\n{% set Mx = printer[\'configfile\'].config["stepper_x"]["position_max"]|float %}\n{% set My = printer[\'configfile\'].config["stepper_y"]["position_max"]|float %}\n{% set Ox = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set Oy = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set Oz = printer[\'configfile\'].config["probe"]["z_offset"]|float %}\n\n\n{% if z_endstop_x != 0 or z_endstop_y != 0 %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ z_endstop_x }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ z_endstop_y }\n\n\n{% else %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ (Mx * 0.5) - Ox }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ (My * 0.5) - Oy }\n{% endif %}'}, 'gcode_macro PRINT_START': {'gcode': '\nM117 Homing...\nG28\nATTACH_PROBE\nZ_TILT_ADJUST\nDOCK_PROBE\nG28\n\n\n\n\n\n\n\nG0 X150 Y150 Z30 F3600'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_28003C001150535556323420-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro _probe_variables': {'gcode': '', 'description': 'G-Code macro', 'variable_probe_attached': 'False', 'variable_probe_state': 'False', 'variable_probe_lock': 'False', 'variable_probe_z_homed': 'False', 'variable_z_endstop_x': '0', 'variable_z_endstop_y': '0'}, 'gcode_macro _klicky_check_variables_version': {'gcode': '\n{% set version = printer["gcode_macro _User_Variables"].version|default(0) %}\n\n{% if version != 1 %}\n{ action_raise_error("Please update your klicky variables, there are some functionality changes") }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klickydebug': {'gcode': '\n{% set message  = params.MSG %}\n{% set debug = printer["gcode_macro _User_Variables"].debug|default(False) %}\n\n{% if debug %}\n{ action_respond_info(message) }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _exit_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move  = params.MOVE|default(0) %}\n{% set speed = printer["gcode_macro _User_Variables"].travel_speed %}\n\n\nM400\nSET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\nRESTORE_GCODE_STATE NAME={function} MOVE={move} MOVE_SPEED={speed}', 'description': 'G-Code macro'}, 'gcode_macro _entry_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move_accel = printer["gcode_macro _User_Variables"].move_accel|default(1000) %}\n\nM400\nSAVE_GCODE_STATE NAME={function}\n\nSET_GCODE_OFFSET Z=0\n\nG90\n\nSET_VELOCITY_LIMIT ACCEL={move_accel}', 'description': 'G-Code macro'}, 'gcode_macro _homing_variables': {'gcode': '\n{% set reset  = params.RESET|default(0) %}\n{% if reset %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro attach_probe_lock': {'gcode': '\nAttach_Probe\n_Probe_Lock', 'description': 'Attaches Klicky Probe, can only be docked after unlocking'}, 'gcode_macro dock_probe_unlock': {'gcode': '\n_Probe_Unlock\nDock_Probe', 'description': 'Docks Klicky Probe even if it was locked'}, 'gcode_macro _probe_unlock': {'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to False"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }', 'description': 'Unlocks Klicky Probe state'}, 'gcode_macro _probe_lock': {'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to True"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ True }', 'description': 'Locks Klicky Probe state'}, 'gcode_macro _deployklickydock': {'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_deploy = printer["gcode_macro _User_Variables"].servo_deploy|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_DeployKlickyDock Klicky servo configuration enabled"\n{% if servo_deploy == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo deploy angle specified") }\n{% endif %}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _DeployDock"] is defined %}\n_KlickyDebug msg="_DeployKlickyDock calling _DeployDock"\n_DeployDock\n{% endif %}', 'description': 'Deploys Klicky servo-controlled dock'}, 'gcode_macro _retractklickydock': {'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_retract = printer["gcode_macro _User_Variables"].servo_retract|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_RetractKlickyDock Klicky servo configuration enabled"\n{% if servo_retract == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo retract angle specified") }\n{% endif %}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _RetractDock"] is defined %}\n_KlickyDebug msg="_RetractKlickyDock calling _RetractDock"\n_RetractDock\n{% endif %}', 'description': 'Retracts Klicky servo-controlled dock'}, 'gcode_macro attach_probe': {'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set attachmove2_x = printer["gcode_macro _User_Variables"].attachmove2_x|default(0) %}\n{% set attachmove2_y = printer["gcode_macro _User_Variables"].attachmove2_y|default(0) %}\n{% set attachmove2_z = printer["gcode_macro _User_Variables"].attachmove2_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n_entry_point function=Attach_Probe\n\n{% if bypass_probe_docking == False %}\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n_KlickyDebug msg="Attach_Probe Axis homed"\n\n\n{% elif not probe_attached and not probe_lock %}\n_KlickyDebug msg="Attach_Probe going to attach probe"\n{% if verbose %}\n{ action_respond_info("Attaching Probe") }\n{% endif %}\n_KLICKY_STATUS_BUSY\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% if not enable_z_hop %}\n_KlickyDebug msg="Attach_Probe z_hop disabled"\n{% set safe_z = 0 %}\n{% endif %}\n{% endif %}\n\n\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero, duplicate?") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Umbilical_Path\n\n_entry_point function=Attach_Probe_intern\n\n\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n_DeployKlickyDock\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}"\nG0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}\n\n_RetractKlickyDock\n\n{% if ((printer.gcode_move.gcode_position.z < safe_z) or (docklocation_z != -128 and docklocation_z < safe_z ))%}\n_KlickyDebug msg="Attach_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\n_CheckProbe action=attach\n\n_exit_point function=Attach_Probe_intern move={goback}\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe locked not attaching probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already attached!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe already attached, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Attach_Probe\n{% else %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}', 'description': 'Attaches Klicky Probe'}, 'gcode_macro dock_probe': {'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n{% if bypass_probe_docking == True %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}\n\n{% if bypass_probe_docking != True %}\n_entry_point function=Dock_Probe\n\n\n{% if probe_attached and not probe_lock %}\n_KLICKY_STATUS_BUSY\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Dock_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n_Umbilical_Path\n\n\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n\n_DeployKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\n\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}"\nG0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}\n{% endif %}\n\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}\n\n\n_RetractKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving away from the dock to G0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}\n\n\n{% if (printer.gcode_move.gcode_position.z < safe_z) %}\n_KlickyDebug msg="Dock_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\nG4 P1000\n_CheckProbe action=dock\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe locked not docking probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already docked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe already docked, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Dock_Probe move={goback}\n{% else %}\n_KlickyDebug msg="Dock_Probe probe docking bypassed, doing nothing"\n{% endif %}', 'description': 'Docks Klicky Probe'}, 'gcode_macro probe_calibrate': {'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_calibrate Axis homed"\n_KlickyDebug msg="probe_calibrate Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_CALIBRATE with the probe above the BED, check klicky_variables bed size!") }\n{% endif %}\n\n{% if bypass_probe_docking == False %}\n_CheckProbe action=query\nG90\nAttach_Probe back=1\n_KLICKY_STATUS_CALIBRATING_Z\n\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nM118 moving the toolhead 20 mm from the bed\n_KlickyDebug msg="probe_calibrate Moving Z up by 20mm"\nTESTZ Z=20\nM118 remove manually the probe and continue calibration\n_KLICKY_STATUS_READY\n{% else %}\n_KLICKY_STATUS_CALIBRATING_Z\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n_KLICKY_STATUS_READY\n{% endif %}', 'rename_existing': '_PROBE_CALIBRATE', 'description': 'Calibrate the probes z_offset with klicky automount'}, 'gcode_macro probe_accuracy': {'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_accuracy Axis homed"\n_KlickyDebug msg="probe_accuracy Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n_entry_point function=PROBE_ACCURACY\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_ACCURACY with the probe above the BED, check klicky_variables bed size!") }\n{% endif%}\n\n_CheckProbe action=query\nAttach_Probe back=1\n\n_KlickyDebug msg="probe_accuracy calling klipper probe accuracy"\n_PROBE_ACCURACY {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nDock_Probe back=1\n\n_exit_point function=PROBE_ACCURACY move=1', 'rename_existing': '_PROBE_ACCURACY', 'description': 'Probe Z-height accuracy at current XY position with klicky automount'}, 'force_move': {'enable_force_move': True}, 'homing_override': {'axes': 'xyz', 'gcode': '\n\n_User_Variables\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n{% set kinematic_z = 0 %}\n{% set dock_on_zhome = printer["gcode_macro _User_Variables"].dock_on_zhome|default(True) %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set home_backoff_x = printer["gcode_macro _User_Variables"].home_backoff_x|default(0) %}\n{% set home_backoff_y = printer["gcode_macro _User_Variables"].home_backoff_y|default(0) %}\n{% set override_homing = printer["gcode_macro _User_Variables"].override_homing|default(\'\') %}\n\n\n_klicky_check_variables_version\n\n_CheckProbe action=query\n\n\n{% set home_x, home_y, home_z, leave_probe_attached = False, False, False, False %}\n\n{% if \'PROBE_LOCK\' in params%}\n{% if verbose %}\n{ action_respond_info("PROBE_LOCK = True") }\n{% endif %}\n{% set leave_probe_attached = True %}\n{% endif %}\n\n\n{% if not \'X\' in params\nand not \'Y\' in params\nand not \'Z\' in params %}\n\n{% set home_x, home_y, home_z = True, True, True %}\n_KlickyDebug msg="homing_override goint to home all axes"\n\n{% else %}\n{% if \'X\' in params %}\n{% set home_x = True %}\n_KlickyDebug msg="homing_override goint to home X"\n\n{% endif %}\n\n{% if \'Y\' in params %}\n{% set home_y = True %}\n_KlickyDebug msg="homing_override goint to home Y"\n{% endif %}\n\n{% if \'Z\' in params %}\n{% set home_z = True %}\n_KlickyDebug msg="homing_override goint to home Z"\n{% endif %}\n\n{% if \'X\' in params\nand \'Y\' in params\nand \'Z\' in params %}\n\n\n_Homing_Variables reset=1\n_KlickyDebug msg="homing_override goint to home all axes"\n{% endif %}\n\n{% endif %}\n\n_entry_point function=homing_override\n_KLICKY_STATUS_HOMING\n\n\n{% if \'z\' not in printer.toolhead.homed_axes %}\n{% if enable_z_hop == False %}\n_KlickyDebug msg="homing_override z_hop disabled"\n\n{% set kinematic_z = safe_z %}\n{% set safe_z = safe_z %}\n{% endif %}\n{% endif %}\n\n\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes and \'z\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("No axis homed") }\n{% endif %}\n_KlickyDebug msg="homing_override no axis homed, setting position as X=Y=0 Z={kinematic_z}"\nSET_KINEMATIC_POSITION X=0 Y=0 Z={kinematic_z}\nM400\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% if home_z != True %}\n_KlickyDebug msg="homing_override clearing axis homed state if not already homing Z"\nM84\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("X or Y not homed, forcing full G28") }\n{% endif %}\n{% set home_x, home_y, home_z = True, True, True %}\n{% endif %}\n{% endif %}\n\n\n{% if ((attachmove_y == 0 and override_homing == \'\' ) or (override_homing == \'Y\'))%}\n\n{% if home_y %}\n{% if override_homing == \'Y\' %}\n_KlickyDebug msg="homing_override Y homing first override, due to override_homing = Y"\n{% else %}\n_KlickyDebug msg="homing_override Y homing first override, due to attachmove_y = 0"\n{% endif %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y G28 Y0"\nG28 Y0\n\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop-home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n{% set home_y = False %}\n{% endif %}\n\n\n\n{% if home_x %}\n{% if verbose %}\n{ action_respond_info("Homing X") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in X homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_X"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_X external script to handle the X homing"\n_HOME_X\n{% else %}\n_KlickyDebug msg="homing_override Homing X, G28 X0"\nG28 X0\n\n{% if home_backoff_x != 0 %}\n{% if (printer.configfile.settings.stepper_x.position_endstop > (printer.configfile.settings.stepper_x.position_min|default(0) + printer.configfile.settings.stepper_x.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n\n{% if home_y %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y, G28 Y0"\nG28 Y0\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if verbose %}\n{ action_respond_info("Homing Z") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe configured as a virtual Z endstop attaching probe"\nAttach_Probe\n\n{% if leave_probe_attached %}\n_Probe_Lock\n{% endif %}\n{% elif dock_on_zhome == True %}\nDock_Probe\n{% endif %}\n\n_Home_Z_\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe no longer required, docking probe"\nDock_Probe\n{% elif dock_on_zhome == False %}\nDock_Probe\n{% endif %}\n{% endif %}\n_CheckProbe action=query\n\n\n_Park_Toolhead\n\n_exit_point function=homing_override\n_KLICKY_STATUS_READY'}, 'gcode_macro _umbilical_path': {'gcode': '\n{% set umbilical = printer["gcode_macro _User_Variables"].umbilical %}\n{% set umbilical_x = printer["gcode_macro _User_Variables"].umbilical_x %}\n{% set umbilical_y = printer["gcode_macro _User_Variables"].umbilical_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n\n{% if umbilical %}\n\n_entry_point function=Umbilical_Path\n\n_KlickyDebug msg="_Umbilical_Path moving to G0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}"\nG0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}\n\n_exit_point function=Umbilical_Path\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _home_z_': {'gcode': '\n{% set z_endstop_x = printer["gcode_macro _Probe_Variables"].z_endstop_x %}\n{% set z_endstop_y = printer["gcode_macro _Probe_Variables"].z_endstop_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}    {% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Home_Z\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n{% else %}\n_KlickyDebug msg="_Home_Z_ XY Axis homed"\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="_Home_Z_ Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n\n\n_KlickyDebug msg="_Home_Z_ moving to Z endstop position G0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}"\nG0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}\n_KlickyDebug msg="_Home_Z_ Homing Z G28 Z"\nG28 Z0\n_KlickyDebug msg="_Home_Z_ toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_exit_point function=Home_Z', 'description': 'G-Code macro'}, 'gcode_macro _checkprobe': {'gcode': '\nQuery_Probe\n_SetProbeState action={ params.ACTION }', 'description': 'G-Code macro', 'variable_probe_state': '0'}, 'gcode_macro _setprobestate': {'gcode': '\n{% set query_probe_triggered = printer.probe.last_query %}\n{% set action  = params.ACTION|default(\'\') %}\n\n\n{% if query_probe_triggered %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ False }\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ True }\n{% endif %}\n\n{% if action == \'query\' %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_state VALUE={ query_probe_triggered }\n{% endif %}\n\n\n\n\n{% if not query_probe_triggered and action == \'dock\' %}\n{ action_raise_error("Probe dock failed!") }\n{% endif %}\n\n\n{% if query_probe_triggered and action == \'attach\' %}\n{ action_raise_error("Probe attach failed!") }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _park_toolhead': {'gcode': '\n{% set park_toolhead = printer["gcode_macro _User_Variables"].park_toolhead %}\n{% set parkposition_x = printer["gcode_macro _User_Variables"].parkposition_x %}\n{% set parkposition_y = printer["gcode_macro _User_Variables"].parkposition_y %}\n{% set parkposition_z = printer["gcode_macro _User_Variables"].parkposition_z %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Park_Toolhead\n\n{% if park_toolhead and \'xyz\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Parking Toolhead") }\n{% endif %}\n{% if parkposition_z == -128 %}\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}\n\n{% else %}\n\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}\n\n{% endif %}\n\n{% endif %}\n_exit_point function=Park_Toolhead', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_ready': {'gcode': '\n{% if printer[\'gcode_macro status_ready\'] is defined %}\n_KlickyDebug msg="_klicky_status_ready activating the LED STATUS_READY"\nSTATUS_READY\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_busy': {'gcode': '\n{% if printer[\'gcode_macro status_busy\'] is defined %}\n_KlickyDebug msg="_klicky_status_busy activating the LED STATUS_BUSY"\nSTATUS_BUSY\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_leveling': {'gcode': '\n{% if printer[\'gcode_macro status_leveling\'] is defined %}\n_KlickyDebug msg="_klicky_status_leveling activating the LED STATUS_LEVELING"\nSTATUS_LEVELING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_homing': {'gcode': '\n{% if printer[\'gcode_macro status_homing\'] is defined %}\n_KlickyDebug msg="_klicky_status_homing activating the LED STATUS_HOMING"\nSTATUS_HOMING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_cleaning': {'gcode': '\n{% if printer[\'gcode_macro status_cleaning\'] is defined %}\n_KlickyDebug msg="_klicky_status_cleaning activating the LED STATUS_CLEANING"\nSTATUS_CLEANING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_meshing': {'gcode': '\n{% if printer[\'gcode_macro status_meshing\'] is defined %}\n_KlickyDebug msg="_klicky_status_meshing activating the LED STATUS_MESHING"\nSTATUS_MESHING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_calibrating_z': {'gcode': '\n{% if printer[\'gcode_macro status_calibrating_z\'] is defined %}\n_KlickyDebug msg="_klicky_status_calibrating_z activating the LED STATUS_CALIBRATING_Z"\nSTATUS_CALIBRATING_Z\n{% endif %}', 'description': 'G-Code macro'}, 'z_calibration': {'switch_offset': 0.09, 'offset_margins': '-1.0,1.0', 'speed': 50.0, 'samples_result': 'none', 'probing_first_fast': False, 'nozzle_xy_position': '172, 301', 'switch_xy_position': '171.5, 282', 'bed_xy_position': '150, 150', 'start_gcode': 'Attach_Probe', 'before_switch_gcode': '', 'end_gcode': 'Dock_Probe'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': '^PG6', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'PG9', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 303.5, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PF11', 'dir_pin': '!PG3', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG5', 'endstop_pin': 'PG10', 'position_endstop': -0.711, 'position_min': -4.5, 'position_max': 290.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA0'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PF9', 'dir_pin': '!PF10', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG2'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF4', 'min_temp': 10.0, 'max_temp': 270.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 26.572, 'pid_ki': 2.036, 'pid_kd': 86.691, 'heater_pin': 'PA1', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PC13', 'pressure_advance': 0.05, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'PF0', 'rotation_distance': 21.9459674016, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 55.196, 'pid_ki': 2.091, 'pid_kd': 364.295, 'heater_pin': 'PA2', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'probe': {'z_offset': 0.0, 'deactivate_on_each_sample': True, 'activate_gcode': '', 'deactivate_gcode': '', 'pin': 'PG15', 'speed': 10.0, 'lift_speed': 10.0, 'x_offset': 0.0, 'y_offset': 25.0, 'samples': 5, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.006, 'samples_tolerance_retries': 6}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE5', 'fan_speed': 1.0}, 'controller_fan controller_fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD12', 'fan_speed': 1.0, 'idle_speed': 1.0, 'idle_timeout': 30, 'heater': ['heater_bed']}, 'heater_fan exhaust_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 5.0, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13', 'fan_speed': 1.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PD15', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 1.0, 'maximum_mcu_duration': 0.0, 'value': 1.0, 'shutdown_value': 0.0}, 'neopixel headlight': {'pin': 'PB0', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 0.0, 'initial_green': 0.2157, 'initial_blue': 1.0, 'initial_white': 0.0}, 'temperature_sensor chamber_temp': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF5', 'min_temp': 0.0, 'max_temp': 100.0, 'gcode_id': 'chamber_th'}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [150.0, 348.0], [350.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 5.0], [150.0, 245.0], [270.0, 5.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'gcode_macro _user_variables': {'gcode': '\n{% set Mx = printer[\'configfile\'].config["stepper_x"]["position_max"]|float %}\n{% set My = printer[\'configfile\'].config["stepper_y"]["position_max"]|float %}\n{% set Ox = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set Oy = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set Oz = printer[\'configfile\'].config["probe"]["z_offset"]|float %}\n\n\n{% if z_endstop_x != 0 or z_endstop_y != 0 %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ z_endstop_x }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ z_endstop_y }\n\n\n{% else %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ (Mx * 0.5) - Ox }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ (My * 0.5) - Oy }\n{% endif %}', 'description': 'G-Code macro', 'variable_verbose': 'True', 'variable_debug': 'False', 'variable_travel_speed': '200', 'variable_move_accel': '1000', 'variable_dock_speed': '50', 'variable_release_speed': '75', 'variable_z_drop_speed': '20', 'variable_safe_z': '25', 'variable_enable_z_hop': 'True', 'variable_max_bed_y': '300', 'variable_max_bed_x': '300', 'variable_z_endstop_x': '172', 'variable_z_endstop_y': '301', 'variable_docklocation_x': '40.5', 'variable_docklocation_y': '301', 'variable_docklocation_z': '-128', 'variable_enable_dock_servo': 'False', 'variable_servo_name': "'NAME'", 'variable_servo_deploy': '10', 'variable_servo_retract': '11', 'variable_servo_delay': '250', 'variable_dockmove_x': '40', 'variable_dockmove_y': '0', 'variable_dockmove_z': '0', 'variable_attachmove_x': '0', 'variable_attachmove_y': '30', 'variable_attachmove_z': '0', 'variable_umbilical': 'False', 'variable_umbilical_x': '15', 'variable_umbilical_y': '15', 'variable_park_toolhead': 'False', 'variable_parkposition_x': '125', 'variable_parkposition_y': '125', 'variable_parkposition_z': '30', 'variable_version': '1', 'variable_attachmove2_x': '0', 'variable_attachmove2_y': '0', 'variable_attachmove2_z': '0', 'variable_home_backoff_x': '10', 'variable_home_backoff_y': '10', 'variable_override_homing': "''", 'variable_dock_on_zhome': 'True'}, 'gcode_macro print_start': {'gcode': '\nM117 Homing...\nG28\nATTACH_PROBE\nZ_TILT_ADJUST\nDOCK_PROBE\nG28\n\n\n\n\n\n\n\nG0 X150 Y150 Z30 F3600', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1500.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-02-19 19:46:19,523 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-19 19:46:19,523 [printer.py:reinit()] - Klipper version: v0.12.0-103-g6ce6fbbc-dirty
2024-02-19 19:46:19,523 [printer.py:reinit()] - # Extruders: 1
2024-02-19 19:46:19,523 [printer.py:reinit()] - # Temperature devices: 2
2024-02-19 19:46:19,524 [printer.py:reinit()] - # Fans: 4
2024-02-19 19:46:19,524 [printer.py:reinit()] - # Output pins: 1
2024-02-19 19:46:19,524 [printer.py:reinit()] - # Leds: 1
2024-02-19 19:46:19,534 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2024-02-19 19:46:19,536 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-02-19 19:46:19,764 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor chamber_temp&fan&controller_fan controller_fan&heater_fan hotend_fan&heater_fan exhaust_fan&output_pin caselight&neopixel headlight
2024-02-19 19:46:19,767 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-02-19 19:46:19,767 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-02-19 19:46:19,767 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-02-19 19:46:19,768 [screen.py:init_klipper()] - Printer initialized
2024-02-19 19:46:19,768 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2024-02-19 19:46:19,769 [printer.py:change_state()] - Adding callback for state: ready
2024-02-19 19:46:19,771 [screen.py:show_panel()] - Reinitializing panel
2024-02-19 19:46:19,824 [main_menu.py:__init__()] - ### Making MainMenu
2024-02-19 19:46:19,829 [main_menu.py:add_device()] - Adding device: extruder
2024-02-19 19:46:19,834 [main_menu.py:add_device()] - Adding device: heater_bed
2024-02-19 19:46:19,838 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber_temp
2024-02-19 19:46:19,862 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-02-19 19:46:19,871 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-02-19 19:46:19,880 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'temperature_sensor chamber_temp', 'extruder']
2024-02-19 19:46:19,889 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2024-02-19 19:46:19,890 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-02-19 19:46:22,295 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-19 19:46:22,297 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'update_manager', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-310-g67c98f6', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-02-19 19:46:22,311 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2024-02-19 19:46:22,532 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2024-02-19 19:46:22,537 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro _Probe_Variables': {'variable_probe_attached': 'False', 'variable_probe_state': 'False', 'variable_probe_lock': 'False', 'variable_probe_z_homed': 'False', 'variable_z_endstop_x': '0', 'variable_z_endstop_y': '0', 'gcode': ''}, 'gcode_macro _klicky_check_variables_version': {'gcode': '\n{% set version = printer["gcode_macro _User_Variables"].version|default(0) %}\n\n{% if version != 1 %}\n{ action_raise_error("Please update your klicky variables, there are some functionality changes") }\n{% endif %}'}, 'gcode_macro _KlickyDebug': {'gcode': '\n{% set message  = params.MSG %}\n{% set debug = printer["gcode_macro _User_Variables"].debug|default(False) %}\n\n{% if debug %}\n{ action_respond_info(message) }\n{% endif %}'}, 'gcode_macro _exit_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move  = params.MOVE|default(0) %}\n{% set speed = printer["gcode_macro _User_Variables"].travel_speed %}\n\n\nM400\nSET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\nRESTORE_GCODE_STATE NAME={function} MOVE={move} MOVE_SPEED={speed}'}, 'gcode_macro _entry_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move_accel = printer["gcode_macro _User_Variables"].move_accel|default(1000) %}\n\nM400\nSAVE_GCODE_STATE NAME={function}\n\nSET_GCODE_OFFSET Z=0\n\nG90\n\nSET_VELOCITY_LIMIT ACCEL={move_accel}'}, 'gcode_macro _Homing_Variables': {'gcode': '\n{% set reset  = params.RESET|default(0) %}\n{% if reset %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }\n{% endif %}'}, 'gcode_macro Attach_Probe_Lock': {'description': 'Attaches Klicky Probe, can only be docked after unlocking', 'gcode': '\nAttach_Probe\n_Probe_Lock'}, 'gcode_macro Dock_Probe_Unlock': {'description': 'Docks Klicky Probe even if it was locked', 'gcode': '\n_Probe_Unlock\nDock_Probe'}, 'gcode_macro _Probe_Unlock': {'description': 'Unlocks Klicky Probe state', 'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to False"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }'}, 'gcode_macro _Probe_Lock': {'description': 'Locks Klicky Probe state', 'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to True"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ True }'}, 'gcode_macro _DeployKlickyDock': {'description': 'Deploys Klicky servo-controlled dock', 'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_deploy = printer["gcode_macro _User_Variables"].servo_deploy|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_DeployKlickyDock Klicky servo configuration enabled"\n{% if servo_deploy == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo deploy angle specified") }\n{% endif %}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _DeployDock"] is defined %}\n_KlickyDebug msg="_DeployKlickyDock calling _DeployDock"\n_DeployDock\n{% endif %}'}, 'gcode_macro _RetractKlickyDock': {'description': 'Retracts Klicky servo-controlled dock', 'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_retract = printer["gcode_macro _User_Variables"].servo_retract|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_RetractKlickyDock Klicky servo configuration enabled"\n{% if servo_retract == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo retract angle specified") }\n{% endif %}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _RetractDock"] is defined %}\n_KlickyDebug msg="_RetractKlickyDock calling _RetractDock"\n_RetractDock\n{% endif %}'}, 'gcode_macro Attach_Probe': {'description': 'Attaches Klicky Probe', 'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set attachmove2_x = printer["gcode_macro _User_Variables"].attachmove2_x|default(0) %}\n{% set attachmove2_y = printer["gcode_macro _User_Variables"].attachmove2_y|default(0) %}\n{% set attachmove2_z = printer["gcode_macro _User_Variables"].attachmove2_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n_entry_point function=Attach_Probe\n\n{% if bypass_probe_docking == False %}\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n_KlickyDebug msg="Attach_Probe Axis homed"\n\n\n{% elif not probe_attached and not probe_lock %}\n_KlickyDebug msg="Attach_Probe going to attach probe"\n{% if verbose %}\n{ action_respond_info("Attaching Probe") }\n{% endif %}\n_KLICKY_STATUS_BUSY\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% if not enable_z_hop %}\n_KlickyDebug msg="Attach_Probe z_hop disabled"\n{% set safe_z = 0 %}\n{% endif %}\n{% endif %}\n\n\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero, duplicate?") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Umbilical_Path\n\n_entry_point function=Attach_Probe_intern\n\n\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n_DeployKlickyDock\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}"\nG0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}\n\n_RetractKlickyDock\n\n{% if ((printer.gcode_move.gcode_position.z < safe_z) or (docklocation_z != -128 and docklocation_z < safe_z ))%}\n_KlickyDebug msg="Attach_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\n_CheckProbe action=attach\n\n_exit_point function=Attach_Probe_intern move={goback}\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe locked not attaching probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already attached!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe already attached, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Attach_Probe\n{% else %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}'}, 'gcode_macro Dock_Probe': {'description': 'Docks Klicky Probe', 'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n{% if bypass_probe_docking == True %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}\n\n{% if bypass_probe_docking != True %}\n_entry_point function=Dock_Probe\n\n\n{% if probe_attached and not probe_lock %}\n_KLICKY_STATUS_BUSY\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Dock_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n_Umbilical_Path\n\n\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n\n_DeployKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\n\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}"\nG0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}\n{% endif %}\n\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}\n\n\n_RetractKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving away from the dock to G0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}\n\n\n{% if (printer.gcode_move.gcode_position.z < safe_z) %}\n_KlickyDebug msg="Dock_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\nG4 P1000\n_CheckProbe action=dock\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe locked not docking probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already docked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe already docked, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Dock_Probe move={goback}\n{% else %}\n_KlickyDebug msg="Dock_Probe probe docking bypassed, doing nothing"\n{% endif %}'}, 'gcode_macro PROBE_CALIBRATE': {'rename_existing': '_PROBE_CALIBRATE', 'description': 'Calibrate the probes z_offset with klicky automount', 'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_calibrate Axis homed"\n_KlickyDebug msg="probe_calibrate Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_CALIBRATE with the probe above the BED, check klicky_variables bed size!") }\n{% endif %}\n\n{% if bypass_probe_docking == False %}\n_CheckProbe action=query\nG90\nAttach_Probe back=1\n_KLICKY_STATUS_CALIBRATING_Z\n\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nM118 moving the toolhead 20 mm from the bed\n_KlickyDebug msg="probe_calibrate Moving Z up by 20mm"\nTESTZ Z=20\nM118 remove manually the probe and continue calibration\n_KLICKY_STATUS_READY\n{% else %}\n_KLICKY_STATUS_CALIBRATING_Z\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n_KLICKY_STATUS_READY\n{% endif %}'}, 'gcode_macro PROBE_ACCURACY': {'rename_existing': '_PROBE_ACCURACY', 'description': 'Probe Z-height accuracy at current XY position with klicky automount', 'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_accuracy Axis homed"\n_KlickyDebug msg="probe_accuracy Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n_entry_point function=PROBE_ACCURACY\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_ACCURACY with the probe above the BED, check klicky_variables bed size!") }\n{% endif%}\n\n_CheckProbe action=query\nAttach_Probe back=1\n\n_KlickyDebug msg="probe_accuracy calling klipper probe accuracy"\n_PROBE_ACCURACY {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nDock_Probe back=1\n\n_exit_point function=PROBE_ACCURACY move=1'}, 'force_move': {'enable_force_move': 'True'}, 'homing_override': {'axes': 'xyz', 'gcode': '\n\n_User_Variables\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n{% set kinematic_z = 0 %}\n{% set dock_on_zhome = printer["gcode_macro _User_Variables"].dock_on_zhome|default(True) %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set home_backoff_x = printer["gcode_macro _User_Variables"].home_backoff_x|default(0) %}\n{% set home_backoff_y = printer["gcode_macro _User_Variables"].home_backoff_y|default(0) %}\n{% set override_homing = printer["gcode_macro _User_Variables"].override_homing|default(\'\') %}\n\n\n_klicky_check_variables_version\n\n_CheckProbe action=query\n\n\n{% set home_x, home_y, home_z, leave_probe_attached = False, False, False, False %}\n\n{% if \'PROBE_LOCK\' in params%}\n{% if verbose %}\n{ action_respond_info("PROBE_LOCK = True") }\n{% endif %}\n{% set leave_probe_attached = True %}\n{% endif %}\n\n\n{% if not \'X\' in params\nand not \'Y\' in params\nand not \'Z\' in params %}\n\n{% set home_x, home_y, home_z = True, True, True %}\n_KlickyDebug msg="homing_override goint to home all axes"\n\n{% else %}\n{% if \'X\' in params %}\n{% set home_x = True %}\n_KlickyDebug msg="homing_override goint to home X"\n\n{% endif %}\n\n{% if \'Y\' in params %}\n{% set home_y = True %}\n_KlickyDebug msg="homing_override goint to home Y"\n{% endif %}\n\n{% if \'Z\' in params %}\n{% set home_z = True %}\n_KlickyDebug msg="homing_override goint to home Z"\n{% endif %}\n\n{% if \'X\' in params\nand \'Y\' in params\nand \'Z\' in params %}\n\n\n_Homing_Variables reset=1\n_KlickyDebug msg="homing_override goint to home all axes"\n{% endif %}\n\n{% endif %}\n\n_entry_point function=homing_override\n_KLICKY_STATUS_HOMING\n\n\n{% if \'z\' not in printer.toolhead.homed_axes %}\n{% if enable_z_hop == False %}\n_KlickyDebug msg="homing_override z_hop disabled"\n\n{% set kinematic_z = safe_z %}\n{% set safe_z = safe_z %}\n{% endif %}\n{% endif %}\n\n\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes and \'z\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("No axis homed") }\n{% endif %}\n_KlickyDebug msg="homing_override no axis homed, setting position as X=Y=0 Z={kinematic_z}"\nSET_KINEMATIC_POSITION X=0 Y=0 Z={kinematic_z}\nM400\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% if home_z != True %}\n_KlickyDebug msg="homing_override clearing axis homed state if not already homing Z"\nM84\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("X or Y not homed, forcing full G28") }\n{% endif %}\n{% set home_x, home_y, home_z = True, True, True %}\n{% endif %}\n{% endif %}\n\n\n{% if ((attachmove_y == 0 and override_homing == \'\' ) or (override_homing == \'Y\'))%}\n\n{% if home_y %}\n{% if override_homing == \'Y\' %}\n_KlickyDebug msg="homing_override Y homing first override, due to override_homing = Y"\n{% else %}\n_KlickyDebug msg="homing_override Y homing first override, due to attachmove_y = 0"\n{% endif %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y G28 Y0"\nG28 Y0\n\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop-home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n{% set home_y = False %}\n{% endif %}\n\n\n\n{% if home_x %}\n{% if verbose %}\n{ action_respond_info("Homing X") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in X homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_X"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_X external script to handle the X homing"\n_HOME_X\n{% else %}\n_KlickyDebug msg="homing_override Homing X, G28 X0"\nG28 X0\n\n{% if home_backoff_x != 0 %}\n{% if (printer.configfile.settings.stepper_x.position_endstop > (printer.configfile.settings.stepper_x.position_min|default(0) + printer.configfile.settings.stepper_x.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n\n{% if home_y %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y, G28 Y0"\nG28 Y0\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if verbose %}\n{ action_respond_info("Homing Z") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe configured as a virtual Z endstop attaching probe"\nAttach_Probe\n\n{% if leave_probe_attached %}\n_Probe_Lock\n{% endif %}\n{% elif dock_on_zhome == True %}\nDock_Probe\n{% endif %}\n\n_Home_Z_\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe no longer required, docking probe"\nDock_Probe\n{% elif dock_on_zhome == False %}\nDock_Probe\n{% endif %}\n{% endif %}\n_CheckProbe action=query\n\n\n_Park_Toolhead\n\n_exit_point function=homing_override\n_KLICKY_STATUS_READY'}, 'gcode_macro _Umbilical_Path': {'gcode': '\n{% set umbilical = printer["gcode_macro _User_Variables"].umbilical %}\n{% set umbilical_x = printer["gcode_macro _User_Variables"].umbilical_x %}\n{% set umbilical_y = printer["gcode_macro _User_Variables"].umbilical_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n\n{% if umbilical %}\n\n_entry_point function=Umbilical_Path\n\n_KlickyDebug msg="_Umbilical_Path moving to G0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}"\nG0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}\n\n_exit_point function=Umbilical_Path\n{% endif %}'}, 'gcode_macro _Home_Z_': {'gcode': '\n{% set z_endstop_x = printer["gcode_macro _Probe_Variables"].z_endstop_x %}\n{% set z_endstop_y = printer["gcode_macro _Probe_Variables"].z_endstop_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}    {% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Home_Z\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n{% else %}\n_KlickyDebug msg="_Home_Z_ XY Axis homed"\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="_Home_Z_ Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n\n\n_KlickyDebug msg="_Home_Z_ moving to Z endstop position G0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}"\nG0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}\n_KlickyDebug msg="_Home_Z_ Homing Z G28 Z"\nG28 Z0\n_KlickyDebug msg="_Home_Z_ toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_exit_point function=Home_Z'}, 'gcode_macro _CheckProbe': {'variable_probe_state': '0', 'gcode': '\nQuery_Probe\n_SetProbeState action={ params.ACTION }'}, 'gcode_macro _SetProbeState': {'gcode': '\n{% set query_probe_triggered = printer.probe.last_query %}\n{% set action  = params.ACTION|default(\'\') %}\n\n\n{% if query_probe_triggered %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ False }\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ True }\n{% endif %}\n\n{% if action == \'query\' %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_state VALUE={ query_probe_triggered }\n{% endif %}\n\n\n\n\n{% if not query_probe_triggered and action == \'dock\' %}\n{ action_raise_error("Probe dock failed!") }\n{% endif %}\n\n\n{% if query_probe_triggered and action == \'attach\' %}\n{ action_raise_error("Probe attach failed!") }\n{% endif %}'}, 'gcode_macro _Park_Toolhead': {'gcode': '\n{% set park_toolhead = printer["gcode_macro _User_Variables"].park_toolhead %}\n{% set parkposition_x = printer["gcode_macro _User_Variables"].parkposition_x %}\n{% set parkposition_y = printer["gcode_macro _User_Variables"].parkposition_y %}\n{% set parkposition_z = printer["gcode_macro _User_Variables"].parkposition_z %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Park_Toolhead\n\n{% if park_toolhead and \'xyz\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Parking Toolhead") }\n{% endif %}\n{% if parkposition_z == -128 %}\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}\n\n{% else %}\n\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}\n\n{% endif %}\n\n{% endif %}\n_exit_point function=Park_Toolhead'}, 'gcode_macro _klicky_status_ready': {'gcode': '\n{% if printer[\'gcode_macro status_ready\'] is defined %}\n_KlickyDebug msg="_klicky_status_ready activating the LED STATUS_READY"\nSTATUS_READY\n{% endif %}'}, 'gcode_macro _klicky_status_busy': {'gcode': '\n{% if printer[\'gcode_macro status_busy\'] is defined %}\n_KlickyDebug msg="_klicky_status_busy activating the LED STATUS_BUSY"\nSTATUS_BUSY\n{% endif %}'}, 'gcode_macro _klicky_status_leveling': {'gcode': '\n{% if printer[\'gcode_macro status_leveling\'] is defined %}\n_KlickyDebug msg="_klicky_status_leveling activating the LED STATUS_LEVELING"\nSTATUS_LEVELING\n{% endif %}'}, 'gcode_macro _klicky_status_homing': {'gcode': '\n{% if printer[\'gcode_macro status_homing\'] is defined %}\n_KlickyDebug msg="_klicky_status_homing activating the LED STATUS_HOMING"\nSTATUS_HOMING\n{% endif %}'}, 'gcode_macro _klicky_status_cleaning': {'gcode': '\n{% if printer[\'gcode_macro status_cleaning\'] is defined %}\n_KlickyDebug msg="_klicky_status_cleaning activating the LED STATUS_CLEANING"\nSTATUS_CLEANING\n{% endif %}'}, 'gcode_macro _klicky_status_meshing': {'gcode': '\n{% if printer[\'gcode_macro status_meshing\'] is defined %}\n_KlickyDebug msg="_klicky_status_meshing activating the LED STATUS_MESHING"\nSTATUS_MESHING\n{% endif %}'}, 'gcode_macro _klicky_status_calibrating_z': {'gcode': '\n{% if printer[\'gcode_macro status_calibrating_z\'] is defined %}\n_KlickyDebug msg="_klicky_status_calibrating_z activating the LED STATUS_CALIBRATING_Z"\nSTATUS_CALIBRATING_Z\n{% endif %}'}, 'z_calibration': {'nozzle_xy_position': '172, 301', 'switch_xy_position': '171.5, 282', 'bed_xy_position': '150, 150', 'switch_offset': '0.09', 'offset_margins': '-1.0,1.0', 'speed': '50', 'probing_first_fast': 'false', 'start_gcode': 'Attach_Probe', 'end_gcode': 'Dock_Probe'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_28003C001150535556323420-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '^PG6', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '25', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'PG9', 'position_min': '0', 'position_endstop': '300', 'position_max': '303.5', 'homing_speed': '25', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': '!PG3', 'enable_pin': '!PG5', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'PG10', 'position_max': '290', 'position_min': '-4.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3', 'position_endstop': '-0.711'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA0', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': '!PF10', 'enable_pin': '!PG2', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PC13', 'dir_pin': 'PF0', 'enable_pin': '!PF1', 'rotation_distance': '21.9459674016', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.75', 'heater_pin': 'PA1', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF4', 'min_temp': '10', 'max_temp': '270', 'max_power': '1.0', 'min_extrude_temp': '170', 'pressure_advance': '0.05', 'pressure_advance_smooth_time': '0.040', 'control': 'pid', 'pid_kp': '26.572', 'pid_ki': '2.036', 'pid_kd': '86.691'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.5', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PA2', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF3', 'max_power': '1', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '55.196', 'pid_ki': '2.091', 'pid_kd': '364.295'}, 'probe': {'pin': 'PG15', 'x_offset': '0', 'y_offset': '25.0', 'z_offset': '0', 'speed': '10.0', 'samples': '5', 'samples_result': 'median', 'sample_retract_dist': '3.0', 'samples_tolerance': '0.006', 'samples_tolerance_retries': '6'}, 'fan': {'pin': 'PA8', 'kick_start_time': '0.5', 'off_below': '0.10'}, 'heater_fan hotend_fan': {'pin': 'PE5', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'controller_fan controller_fan': {'pin': 'PD12', 'kick_start_time': '0.5', 'heater': 'heater_bed'}, 'heater_fan exhaust_fan': {'pin': 'PD13', 'max_power': '1.0', 'shutdown_speed': '0.0', 'kick_start_time': '5.0', 'heater': 'heater_bed', 'heater_temp': '60', 'fan_speed': '1.0'}, 'output_pin caselight': {'pin': 'PD15', 'pwm': 'true', 'shutdown_value': '0', 'value': '1', 'cycle_time': '0.01'}, 'neopixel headlight': {'pin': 'PB0', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '0.0', 'initial_green': '0.2157', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'temperature_sensor chamber_temp': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF5', 'min_temp': '0', 'max_temp': '100', 'gcode_id': 'chamber_th'}, 'idle_timeout': {'timeout': '1800'}, 'z_tilt': {'z_positions': '\n-50, 18\n150, 348\n350, 18', 'points': '\n30, 5\n150, 245\n270, 5', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'gcode_macro _User_Variables': {'variable_verbose': 'True', 'variable_debug': 'False', 'variable_travel_speed': '200', 'variable_move_accel': '1000', 'variable_dock_speed': '50', 'variable_release_speed': '75', 'variable_z_drop_speed': '20', 'variable_safe_z': '25', 'variable_enable_z_hop': 'True', 'variable_max_bed_y': '300', 'variable_max_bed_x': '300', 'variable_z_endstop_x': '172', 'variable_z_endstop_y': '301', 'variable_docklocation_x': '40.5', 'variable_docklocation_y': '301', 'variable_docklocation_z': '-128', 'variable_enable_dock_servo': 'False', 'variable_servo_name': "'NAME'", 'variable_servo_deploy': '10', 'variable_servo_retract': '11', 'variable_servo_delay': '250', 'variable_dockmove_x': '40', 'variable_dockmove_y': '0', 'variable_dockmove_z': '0', 'variable_attachmove_x': '0', 'variable_attachmove_y': '30', 'variable_attachmove_z': '0', 'variable_umbilical': 'False', 'variable_umbilical_x': '15', 'variable_umbilical_y': '15', 'variable_park_toolhead': 'False', 'variable_parkposition_x': '125', 'variable_parkposition_y': '125', 'variable_parkposition_z': '30', 'variable_version': '1', 'variable_attachmove2_x': '0', 'variable_attachmove2_y': '0', 'variable_attachmove2_z': '0', 'variable_home_backoff_x': '10', 'variable_home_backoff_y': '10', 'variable_override_homing': "''", 'variable_dock_on_zhome': 'True', 'gcode': '\n{% set Mx = printer[\'configfile\'].config["stepper_x"]["position_max"]|float %}\n{% set My = printer[\'configfile\'].config["stepper_y"]["position_max"]|float %}\n{% set Ox = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set Oy = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set Oz = printer[\'configfile\'].config["probe"]["z_offset"]|float %}\n\n\n{% if z_endstop_x != 0 or z_endstop_y != 0 %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ z_endstop_x }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ z_endstop_y }\n\n\n{% else %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ (Mx * 0.5) - Ox }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ (My * 0.5) - Oy }\n{% endif %}'}, 'gcode_macro PRINT_START': {'gcode': '\nM117 Homing...\nG28\nATTACH_PROBE\nZ_TILT_ADJUST\nDOCK_PROBE\nG28\n\n\n\n\n\n\n\nG0 X150 Y150 Z30 F3600'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_28003C001150535556323420-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro _probe_variables': {'gcode': '', 'description': 'G-Code macro', 'variable_probe_attached': 'False', 'variable_probe_state': 'False', 'variable_probe_lock': 'False', 'variable_probe_z_homed': 'False', 'variable_z_endstop_x': '0', 'variable_z_endstop_y': '0'}, 'gcode_macro _klicky_check_variables_version': {'gcode': '\n{% set version = printer["gcode_macro _User_Variables"].version|default(0) %}\n\n{% if version != 1 %}\n{ action_raise_error("Please update your klicky variables, there are some functionality changes") }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klickydebug': {'gcode': '\n{% set message  = params.MSG %}\n{% set debug = printer["gcode_macro _User_Variables"].debug|default(False) %}\n\n{% if debug %}\n{ action_respond_info(message) }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _exit_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move  = params.MOVE|default(0) %}\n{% set speed = printer["gcode_macro _User_Variables"].travel_speed %}\n\n\nM400\nSET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\nRESTORE_GCODE_STATE NAME={function} MOVE={move} MOVE_SPEED={speed}', 'description': 'G-Code macro'}, 'gcode_macro _entry_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move_accel = printer["gcode_macro _User_Variables"].move_accel|default(1000) %}\n\nM400\nSAVE_GCODE_STATE NAME={function}\n\nSET_GCODE_OFFSET Z=0\n\nG90\n\nSET_VELOCITY_LIMIT ACCEL={move_accel}', 'description': 'G-Code macro'}, 'gcode_macro _homing_variables': {'gcode': '\n{% set reset  = params.RESET|default(0) %}\n{% if reset %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro attach_probe_lock': {'gcode': '\nAttach_Probe\n_Probe_Lock', 'description': 'Attaches Klicky Probe, can only be docked after unlocking'}, 'gcode_macro dock_probe_unlock': {'gcode': '\n_Probe_Unlock\nDock_Probe', 'description': 'Docks Klicky Probe even if it was locked'}, 'gcode_macro _probe_unlock': {'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to False"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }', 'description': 'Unlocks Klicky Probe state'}, 'gcode_macro _probe_lock': {'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to True"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ True }', 'description': 'Locks Klicky Probe state'}, 'gcode_macro _deployklickydock': {'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_deploy = printer["gcode_macro _User_Variables"].servo_deploy|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_DeployKlickyDock Klicky servo configuration enabled"\n{% if servo_deploy == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo deploy angle specified") }\n{% endif %}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _DeployDock"] is defined %}\n_KlickyDebug msg="_DeployKlickyDock calling _DeployDock"\n_DeployDock\n{% endif %}', 'description': 'Deploys Klicky servo-controlled dock'}, 'gcode_macro _retractklickydock': {'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_retract = printer["gcode_macro _User_Variables"].servo_retract|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_RetractKlickyDock Klicky servo configuration enabled"\n{% if servo_retract == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo retract angle specified") }\n{% endif %}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _RetractDock"] is defined %}\n_KlickyDebug msg="_RetractKlickyDock calling _RetractDock"\n_RetractDock\n{% endif %}', 'description': 'Retracts Klicky servo-controlled dock'}, 'gcode_macro attach_probe': {'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set attachmove2_x = printer["gcode_macro _User_Variables"].attachmove2_x|default(0) %}\n{% set attachmove2_y = printer["gcode_macro _User_Variables"].attachmove2_y|default(0) %}\n{% set attachmove2_z = printer["gcode_macro _User_Variables"].attachmove2_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n_entry_point function=Attach_Probe\n\n{% if bypass_probe_docking == False %}\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n_KlickyDebug msg="Attach_Probe Axis homed"\n\n\n{% elif not probe_attached and not probe_lock %}\n_KlickyDebug msg="Attach_Probe going to attach probe"\n{% if verbose %}\n{ action_respond_info("Attaching Probe") }\n{% endif %}\n_KLICKY_STATUS_BUSY\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% if not enable_z_hop %}\n_KlickyDebug msg="Attach_Probe z_hop disabled"\n{% set safe_z = 0 %}\n{% endif %}\n{% endif %}\n\n\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero, duplicate?") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Umbilical_Path\n\n_entry_point function=Attach_Probe_intern\n\n\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n_DeployKlickyDock\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}"\nG0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}\n\n_RetractKlickyDock\n\n{% if ((printer.gcode_move.gcode_position.z < safe_z) or (docklocation_z != -128 and docklocation_z < safe_z ))%}\n_KlickyDebug msg="Attach_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\n_CheckProbe action=attach\n\n_exit_point function=Attach_Probe_intern move={goback}\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe locked not attaching probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already attached!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe already attached, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Attach_Probe\n{% else %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}', 'description': 'Attaches Klicky Probe'}, 'gcode_macro dock_probe': {'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n{% if bypass_probe_docking == True %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}\n\n{% if bypass_probe_docking != True %}\n_entry_point function=Dock_Probe\n\n\n{% if probe_attached and not probe_lock %}\n_KLICKY_STATUS_BUSY\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Dock_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n_Umbilical_Path\n\n\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n\n_DeployKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\n\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}"\nG0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}\n{% endif %}\n\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}\n\n\n_RetractKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving away from the dock to G0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}\n\n\n{% if (printer.gcode_move.gcode_position.z < safe_z) %}\n_KlickyDebug msg="Dock_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\nG4 P1000\n_CheckProbe action=dock\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe locked not docking probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already docked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe already docked, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Dock_Probe move={goback}\n{% else %}\n_KlickyDebug msg="Dock_Probe probe docking bypassed, doing nothing"\n{% endif %}', 'description': 'Docks Klicky Probe'}, 'gcode_macro probe_calibrate': {'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_calibrate Axis homed"\n_KlickyDebug msg="probe_calibrate Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_CALIBRATE with the probe above the BED, check klicky_variables bed size!") }\n{% endif %}\n\n{% if bypass_probe_docking == False %}\n_CheckProbe action=query\nG90\nAttach_Probe back=1\n_KLICKY_STATUS_CALIBRATING_Z\n\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nM118 moving the toolhead 20 mm from the bed\n_KlickyDebug msg="probe_calibrate Moving Z up by 20mm"\nTESTZ Z=20\nM118 remove manually the probe and continue calibration\n_KLICKY_STATUS_READY\n{% else %}\n_KLICKY_STATUS_CALIBRATING_Z\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n_KLICKY_STATUS_READY\n{% endif %}', 'rename_existing': '_PROBE_CALIBRATE', 'description': 'Calibrate the probes z_offset with klicky automount'}, 'gcode_macro probe_accuracy': {'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_accuracy Axis homed"\n_KlickyDebug msg="probe_accuracy Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n_entry_point function=PROBE_ACCURACY\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_ACCURACY with the probe above the BED, check klicky_variables bed size!") }\n{% endif%}\n\n_CheckProbe action=query\nAttach_Probe back=1\n\n_KlickyDebug msg="probe_accuracy calling klipper probe accuracy"\n_PROBE_ACCURACY {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nDock_Probe back=1\n\n_exit_point function=PROBE_ACCURACY move=1', 'rename_existing': '_PROBE_ACCURACY', 'description': 'Probe Z-height accuracy at current XY position with klicky automount'}, 'force_move': {'enable_force_move': True}, 'homing_override': {'axes': 'xyz', 'gcode': '\n\n_User_Variables\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n{% set kinematic_z = 0 %}\n{% set dock_on_zhome = printer["gcode_macro _User_Variables"].dock_on_zhome|default(True) %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set home_backoff_x = printer["gcode_macro _User_Variables"].home_backoff_x|default(0) %}\n{% set home_backoff_y = printer["gcode_macro _User_Variables"].home_backoff_y|default(0) %}\n{% set override_homing = printer["gcode_macro _User_Variables"].override_homing|default(\'\') %}\n\n\n_klicky_check_variables_version\n\n_CheckProbe action=query\n\n\n{% set home_x, home_y, home_z, leave_probe_attached = False, False, False, False %}\n\n{% if \'PROBE_LOCK\' in params%}\n{% if verbose %}\n{ action_respond_info("PROBE_LOCK = True") }\n{% endif %}\n{% set leave_probe_attached = True %}\n{% endif %}\n\n\n{% if not \'X\' in params\nand not \'Y\' in params\nand not \'Z\' in params %}\n\n{% set home_x, home_y, home_z = True, True, True %}\n_KlickyDebug msg="homing_override goint to home all axes"\n\n{% else %}\n{% if \'X\' in params %}\n{% set home_x = True %}\n_KlickyDebug msg="homing_override goint to home X"\n\n{% endif %}\n\n{% if \'Y\' in params %}\n{% set home_y = True %}\n_KlickyDebug msg="homing_override goint to home Y"\n{% endif %}\n\n{% if \'Z\' in params %}\n{% set home_z = True %}\n_KlickyDebug msg="homing_override goint to home Z"\n{% endif %}\n\n{% if \'X\' in params\nand \'Y\' in params\nand \'Z\' in params %}\n\n\n_Homing_Variables reset=1\n_KlickyDebug msg="homing_override goint to home all axes"\n{% endif %}\n\n{% endif %}\n\n_entry_point function=homing_override\n_KLICKY_STATUS_HOMING\n\n\n{% if \'z\' not in printer.toolhead.homed_axes %}\n{% if enable_z_hop == False %}\n_KlickyDebug msg="homing_override z_hop disabled"\n\n{% set kinematic_z = safe_z %}\n{% set safe_z = safe_z %}\n{% endif %}\n{% endif %}\n\n\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes and \'z\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("No axis homed") }\n{% endif %}\n_KlickyDebug msg="homing_override no axis homed, setting position as X=Y=0 Z={kinematic_z}"\nSET_KINEMATIC_POSITION X=0 Y=0 Z={kinematic_z}\nM400\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% if home_z != True %}\n_KlickyDebug msg="homing_override clearing axis homed state if not already homing Z"\nM84\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("X or Y not homed, forcing full G28") }\n{% endif %}\n{% set home_x, home_y, home_z = True, True, True %}\n{% endif %}\n{% endif %}\n\n\n{% if ((attachmove_y == 0 and override_homing == \'\' ) or (override_homing == \'Y\'))%}\n\n{% if home_y %}\n{% if override_homing == \'Y\' %}\n_KlickyDebug msg="homing_override Y homing first override, due to override_homing = Y"\n{% else %}\n_KlickyDebug msg="homing_override Y homing first override, due to attachmove_y = 0"\n{% endif %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y G28 Y0"\nG28 Y0\n\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop-home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n{% set home_y = False %}\n{% endif %}\n\n\n\n{% if home_x %}\n{% if verbose %}\n{ action_respond_info("Homing X") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in X homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_X"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_X external script to handle the X homing"\n_HOME_X\n{% else %}\n_KlickyDebug msg="homing_override Homing X, G28 X0"\nG28 X0\n\n{% if home_backoff_x != 0 %}\n{% if (printer.configfile.settings.stepper_x.position_endstop > (printer.configfile.settings.stepper_x.position_min|default(0) + printer.configfile.settings.stepper_x.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n\n{% if home_y %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y, G28 Y0"\nG28 Y0\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if verbose %}\n{ action_respond_info("Homing Z") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe configured as a virtual Z endstop attaching probe"\nAttach_Probe\n\n{% if leave_probe_attached %}\n_Probe_Lock\n{% endif %}\n{% elif dock_on_zhome == True %}\nDock_Probe\n{% endif %}\n\n_Home_Z_\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe no longer required, docking probe"\nDock_Probe\n{% elif dock_on_zhome == False %}\nDock_Probe\n{% endif %}\n{% endif %}\n_CheckProbe action=query\n\n\n_Park_Toolhead\n\n_exit_point function=homing_override\n_KLICKY_STATUS_READY'}, 'gcode_macro _umbilical_path': {'gcode': '\n{% set umbilical = printer["gcode_macro _User_Variables"].umbilical %}\n{% set umbilical_x = printer["gcode_macro _User_Variables"].umbilical_x %}\n{% set umbilical_y = printer["gcode_macro _User_Variables"].umbilical_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n\n{% if umbilical %}\n\n_entry_point function=Umbilical_Path\n\n_KlickyDebug msg="_Umbilical_Path moving to G0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}"\nG0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}\n\n_exit_point function=Umbilical_Path\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _home_z_': {'gcode': '\n{% set z_endstop_x = printer["gcode_macro _Probe_Variables"].z_endstop_x %}\n{% set z_endstop_y = printer["gcode_macro _Probe_Variables"].z_endstop_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}    {% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Home_Z\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n{% else %}\n_KlickyDebug msg="_Home_Z_ XY Axis homed"\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="_Home_Z_ Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n\n\n_KlickyDebug msg="_Home_Z_ moving to Z endstop position G0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}"\nG0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}\n_KlickyDebug msg="_Home_Z_ Homing Z G28 Z"\nG28 Z0\n_KlickyDebug msg="_Home_Z_ toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_exit_point function=Home_Z', 'description': 'G-Code macro'}, 'gcode_macro _checkprobe': {'gcode': '\nQuery_Probe\n_SetProbeState action={ params.ACTION }', 'description': 'G-Code macro', 'variable_probe_state': '0'}, 'gcode_macro _setprobestate': {'gcode': '\n{% set query_probe_triggered = printer.probe.last_query %}\n{% set action  = params.ACTION|default(\'\') %}\n\n\n{% if query_probe_triggered %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ False }\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ True }\n{% endif %}\n\n{% if action == \'query\' %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_state VALUE={ query_probe_triggered }\n{% endif %}\n\n\n\n\n{% if not query_probe_triggered and action == \'dock\' %}\n{ action_raise_error("Probe dock failed!") }\n{% endif %}\n\n\n{% if query_probe_triggered and action == \'attach\' %}\n{ action_raise_error("Probe attach failed!") }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _park_toolhead': {'gcode': '\n{% set park_toolhead = printer["gcode_macro _User_Variables"].park_toolhead %}\n{% set parkposition_x = printer["gcode_macro _User_Variables"].parkposition_x %}\n{% set parkposition_y = printer["gcode_macro _User_Variables"].parkposition_y %}\n{% set parkposition_z = printer["gcode_macro _User_Variables"].parkposition_z %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Park_Toolhead\n\n{% if park_toolhead and \'xyz\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Parking Toolhead") }\n{% endif %}\n{% if parkposition_z == -128 %}\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}\n\n{% else %}\n\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}\n\n{% endif %}\n\n{% endif %}\n_exit_point function=Park_Toolhead', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_ready': {'gcode': '\n{% if printer[\'gcode_macro status_ready\'] is defined %}\n_KlickyDebug msg="_klicky_status_ready activating the LED STATUS_READY"\nSTATUS_READY\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_busy': {'gcode': '\n{% if printer[\'gcode_macro status_busy\'] is defined %}\n_KlickyDebug msg="_klicky_status_busy activating the LED STATUS_BUSY"\nSTATUS_BUSY\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_leveling': {'gcode': '\n{% if printer[\'gcode_macro status_leveling\'] is defined %}\n_KlickyDebug msg="_klicky_status_leveling activating the LED STATUS_LEVELING"\nSTATUS_LEVELING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_homing': {'gcode': '\n{% if printer[\'gcode_macro status_homing\'] is defined %}\n_KlickyDebug msg="_klicky_status_homing activating the LED STATUS_HOMING"\nSTATUS_HOMING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_cleaning': {'gcode': '\n{% if printer[\'gcode_macro status_cleaning\'] is defined %}\n_KlickyDebug msg="_klicky_status_cleaning activating the LED STATUS_CLEANING"\nSTATUS_CLEANING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_meshing': {'gcode': '\n{% if printer[\'gcode_macro status_meshing\'] is defined %}\n_KlickyDebug msg="_klicky_status_meshing activating the LED STATUS_MESHING"\nSTATUS_MESHING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_calibrating_z': {'gcode': '\n{% if printer[\'gcode_macro status_calibrating_z\'] is defined %}\n_KlickyDebug msg="_klicky_status_calibrating_z activating the LED STATUS_CALIBRATING_Z"\nSTATUS_CALIBRATING_Z\n{% endif %}', 'description': 'G-Code macro'}, 'z_calibration': {'switch_offset': 0.09, 'offset_margins': '-1.0,1.0', 'speed': 50.0, 'samples_result': 'none', 'probing_first_fast': False, 'nozzle_xy_position': '172, 301', 'switch_xy_position': '171.5, 282', 'bed_xy_position': '150, 150', 'start_gcode': 'Attach_Probe', 'before_switch_gcode': '', 'end_gcode': 'Dock_Probe'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': '^PG6', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'PG9', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 303.5, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PF11', 'dir_pin': '!PG3', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG5', 'endstop_pin': 'PG10', 'position_endstop': -0.711, 'position_min': -4.5, 'position_max': 290.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA0'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PF9', 'dir_pin': '!PF10', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG2'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF4', 'min_temp': 10.0, 'max_temp': 270.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 26.572, 'pid_ki': 2.036, 'pid_kd': 86.691, 'heater_pin': 'PA1', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PC13', 'pressure_advance': 0.05, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'PF0', 'rotation_distance': 21.9459674016, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 55.196, 'pid_ki': 2.091, 'pid_kd': 364.295, 'heater_pin': 'PA2', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'probe': {'z_offset': 0.0, 'deactivate_on_each_sample': True, 'activate_gcode': '', 'deactivate_gcode': '', 'pin': 'PG15', 'speed': 10.0, 'lift_speed': 10.0, 'x_offset': 0.0, 'y_offset': 25.0, 'samples': 5, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.006, 'samples_tolerance_retries': 6}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE5', 'fan_speed': 1.0}, 'controller_fan controller_fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD12', 'fan_speed': 1.0, 'idle_speed': 1.0, 'idle_timeout': 30, 'heater': ['heater_bed']}, 'heater_fan exhaust_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 5.0, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13', 'fan_speed': 1.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PD15', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 1.0, 'maximum_mcu_duration': 0.0, 'value': 1.0, 'shutdown_value': 0.0}, 'neopixel headlight': {'pin': 'PB0', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 0.0, 'initial_green': 0.2157, 'initial_blue': 1.0, 'initial_white': 0.0}, 'temperature_sensor chamber_temp': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF5', 'min_temp': 0.0, 'max_temp': 100.0, 'gcode_id': 'chamber_th'}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [150.0, 348.0], [350.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 5.0], [150.0, 245.0], [270.0, 5.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'gcode_macro _user_variables': {'gcode': '\n{% set Mx = printer[\'configfile\'].config["stepper_x"]["position_max"]|float %}\n{% set My = printer[\'configfile\'].config["stepper_y"]["position_max"]|float %}\n{% set Ox = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set Oy = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set Oz = printer[\'configfile\'].config["probe"]["z_offset"]|float %}\n\n\n{% if z_endstop_x != 0 or z_endstop_y != 0 %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ z_endstop_x }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ z_endstop_y }\n\n\n{% else %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ (Mx * 0.5) - Ox }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ (My * 0.5) - Oy }\n{% endif %}', 'description': 'G-Code macro', 'variable_verbose': 'True', 'variable_debug': 'False', 'variable_travel_speed': '200', 'variable_move_accel': '1000', 'variable_dock_speed': '50', 'variable_release_speed': '75', 'variable_z_drop_speed': '20', 'variable_safe_z': '25', 'variable_enable_z_hop': 'True', 'variable_max_bed_y': '300', 'variable_max_bed_x': '300', 'variable_z_endstop_x': '172', 'variable_z_endstop_y': '301', 'variable_docklocation_x': '40.5', 'variable_docklocation_y': '301', 'variable_docklocation_z': '-128', 'variable_enable_dock_servo': 'False', 'variable_servo_name': "'NAME'", 'variable_servo_deploy': '10', 'variable_servo_retract': '11', 'variable_servo_delay': '250', 'variable_dockmove_x': '40', 'variable_dockmove_y': '0', 'variable_dockmove_z': '0', 'variable_attachmove_x': '0', 'variable_attachmove_y': '30', 'variable_attachmove_z': '0', 'variable_umbilical': 'False', 'variable_umbilical_x': '15', 'variable_umbilical_y': '15', 'variable_park_toolhead': 'False', 'variable_parkposition_x': '125', 'variable_parkposition_y': '125', 'variable_parkposition_z': '30', 'variable_version': '1', 'variable_attachmove2_x': '0', 'variable_attachmove2_y': '0', 'variable_attachmove2_z': '0', 'variable_home_backoff_x': '10', 'variable_home_backoff_y': '10', 'variable_override_homing': "''", 'variable_dock_on_zhome': 'True'}, 'gcode_macro print_start': {'gcode': '\nM117 Homing...\nG28\nATTACH_PROBE\nZ_TILT_ADJUST\nDOCK_PROBE\nG28\n\n\n\n\n\n\n\nG0 X150 Y150 Z30 F3600', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1500.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-02-19 19:46:22,545 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-19 19:46:22,547 [printer.py:reinit()] - Klipper version: v0.12.0-103-g6ce6fbbc-dirty
2024-02-19 19:46:22,547 [printer.py:reinit()] - # Extruders: 1
2024-02-19 19:46:22,547 [printer.py:reinit()] - # Temperature devices: 2
2024-02-19 19:46:22,547 [printer.py:reinit()] - # Fans: 4
2024-02-19 19:46:22,547 [printer.py:reinit()] - # Output pins: 1
2024-02-19 19:46:22,548 [printer.py:reinit()] - # Leds: 1
2024-02-19 19:46:22,570 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2024-02-19 19:46:22,574 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-02-19 19:46:22,867 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor chamber_temp&fan&controller_fan controller_fan&heater_fan hotend_fan&heater_fan exhaust_fan&output_pin caselight&neopixel headlight
2024-02-19 19:46:22,875 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-02-19 19:46:22,875 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-02-19 19:46:22,876 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-02-19 19:46:22,876 [screen.py:init_klipper()] - Printer initialized
2024-02-19 19:46:25,294 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-19 19:46:30,284 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-19 19:46:35,281 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-19 19:46:40,283 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-19 19:46:45,281 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-19 19:46:50,281 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-19 19:46:55,282 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-19 19:47:00,282 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-19 19:47:05,281 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-19 19:47:10,281 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-19 19:47:15,281 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-19 19:47:20,279 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-19 19:47:25,283 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-19 19:47:30,282 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-19 19:47:35,283 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-19 19:47:40,284 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-19 19:47:42,997 [screen.py:show_popup_message()] - error: Error evaluating 'gcode_macro _SetProbeState:gcode': gcode.CommandError: Probe attach failed!
2024-02-19 19:47:43,027 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-19 19:47:45,280 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-19 19:47:46,873 [screen.py:show_popup_message()] - error: Error evaluating 'gcode_macro _SetProbeState:gcode': gcode.CommandError: Probe attach failed!
2024-02-19 19:47:46,900 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-19 19:47:47,069 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-19 19:47:50,280 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-19 19:47:55,281 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-19 19:47:57,451 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-19 19:48:00,170 [screen.py:show_panel()] - Reinitializing panel
2024-02-19 19:48:00,225 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-02-19 19:48:02,759 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y-1 F3000'}
2024-02-19 19:48:02,766 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:48:03,166 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y-1 F3000'}
2024-02-19 19:48:03,169 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:48:03,986 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+1 F3000'}
2024-02-19 19:48:03,989 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:48:04,758 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+1 F3000'}
2024-02-19 19:48:04,760 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:48:05,166 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+1 F3000'}
2024-02-19 19:48:05,169 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:48:05,431 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+1 F3000'}
2024-02-19 19:48:05,432 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:48:05,814 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+1 F3000'}
2024-02-19 19:48:05,816 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:48:06,582 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+1 F3000'}
2024-02-19 19:48:06,584 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:48:07,281 [move.py:change_distance()] - ### Distance 25
2024-02-19 19:48:07,864 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+25 F3000'}
2024-02-19 19:48:07,866 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:48:09,926 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y-25 F3000'}
2024-02-19 19:48:09,930 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:48:11,246 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+25 F3000'}
2024-02-19 19:48:11,249 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:48:12,959 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 X+25 F3000'}
2024-02-19 19:48:12,965 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:48:14,127 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y-25 F3000'}
2024-02-19 19:48:14,130 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:48:15,014 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y-25 F3000'}
2024-02-19 19:48:15,017 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:48:16,339 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y-25 F3000'}
2024-02-19 19:48:16,341 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:48:18,071 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 X-25 F3000'}
2024-02-19 19:48:18,075 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:48:20,503 [move.py:change_distance()] - ### Distance 1
2024-02-19 19:48:20,818 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+1 F3000'}
2024-02-19 19:48:20,821 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:48:21,538 [move.py:change_distance()] - ### Distance 25
2024-02-19 19:48:22,139 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+25 F3000'}
2024-02-19 19:48:22,142 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:48:22,746 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+25 F3000'}
2024-02-19 19:48:22,748 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:48:23,663 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+25 F3000'}
2024-02-19 19:48:23,666 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:48:25,934 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y-25 F3000'}
2024-02-19 19:48:25,939 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:48:27,531 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y-25 F3000'}
2024-02-19 19:48:27,534 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:48:28,134 [move.py:change_distance()] - ### Distance 1
2024-02-19 19:48:28,542 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y-1 F3000'}
2024-02-19 19:48:28,545 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:48:29,167 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y-1 F3000'}
2024-02-19 19:48:29,171 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:48:30,203 [move.py:change_distance()] - ### Distance 25
2024-02-19 19:48:31,210 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+25 F3000'}
2024-02-19 19:48:31,213 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:48:31,786 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+25 F3000'}
2024-02-19 19:48:31,788 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:48:33,594 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 X+25 F3000'}
2024-02-19 19:48:33,597 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:48:34,582 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 X+25 F3000'}
2024-02-19 19:48:34,586 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:48:35,490 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y-25 F3000'}
2024-02-19 19:48:35,493 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:48:36,766 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 X-25 F3000'}
2024-02-19 19:48:36,769 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:48:37,658 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 X-25 F3000'}
2024-02-19 19:48:37,661 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:48:38,798 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+25 F3000'}
2024-02-19 19:48:38,802 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:48:41,106 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y-25 F3000'}
2024-02-19 19:48:41,110 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:48:44,074 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+25 F3000'}
2024-02-19 19:48:44,077 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:48:45,402 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 X+25 F3000'}
2024-02-19 19:48:45,407 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:48:46,459 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 X+25 F3000'}
2024-02-19 19:48:46,461 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:48:47,281 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y-25 F3000'}
2024-02-19 19:48:47,283 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:48:48,530 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y-25 F3000'}
2024-02-19 19:48:48,533 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:48:49,254 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 X-25 F3000'}
2024-02-19 19:48:49,257 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:48:50,166 [move.py:change_distance()] - ### Distance 1
2024-02-19 19:48:51,995 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y-1 F3000'}
2024-02-19 19:48:51,998 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:48:52,714 [move.py:change_distance()] - ### Distance 25
2024-02-19 19:48:53,098 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 X-25 F3000'}
2024-02-19 19:48:53,103 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:48:55,762 [move.py:change_distance()] - ### Distance 1
2024-02-19 19:48:56,147 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 X+1 F3000'}
2024-02-19 19:48:56,150 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:48:56,773 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 X+1 F3000'}
2024-02-19 19:48:56,776 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:48:57,838 [move.py:change_distance()] - ### Distance 25
2024-02-19 19:48:58,418 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+25 F3000'}
2024-02-19 19:48:58,421 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:48:59,402 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+25 F3000'}
2024-02-19 19:48:59,404 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:49:01,658 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y-25 F3000'}
2024-02-19 19:49:01,662 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:49:02,670 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y-25 F3000'}
2024-02-19 19:49:02,673 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:49:03,726 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+25 F3000'}
2024-02-19 19:49:03,728 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:49:05,119 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+25 F3000'}
2024-02-19 19:49:05,121 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:49:06,270 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 X+25 F3000'}
2024-02-19 19:49:06,273 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:49:07,022 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 X+25 F3000'}
2024-02-19 19:49:07,026 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:49:08,042 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y-25 F3000'}
2024-02-19 19:49:08,045 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:49:08,890 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y-25 F3000'}
2024-02-19 19:49:08,893 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:49:10,022 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 X-25 F3000'}
2024-02-19 19:49:10,025 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:49:10,743 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 X-25 F3000'}
2024-02-19 19:49:10,745 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:49:12,065 [move.py:change_distance()] - ### Distance 1
2024-02-19 19:49:12,375 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+1 F3000'}
2024-02-19 19:49:12,377 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:49:13,194 [move.py:change_distance()] - ### Distance 25
2024-02-19 19:49:13,795 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+25 F3000'}
2024-02-19 19:49:13,798 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:49:14,490 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+25 F3000'}
2024-02-19 19:49:14,493 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:49:16,607 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 X+25 F3000'}
2024-02-19 19:49:16,609 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:49:17,312 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 X+25 F3000'}
2024-02-19 19:49:17,315 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:49:18,271 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y-25 F3000'}
2024-02-19 19:49:18,273 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:49:19,159 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y-25 F3000'}
2024-02-19 19:49:19,162 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:49:20,214 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 X-25 F3000'}
2024-02-19 19:49:20,218 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:49:21,018 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 X-25 F3000'}
2024-02-19 19:49:21,022 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:49:23,878 [move.py:change_distance()] - ### Distance 1
2024-02-19 19:49:24,214 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+1 F3000'}
2024-02-19 19:49:24,217 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:49:24,742 [move.py:change_distance()] - ### Distance 25
2024-02-19 19:49:25,442 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+25 F3000'}
2024-02-19 19:49:25,445 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:49:26,074 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+25 F3000'}
2024-02-19 19:49:26,076 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:49:32,615 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y-25 F3000'}
2024-02-19 19:49:32,618 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:49:33,695 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+25 F3000'}
2024-02-19 19:49:33,698 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:49:35,330 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 X+25 F3000'}
2024-02-19 19:49:35,335 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:49:36,039 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 X+25 F3000'}
2024-02-19 19:49:36,042 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:49:36,903 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y-25 F3000'}
2024-02-19 19:49:36,905 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:49:37,746 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y-25 F3000'}
2024-02-19 19:49:37,748 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:49:39,406 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 X-25 F3000'}
2024-02-19 19:49:39,409 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:49:40,298 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 X-25 F3000'}
2024-02-19 19:49:40,303 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:49:42,035 [move.py:change_distance()] - ### Distance 1
2024-02-19 19:49:42,802 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y-1 F3000'}
2024-02-19 19:49:42,804 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:49:43,598 [move.py:change_distance()] - ### Distance 25
2024-02-19 19:49:44,055 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+25 F3000'}
2024-02-19 19:49:44,058 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:49:44,702 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+25 F3000'}
2024-02-19 19:49:44,706 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:50:17,684 [screen.py:show_popup_message()] - error: Error evaluating 'gcode_macro _SetProbeState:gcode': gcode.CommandError: Probe attach failed!
2024-02-19 19:50:32,085 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-02-19 19:50:32,086 [printer.py:change_state()] - Adding callback for state: disconnected
2024-02-19 19:50:32,086 [screen.py:state_disconnected()] - ### Going to disconnected
2024-02-19 19:50:32,086 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-19 19:50:32,089 [screen.py:show_panel()] - Reinitializing panel
2024-02-19 19:50:32,124 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-02-19 19:50:35,287 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-19 19:50:35,295 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2024-02-19 19:50:35,296 [printer.py:configure_cameras()] - Cameras: []
2024-02-19 19:50:35,297 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'update_manager', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-310-g67c98f6', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-02-19 19:50:35,306 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2024-02-19 19:50:35,323 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2024-02-19 19:50:35,325 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro _Probe_Variables': {'variable_probe_attached': 'False', 'variable_probe_state': 'False', 'variable_probe_lock': 'False', 'variable_probe_z_homed': 'False', 'variable_z_endstop_x': '0', 'variable_z_endstop_y': '0', 'gcode': ''}, 'gcode_macro _klicky_check_variables_version': {'gcode': '\n{% set version = printer["gcode_macro _User_Variables"].version|default(0) %}\n\n{% if version != 1 %}\n{ action_raise_error("Please update your klicky variables, there are some functionality changes") }\n{% endif %}'}, 'gcode_macro _KlickyDebug': {'gcode': '\n{% set message  = params.MSG %}\n{% set debug = printer["gcode_macro _User_Variables"].debug|default(False) %}\n\n{% if debug %}\n{ action_respond_info(message) }\n{% endif %}'}, 'gcode_macro _exit_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move  = params.MOVE|default(0) %}\n{% set speed = printer["gcode_macro _User_Variables"].travel_speed %}\n\n\nM400\nSET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\nRESTORE_GCODE_STATE NAME={function} MOVE={move} MOVE_SPEED={speed}'}, 'gcode_macro _entry_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move_accel = printer["gcode_macro _User_Variables"].move_accel|default(1000) %}\n\nM400\nSAVE_GCODE_STATE NAME={function}\n\nSET_GCODE_OFFSET Z=0\n\nG90\n\nSET_VELOCITY_LIMIT ACCEL={move_accel}'}, 'gcode_macro _Homing_Variables': {'gcode': '\n{% set reset  = params.RESET|default(0) %}\n{% if reset %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }\n{% endif %}'}, 'gcode_macro Attach_Probe_Lock': {'description': 'Attaches Klicky Probe, can only be docked after unlocking', 'gcode': '\nAttach_Probe\n_Probe_Lock'}, 'gcode_macro Dock_Probe_Unlock': {'description': 'Docks Klicky Probe even if it was locked', 'gcode': '\n_Probe_Unlock\nDock_Probe'}, 'gcode_macro _Probe_Unlock': {'description': 'Unlocks Klicky Probe state', 'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to False"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }'}, 'gcode_macro _Probe_Lock': {'description': 'Locks Klicky Probe state', 'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to True"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ True }'}, 'gcode_macro _DeployKlickyDock': {'description': 'Deploys Klicky servo-controlled dock', 'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_deploy = printer["gcode_macro _User_Variables"].servo_deploy|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_DeployKlickyDock Klicky servo configuration enabled"\n{% if servo_deploy == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo deploy angle specified") }\n{% endif %}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _DeployDock"] is defined %}\n_KlickyDebug msg="_DeployKlickyDock calling _DeployDock"\n_DeployDock\n{% endif %}'}, 'gcode_macro _RetractKlickyDock': {'description': 'Retracts Klicky servo-controlled dock', 'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_retract = printer["gcode_macro _User_Variables"].servo_retract|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_RetractKlickyDock Klicky servo configuration enabled"\n{% if servo_retract == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo retract angle specified") }\n{% endif %}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _RetractDock"] is defined %}\n_KlickyDebug msg="_RetractKlickyDock calling _RetractDock"\n_RetractDock\n{% endif %}'}, 'gcode_macro Attach_Probe': {'description': 'Attaches Klicky Probe', 'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set attachmove2_x = printer["gcode_macro _User_Variables"].attachmove2_x|default(0) %}\n{% set attachmove2_y = printer["gcode_macro _User_Variables"].attachmove2_y|default(0) %}\n{% set attachmove2_z = printer["gcode_macro _User_Variables"].attachmove2_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n_entry_point function=Attach_Probe\n\n{% if bypass_probe_docking == False %}\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n_KlickyDebug msg="Attach_Probe Axis homed"\n\n\n{% elif not probe_attached and not probe_lock %}\n_KlickyDebug msg="Attach_Probe going to attach probe"\n{% if verbose %}\n{ action_respond_info("Attaching Probe") }\n{% endif %}\n_KLICKY_STATUS_BUSY\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% if not enable_z_hop %}\n_KlickyDebug msg="Attach_Probe z_hop disabled"\n{% set safe_z = 0 %}\n{% endif %}\n{% endif %}\n\n\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero, duplicate?") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Umbilical_Path\n\n_entry_point function=Attach_Probe_intern\n\n\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n_DeployKlickyDock\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}"\nG0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}\n\n_RetractKlickyDock\n\n{% if ((printer.gcode_move.gcode_position.z < safe_z) or (docklocation_z != -128 and docklocation_z < safe_z ))%}\n_KlickyDebug msg="Attach_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\n_CheckProbe action=attach\n\n_exit_point function=Attach_Probe_intern move={goback}\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe locked not attaching probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already attached!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe already attached, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Attach_Probe\n{% else %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}'}, 'gcode_macro Dock_Probe': {'description': 'Docks Klicky Probe', 'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n{% if bypass_probe_docking == True %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}\n\n{% if bypass_probe_docking != True %}\n_entry_point function=Dock_Probe\n\n\n{% if probe_attached and not probe_lock %}\n_KLICKY_STATUS_BUSY\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Dock_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n_Umbilical_Path\n\n\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n\n_DeployKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\n\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}"\nG0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}\n{% endif %}\n\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}\n\n\n_RetractKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving away from the dock to G0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}\n\n\n{% if (printer.gcode_move.gcode_position.z < safe_z) %}\n_KlickyDebug msg="Dock_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\nG4 P1000\n_CheckProbe action=dock\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe locked not docking probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already docked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe already docked, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Dock_Probe move={goback}\n{% else %}\n_KlickyDebug msg="Dock_Probe probe docking bypassed, doing nothing"\n{% endif %}'}, 'gcode_macro PROBE_CALIBRATE': {'rename_existing': '_PROBE_CALIBRATE', 'description': 'Calibrate the probes z_offset with klicky automount', 'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_calibrate Axis homed"\n_KlickyDebug msg="probe_calibrate Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_CALIBRATE with the probe above the BED, check klicky_variables bed size!") }\n{% endif %}\n\n{% if bypass_probe_docking == False %}\n_CheckProbe action=query\nG90\nAttach_Probe back=1\n_KLICKY_STATUS_CALIBRATING_Z\n\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nM118 moving the toolhead 20 mm from the bed\n_KlickyDebug msg="probe_calibrate Moving Z up by 20mm"\nTESTZ Z=20\nM118 remove manually the probe and continue calibration\n_KLICKY_STATUS_READY\n{% else %}\n_KLICKY_STATUS_CALIBRATING_Z\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n_KLICKY_STATUS_READY\n{% endif %}'}, 'gcode_macro PROBE_ACCURACY': {'rename_existing': '_PROBE_ACCURACY', 'description': 'Probe Z-height accuracy at current XY position with klicky automount', 'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_accuracy Axis homed"\n_KlickyDebug msg="probe_accuracy Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n_entry_point function=PROBE_ACCURACY\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_ACCURACY with the probe above the BED, check klicky_variables bed size!") }\n{% endif%}\n\n_CheckProbe action=query\nAttach_Probe back=1\n\n_KlickyDebug msg="probe_accuracy calling klipper probe accuracy"\n_PROBE_ACCURACY {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nDock_Probe back=1\n\n_exit_point function=PROBE_ACCURACY move=1'}, 'force_move': {'enable_force_move': 'True'}, 'homing_override': {'axes': 'xyz', 'gcode': '\n\n_User_Variables\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n{% set kinematic_z = 0 %}\n{% set dock_on_zhome = printer["gcode_macro _User_Variables"].dock_on_zhome|default(True) %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set home_backoff_x = printer["gcode_macro _User_Variables"].home_backoff_x|default(0) %}\n{% set home_backoff_y = printer["gcode_macro _User_Variables"].home_backoff_y|default(0) %}\n{% set override_homing = printer["gcode_macro _User_Variables"].override_homing|default(\'\') %}\n\n\n_klicky_check_variables_version\n\n_CheckProbe action=query\n\n\n{% set home_x, home_y, home_z, leave_probe_attached = False, False, False, False %}\n\n{% if \'PROBE_LOCK\' in params%}\n{% if verbose %}\n{ action_respond_info("PROBE_LOCK = True") }\n{% endif %}\n{% set leave_probe_attached = True %}\n{% endif %}\n\n\n{% if not \'X\' in params\nand not \'Y\' in params\nand not \'Z\' in params %}\n\n{% set home_x, home_y, home_z = True, True, True %}\n_KlickyDebug msg="homing_override goint to home all axes"\n\n{% else %}\n{% if \'X\' in params %}\n{% set home_x = True %}\n_KlickyDebug msg="homing_override goint to home X"\n\n{% endif %}\n\n{% if \'Y\' in params %}\n{% set home_y = True %}\n_KlickyDebug msg="homing_override goint to home Y"\n{% endif %}\n\n{% if \'Z\' in params %}\n{% set home_z = True %}\n_KlickyDebug msg="homing_override goint to home Z"\n{% endif %}\n\n{% if \'X\' in params\nand \'Y\' in params\nand \'Z\' in params %}\n\n\n_Homing_Variables reset=1\n_KlickyDebug msg="homing_override goint to home all axes"\n{% endif %}\n\n{% endif %}\n\n_entry_point function=homing_override\n_KLICKY_STATUS_HOMING\n\n\n{% if \'z\' not in printer.toolhead.homed_axes %}\n{% if enable_z_hop == False %}\n_KlickyDebug msg="homing_override z_hop disabled"\n\n{% set kinematic_z = safe_z %}\n{% set safe_z = safe_z %}\n{% endif %}\n{% endif %}\n\n\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes and \'z\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("No axis homed") }\n{% endif %}\n_KlickyDebug msg="homing_override no axis homed, setting position as X=Y=0 Z={kinematic_z}"\nSET_KINEMATIC_POSITION X=0 Y=0 Z={kinematic_z}\nM400\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% if home_z != True %}\n_KlickyDebug msg="homing_override clearing axis homed state if not already homing Z"\nM84\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("X or Y not homed, forcing full G28") }\n{% endif %}\n{% set home_x, home_y, home_z = True, True, True %}\n{% endif %}\n{% endif %}\n\n\n{% if ((attachmove_y == 0 and override_homing == \'\' ) or (override_homing == \'Y\'))%}\n\n{% if home_y %}\n{% if override_homing == \'Y\' %}\n_KlickyDebug msg="homing_override Y homing first override, due to override_homing = Y"\n{% else %}\n_KlickyDebug msg="homing_override Y homing first override, due to attachmove_y = 0"\n{% endif %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y G28 Y0"\nG28 Y0\n\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop-home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n{% set home_y = False %}\n{% endif %}\n\n\n\n{% if home_x %}\n{% if verbose %}\n{ action_respond_info("Homing X") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in X homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_X"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_X external script to handle the X homing"\n_HOME_X\n{% else %}\n_KlickyDebug msg="homing_override Homing X, G28 X0"\nG28 X0\n\n{% if home_backoff_x != 0 %}\n{% if (printer.configfile.settings.stepper_x.position_endstop > (printer.configfile.settings.stepper_x.position_min|default(0) + printer.configfile.settings.stepper_x.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n\n{% if home_y %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y, G28 Y0"\nG28 Y0\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if verbose %}\n{ action_respond_info("Homing Z") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe configured as a virtual Z endstop attaching probe"\nAttach_Probe\n\n{% if leave_probe_attached %}\n_Probe_Lock\n{% endif %}\n{% elif dock_on_zhome == True %}\nDock_Probe\n{% endif %}\n\n_Home_Z_\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe no longer required, docking probe"\nDock_Probe\n{% elif dock_on_zhome == False %}\nDock_Probe\n{% endif %}\n{% endif %}\n_CheckProbe action=query\n\n\n_Park_Toolhead\n\n_exit_point function=homing_override\n_KLICKY_STATUS_READY'}, 'gcode_macro _Umbilical_Path': {'gcode': '\n{% set umbilical = printer["gcode_macro _User_Variables"].umbilical %}\n{% set umbilical_x = printer["gcode_macro _User_Variables"].umbilical_x %}\n{% set umbilical_y = printer["gcode_macro _User_Variables"].umbilical_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n\n{% if umbilical %}\n\n_entry_point function=Umbilical_Path\n\n_KlickyDebug msg="_Umbilical_Path moving to G0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}"\nG0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}\n\n_exit_point function=Umbilical_Path\n{% endif %}'}, 'gcode_macro _Home_Z_': {'gcode': '\n{% set z_endstop_x = printer["gcode_macro _Probe_Variables"].z_endstop_x %}\n{% set z_endstop_y = printer["gcode_macro _Probe_Variables"].z_endstop_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}    {% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Home_Z\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n{% else %}\n_KlickyDebug msg="_Home_Z_ XY Axis homed"\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="_Home_Z_ Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n\n\n_KlickyDebug msg="_Home_Z_ moving to Z endstop position G0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}"\nG0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}\n_KlickyDebug msg="_Home_Z_ Homing Z G28 Z"\nG28 Z0\n_KlickyDebug msg="_Home_Z_ toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_exit_point function=Home_Z'}, 'gcode_macro _CheckProbe': {'variable_probe_state': '0', 'gcode': '\nQuery_Probe\n_SetProbeState action={ params.ACTION }'}, 'gcode_macro _SetProbeState': {'gcode': '\n{% set query_probe_triggered = printer.probe.last_query %}\n{% set action  = params.ACTION|default(\'\') %}\n\n\n{% if query_probe_triggered %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ False }\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ True }\n{% endif %}\n\n{% if action == \'query\' %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_state VALUE={ query_probe_triggered }\n{% endif %}\n\n\n\n\n{% if not query_probe_triggered and action == \'dock\' %}\n{ action_raise_error("Probe dock failed!") }\n{% endif %}\n\n\n{% if query_probe_triggered and action == \'attach\' %}\n{ action_raise_error("Probe attach failed!") }\n{% endif %}'}, 'gcode_macro _Park_Toolhead': {'gcode': '\n{% set park_toolhead = printer["gcode_macro _User_Variables"].park_toolhead %}\n{% set parkposition_x = printer["gcode_macro _User_Variables"].parkposition_x %}\n{% set parkposition_y = printer["gcode_macro _User_Variables"].parkposition_y %}\n{% set parkposition_z = printer["gcode_macro _User_Variables"].parkposition_z %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Park_Toolhead\n\n{% if park_toolhead and \'xyz\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Parking Toolhead") }\n{% endif %}\n{% if parkposition_z == -128 %}\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}\n\n{% else %}\n\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}\n\n{% endif %}\n\n{% endif %}\n_exit_point function=Park_Toolhead'}, 'gcode_macro _klicky_status_ready': {'gcode': '\n{% if printer[\'gcode_macro status_ready\'] is defined %}\n_KlickyDebug msg="_klicky_status_ready activating the LED STATUS_READY"\nSTATUS_READY\n{% endif %}'}, 'gcode_macro _klicky_status_busy': {'gcode': '\n{% if printer[\'gcode_macro status_busy\'] is defined %}\n_KlickyDebug msg="_klicky_status_busy activating the LED STATUS_BUSY"\nSTATUS_BUSY\n{% endif %}'}, 'gcode_macro _klicky_status_leveling': {'gcode': '\n{% if printer[\'gcode_macro status_leveling\'] is defined %}\n_KlickyDebug msg="_klicky_status_leveling activating the LED STATUS_LEVELING"\nSTATUS_LEVELING\n{% endif %}'}, 'gcode_macro _klicky_status_homing': {'gcode': '\n{% if printer[\'gcode_macro status_homing\'] is defined %}\n_KlickyDebug msg="_klicky_status_homing activating the LED STATUS_HOMING"\nSTATUS_HOMING\n{% endif %}'}, 'gcode_macro _klicky_status_cleaning': {'gcode': '\n{% if printer[\'gcode_macro status_cleaning\'] is defined %}\n_KlickyDebug msg="_klicky_status_cleaning activating the LED STATUS_CLEANING"\nSTATUS_CLEANING\n{% endif %}'}, 'gcode_macro _klicky_status_meshing': {'gcode': '\n{% if printer[\'gcode_macro status_meshing\'] is defined %}\n_KlickyDebug msg="_klicky_status_meshing activating the LED STATUS_MESHING"\nSTATUS_MESHING\n{% endif %}'}, 'gcode_macro _klicky_status_calibrating_z': {'gcode': '\n{% if printer[\'gcode_macro status_calibrating_z\'] is defined %}\n_KlickyDebug msg="_klicky_status_calibrating_z activating the LED STATUS_CALIBRATING_Z"\nSTATUS_CALIBRATING_Z\n{% endif %}'}, 'z_calibration': {'nozzle_xy_position': '172, 301', 'switch_xy_position': '171.5, 282', 'bed_xy_position': '150, 150', 'switch_offset': '0.09', 'offset_margins': '-1.0,1.0', 'speed': '50', 'probing_first_fast': 'false', 'start_gcode': 'Attach_Probe', 'end_gcode': 'Dock_Probe'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_28003C001150535556323420-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '^PG6', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '25', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'PG9', 'position_min': '0', 'position_endstop': '300', 'position_max': '303.5', 'homing_speed': '25', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': '!PG3', 'enable_pin': '!PG5', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'PG10', 'position_max': '290', 'position_min': '-4.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3', 'position_endstop': '-0.711'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA0', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': '!PF10', 'enable_pin': '!PG2', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PC13', 'dir_pin': 'PF0', 'enable_pin': '!PF1', 'rotation_distance': '21.9459674016', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.75', 'heater_pin': 'PA1', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF4', 'min_temp': '10', 'max_temp': '270', 'max_power': '1.0', 'min_extrude_temp': '170', 'pressure_advance': '0.05', 'pressure_advance_smooth_time': '0.040', 'control': 'pid', 'pid_kp': '26.572', 'pid_ki': '2.036', 'pid_kd': '86.691'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.5', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PA2', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF3', 'max_power': '1', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '55.196', 'pid_ki': '2.091', 'pid_kd': '364.295'}, 'probe': {'pin': 'PG15', 'x_offset': '0', 'y_offset': '25.0', 'z_offset': '0', 'speed': '10.0', 'samples': '5', 'samples_result': 'median', 'sample_retract_dist': '3.0', 'samples_tolerance': '0.006', 'samples_tolerance_retries': '6'}, 'fan': {'pin': 'PA8', 'kick_start_time': '0.5', 'off_below': '0.10'}, 'heater_fan hotend_fan': {'pin': 'PE5', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'controller_fan controller_fan': {'pin': 'PD12', 'kick_start_time': '0.5', 'heater': 'heater_bed'}, 'heater_fan exhaust_fan': {'pin': 'PD13', 'max_power': '1.0', 'shutdown_speed': '0.0', 'kick_start_time': '5.0', 'heater': 'heater_bed', 'heater_temp': '60', 'fan_speed': '1.0'}, 'output_pin caselight': {'pin': 'PD15', 'pwm': 'true', 'shutdown_value': '0', 'value': '1', 'cycle_time': '0.01'}, 'neopixel headlight': {'pin': 'PB0', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '0.0', 'initial_green': '0.2157', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'temperature_sensor chamber_temp': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF5', 'min_temp': '0', 'max_temp': '100', 'gcode_id': 'chamber_th'}, 'idle_timeout': {'timeout': '1800'}, 'z_tilt': {'z_positions': '\n-50, 18\n150, 348\n350, 18', 'points': '\n30, 5\n150, 245\n270, 5', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'gcode_macro _User_Variables': {'variable_verbose': 'True', 'variable_debug': 'False', 'variable_travel_speed': '200', 'variable_move_accel': '1000', 'variable_dock_speed': '50', 'variable_release_speed': '75', 'variable_z_drop_speed': '20', 'variable_safe_z': '25', 'variable_enable_z_hop': 'True', 'variable_max_bed_y': '300', 'variable_max_bed_x': '300', 'variable_z_endstop_x': '172', 'variable_z_endstop_y': '301', 'variable_docklocation_x': '42', 'variable_docklocation_y': '300', 'variable_docklocation_z': '-128', 'variable_enable_dock_servo': 'False', 'variable_servo_name': "'NAME'", 'variable_servo_deploy': '10', 'variable_servo_retract': '11', 'variable_servo_delay': '250', 'variable_dockmove_x': '40', 'variable_dockmove_y': '0', 'variable_dockmove_z': '0', 'variable_attachmove_x': '0', 'variable_attachmove_y': '30', 'variable_attachmove_z': '0', 'variable_umbilical': 'False', 'variable_umbilical_x': '15', 'variable_umbilical_y': '15', 'variable_park_toolhead': 'False', 'variable_parkposition_x': '125', 'variable_parkposition_y': '125', 'variable_parkposition_z': '30', 'variable_version': '1', 'variable_attachmove2_x': '0', 'variable_attachmove2_y': '0', 'variable_attachmove2_z': '0', 'variable_home_backoff_x': '10', 'variable_home_backoff_y': '10', 'variable_override_homing': "''", 'variable_dock_on_zhome': 'True', 'gcode': '\n{% set Mx = printer[\'configfile\'].config["stepper_x"]["position_max"]|float %}\n{% set My = printer[\'configfile\'].config["stepper_y"]["position_max"]|float %}\n{% set Ox = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set Oy = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set Oz = printer[\'configfile\'].config["probe"]["z_offset"]|float %}\n\n\n{% if z_endstop_x != 0 or z_endstop_y != 0 %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ z_endstop_x }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ z_endstop_y }\n\n\n{% else %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ (Mx * 0.5) - Ox }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ (My * 0.5) - Oy }\n{% endif %}'}, 'gcode_macro PRINT_START': {'gcode': '\nM117 Homing...\nG28\nATTACH_PROBE\nZ_TILT_ADJUST\nDOCK_PROBE\nG28\n\n\n\n\n\n\n\nG0 X150 Y150 Z30 F3600'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_28003C001150535556323420-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro _probe_variables': {'gcode': '', 'description': 'G-Code macro', 'variable_probe_attached': 'False', 'variable_probe_state': 'False', 'variable_probe_lock': 'False', 'variable_probe_z_homed': 'False', 'variable_z_endstop_x': '0', 'variable_z_endstop_y': '0'}, 'gcode_macro _klicky_check_variables_version': {'gcode': '\n{% set version = printer["gcode_macro _User_Variables"].version|default(0) %}\n\n{% if version != 1 %}\n{ action_raise_error("Please update your klicky variables, there are some functionality changes") }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klickydebug': {'gcode': '\n{% set message  = params.MSG %}\n{% set debug = printer["gcode_macro _User_Variables"].debug|default(False) %}\n\n{% if debug %}\n{ action_respond_info(message) }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _exit_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move  = params.MOVE|default(0) %}\n{% set speed = printer["gcode_macro _User_Variables"].travel_speed %}\n\n\nM400\nSET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\nRESTORE_GCODE_STATE NAME={function} MOVE={move} MOVE_SPEED={speed}', 'description': 'G-Code macro'}, 'gcode_macro _entry_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move_accel = printer["gcode_macro _User_Variables"].move_accel|default(1000) %}\n\nM400\nSAVE_GCODE_STATE NAME={function}\n\nSET_GCODE_OFFSET Z=0\n\nG90\n\nSET_VELOCITY_LIMIT ACCEL={move_accel}', 'description': 'G-Code macro'}, 'gcode_macro _homing_variables': {'gcode': '\n{% set reset  = params.RESET|default(0) %}\n{% if reset %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro attach_probe_lock': {'gcode': '\nAttach_Probe\n_Probe_Lock', 'description': 'Attaches Klicky Probe, can only be docked after unlocking'}, 'gcode_macro dock_probe_unlock': {'gcode': '\n_Probe_Unlock\nDock_Probe', 'description': 'Docks Klicky Probe even if it was locked'}, 'gcode_macro _probe_unlock': {'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to False"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }', 'description': 'Unlocks Klicky Probe state'}, 'gcode_macro _probe_lock': {'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to True"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ True }', 'description': 'Locks Klicky Probe state'}, 'gcode_macro _deployklickydock': {'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_deploy = printer["gcode_macro _User_Variables"].servo_deploy|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_DeployKlickyDock Klicky servo configuration enabled"\n{% if servo_deploy == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo deploy angle specified") }\n{% endif %}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _DeployDock"] is defined %}\n_KlickyDebug msg="_DeployKlickyDock calling _DeployDock"\n_DeployDock\n{% endif %}', 'description': 'Deploys Klicky servo-controlled dock'}, 'gcode_macro _retractklickydock': {'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_retract = printer["gcode_macro _User_Variables"].servo_retract|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_RetractKlickyDock Klicky servo configuration enabled"\n{% if servo_retract == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo retract angle specified") }\n{% endif %}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _RetractDock"] is defined %}\n_KlickyDebug msg="_RetractKlickyDock calling _RetractDock"\n_RetractDock\n{% endif %}', 'description': 'Retracts Klicky servo-controlled dock'}, 'gcode_macro attach_probe': {'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set attachmove2_x = printer["gcode_macro _User_Variables"].attachmove2_x|default(0) %}\n{% set attachmove2_y = printer["gcode_macro _User_Variables"].attachmove2_y|default(0) %}\n{% set attachmove2_z = printer["gcode_macro _User_Variables"].attachmove2_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n_entry_point function=Attach_Probe\n\n{% if bypass_probe_docking == False %}\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n_KlickyDebug msg="Attach_Probe Axis homed"\n\n\n{% elif not probe_attached and not probe_lock %}\n_KlickyDebug msg="Attach_Probe going to attach probe"\n{% if verbose %}\n{ action_respond_info("Attaching Probe") }\n{% endif %}\n_KLICKY_STATUS_BUSY\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% if not enable_z_hop %}\n_KlickyDebug msg="Attach_Probe z_hop disabled"\n{% set safe_z = 0 %}\n{% endif %}\n{% endif %}\n\n\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero, duplicate?") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Umbilical_Path\n\n_entry_point function=Attach_Probe_intern\n\n\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n_DeployKlickyDock\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}"\nG0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}\n\n_RetractKlickyDock\n\n{% if ((printer.gcode_move.gcode_position.z < safe_z) or (docklocation_z != -128 and docklocation_z < safe_z ))%}\n_KlickyDebug msg="Attach_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\n_CheckProbe action=attach\n\n_exit_point function=Attach_Probe_intern move={goback}\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe locked not attaching probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already attached!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe already attached, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Attach_Probe\n{% else %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}', 'description': 'Attaches Klicky Probe'}, 'gcode_macro dock_probe': {'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n{% if bypass_probe_docking == True %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}\n\n{% if bypass_probe_docking != True %}\n_entry_point function=Dock_Probe\n\n\n{% if probe_attached and not probe_lock %}\n_KLICKY_STATUS_BUSY\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Dock_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n_Umbilical_Path\n\n\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n\n_DeployKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\n\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}"\nG0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}\n{% endif %}\n\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}\n\n\n_RetractKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving away from the dock to G0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}\n\n\n{% if (printer.gcode_move.gcode_position.z < safe_z) %}\n_KlickyDebug msg="Dock_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\nG4 P1000\n_CheckProbe action=dock\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe locked not docking probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already docked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe already docked, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Dock_Probe move={goback}\n{% else %}\n_KlickyDebug msg="Dock_Probe probe docking bypassed, doing nothing"\n{% endif %}', 'description': 'Docks Klicky Probe'}, 'gcode_macro probe_calibrate': {'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_calibrate Axis homed"\n_KlickyDebug msg="probe_calibrate Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_CALIBRATE with the probe above the BED, check klicky_variables bed size!") }\n{% endif %}\n\n{% if bypass_probe_docking == False %}\n_CheckProbe action=query\nG90\nAttach_Probe back=1\n_KLICKY_STATUS_CALIBRATING_Z\n\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nM118 moving the toolhead 20 mm from the bed\n_KlickyDebug msg="probe_calibrate Moving Z up by 20mm"\nTESTZ Z=20\nM118 remove manually the probe and continue calibration\n_KLICKY_STATUS_READY\n{% else %}\n_KLICKY_STATUS_CALIBRATING_Z\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n_KLICKY_STATUS_READY\n{% endif %}', 'rename_existing': '_PROBE_CALIBRATE', 'description': 'Calibrate the probes z_offset with klicky automount'}, 'gcode_macro probe_accuracy': {'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_accuracy Axis homed"\n_KlickyDebug msg="probe_accuracy Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n_entry_point function=PROBE_ACCURACY\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_ACCURACY with the probe above the BED, check klicky_variables bed size!") }\n{% endif%}\n\n_CheckProbe action=query\nAttach_Probe back=1\n\n_KlickyDebug msg="probe_accuracy calling klipper probe accuracy"\n_PROBE_ACCURACY {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nDock_Probe back=1\n\n_exit_point function=PROBE_ACCURACY move=1', 'rename_existing': '_PROBE_ACCURACY', 'description': 'Probe Z-height accuracy at current XY position with klicky automount'}, 'force_move': {'enable_force_move': True}, 'homing_override': {'axes': 'xyz', 'gcode': '\n\n_User_Variables\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n{% set kinematic_z = 0 %}\n{% set dock_on_zhome = printer["gcode_macro _User_Variables"].dock_on_zhome|default(True) %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set home_backoff_x = printer["gcode_macro _User_Variables"].home_backoff_x|default(0) %}\n{% set home_backoff_y = printer["gcode_macro _User_Variables"].home_backoff_y|default(0) %}\n{% set override_homing = printer["gcode_macro _User_Variables"].override_homing|default(\'\') %}\n\n\n_klicky_check_variables_version\n\n_CheckProbe action=query\n\n\n{% set home_x, home_y, home_z, leave_probe_attached = False, False, False, False %}\n\n{% if \'PROBE_LOCK\' in params%}\n{% if verbose %}\n{ action_respond_info("PROBE_LOCK = True") }\n{% endif %}\n{% set leave_probe_attached = True %}\n{% endif %}\n\n\n{% if not \'X\' in params\nand not \'Y\' in params\nand not \'Z\' in params %}\n\n{% set home_x, home_y, home_z = True, True, True %}\n_KlickyDebug msg="homing_override goint to home all axes"\n\n{% else %}\n{% if \'X\' in params %}\n{% set home_x = True %}\n_KlickyDebug msg="homing_override goint to home X"\n\n{% endif %}\n\n{% if \'Y\' in params %}\n{% set home_y = True %}\n_KlickyDebug msg="homing_override goint to home Y"\n{% endif %}\n\n{% if \'Z\' in params %}\n{% set home_z = True %}\n_KlickyDebug msg="homing_override goint to home Z"\n{% endif %}\n\n{% if \'X\' in params\nand \'Y\' in params\nand \'Z\' in params %}\n\n\n_Homing_Variables reset=1\n_KlickyDebug msg="homing_override goint to home all axes"\n{% endif %}\n\n{% endif %}\n\n_entry_point function=homing_override\n_KLICKY_STATUS_HOMING\n\n\n{% if \'z\' not in printer.toolhead.homed_axes %}\n{% if enable_z_hop == False %}\n_KlickyDebug msg="homing_override z_hop disabled"\n\n{% set kinematic_z = safe_z %}\n{% set safe_z = safe_z %}\n{% endif %}\n{% endif %}\n\n\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes and \'z\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("No axis homed") }\n{% endif %}\n_KlickyDebug msg="homing_override no axis homed, setting position as X=Y=0 Z={kinematic_z}"\nSET_KINEMATIC_POSITION X=0 Y=0 Z={kinematic_z}\nM400\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% if home_z != True %}\n_KlickyDebug msg="homing_override clearing axis homed state if not already homing Z"\nM84\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("X or Y not homed, forcing full G28") }\n{% endif %}\n{% set home_x, home_y, home_z = True, True, True %}\n{% endif %}\n{% endif %}\n\n\n{% if ((attachmove_y == 0 and override_homing == \'\' ) or (override_homing == \'Y\'))%}\n\n{% if home_y %}\n{% if override_homing == \'Y\' %}\n_KlickyDebug msg="homing_override Y homing first override, due to override_homing = Y"\n{% else %}\n_KlickyDebug msg="homing_override Y homing first override, due to attachmove_y = 0"\n{% endif %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y G28 Y0"\nG28 Y0\n\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop-home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n{% set home_y = False %}\n{% endif %}\n\n\n\n{% if home_x %}\n{% if verbose %}\n{ action_respond_info("Homing X") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in X homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_X"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_X external script to handle the X homing"\n_HOME_X\n{% else %}\n_KlickyDebug msg="homing_override Homing X, G28 X0"\nG28 X0\n\n{% if home_backoff_x != 0 %}\n{% if (printer.configfile.settings.stepper_x.position_endstop > (printer.configfile.settings.stepper_x.position_min|default(0) + printer.configfile.settings.stepper_x.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n\n{% if home_y %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y, G28 Y0"\nG28 Y0\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if verbose %}\n{ action_respond_info("Homing Z") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe configured as a virtual Z endstop attaching probe"\nAttach_Probe\n\n{% if leave_probe_attached %}\n_Probe_Lock\n{% endif %}\n{% elif dock_on_zhome == True %}\nDock_Probe\n{% endif %}\n\n_Home_Z_\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe no longer required, docking probe"\nDock_Probe\n{% elif dock_on_zhome == False %}\nDock_Probe\n{% endif %}\n{% endif %}\n_CheckProbe action=query\n\n\n_Park_Toolhead\n\n_exit_point function=homing_override\n_KLICKY_STATUS_READY'}, 'gcode_macro _umbilical_path': {'gcode': '\n{% set umbilical = printer["gcode_macro _User_Variables"].umbilical %}\n{% set umbilical_x = printer["gcode_macro _User_Variables"].umbilical_x %}\n{% set umbilical_y = printer["gcode_macro _User_Variables"].umbilical_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n\n{% if umbilical %}\n\n_entry_point function=Umbilical_Path\n\n_KlickyDebug msg="_Umbilical_Path moving to G0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}"\nG0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}\n\n_exit_point function=Umbilical_Path\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _home_z_': {'gcode': '\n{% set z_endstop_x = printer["gcode_macro _Probe_Variables"].z_endstop_x %}\n{% set z_endstop_y = printer["gcode_macro _Probe_Variables"].z_endstop_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}    {% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Home_Z\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n{% else %}\n_KlickyDebug msg="_Home_Z_ XY Axis homed"\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="_Home_Z_ Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n\n\n_KlickyDebug msg="_Home_Z_ moving to Z endstop position G0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}"\nG0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}\n_KlickyDebug msg="_Home_Z_ Homing Z G28 Z"\nG28 Z0\n_KlickyDebug msg="_Home_Z_ toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_exit_point function=Home_Z', 'description': 'G-Code macro'}, 'gcode_macro _checkprobe': {'gcode': '\nQuery_Probe\n_SetProbeState action={ params.ACTION }', 'description': 'G-Code macro', 'variable_probe_state': '0'}, 'gcode_macro _setprobestate': {'gcode': '\n{% set query_probe_triggered = printer.probe.last_query %}\n{% set action  = params.ACTION|default(\'\') %}\n\n\n{% if query_probe_triggered %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ False }\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ True }\n{% endif %}\n\n{% if action == \'query\' %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_state VALUE={ query_probe_triggered }\n{% endif %}\n\n\n\n\n{% if not query_probe_triggered and action == \'dock\' %}\n{ action_raise_error("Probe dock failed!") }\n{% endif %}\n\n\n{% if query_probe_triggered and action == \'attach\' %}\n{ action_raise_error("Probe attach failed!") }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _park_toolhead': {'gcode': '\n{% set park_toolhead = printer["gcode_macro _User_Variables"].park_toolhead %}\n{% set parkposition_x = printer["gcode_macro _User_Variables"].parkposition_x %}\n{% set parkposition_y = printer["gcode_macro _User_Variables"].parkposition_y %}\n{% set parkposition_z = printer["gcode_macro _User_Variables"].parkposition_z %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Park_Toolhead\n\n{% if park_toolhead and \'xyz\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Parking Toolhead") }\n{% endif %}\n{% if parkposition_z == -128 %}\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}\n\n{% else %}\n\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}\n\n{% endif %}\n\n{% endif %}\n_exit_point function=Park_Toolhead', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_ready': {'gcode': '\n{% if printer[\'gcode_macro status_ready\'] is defined %}\n_KlickyDebug msg="_klicky_status_ready activating the LED STATUS_READY"\nSTATUS_READY\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_busy': {'gcode': '\n{% if printer[\'gcode_macro status_busy\'] is defined %}\n_KlickyDebug msg="_klicky_status_busy activating the LED STATUS_BUSY"\nSTATUS_BUSY\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_leveling': {'gcode': '\n{% if printer[\'gcode_macro status_leveling\'] is defined %}\n_KlickyDebug msg="_klicky_status_leveling activating the LED STATUS_LEVELING"\nSTATUS_LEVELING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_homing': {'gcode': '\n{% if printer[\'gcode_macro status_homing\'] is defined %}\n_KlickyDebug msg="_klicky_status_homing activating the LED STATUS_HOMING"\nSTATUS_HOMING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_cleaning': {'gcode': '\n{% if printer[\'gcode_macro status_cleaning\'] is defined %}\n_KlickyDebug msg="_klicky_status_cleaning activating the LED STATUS_CLEANING"\nSTATUS_CLEANING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_meshing': {'gcode': '\n{% if printer[\'gcode_macro status_meshing\'] is defined %}\n_KlickyDebug msg="_klicky_status_meshing activating the LED STATUS_MESHING"\nSTATUS_MESHING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_calibrating_z': {'gcode': '\n{% if printer[\'gcode_macro status_calibrating_z\'] is defined %}\n_KlickyDebug msg="_klicky_status_calibrating_z activating the LED STATUS_CALIBRATING_Z"\nSTATUS_CALIBRATING_Z\n{% endif %}', 'description': 'G-Code macro'}, 'z_calibration': {'switch_offset': 0.09, 'offset_margins': '-1.0,1.0', 'speed': 50.0, 'samples_result': 'none', 'probing_first_fast': False, 'nozzle_xy_position': '172, 301', 'switch_xy_position': '171.5, 282', 'bed_xy_position': '150, 150', 'start_gcode': 'Attach_Probe', 'before_switch_gcode': '', 'end_gcode': 'Dock_Probe'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': '^PG6', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'PG9', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 303.5, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PF11', 'dir_pin': '!PG3', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG5', 'endstop_pin': 'PG10', 'position_endstop': -0.711, 'position_min': -4.5, 'position_max': 290.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA0'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PF9', 'dir_pin': '!PF10', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG2'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF4', 'min_temp': 10.0, 'max_temp': 270.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 26.572, 'pid_ki': 2.036, 'pid_kd': 86.691, 'heater_pin': 'PA1', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PC13', 'pressure_advance': 0.05, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'PF0', 'rotation_distance': 21.9459674016, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 55.196, 'pid_ki': 2.091, 'pid_kd': 364.295, 'heater_pin': 'PA2', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'probe': {'z_offset': 0.0, 'deactivate_on_each_sample': True, 'activate_gcode': '', 'deactivate_gcode': '', 'pin': 'PG15', 'speed': 10.0, 'lift_speed': 10.0, 'x_offset': 0.0, 'y_offset': 25.0, 'samples': 5, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.006, 'samples_tolerance_retries': 6}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE5', 'fan_speed': 1.0}, 'controller_fan controller_fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD12', 'fan_speed': 1.0, 'idle_speed': 1.0, 'idle_timeout': 30, 'heater': ['heater_bed']}, 'heater_fan exhaust_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 5.0, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13', 'fan_speed': 1.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PD15', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 1.0, 'maximum_mcu_duration': 0.0, 'value': 1.0, 'shutdown_value': 0.0}, 'neopixel headlight': {'pin': 'PB0', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 0.0, 'initial_green': 0.2157, 'initial_blue': 1.0, 'initial_white': 0.0}, 'temperature_sensor chamber_temp': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF5', 'min_temp': 0.0, 'max_temp': 100.0, 'gcode_id': 'chamber_th'}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [150.0, 348.0], [350.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 5.0], [150.0, 245.0], [270.0, 5.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'gcode_macro _user_variables': {'gcode': '\n{% set Mx = printer[\'configfile\'].config["stepper_x"]["position_max"]|float %}\n{% set My = printer[\'configfile\'].config["stepper_y"]["position_max"]|float %}\n{% set Ox = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set Oy = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set Oz = printer[\'configfile\'].config["probe"]["z_offset"]|float %}\n\n\n{% if z_endstop_x != 0 or z_endstop_y != 0 %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ z_endstop_x }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ z_endstop_y }\n\n\n{% else %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ (Mx * 0.5) - Ox }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ (My * 0.5) - Oy }\n{% endif %}', 'description': 'G-Code macro', 'variable_verbose': 'True', 'variable_debug': 'False', 'variable_travel_speed': '200', 'variable_move_accel': '1000', 'variable_dock_speed': '50', 'variable_release_speed': '75', 'variable_z_drop_speed': '20', 'variable_safe_z': '25', 'variable_enable_z_hop': 'True', 'variable_max_bed_y': '300', 'variable_max_bed_x': '300', 'variable_z_endstop_x': '172', 'variable_z_endstop_y': '301', 'variable_docklocation_x': '42', 'variable_docklocation_y': '300', 'variable_docklocation_z': '-128', 'variable_enable_dock_servo': 'False', 'variable_servo_name': "'NAME'", 'variable_servo_deploy': '10', 'variable_servo_retract': '11', 'variable_servo_delay': '250', 'variable_dockmove_x': '40', 'variable_dockmove_y': '0', 'variable_dockmove_z': '0', 'variable_attachmove_x': '0', 'variable_attachmove_y': '30', 'variable_attachmove_z': '0', 'variable_umbilical': 'False', 'variable_umbilical_x': '15', 'variable_umbilical_y': '15', 'variable_park_toolhead': 'False', 'variable_parkposition_x': '125', 'variable_parkposition_y': '125', 'variable_parkposition_z': '30', 'variable_version': '1', 'variable_attachmove2_x': '0', 'variable_attachmove2_y': '0', 'variable_attachmove2_z': '0', 'variable_home_backoff_x': '10', 'variable_home_backoff_y': '10', 'variable_override_homing': "''", 'variable_dock_on_zhome': 'True'}, 'gcode_macro print_start': {'gcode': '\nM117 Homing...\nG28\nATTACH_PROBE\nZ_TILT_ADJUST\nDOCK_PROBE\nG28\n\n\n\n\n\n\n\nG0 X150 Y150 Z30 F3600', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1500.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-02-19 19:50:35,328 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-19 19:50:35,329 [printer.py:reinit()] - Klipper version: v0.12.0-103-g6ce6fbbc-dirty
2024-02-19 19:50:35,329 [printer.py:reinit()] - # Extruders: 1
2024-02-19 19:50:35,329 [printer.py:reinit()] - # Temperature devices: 2
2024-02-19 19:50:35,329 [printer.py:reinit()] - # Fans: 4
2024-02-19 19:50:35,329 [printer.py:reinit()] - # Output pins: 1
2024-02-19 19:50:35,329 [printer.py:reinit()] - # Leds: 1
2024-02-19 19:50:35,341 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2024-02-19 19:50:35,342 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-02-19 19:50:35,622 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor chamber_temp&fan&controller_fan controller_fan&heater_fan hotend_fan&heater_fan exhaust_fan&output_pin caselight&neopixel headlight
2024-02-19 19:50:35,624 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-02-19 19:50:35,624 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-02-19 19:50:35,625 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-02-19 19:50:35,625 [screen.py:init_klipper()] - Printer initialized
2024-02-19 19:50:35,625 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2024-02-19 19:50:35,626 [printer.py:change_state()] - Adding callback for state: ready
2024-02-19 19:50:35,628 [screen.py:show_panel()] - Reinitializing panel
2024-02-19 19:50:35,680 [main_menu.py:__init__()] - ### Making MainMenu
2024-02-19 19:50:35,685 [main_menu.py:add_device()] - Adding device: extruder
2024-02-19 19:50:35,690 [main_menu.py:add_device()] - Adding device: heater_bed
2024-02-19 19:50:35,694 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber_temp
2024-02-19 19:50:35,718 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-02-19 19:50:35,730 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-02-19 19:50:35,739 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'temperature_sensor chamber_temp', 'extruder']
2024-02-19 19:50:35,751 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2024-02-19 19:50:35,752 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-02-19 19:50:58,508 [screen.py:show_panel()] - Reinitializing panel
2024-02-19 19:50:58,622 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-02-19 19:50:59,240 [screen.py:_load_panel()] - Loading panel: menu
2024-02-19 19:50:59,331 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move > menu
2024-02-19 19:50:59,342 [menu.py:arrangeMenuItems()] - X > homing quad_gantry_level
2024-02-19 19:51:02,061 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G28'}
2024-02-19 19:51:43,323 [screen.py:show_popup_message()] - error: Error evaluating 'gcode_macro _SetProbeState:gcode': gcode.CommandError: Probe attach failed!
2024-02-19 19:52:05,430 [screen.py:_menu_go_back()] - #### Menu go back
2024-02-19 19:52:05,462 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-02-19 19:52:06,882 [move.py:change_distance()] - ### Distance 1
2024-02-19 19:52:08,038 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+1 F3000'}
2024-02-19 19:52:08,041 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:52:08,782 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+1 F3000'}
2024-02-19 19:52:08,785 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:52:09,286 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+1 F3000'}
2024-02-19 19:52:09,289 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:52:09,963 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+1 F3000'}
2024-02-19 19:52:09,965 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:52:10,539 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+1 F3000'}
2024-02-19 19:52:10,542 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:52:11,194 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+1 F3000'}
2024-02-19 19:52:11,197 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:52:11,878 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+1 F3000'}
2024-02-19 19:52:11,881 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:52:12,671 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+1 F3000'}
2024-02-19 19:52:12,673 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:52:13,400 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+1 F3000'}
2024-02-19 19:52:13,404 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:52:14,026 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+1 F3000'}
2024-02-19 19:52:14,028 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:52:14,770 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+1 F3000'}
2024-02-19 19:52:14,773 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:52:15,470 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+1 F3000'}
2024-02-19 19:52:15,473 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:52:16,359 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+1 F3000'}
2024-02-19 19:52:16,362 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:52:19,970 [move.py:change_distance()] - ### Distance 10
2024-02-19 19:52:20,306 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+10 F3000'}
2024-02-19 19:52:20,309 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:52:24,079 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 X+10 F3000'}
2024-02-19 19:52:24,084 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:52:25,090 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 X+10 F3000'}
2024-02-19 19:52:25,093 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:52:26,150 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 X+10 F3000'}
2024-02-19 19:52:26,154 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:52:27,447 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 X+10 F3000'}
2024-02-19 19:52:27,449 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:52:33,787 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y-10 F3000'}
2024-02-19 19:52:33,793 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:52:34,846 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 X-10 F3000'}
2024-02-19 19:52:34,851 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:52:35,519 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 X-10 F3000'}
2024-02-19 19:52:35,521 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:52:36,291 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 X-10 F3000'}
2024-02-19 19:52:36,293 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:52:37,422 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 X-10 F3000'}
2024-02-19 19:52:37,425 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:52:39,634 [move.py:change_distance()] - ### Distance 1
2024-02-19 19:52:40,138 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+1 F3000'}
2024-02-19 19:52:40,141 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:52:40,478 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+1 F3000'}
2024-02-19 19:52:40,481 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:52:40,886 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+1 F3000'}
2024-02-19 19:52:40,889 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:52:41,174 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+1 F3000'}
2024-02-19 19:52:41,176 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:52:41,582 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+1 F3000'}
2024-02-19 19:52:41,585 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:52:41,919 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+1 F3000'}
2024-02-19 19:52:41,923 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:52:42,281 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+1 F3000'}
2024-02-19 19:52:42,283 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:52:42,614 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+1 F3000'}
2024-02-19 19:52:42,616 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:52:43,270 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+1 F3000'}
2024-02-19 19:52:43,273 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:52:43,779 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+1 F3000'}
2024-02-19 19:52:43,783 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:52:44,050 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+1 F3000'}
2024-02-19 19:52:44,053 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:52:44,314 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+1 F3000'}
2024-02-19 19:52:44,316 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:52:44,842 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+1 F3000'}
2024-02-19 19:52:44,845 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:52:45,374 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+1 F3000'}
2024-02-19 19:52:45,376 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:52:45,806 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+1 F3000'}
2024-02-19 19:52:45,809 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:52:46,286 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+1 F3000'}
2024-02-19 19:52:46,288 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:52:46,742 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+1 F3000'}
2024-02-19 19:52:46,745 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:52:47,275 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+1 F3000'}
2024-02-19 19:52:47,279 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:52:47,810 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+1 F3000'}
2024-02-19 19:52:47,813 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:52:51,326 [move.py:change_distance()] - ### Distance 10
2024-02-19 19:52:51,662 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y-10 F3000'}
2024-02-19 19:52:51,665 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:52:52,990 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+10 F3000'}
2024-02-19 19:52:52,992 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:52:54,391 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y-10 F3000'}
2024-02-19 19:52:54,394 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:52:54,919 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y-10 F3000'}
2024-02-19 19:52:54,922 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:52:55,303 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y-10 F3000'}
2024-02-19 19:52:55,306 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:53:07,535 [move.py:change_distance()] - ### Distance 1
2024-02-19 19:53:09,199 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+1 F3000'}
2024-02-19 19:53:09,203 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:53:09,751 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+1 F3000'}
2024-02-19 19:53:09,753 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:53:10,519 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+1 F3000'}
2024-02-19 19:53:10,521 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:53:11,123 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+1 F3000'}
2024-02-19 19:53:11,128 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:53:11,530 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+1 F3000'}
2024-02-19 19:53:11,535 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:53:11,966 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+1 F3000'}
2024-02-19 19:53:11,971 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:53:12,326 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+1 F3000'}
2024-02-19 19:53:12,329 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:53:12,663 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+1 F3000'}
2024-02-19 19:53:12,665 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:53:13,121 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+1 F3000'}
2024-02-19 19:53:13,123 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:53:13,626 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+1 F3000'}
2024-02-19 19:53:13,631 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:53:14,062 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+1 F3000'}
2024-02-19 19:53:14,064 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:53:14,546 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+1 F3000'}
2024-02-19 19:53:14,548 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:53:15,030 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+1 F3000'}
2024-02-19 19:53:15,033 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:53:16,166 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+1 F3000'}
2024-02-19 19:53:16,170 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:53:16,622 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+1 F3000'}
2024-02-19 19:53:16,624 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:53:18,782 [move.py:change_distance()] - ### Distance 5
2024-02-19 19:53:19,219 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+5 F3000'}
2024-02-19 19:53:19,222 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:53:20,430 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+5 F3000'}
2024-02-19 19:53:20,433 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:53:21,202 [move.py:change_distance()] - ### Distance 25
2024-02-19 19:53:24,619 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 X+25 F3000'}
2024-02-19 19:53:24,621 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:53:25,895 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 X+25 F3000'}
2024-02-19 19:53:25,898 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:53:27,555 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y-25 F3000'}
2024-02-19 19:53:27,557 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:53:28,443 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y-25 F3000'}
2024-02-19 19:53:28,447 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:53:29,547 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 X-25 F3000'}
2024-02-19 19:53:29,551 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:53:30,319 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 X-25 F3000'}
2024-02-19 19:53:30,324 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:53:31,091 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+25 F3000'}
2024-02-19 19:53:31,093 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:53:34,394 [move.py:change_distance()] - ### Distance 10
2024-02-19 19:53:34,922 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+10 F3000'}
2024-02-19 19:53:34,925 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:53:35,863 [move.py:change_distance()] - ### Distance 1
2024-02-19 19:53:42,083 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+1 F3000'}
2024-02-19 19:53:42,085 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:53:42,971 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+1 F3000'}
2024-02-19 19:53:42,973 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:53:43,570 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+1 F3000'}
2024-02-19 19:53:43,573 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:53:44,339 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+1 F3000'}
2024-02-19 19:53:44,341 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:53:45,154 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+1 F3000'}
2024-02-19 19:53:45,156 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:53:45,946 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+1 F3000'}
2024-02-19 19:53:45,949 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:53:46,714 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+1 F3000'}
2024-02-19 19:53:46,718 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:53:47,434 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+1 F3000'}
2024-02-19 19:53:47,437 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:53:48,924 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+1 F3000'}
2024-02-19 19:53:48,928 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:53:49,790 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+1 F3000'}
2024-02-19 19:53:49,793 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:53:53,435 [move.py:change_distance()] - ### Distance 5
2024-02-19 19:53:53,894 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y-5 F3000'}
2024-02-19 19:53:53,900 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:53:54,819 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y-5 F3000'}
2024-02-19 19:53:54,821 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:54:07,947 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+5 F3000'}
2024-02-19 19:54:07,950 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:54:13,798 [move.py:change_distance()] - ### Distance 10
2024-02-19 19:54:15,411 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+10 F3000'}
2024-02-19 19:54:15,413 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:54:20,182 [move.py:change_distance()] - ### Distance 1
2024-02-19 19:54:20,714 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+1 F3000'}
2024-02-19 19:54:20,717 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:54:21,534 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+1 F3000'}
2024-02-19 19:54:21,537 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:54:25,294 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+1 F3000'}
2024-02-19 19:54:25,296 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:54:25,750 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+1 F3000'}
2024-02-19 19:54:25,752 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:54:52,447 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y-1 F3000'}
2024-02-19 19:54:52,450 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:54:59,754 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y-1 F3000'}
2024-02-19 19:54:59,759 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:55:00,115 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y-1 F3000'}
2024-02-19 19:55:00,117 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:55:00,546 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y-1 F3000'}
2024-02-19 19:55:00,551 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 19:56:57,353 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-02-19 19:56:57,354 [printer.py:change_state()] - Adding callback for state: disconnected
2024-02-19 19:56:57,356 [screen.py:state_disconnected()] - ### Going to disconnected
2024-02-19 19:56:57,357 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-19 19:56:57,361 [screen.py:show_panel()] - Reinitializing panel
2024-02-19 19:56:57,439 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-02-19 19:57:00,287 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-19 19:57:00,295 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2024-02-19 19:57:00,296 [printer.py:configure_cameras()] - Cameras: []
2024-02-19 19:57:00,296 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'update_manager', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-310-g67c98f6', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-02-19 19:57:00,305 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2024-02-19 19:57:00,324 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2024-02-19 19:57:00,327 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro _Probe_Variables': {'variable_probe_attached': 'False', 'variable_probe_state': 'False', 'variable_probe_lock': 'False', 'variable_probe_z_homed': 'False', 'variable_z_endstop_x': '0', 'variable_z_endstop_y': '0', 'gcode': ''}, 'gcode_macro _klicky_check_variables_version': {'gcode': '\n{% set version = printer["gcode_macro _User_Variables"].version|default(0) %}\n\n{% if version != 1 %}\n{ action_raise_error("Please update your klicky variables, there are some functionality changes") }\n{% endif %}'}, 'gcode_macro _KlickyDebug': {'gcode': '\n{% set message  = params.MSG %}\n{% set debug = printer["gcode_macro _User_Variables"].debug|default(False) %}\n\n{% if debug %}\n{ action_respond_info(message) }\n{% endif %}'}, 'gcode_macro _exit_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move  = params.MOVE|default(0) %}\n{% set speed = printer["gcode_macro _User_Variables"].travel_speed %}\n\n\nM400\nSET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\nRESTORE_GCODE_STATE NAME={function} MOVE={move} MOVE_SPEED={speed}'}, 'gcode_macro _entry_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move_accel = printer["gcode_macro _User_Variables"].move_accel|default(1000) %}\n\nM400\nSAVE_GCODE_STATE NAME={function}\n\nSET_GCODE_OFFSET Z=0\n\nG90\n\nSET_VELOCITY_LIMIT ACCEL={move_accel}'}, 'gcode_macro _Homing_Variables': {'gcode': '\n{% set reset  = params.RESET|default(0) %}\n{% if reset %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }\n{% endif %}'}, 'gcode_macro Attach_Probe_Lock': {'description': 'Attaches Klicky Probe, can only be docked after unlocking', 'gcode': '\nAttach_Probe\n_Probe_Lock'}, 'gcode_macro Dock_Probe_Unlock': {'description': 'Docks Klicky Probe even if it was locked', 'gcode': '\n_Probe_Unlock\nDock_Probe'}, 'gcode_macro _Probe_Unlock': {'description': 'Unlocks Klicky Probe state', 'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to False"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }'}, 'gcode_macro _Probe_Lock': {'description': 'Locks Klicky Probe state', 'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to True"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ True }'}, 'gcode_macro _DeployKlickyDock': {'description': 'Deploys Klicky servo-controlled dock', 'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_deploy = printer["gcode_macro _User_Variables"].servo_deploy|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_DeployKlickyDock Klicky servo configuration enabled"\n{% if servo_deploy == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo deploy angle specified") }\n{% endif %}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _DeployDock"] is defined %}\n_KlickyDebug msg="_DeployKlickyDock calling _DeployDock"\n_DeployDock\n{% endif %}'}, 'gcode_macro _RetractKlickyDock': {'description': 'Retracts Klicky servo-controlled dock', 'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_retract = printer["gcode_macro _User_Variables"].servo_retract|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_RetractKlickyDock Klicky servo configuration enabled"\n{% if servo_retract == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo retract angle specified") }\n{% endif %}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _RetractDock"] is defined %}\n_KlickyDebug msg="_RetractKlickyDock calling _RetractDock"\n_RetractDock\n{% endif %}'}, 'gcode_macro Attach_Probe': {'description': 'Attaches Klicky Probe', 'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set attachmove2_x = printer["gcode_macro _User_Variables"].attachmove2_x|default(0) %}\n{% set attachmove2_y = printer["gcode_macro _User_Variables"].attachmove2_y|default(0) %}\n{% set attachmove2_z = printer["gcode_macro _User_Variables"].attachmove2_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n_entry_point function=Attach_Probe\n\n{% if bypass_probe_docking == False %}\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n_KlickyDebug msg="Attach_Probe Axis homed"\n\n\n{% elif not probe_attached and not probe_lock %}\n_KlickyDebug msg="Attach_Probe going to attach probe"\n{% if verbose %}\n{ action_respond_info("Attaching Probe") }\n{% endif %}\n_KLICKY_STATUS_BUSY\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% if not enable_z_hop %}\n_KlickyDebug msg="Attach_Probe z_hop disabled"\n{% set safe_z = 0 %}\n{% endif %}\n{% endif %}\n\n\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero, duplicate?") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Umbilical_Path\n\n_entry_point function=Attach_Probe_intern\n\n\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n_DeployKlickyDock\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}"\nG0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}\n\n_RetractKlickyDock\n\n{% if ((printer.gcode_move.gcode_position.z < safe_z) or (docklocation_z != -128 and docklocation_z < safe_z ))%}\n_KlickyDebug msg="Attach_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\n_CheckProbe action=attach\n\n_exit_point function=Attach_Probe_intern move={goback}\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe locked not attaching probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already attached!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe already attached, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Attach_Probe\n{% else %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}'}, 'gcode_macro Dock_Probe': {'description': 'Docks Klicky Probe', 'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n{% if bypass_probe_docking == True %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}\n\n{% if bypass_probe_docking != True %}\n_entry_point function=Dock_Probe\n\n\n{% if probe_attached and not probe_lock %}\n_KLICKY_STATUS_BUSY\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Dock_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n_Umbilical_Path\n\n\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n\n_DeployKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\n\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}"\nG0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}\n{% endif %}\n\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}\n\n\n_RetractKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving away from the dock to G0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}\n\n\n{% if (printer.gcode_move.gcode_position.z < safe_z) %}\n_KlickyDebug msg="Dock_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\nG4 P1000\n_CheckProbe action=dock\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe locked not docking probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already docked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe already docked, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Dock_Probe move={goback}\n{% else %}\n_KlickyDebug msg="Dock_Probe probe docking bypassed, doing nothing"\n{% endif %}'}, 'gcode_macro PROBE_CALIBRATE': {'rename_existing': '_PROBE_CALIBRATE', 'description': 'Calibrate the probes z_offset with klicky automount', 'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_calibrate Axis homed"\n_KlickyDebug msg="probe_calibrate Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_CALIBRATE with the probe above the BED, check klicky_variables bed size!") }\n{% endif %}\n\n{% if bypass_probe_docking == False %}\n_CheckProbe action=query\nG90\nAttach_Probe back=1\n_KLICKY_STATUS_CALIBRATING_Z\n\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nM118 moving the toolhead 20 mm from the bed\n_KlickyDebug msg="probe_calibrate Moving Z up by 20mm"\nTESTZ Z=20\nM118 remove manually the probe and continue calibration\n_KLICKY_STATUS_READY\n{% else %}\n_KLICKY_STATUS_CALIBRATING_Z\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n_KLICKY_STATUS_READY\n{% endif %}'}, 'gcode_macro PROBE_ACCURACY': {'rename_existing': '_PROBE_ACCURACY', 'description': 'Probe Z-height accuracy at current XY position with klicky automount', 'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_accuracy Axis homed"\n_KlickyDebug msg="probe_accuracy Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n_entry_point function=PROBE_ACCURACY\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_ACCURACY with the probe above the BED, check klicky_variables bed size!") }\n{% endif%}\n\n_CheckProbe action=query\nAttach_Probe back=1\n\n_KlickyDebug msg="probe_accuracy calling klipper probe accuracy"\n_PROBE_ACCURACY {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nDock_Probe back=1\n\n_exit_point function=PROBE_ACCURACY move=1'}, 'force_move': {'enable_force_move': 'True'}, 'homing_override': {'axes': 'xyz', 'gcode': '\n\n_User_Variables\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n{% set kinematic_z = 0 %}\n{% set dock_on_zhome = printer["gcode_macro _User_Variables"].dock_on_zhome|default(True) %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set home_backoff_x = printer["gcode_macro _User_Variables"].home_backoff_x|default(0) %}\n{% set home_backoff_y = printer["gcode_macro _User_Variables"].home_backoff_y|default(0) %}\n{% set override_homing = printer["gcode_macro _User_Variables"].override_homing|default(\'\') %}\n\n\n_klicky_check_variables_version\n\n_CheckProbe action=query\n\n\n{% set home_x, home_y, home_z, leave_probe_attached = False, False, False, False %}\n\n{% if \'PROBE_LOCK\' in params%}\n{% if verbose %}\n{ action_respond_info("PROBE_LOCK = True") }\n{% endif %}\n{% set leave_probe_attached = True %}\n{% endif %}\n\n\n{% if not \'X\' in params\nand not \'Y\' in params\nand not \'Z\' in params %}\n\n{% set home_x, home_y, home_z = True, True, True %}\n_KlickyDebug msg="homing_override goint to home all axes"\n\n{% else %}\n{% if \'X\' in params %}\n{% set home_x = True %}\n_KlickyDebug msg="homing_override goint to home X"\n\n{% endif %}\n\n{% if \'Y\' in params %}\n{% set home_y = True %}\n_KlickyDebug msg="homing_override goint to home Y"\n{% endif %}\n\n{% if \'Z\' in params %}\n{% set home_z = True %}\n_KlickyDebug msg="homing_override goint to home Z"\n{% endif %}\n\n{% if \'X\' in params\nand \'Y\' in params\nand \'Z\' in params %}\n\n\n_Homing_Variables reset=1\n_KlickyDebug msg="homing_override goint to home all axes"\n{% endif %}\n\n{% endif %}\n\n_entry_point function=homing_override\n_KLICKY_STATUS_HOMING\n\n\n{% if \'z\' not in printer.toolhead.homed_axes %}\n{% if enable_z_hop == False %}\n_KlickyDebug msg="homing_override z_hop disabled"\n\n{% set kinematic_z = safe_z %}\n{% set safe_z = safe_z %}\n{% endif %}\n{% endif %}\n\n\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes and \'z\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("No axis homed") }\n{% endif %}\n_KlickyDebug msg="homing_override no axis homed, setting position as X=Y=0 Z={kinematic_z}"\nSET_KINEMATIC_POSITION X=0 Y=0 Z={kinematic_z}\nM400\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% if home_z != True %}\n_KlickyDebug msg="homing_override clearing axis homed state if not already homing Z"\nM84\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("X or Y not homed, forcing full G28") }\n{% endif %}\n{% set home_x, home_y, home_z = True, True, True %}\n{% endif %}\n{% endif %}\n\n\n{% if ((attachmove_y == 0 and override_homing == \'\' ) or (override_homing == \'Y\'))%}\n\n{% if home_y %}\n{% if override_homing == \'Y\' %}\n_KlickyDebug msg="homing_override Y homing first override, due to override_homing = Y"\n{% else %}\n_KlickyDebug msg="homing_override Y homing first override, due to attachmove_y = 0"\n{% endif %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y G28 Y0"\nG28 Y0\n\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop-home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n{% set home_y = False %}\n{% endif %}\n\n\n\n{% if home_x %}\n{% if verbose %}\n{ action_respond_info("Homing X") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in X homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_X"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_X external script to handle the X homing"\n_HOME_X\n{% else %}\n_KlickyDebug msg="homing_override Homing X, G28 X0"\nG28 X0\n\n{% if home_backoff_x != 0 %}\n{% if (printer.configfile.settings.stepper_x.position_endstop > (printer.configfile.settings.stepper_x.position_min|default(0) + printer.configfile.settings.stepper_x.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n\n{% if home_y %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y, G28 Y0"\nG28 Y0\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if verbose %}\n{ action_respond_info("Homing Z") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe configured as a virtual Z endstop attaching probe"\nAttach_Probe\n\n{% if leave_probe_attached %}\n_Probe_Lock\n{% endif %}\n{% elif dock_on_zhome == True %}\nDock_Probe\n{% endif %}\n\n_Home_Z_\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe no longer required, docking probe"\nDock_Probe\n{% elif dock_on_zhome == False %}\nDock_Probe\n{% endif %}\n{% endif %}\n_CheckProbe action=query\n\n\n_Park_Toolhead\n\n_exit_point function=homing_override\n_KLICKY_STATUS_READY'}, 'gcode_macro _Umbilical_Path': {'gcode': '\n{% set umbilical = printer["gcode_macro _User_Variables"].umbilical %}\n{% set umbilical_x = printer["gcode_macro _User_Variables"].umbilical_x %}\n{% set umbilical_y = printer["gcode_macro _User_Variables"].umbilical_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n\n{% if umbilical %}\n\n_entry_point function=Umbilical_Path\n\n_KlickyDebug msg="_Umbilical_Path moving to G0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}"\nG0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}\n\n_exit_point function=Umbilical_Path\n{% endif %}'}, 'gcode_macro _Home_Z_': {'gcode': '\n{% set z_endstop_x = printer["gcode_macro _Probe_Variables"].z_endstop_x %}\n{% set z_endstop_y = printer["gcode_macro _Probe_Variables"].z_endstop_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}    {% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Home_Z\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n{% else %}\n_KlickyDebug msg="_Home_Z_ XY Axis homed"\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="_Home_Z_ Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n\n\n_KlickyDebug msg="_Home_Z_ moving to Z endstop position G0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}"\nG0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}\n_KlickyDebug msg="_Home_Z_ Homing Z G28 Z"\nG28 Z0\n_KlickyDebug msg="_Home_Z_ toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_exit_point function=Home_Z'}, 'gcode_macro _CheckProbe': {'variable_probe_state': '0', 'gcode': '\nQuery_Probe\n_SetProbeState action={ params.ACTION }'}, 'gcode_macro _SetProbeState': {'gcode': '\n{% set query_probe_triggered = printer.probe.last_query %}\n{% set action  = params.ACTION|default(\'\') %}\n\n\n{% if query_probe_triggered %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ False }\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ True }\n{% endif %}\n\n{% if action == \'query\' %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_state VALUE={ query_probe_triggered }\n{% endif %}\n\n\n\n\n{% if not query_probe_triggered and action == \'dock\' %}\n{ action_raise_error("Probe dock failed!") }\n{% endif %}\n\n\n{% if query_probe_triggered and action == \'attach\' %}\n{ action_raise_error("Probe attach failed!") }\n{% endif %}'}, 'gcode_macro _Park_Toolhead': {'gcode': '\n{% set park_toolhead = printer["gcode_macro _User_Variables"].park_toolhead %}\n{% set parkposition_x = printer["gcode_macro _User_Variables"].parkposition_x %}\n{% set parkposition_y = printer["gcode_macro _User_Variables"].parkposition_y %}\n{% set parkposition_z = printer["gcode_macro _User_Variables"].parkposition_z %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Park_Toolhead\n\n{% if park_toolhead and \'xyz\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Parking Toolhead") }\n{% endif %}\n{% if parkposition_z == -128 %}\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}\n\n{% else %}\n\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}\n\n{% endif %}\n\n{% endif %}\n_exit_point function=Park_Toolhead'}, 'gcode_macro _klicky_status_ready': {'gcode': '\n{% if printer[\'gcode_macro status_ready\'] is defined %}\n_KlickyDebug msg="_klicky_status_ready activating the LED STATUS_READY"\nSTATUS_READY\n{% endif %}'}, 'gcode_macro _klicky_status_busy': {'gcode': '\n{% if printer[\'gcode_macro status_busy\'] is defined %}\n_KlickyDebug msg="_klicky_status_busy activating the LED STATUS_BUSY"\nSTATUS_BUSY\n{% endif %}'}, 'gcode_macro _klicky_status_leveling': {'gcode': '\n{% if printer[\'gcode_macro status_leveling\'] is defined %}\n_KlickyDebug msg="_klicky_status_leveling activating the LED STATUS_LEVELING"\nSTATUS_LEVELING\n{% endif %}'}, 'gcode_macro _klicky_status_homing': {'gcode': '\n{% if printer[\'gcode_macro status_homing\'] is defined %}\n_KlickyDebug msg="_klicky_status_homing activating the LED STATUS_HOMING"\nSTATUS_HOMING\n{% endif %}'}, 'gcode_macro _klicky_status_cleaning': {'gcode': '\n{% if printer[\'gcode_macro status_cleaning\'] is defined %}\n_KlickyDebug msg="_klicky_status_cleaning activating the LED STATUS_CLEANING"\nSTATUS_CLEANING\n{% endif %}'}, 'gcode_macro _klicky_status_meshing': {'gcode': '\n{% if printer[\'gcode_macro status_meshing\'] is defined %}\n_KlickyDebug msg="_klicky_status_meshing activating the LED STATUS_MESHING"\nSTATUS_MESHING\n{% endif %}'}, 'gcode_macro _klicky_status_calibrating_z': {'gcode': '\n{% if printer[\'gcode_macro status_calibrating_z\'] is defined %}\n_KlickyDebug msg="_klicky_status_calibrating_z activating the LED STATUS_CALIBRATING_Z"\nSTATUS_CALIBRATING_Z\n{% endif %}'}, 'z_calibration': {'nozzle_xy_position': '172, 301', 'switch_xy_position': '171.5, 282', 'bed_xy_position': '150, 150', 'switch_offset': '0.09', 'offset_margins': '-1.0,1.0', 'speed': '50', 'probing_first_fast': 'false', 'start_gcode': 'Attach_Probe', 'end_gcode': 'Dock_Probe'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_28003C001150535556323420-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '^PG6', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '25', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'PG9', 'position_min': '0', 'position_endstop': '300', 'position_max': '303.5', 'homing_speed': '25', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': '!PG3', 'enable_pin': '!PG5', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'PG10', 'position_max': '290', 'position_min': '-4.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3', 'position_endstop': '-0.711'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA0', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': '!PF10', 'enable_pin': '!PG2', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PC13', 'dir_pin': 'PF0', 'enable_pin': '!PF1', 'rotation_distance': '21.9459674016', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.75', 'heater_pin': 'PA1', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF4', 'min_temp': '10', 'max_temp': '270', 'max_power': '1.0', 'min_extrude_temp': '170', 'pressure_advance': '0.05', 'pressure_advance_smooth_time': '0.040', 'control': 'pid', 'pid_kp': '26.572', 'pid_ki': '2.036', 'pid_kd': '86.691'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.5', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PA2', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF3', 'max_power': '1', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '55.196', 'pid_ki': '2.091', 'pid_kd': '364.295'}, 'probe': {'pin': 'PG15', 'x_offset': '0', 'y_offset': '25.0', 'z_offset': '0', 'speed': '10.0', 'samples': '5', 'samples_result': 'median', 'sample_retract_dist': '3.0', 'samples_tolerance': '0.006', 'samples_tolerance_retries': '6'}, 'fan': {'pin': 'PA8', 'kick_start_time': '0.5', 'off_below': '0.10'}, 'heater_fan hotend_fan': {'pin': 'PE5', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'controller_fan controller_fan': {'pin': 'PD12', 'kick_start_time': '0.5', 'heater': 'heater_bed'}, 'heater_fan exhaust_fan': {'pin': 'PD13', 'max_power': '1.0', 'shutdown_speed': '0.0', 'kick_start_time': '5.0', 'heater': 'heater_bed', 'heater_temp': '60', 'fan_speed': '1.0'}, 'output_pin caselight': {'pin': 'PD15', 'pwm': 'true', 'shutdown_value': '0', 'value': '1', 'cycle_time': '0.01'}, 'neopixel headlight': {'pin': 'PB0', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '0.0', 'initial_green': '0.2157', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'temperature_sensor chamber_temp': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF5', 'min_temp': '0', 'max_temp': '100', 'gcode_id': 'chamber_th'}, 'idle_timeout': {'timeout': '1800'}, 'z_tilt': {'z_positions': '\n-50, 18\n150, 348\n350, 18', 'points': '\n30, 5\n150, 245\n270, 5', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'gcode_macro _User_Variables': {'variable_verbose': 'True', 'variable_debug': 'False', 'variable_travel_speed': '200', 'variable_move_accel': '1000', 'variable_dock_speed': '50', 'variable_release_speed': '75', 'variable_z_drop_speed': '20', 'variable_safe_z': '25', 'variable_enable_z_hop': 'True', 'variable_max_bed_y': '300', 'variable_max_bed_x': '300', 'variable_z_endstop_x': '172', 'variable_z_endstop_y': '301', 'variable_docklocation_x': '42', 'variable_docklocation_y': '297', 'variable_docklocation_z': '-128', 'variable_enable_dock_servo': 'False', 'variable_servo_name': "'NAME'", 'variable_servo_deploy': '10', 'variable_servo_retract': '11', 'variable_servo_delay': '250', 'variable_dockmove_x': '40', 'variable_dockmove_y': '0', 'variable_dockmove_z': '0', 'variable_attachmove_x': '0', 'variable_attachmove_y': '30', 'variable_attachmove_z': '0', 'variable_umbilical': 'False', 'variable_umbilical_x': '15', 'variable_umbilical_y': '15', 'variable_park_toolhead': 'False', 'variable_parkposition_x': '125', 'variable_parkposition_y': '125', 'variable_parkposition_z': '30', 'variable_version': '1', 'variable_attachmove2_x': '0', 'variable_attachmove2_y': '0', 'variable_attachmove2_z': '0', 'variable_home_backoff_x': '10', 'variable_home_backoff_y': '10', 'variable_override_homing': "''", 'variable_dock_on_zhome': 'True', 'gcode': '\n{% set Mx = printer[\'configfile\'].config["stepper_x"]["position_max"]|float %}\n{% set My = printer[\'configfile\'].config["stepper_y"]["position_max"]|float %}\n{% set Ox = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set Oy = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set Oz = printer[\'configfile\'].config["probe"]["z_offset"]|float %}\n\n\n{% if z_endstop_x != 0 or z_endstop_y != 0 %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ z_endstop_x }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ z_endstop_y }\n\n\n{% else %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ (Mx * 0.5) - Ox }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ (My * 0.5) - Oy }\n{% endif %}'}, 'gcode_macro PRINT_START': {'gcode': '\nM117 Homing...\nG28\nATTACH_PROBE\nZ_TILT_ADJUST\nDOCK_PROBE\nG28\n\n\n\n\n\n\n\nG0 X150 Y150 Z30 F3600'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_28003C001150535556323420-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro _probe_variables': {'gcode': '', 'description': 'G-Code macro', 'variable_probe_attached': 'False', 'variable_probe_state': 'False', 'variable_probe_lock': 'False', 'variable_probe_z_homed': 'False', 'variable_z_endstop_x': '0', 'variable_z_endstop_y': '0'}, 'gcode_macro _klicky_check_variables_version': {'gcode': '\n{% set version = printer["gcode_macro _User_Variables"].version|default(0) %}\n\n{% if version != 1 %}\n{ action_raise_error("Please update your klicky variables, there are some functionality changes") }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klickydebug': {'gcode': '\n{% set message  = params.MSG %}\n{% set debug = printer["gcode_macro _User_Variables"].debug|default(False) %}\n\n{% if debug %}\n{ action_respond_info(message) }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _exit_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move  = params.MOVE|default(0) %}\n{% set speed = printer["gcode_macro _User_Variables"].travel_speed %}\n\n\nM400\nSET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\nRESTORE_GCODE_STATE NAME={function} MOVE={move} MOVE_SPEED={speed}', 'description': 'G-Code macro'}, 'gcode_macro _entry_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move_accel = printer["gcode_macro _User_Variables"].move_accel|default(1000) %}\n\nM400\nSAVE_GCODE_STATE NAME={function}\n\nSET_GCODE_OFFSET Z=0\n\nG90\n\nSET_VELOCITY_LIMIT ACCEL={move_accel}', 'description': 'G-Code macro'}, 'gcode_macro _homing_variables': {'gcode': '\n{% set reset  = params.RESET|default(0) %}\n{% if reset %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro attach_probe_lock': {'gcode': '\nAttach_Probe\n_Probe_Lock', 'description': 'Attaches Klicky Probe, can only be docked after unlocking'}, 'gcode_macro dock_probe_unlock': {'gcode': '\n_Probe_Unlock\nDock_Probe', 'description': 'Docks Klicky Probe even if it was locked'}, 'gcode_macro _probe_unlock': {'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to False"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }', 'description': 'Unlocks Klicky Probe state'}, 'gcode_macro _probe_lock': {'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to True"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ True }', 'description': 'Locks Klicky Probe state'}, 'gcode_macro _deployklickydock': {'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_deploy = printer["gcode_macro _User_Variables"].servo_deploy|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_DeployKlickyDock Klicky servo configuration enabled"\n{% if servo_deploy == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo deploy angle specified") }\n{% endif %}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _DeployDock"] is defined %}\n_KlickyDebug msg="_DeployKlickyDock calling _DeployDock"\n_DeployDock\n{% endif %}', 'description': 'Deploys Klicky servo-controlled dock'}, 'gcode_macro _retractklickydock': {'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_retract = printer["gcode_macro _User_Variables"].servo_retract|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_RetractKlickyDock Klicky servo configuration enabled"\n{% if servo_retract == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo retract angle specified") }\n{% endif %}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _RetractDock"] is defined %}\n_KlickyDebug msg="_RetractKlickyDock calling _RetractDock"\n_RetractDock\n{% endif %}', 'description': 'Retracts Klicky servo-controlled dock'}, 'gcode_macro attach_probe': {'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set attachmove2_x = printer["gcode_macro _User_Variables"].attachmove2_x|default(0) %}\n{% set attachmove2_y = printer["gcode_macro _User_Variables"].attachmove2_y|default(0) %}\n{% set attachmove2_z = printer["gcode_macro _User_Variables"].attachmove2_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n_entry_point function=Attach_Probe\n\n{% if bypass_probe_docking == False %}\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n_KlickyDebug msg="Attach_Probe Axis homed"\n\n\n{% elif not probe_attached and not probe_lock %}\n_KlickyDebug msg="Attach_Probe going to attach probe"\n{% if verbose %}\n{ action_respond_info("Attaching Probe") }\n{% endif %}\n_KLICKY_STATUS_BUSY\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% if not enable_z_hop %}\n_KlickyDebug msg="Attach_Probe z_hop disabled"\n{% set safe_z = 0 %}\n{% endif %}\n{% endif %}\n\n\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero, duplicate?") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Umbilical_Path\n\n_entry_point function=Attach_Probe_intern\n\n\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n_DeployKlickyDock\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}"\nG0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}\n\n_RetractKlickyDock\n\n{% if ((printer.gcode_move.gcode_position.z < safe_z) or (docklocation_z != -128 and docklocation_z < safe_z ))%}\n_KlickyDebug msg="Attach_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\n_CheckProbe action=attach\n\n_exit_point function=Attach_Probe_intern move={goback}\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe locked not attaching probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already attached!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe already attached, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Attach_Probe\n{% else %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}', 'description': 'Attaches Klicky Probe'}, 'gcode_macro dock_probe': {'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n{% if bypass_probe_docking == True %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}\n\n{% if bypass_probe_docking != True %}\n_entry_point function=Dock_Probe\n\n\n{% if probe_attached and not probe_lock %}\n_KLICKY_STATUS_BUSY\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Dock_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n_Umbilical_Path\n\n\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n\n_DeployKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\n\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}"\nG0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}\n{% endif %}\n\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}\n\n\n_RetractKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving away from the dock to G0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}\n\n\n{% if (printer.gcode_move.gcode_position.z < safe_z) %}\n_KlickyDebug msg="Dock_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\nG4 P1000\n_CheckProbe action=dock\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe locked not docking probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already docked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe already docked, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Dock_Probe move={goback}\n{% else %}\n_KlickyDebug msg="Dock_Probe probe docking bypassed, doing nothing"\n{% endif %}', 'description': 'Docks Klicky Probe'}, 'gcode_macro probe_calibrate': {'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_calibrate Axis homed"\n_KlickyDebug msg="probe_calibrate Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_CALIBRATE with the probe above the BED, check klicky_variables bed size!") }\n{% endif %}\n\n{% if bypass_probe_docking == False %}\n_CheckProbe action=query\nG90\nAttach_Probe back=1\n_KLICKY_STATUS_CALIBRATING_Z\n\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nM118 moving the toolhead 20 mm from the bed\n_KlickyDebug msg="probe_calibrate Moving Z up by 20mm"\nTESTZ Z=20\nM118 remove manually the probe and continue calibration\n_KLICKY_STATUS_READY\n{% else %}\n_KLICKY_STATUS_CALIBRATING_Z\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n_KLICKY_STATUS_READY\n{% endif %}', 'rename_existing': '_PROBE_CALIBRATE', 'description': 'Calibrate the probes z_offset with klicky automount'}, 'gcode_macro probe_accuracy': {'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_accuracy Axis homed"\n_KlickyDebug msg="probe_accuracy Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n_entry_point function=PROBE_ACCURACY\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_ACCURACY with the probe above the BED, check klicky_variables bed size!") }\n{% endif%}\n\n_CheckProbe action=query\nAttach_Probe back=1\n\n_KlickyDebug msg="probe_accuracy calling klipper probe accuracy"\n_PROBE_ACCURACY {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nDock_Probe back=1\n\n_exit_point function=PROBE_ACCURACY move=1', 'rename_existing': '_PROBE_ACCURACY', 'description': 'Probe Z-height accuracy at current XY position with klicky automount'}, 'force_move': {'enable_force_move': True}, 'homing_override': {'axes': 'xyz', 'gcode': '\n\n_User_Variables\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n{% set kinematic_z = 0 %}\n{% set dock_on_zhome = printer["gcode_macro _User_Variables"].dock_on_zhome|default(True) %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set home_backoff_x = printer["gcode_macro _User_Variables"].home_backoff_x|default(0) %}\n{% set home_backoff_y = printer["gcode_macro _User_Variables"].home_backoff_y|default(0) %}\n{% set override_homing = printer["gcode_macro _User_Variables"].override_homing|default(\'\') %}\n\n\n_klicky_check_variables_version\n\n_CheckProbe action=query\n\n\n{% set home_x, home_y, home_z, leave_probe_attached = False, False, False, False %}\n\n{% if \'PROBE_LOCK\' in params%}\n{% if verbose %}\n{ action_respond_info("PROBE_LOCK = True") }\n{% endif %}\n{% set leave_probe_attached = True %}\n{% endif %}\n\n\n{% if not \'X\' in params\nand not \'Y\' in params\nand not \'Z\' in params %}\n\n{% set home_x, home_y, home_z = True, True, True %}\n_KlickyDebug msg="homing_override goint to home all axes"\n\n{% else %}\n{% if \'X\' in params %}\n{% set home_x = True %}\n_KlickyDebug msg="homing_override goint to home X"\n\n{% endif %}\n\n{% if \'Y\' in params %}\n{% set home_y = True %}\n_KlickyDebug msg="homing_override goint to home Y"\n{% endif %}\n\n{% if \'Z\' in params %}\n{% set home_z = True %}\n_KlickyDebug msg="homing_override goint to home Z"\n{% endif %}\n\n{% if \'X\' in params\nand \'Y\' in params\nand \'Z\' in params %}\n\n\n_Homing_Variables reset=1\n_KlickyDebug msg="homing_override goint to home all axes"\n{% endif %}\n\n{% endif %}\n\n_entry_point function=homing_override\n_KLICKY_STATUS_HOMING\n\n\n{% if \'z\' not in printer.toolhead.homed_axes %}\n{% if enable_z_hop == False %}\n_KlickyDebug msg="homing_override z_hop disabled"\n\n{% set kinematic_z = safe_z %}\n{% set safe_z = safe_z %}\n{% endif %}\n{% endif %}\n\n\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes and \'z\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("No axis homed") }\n{% endif %}\n_KlickyDebug msg="homing_override no axis homed, setting position as X=Y=0 Z={kinematic_z}"\nSET_KINEMATIC_POSITION X=0 Y=0 Z={kinematic_z}\nM400\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% if home_z != True %}\n_KlickyDebug msg="homing_override clearing axis homed state if not already homing Z"\nM84\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("X or Y not homed, forcing full G28") }\n{% endif %}\n{% set home_x, home_y, home_z = True, True, True %}\n{% endif %}\n{% endif %}\n\n\n{% if ((attachmove_y == 0 and override_homing == \'\' ) or (override_homing == \'Y\'))%}\n\n{% if home_y %}\n{% if override_homing == \'Y\' %}\n_KlickyDebug msg="homing_override Y homing first override, due to override_homing = Y"\n{% else %}\n_KlickyDebug msg="homing_override Y homing first override, due to attachmove_y = 0"\n{% endif %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y G28 Y0"\nG28 Y0\n\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop-home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n{% set home_y = False %}\n{% endif %}\n\n\n\n{% if home_x %}\n{% if verbose %}\n{ action_respond_info("Homing X") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in X homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_X"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_X external script to handle the X homing"\n_HOME_X\n{% else %}\n_KlickyDebug msg="homing_override Homing X, G28 X0"\nG28 X0\n\n{% if home_backoff_x != 0 %}\n{% if (printer.configfile.settings.stepper_x.position_endstop > (printer.configfile.settings.stepper_x.position_min|default(0) + printer.configfile.settings.stepper_x.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n\n{% if home_y %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y, G28 Y0"\nG28 Y0\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if verbose %}\n{ action_respond_info("Homing Z") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe configured as a virtual Z endstop attaching probe"\nAttach_Probe\n\n{% if leave_probe_attached %}\n_Probe_Lock\n{% endif %}\n{% elif dock_on_zhome == True %}\nDock_Probe\n{% endif %}\n\n_Home_Z_\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe no longer required, docking probe"\nDock_Probe\n{% elif dock_on_zhome == False %}\nDock_Probe\n{% endif %}\n{% endif %}\n_CheckProbe action=query\n\n\n_Park_Toolhead\n\n_exit_point function=homing_override\n_KLICKY_STATUS_READY'}, 'gcode_macro _umbilical_path': {'gcode': '\n{% set umbilical = printer["gcode_macro _User_Variables"].umbilical %}\n{% set umbilical_x = printer["gcode_macro _User_Variables"].umbilical_x %}\n{% set umbilical_y = printer["gcode_macro _User_Variables"].umbilical_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n\n{% if umbilical %}\n\n_entry_point function=Umbilical_Path\n\n_KlickyDebug msg="_Umbilical_Path moving to G0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}"\nG0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}\n\n_exit_point function=Umbilical_Path\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _home_z_': {'gcode': '\n{% set z_endstop_x = printer["gcode_macro _Probe_Variables"].z_endstop_x %}\n{% set z_endstop_y = printer["gcode_macro _Probe_Variables"].z_endstop_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}    {% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Home_Z\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n{% else %}\n_KlickyDebug msg="_Home_Z_ XY Axis homed"\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="_Home_Z_ Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n\n\n_KlickyDebug msg="_Home_Z_ moving to Z endstop position G0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}"\nG0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}\n_KlickyDebug msg="_Home_Z_ Homing Z G28 Z"\nG28 Z0\n_KlickyDebug msg="_Home_Z_ toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_exit_point function=Home_Z', 'description': 'G-Code macro'}, 'gcode_macro _checkprobe': {'gcode': '\nQuery_Probe\n_SetProbeState action={ params.ACTION }', 'description': 'G-Code macro', 'variable_probe_state': '0'}, 'gcode_macro _setprobestate': {'gcode': '\n{% set query_probe_triggered = printer.probe.last_query %}\n{% set action  = params.ACTION|default(\'\') %}\n\n\n{% if query_probe_triggered %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ False }\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ True }\n{% endif %}\n\n{% if action == \'query\' %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_state VALUE={ query_probe_triggered }\n{% endif %}\n\n\n\n\n{% if not query_probe_triggered and action == \'dock\' %}\n{ action_raise_error("Probe dock failed!") }\n{% endif %}\n\n\n{% if query_probe_triggered and action == \'attach\' %}\n{ action_raise_error("Probe attach failed!") }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _park_toolhead': {'gcode': '\n{% set park_toolhead = printer["gcode_macro _User_Variables"].park_toolhead %}\n{% set parkposition_x = printer["gcode_macro _User_Variables"].parkposition_x %}\n{% set parkposition_y = printer["gcode_macro _User_Variables"].parkposition_y %}\n{% set parkposition_z = printer["gcode_macro _User_Variables"].parkposition_z %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Park_Toolhead\n\n{% if park_toolhead and \'xyz\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Parking Toolhead") }\n{% endif %}\n{% if parkposition_z == -128 %}\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}\n\n{% else %}\n\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}\n\n{% endif %}\n\n{% endif %}\n_exit_point function=Park_Toolhead', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_ready': {'gcode': '\n{% if printer[\'gcode_macro status_ready\'] is defined %}\n_KlickyDebug msg="_klicky_status_ready activating the LED STATUS_READY"\nSTATUS_READY\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_busy': {'gcode': '\n{% if printer[\'gcode_macro status_busy\'] is defined %}\n_KlickyDebug msg="_klicky_status_busy activating the LED STATUS_BUSY"\nSTATUS_BUSY\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_leveling': {'gcode': '\n{% if printer[\'gcode_macro status_leveling\'] is defined %}\n_KlickyDebug msg="_klicky_status_leveling activating the LED STATUS_LEVELING"\nSTATUS_LEVELING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_homing': {'gcode': '\n{% if printer[\'gcode_macro status_homing\'] is defined %}\n_KlickyDebug msg="_klicky_status_homing activating the LED STATUS_HOMING"\nSTATUS_HOMING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_cleaning': {'gcode': '\n{% if printer[\'gcode_macro status_cleaning\'] is defined %}\n_KlickyDebug msg="_klicky_status_cleaning activating the LED STATUS_CLEANING"\nSTATUS_CLEANING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_meshing': {'gcode': '\n{% if printer[\'gcode_macro status_meshing\'] is defined %}\n_KlickyDebug msg="_klicky_status_meshing activating the LED STATUS_MESHING"\nSTATUS_MESHING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_calibrating_z': {'gcode': '\n{% if printer[\'gcode_macro status_calibrating_z\'] is defined %}\n_KlickyDebug msg="_klicky_status_calibrating_z activating the LED STATUS_CALIBRATING_Z"\nSTATUS_CALIBRATING_Z\n{% endif %}', 'description': 'G-Code macro'}, 'z_calibration': {'switch_offset': 0.09, 'offset_margins': '-1.0,1.0', 'speed': 50.0, 'samples_result': 'none', 'probing_first_fast': False, 'nozzle_xy_position': '172, 301', 'switch_xy_position': '171.5, 282', 'bed_xy_position': '150, 150', 'start_gcode': 'Attach_Probe', 'before_switch_gcode': '', 'end_gcode': 'Dock_Probe'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': '^PG6', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'PG9', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 303.5, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PF11', 'dir_pin': '!PG3', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG5', 'endstop_pin': 'PG10', 'position_endstop': -0.711, 'position_min': -4.5, 'position_max': 290.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA0'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PF9', 'dir_pin': '!PF10', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG2'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF4', 'min_temp': 10.0, 'max_temp': 270.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 26.572, 'pid_ki': 2.036, 'pid_kd': 86.691, 'heater_pin': 'PA1', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PC13', 'pressure_advance': 0.05, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'PF0', 'rotation_distance': 21.9459674016, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 55.196, 'pid_ki': 2.091, 'pid_kd': 364.295, 'heater_pin': 'PA2', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'probe': {'z_offset': 0.0, 'deactivate_on_each_sample': True, 'activate_gcode': '', 'deactivate_gcode': '', 'pin': 'PG15', 'speed': 10.0, 'lift_speed': 10.0, 'x_offset': 0.0, 'y_offset': 25.0, 'samples': 5, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.006, 'samples_tolerance_retries': 6}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE5', 'fan_speed': 1.0}, 'controller_fan controller_fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD12', 'fan_speed': 1.0, 'idle_speed': 1.0, 'idle_timeout': 30, 'heater': ['heater_bed']}, 'heater_fan exhaust_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 5.0, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13', 'fan_speed': 1.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PD15', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 1.0, 'maximum_mcu_duration': 0.0, 'value': 1.0, 'shutdown_value': 0.0}, 'neopixel headlight': {'pin': 'PB0', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 0.0, 'initial_green': 0.2157, 'initial_blue': 1.0, 'initial_white': 0.0}, 'temperature_sensor chamber_temp': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF5', 'min_temp': 0.0, 'max_temp': 100.0, 'gcode_id': 'chamber_th'}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [150.0, 348.0], [350.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 5.0], [150.0, 245.0], [270.0, 5.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'gcode_macro _user_variables': {'gcode': '\n{% set Mx = printer[\'configfile\'].config["stepper_x"]["position_max"]|float %}\n{% set My = printer[\'configfile\'].config["stepper_y"]["position_max"]|float %}\n{% set Ox = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set Oy = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set Oz = printer[\'configfile\'].config["probe"]["z_offset"]|float %}\n\n\n{% if z_endstop_x != 0 or z_endstop_y != 0 %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ z_endstop_x }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ z_endstop_y }\n\n\n{% else %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ (Mx * 0.5) - Ox }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ (My * 0.5) - Oy }\n{% endif %}', 'description': 'G-Code macro', 'variable_verbose': 'True', 'variable_debug': 'False', 'variable_travel_speed': '200', 'variable_move_accel': '1000', 'variable_dock_speed': '50', 'variable_release_speed': '75', 'variable_z_drop_speed': '20', 'variable_safe_z': '25', 'variable_enable_z_hop': 'True', 'variable_max_bed_y': '300', 'variable_max_bed_x': '300', 'variable_z_endstop_x': '172', 'variable_z_endstop_y': '301', 'variable_docklocation_x': '42', 'variable_docklocation_y': '297', 'variable_docklocation_z': '-128', 'variable_enable_dock_servo': 'False', 'variable_servo_name': "'NAME'", 'variable_servo_deploy': '10', 'variable_servo_retract': '11', 'variable_servo_delay': '250', 'variable_dockmove_x': '40', 'variable_dockmove_y': '0', 'variable_dockmove_z': '0', 'variable_attachmove_x': '0', 'variable_attachmove_y': '30', 'variable_attachmove_z': '0', 'variable_umbilical': 'False', 'variable_umbilical_x': '15', 'variable_umbilical_y': '15', 'variable_park_toolhead': 'False', 'variable_parkposition_x': '125', 'variable_parkposition_y': '125', 'variable_parkposition_z': '30', 'variable_version': '1', 'variable_attachmove2_x': '0', 'variable_attachmove2_y': '0', 'variable_attachmove2_z': '0', 'variable_home_backoff_x': '10', 'variable_home_backoff_y': '10', 'variable_override_homing': "''", 'variable_dock_on_zhome': 'True'}, 'gcode_macro print_start': {'gcode': '\nM117 Homing...\nG28\nATTACH_PROBE\nZ_TILT_ADJUST\nDOCK_PROBE\nG28\n\n\n\n\n\n\n\nG0 X150 Y150 Z30 F3600', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1500.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-02-19 19:57:00,331 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-19 19:57:00,331 [printer.py:reinit()] - Klipper version: v0.12.0-103-g6ce6fbbc-dirty
2024-02-19 19:57:00,331 [printer.py:reinit()] - # Extruders: 1
2024-02-19 19:57:00,331 [printer.py:reinit()] - # Temperature devices: 2
2024-02-19 19:57:00,331 [printer.py:reinit()] - # Fans: 4
2024-02-19 19:57:00,331 [printer.py:reinit()] - # Output pins: 1
2024-02-19 19:57:00,332 [printer.py:reinit()] - # Leds: 1
2024-02-19 19:57:00,344 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2024-02-19 19:57:00,345 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-02-19 19:57:00,619 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor chamber_temp&fan&controller_fan controller_fan&heater_fan hotend_fan&heater_fan exhaust_fan&output_pin caselight&neopixel headlight
2024-02-19 19:57:00,622 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-02-19 19:57:00,622 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-02-19 19:57:00,623 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-02-19 19:57:00,624 [screen.py:init_klipper()] - Printer initialized
2024-02-19 19:57:00,625 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2024-02-19 19:57:00,625 [printer.py:change_state()] - Adding callback for state: ready
2024-02-19 19:57:00,631 [screen.py:show_panel()] - Reinitializing panel
2024-02-19 19:57:00,683 [main_menu.py:__init__()] - ### Making MainMenu
2024-02-19 19:57:00,688 [main_menu.py:add_device()] - Adding device: extruder
2024-02-19 19:57:00,693 [main_menu.py:add_device()] - Adding device: heater_bed
2024-02-19 19:57:00,698 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber_temp
2024-02-19 19:57:00,722 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-02-19 19:57:00,736 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-02-19 19:57:00,741 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'temperature_sensor chamber_temp', 'extruder']
2024-02-19 19:57:00,753 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2024-02-19 19:57:00,754 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-02-19 20:11:20,500 [screen.py:_load_panel()] - Loading panel: extrude
2024-02-19 20:11:20,590 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > extrude
2024-02-19 20:11:23,562 [screen.py:show_popup_message()] - error: Macro LOAD_FILAMENT not found
2024-02-19 20:11:30,054 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M83
2024-02-19 20:11:30,056 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G1 E+10 F120'}
2024-02-19 20:11:41,187 [screen.py:_menu_go_back()] - #### Menu go back
2024-02-19 20:11:41,225 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-02-19 20:11:42,152 [screen.py:show_panel()] - Reinitializing panel
2024-02-19 20:11:42,242 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-02-19 20:11:43,378 [move.py:change_distance()] - ### Distance 25
2024-02-19 20:11:43,929 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z+25 F600'}
2024-02-19 20:11:43,931 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 20:12:04,478 [screen.py:_menu_go_back()] - #### Menu go back
2024-02-19 20:12:04,508 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-02-19 20:12:05,458 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > extrude
2024-02-19 20:12:06,714 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M83
2024-02-19 20:12:06,714 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G1 E+10 F120'}
2024-02-19 20:12:48,310 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M83
2024-02-19 20:12:48,312 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G1 E+10 F120'}
2024-02-19 20:13:02,570 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M83
2024-02-19 20:13:02,571 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G1 E+10 F120'}
2024-02-19 20:13:41,210 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M83
2024-02-19 20:13:41,212 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G1 E+10 F120'}
2024-02-19 20:13:57,939 [extrude.py:change_distance()] - ### Distance 15
2024-02-19 20:13:59,482 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M83
2024-02-19 20:13:59,485 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G1 E+15 F120'}
2024-02-19 20:15:43,154 [extrude.py:change_speed()] - ### Speed 5
2024-02-19 20:15:44,138 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M83
2024-02-19 20:15:44,139 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G1 E+15 F300'}
2024-02-19 20:19:41,066 [screen.py:show_popup_message()] - error: No trigger on probe after full movement
2024-02-19 20:19:47,787 [screen.py:_menu_go_back()] - #### Menu go back
2024-02-19 20:19:47,821 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-02-19 20:19:49,298 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-02-19 20:19:51,602 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z+25 F600'}
2024-02-19 20:19:51,603 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 20:19:52,566 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z+25 F600'}
2024-02-19 20:19:52,567 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 20:19:55,603 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z+25 F600'}
2024-02-19 20:19:55,607 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 20:20:06,862 [screen.py:show_panel()] - Reinitializing panel
2024-02-19 20:20:06,986 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move > menu
2024-02-19 20:20:06,997 [menu.py:arrangeMenuItems()] - X > homing quad_gantry_level
2024-02-19 20:20:09,545 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G28'}
2024-02-19 20:23:03,470 [KlippyWebsocket.py:emergency_stop()] - Sending printer.emergency_stop
2024-02-19 20:23:03,611 [printer.py:change_state()] - Changing state from 'ready' to 'shutdown'
2024-02-19 20:23:03,611 [printer.py:change_state()] - Adding callback for state: shutdown
2024-02-19 20:23:03,612 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-19 20:23:03,615 [screen.py:show_panel()] - Reinitializing panel
2024-02-19 20:23:03,670 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-02-19 20:23:06,893 [KlippyWebsocket.py:restart_firmware()] - Sending printer.firmware_restart
2024-02-19 20:23:06,920 [printer.py:change_state()] - Changing state from 'shutdown' to 'disconnected'
2024-02-19 20:23:06,920 [printer.py:change_state()] - Adding callback for state: disconnected
2024-02-19 20:23:06,921 [screen.py:state_disconnected()] - ### Going to disconnected
2024-02-19 20:23:06,922 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-19 20:23:06,923 [screen.py:show_panel()] - Reinitializing panel
2024-02-19 20:23:06,955 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-02-19 20:23:10,286 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-19 20:23:10,295 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2024-02-19 20:23:10,295 [printer.py:configure_cameras()] - Cameras: []
2024-02-19 20:23:10,296 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'update_manager', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-310-g67c98f6', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-02-19 20:23:10,304 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2024-02-19 20:23:10,462 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2024-02-19 20:23:10,465 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro _Probe_Variables': {'variable_probe_attached': 'False', 'variable_probe_state': 'False', 'variable_probe_lock': 'False', 'variable_probe_z_homed': 'False', 'variable_z_endstop_x': '0', 'variable_z_endstop_y': '0', 'gcode': ''}, 'gcode_macro _klicky_check_variables_version': {'gcode': '\n{% set version = printer["gcode_macro _User_Variables"].version|default(0) %}\n\n{% if version != 1 %}\n{ action_raise_error("Please update your klicky variables, there are some functionality changes") }\n{% endif %}'}, 'gcode_macro _KlickyDebug': {'gcode': '\n{% set message  = params.MSG %}\n{% set debug = printer["gcode_macro _User_Variables"].debug|default(False) %}\n\n{% if debug %}\n{ action_respond_info(message) }\n{% endif %}'}, 'gcode_macro _exit_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move  = params.MOVE|default(0) %}\n{% set speed = printer["gcode_macro _User_Variables"].travel_speed %}\n\n\nM400\nSET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\nRESTORE_GCODE_STATE NAME={function} MOVE={move} MOVE_SPEED={speed}'}, 'gcode_macro _entry_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move_accel = printer["gcode_macro _User_Variables"].move_accel|default(1000) %}\n\nM400\nSAVE_GCODE_STATE NAME={function}\n\nSET_GCODE_OFFSET Z=0\n\nG90\n\nSET_VELOCITY_LIMIT ACCEL={move_accel}'}, 'gcode_macro _Homing_Variables': {'gcode': '\n{% set reset  = params.RESET|default(0) %}\n{% if reset %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }\n{% endif %}'}, 'gcode_macro Attach_Probe_Lock': {'description': 'Attaches Klicky Probe, can only be docked after unlocking', 'gcode': '\nAttach_Probe\n_Probe_Lock'}, 'gcode_macro Dock_Probe_Unlock': {'description': 'Docks Klicky Probe even if it was locked', 'gcode': '\n_Probe_Unlock\nDock_Probe'}, 'gcode_macro _Probe_Unlock': {'description': 'Unlocks Klicky Probe state', 'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to False"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }'}, 'gcode_macro _Probe_Lock': {'description': 'Locks Klicky Probe state', 'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to True"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ True }'}, 'gcode_macro _DeployKlickyDock': {'description': 'Deploys Klicky servo-controlled dock', 'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_deploy = printer["gcode_macro _User_Variables"].servo_deploy|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_DeployKlickyDock Klicky servo configuration enabled"\n{% if servo_deploy == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo deploy angle specified") }\n{% endif %}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _DeployDock"] is defined %}\n_KlickyDebug msg="_DeployKlickyDock calling _DeployDock"\n_DeployDock\n{% endif %}'}, 'gcode_macro _RetractKlickyDock': {'description': 'Retracts Klicky servo-controlled dock', 'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_retract = printer["gcode_macro _User_Variables"].servo_retract|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_RetractKlickyDock Klicky servo configuration enabled"\n{% if servo_retract == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo retract angle specified") }\n{% endif %}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _RetractDock"] is defined %}\n_KlickyDebug msg="_RetractKlickyDock calling _RetractDock"\n_RetractDock\n{% endif %}'}, 'gcode_macro Attach_Probe': {'description': 'Attaches Klicky Probe', 'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set attachmove2_x = printer["gcode_macro _User_Variables"].attachmove2_x|default(0) %}\n{% set attachmove2_y = printer["gcode_macro _User_Variables"].attachmove2_y|default(0) %}\n{% set attachmove2_z = printer["gcode_macro _User_Variables"].attachmove2_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n_entry_point function=Attach_Probe\n\n{% if bypass_probe_docking == False %}\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n_KlickyDebug msg="Attach_Probe Axis homed"\n\n\n{% elif not probe_attached and not probe_lock %}\n_KlickyDebug msg="Attach_Probe going to attach probe"\n{% if verbose %}\n{ action_respond_info("Attaching Probe") }\n{% endif %}\n_KLICKY_STATUS_BUSY\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% if not enable_z_hop %}\n_KlickyDebug msg="Attach_Probe z_hop disabled"\n{% set safe_z = 0 %}\n{% endif %}\n{% endif %}\n\n\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero, duplicate?") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Umbilical_Path\n\n_entry_point function=Attach_Probe_intern\n\n\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n_DeployKlickyDock\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}"\nG0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}\n\n_RetractKlickyDock\n\n{% if ((printer.gcode_move.gcode_position.z < safe_z) or (docklocation_z != -128 and docklocation_z < safe_z ))%}\n_KlickyDebug msg="Attach_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\n_CheckProbe action=attach\n\n_exit_point function=Attach_Probe_intern move={goback}\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe locked not attaching probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already attached!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe already attached, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Attach_Probe\n{% else %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}'}, 'gcode_macro Dock_Probe': {'description': 'Docks Klicky Probe', 'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n{% if bypass_probe_docking == True %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}\n\n{% if bypass_probe_docking != True %}\n_entry_point function=Dock_Probe\n\n\n{% if probe_attached and not probe_lock %}\n_KLICKY_STATUS_BUSY\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Dock_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n_Umbilical_Path\n\n\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n\n_DeployKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\n\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}"\nG0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}\n{% endif %}\n\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}\n\n\n_RetractKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving away from the dock to G0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}\n\n\n{% if (printer.gcode_move.gcode_position.z < safe_z) %}\n_KlickyDebug msg="Dock_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\nG4 P1000\n_CheckProbe action=dock\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe locked not docking probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already docked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe already docked, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Dock_Probe move={goback}\n{% else %}\n_KlickyDebug msg="Dock_Probe probe docking bypassed, doing nothing"\n{% endif %}'}, 'gcode_macro PROBE_CALIBRATE': {'rename_existing': '_PROBE_CALIBRATE', 'description': 'Calibrate the probes z_offset with klicky automount', 'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_calibrate Axis homed"\n_KlickyDebug msg="probe_calibrate Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_CALIBRATE with the probe above the BED, check klicky_variables bed size!") }\n{% endif %}\n\n{% if bypass_probe_docking == False %}\n_CheckProbe action=query\nG90\nAttach_Probe back=1\n_KLICKY_STATUS_CALIBRATING_Z\n\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nM118 moving the toolhead 20 mm from the bed\n_KlickyDebug msg="probe_calibrate Moving Z up by 20mm"\nTESTZ Z=20\nM118 remove manually the probe and continue calibration\n_KLICKY_STATUS_READY\n{% else %}\n_KLICKY_STATUS_CALIBRATING_Z\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n_KLICKY_STATUS_READY\n{% endif %}'}, 'gcode_macro PROBE_ACCURACY': {'rename_existing': '_PROBE_ACCURACY', 'description': 'Probe Z-height accuracy at current XY position with klicky automount', 'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_accuracy Axis homed"\n_KlickyDebug msg="probe_accuracy Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n_entry_point function=PROBE_ACCURACY\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_ACCURACY with the probe above the BED, check klicky_variables bed size!") }\n{% endif%}\n\n_CheckProbe action=query\nAttach_Probe back=1\n\n_KlickyDebug msg="probe_accuracy calling klipper probe accuracy"\n_PROBE_ACCURACY {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nDock_Probe back=1\n\n_exit_point function=PROBE_ACCURACY move=1'}, 'force_move': {'enable_force_move': 'True'}, 'homing_override': {'axes': 'xyz', 'gcode': '\n\n_User_Variables\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n{% set kinematic_z = 0 %}\n{% set dock_on_zhome = printer["gcode_macro _User_Variables"].dock_on_zhome|default(True) %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set home_backoff_x = printer["gcode_macro _User_Variables"].home_backoff_x|default(0) %}\n{% set home_backoff_y = printer["gcode_macro _User_Variables"].home_backoff_y|default(0) %}\n{% set override_homing = printer["gcode_macro _User_Variables"].override_homing|default(\'\') %}\n\n\n_klicky_check_variables_version\n\n_CheckProbe action=query\n\n\n{% set home_x, home_y, home_z, leave_probe_attached = False, False, False, False %}\n\n{% if \'PROBE_LOCK\' in params%}\n{% if verbose %}\n{ action_respond_info("PROBE_LOCK = True") }\n{% endif %}\n{% set leave_probe_attached = True %}\n{% endif %}\n\n\n{% if not \'X\' in params\nand not \'Y\' in params\nand not \'Z\' in params %}\n\n{% set home_x, home_y, home_z = True, True, True %}\n_KlickyDebug msg="homing_override goint to home all axes"\n\n{% else %}\n{% if \'X\' in params %}\n{% set home_x = True %}\n_KlickyDebug msg="homing_override goint to home X"\n\n{% endif %}\n\n{% if \'Y\' in params %}\n{% set home_y = True %}\n_KlickyDebug msg="homing_override goint to home Y"\n{% endif %}\n\n{% if \'Z\' in params %}\n{% set home_z = True %}\n_KlickyDebug msg="homing_override goint to home Z"\n{% endif %}\n\n{% if \'X\' in params\nand \'Y\' in params\nand \'Z\' in params %}\n\n\n_Homing_Variables reset=1\n_KlickyDebug msg="homing_override goint to home all axes"\n{% endif %}\n\n{% endif %}\n\n_entry_point function=homing_override\n_KLICKY_STATUS_HOMING\n\n\n{% if \'z\' not in printer.toolhead.homed_axes %}\n{% if enable_z_hop == False %}\n_KlickyDebug msg="homing_override z_hop disabled"\n\n{% set kinematic_z = safe_z %}\n{% set safe_z = safe_z %}\n{% endif %}\n{% endif %}\n\n\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes and \'z\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("No axis homed") }\n{% endif %}\n_KlickyDebug msg="homing_override no axis homed, setting position as X=Y=0 Z={kinematic_z}"\nSET_KINEMATIC_POSITION X=0 Y=0 Z={kinematic_z}\nM400\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% if home_z != True %}\n_KlickyDebug msg="homing_override clearing axis homed state if not already homing Z"\nM84\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("X or Y not homed, forcing full G28") }\n{% endif %}\n{% set home_x, home_y, home_z = True, True, True %}\n{% endif %}\n{% endif %}\n\n\n{% if ((attachmove_y == 0 and override_homing == \'\' ) or (override_homing == \'Y\'))%}\n\n{% if home_y %}\n{% if override_homing == \'Y\' %}\n_KlickyDebug msg="homing_override Y homing first override, due to override_homing = Y"\n{% else %}\n_KlickyDebug msg="homing_override Y homing first override, due to attachmove_y = 0"\n{% endif %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y G28 Y0"\nG28 Y0\n\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop-home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n{% set home_y = False %}\n{% endif %}\n\n\n\n{% if home_x %}\n{% if verbose %}\n{ action_respond_info("Homing X") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in X homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_X"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_X external script to handle the X homing"\n_HOME_X\n{% else %}\n_KlickyDebug msg="homing_override Homing X, G28 X0"\nG28 X0\n\n{% if home_backoff_x != 0 %}\n{% if (printer.configfile.settings.stepper_x.position_endstop > (printer.configfile.settings.stepper_x.position_min|default(0) + printer.configfile.settings.stepper_x.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n\n{% if home_y %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y, G28 Y0"\nG28 Y0\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if verbose %}\n{ action_respond_info("Homing Z") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe configured as a virtual Z endstop attaching probe"\nAttach_Probe\n\n{% if leave_probe_attached %}\n_Probe_Lock\n{% endif %}\n{% elif dock_on_zhome == True %}\nDock_Probe\n{% endif %}\n\n_Home_Z_\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe no longer required, docking probe"\nDock_Probe\n{% elif dock_on_zhome == False %}\nDock_Probe\n{% endif %}\n{% endif %}\n_CheckProbe action=query\n\n\n_Park_Toolhead\n\n_exit_point function=homing_override\n_KLICKY_STATUS_READY'}, 'gcode_macro _Umbilical_Path': {'gcode': '\n{% set umbilical = printer["gcode_macro _User_Variables"].umbilical %}\n{% set umbilical_x = printer["gcode_macro _User_Variables"].umbilical_x %}\n{% set umbilical_y = printer["gcode_macro _User_Variables"].umbilical_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n\n{% if umbilical %}\n\n_entry_point function=Umbilical_Path\n\n_KlickyDebug msg="_Umbilical_Path moving to G0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}"\nG0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}\n\n_exit_point function=Umbilical_Path\n{% endif %}'}, 'gcode_macro _Home_Z_': {'gcode': '\n{% set z_endstop_x = printer["gcode_macro _Probe_Variables"].z_endstop_x %}\n{% set z_endstop_y = printer["gcode_macro _Probe_Variables"].z_endstop_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}    {% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Home_Z\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n{% else %}\n_KlickyDebug msg="_Home_Z_ XY Axis homed"\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="_Home_Z_ Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n\n\n_KlickyDebug msg="_Home_Z_ moving to Z endstop position G0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}"\nG0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}\n_KlickyDebug msg="_Home_Z_ Homing Z G28 Z"\nG28 Z0\n_KlickyDebug msg="_Home_Z_ toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_exit_point function=Home_Z'}, 'gcode_macro _CheckProbe': {'variable_probe_state': '0', 'gcode': '\nQuery_Probe\n_SetProbeState action={ params.ACTION }'}, 'gcode_macro _SetProbeState': {'gcode': '\n{% set query_probe_triggered = printer.probe.last_query %}\n{% set action  = params.ACTION|default(\'\') %}\n\n\n{% if query_probe_triggered %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ False }\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ True }\n{% endif %}\n\n{% if action == \'query\' %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_state VALUE={ query_probe_triggered }\n{% endif %}\n\n\n\n\n{% if not query_probe_triggered and action == \'dock\' %}\n{ action_raise_error("Probe dock failed!") }\n{% endif %}\n\n\n{% if query_probe_triggered and action == \'attach\' %}\n{ action_raise_error("Probe attach failed!") }\n{% endif %}'}, 'gcode_macro _Park_Toolhead': {'gcode': '\n{% set park_toolhead = printer["gcode_macro _User_Variables"].park_toolhead %}\n{% set parkposition_x = printer["gcode_macro _User_Variables"].parkposition_x %}\n{% set parkposition_y = printer["gcode_macro _User_Variables"].parkposition_y %}\n{% set parkposition_z = printer["gcode_macro _User_Variables"].parkposition_z %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Park_Toolhead\n\n{% if park_toolhead and \'xyz\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Parking Toolhead") }\n{% endif %}\n{% if parkposition_z == -128 %}\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}\n\n{% else %}\n\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}\n\n{% endif %}\n\n{% endif %}\n_exit_point function=Park_Toolhead'}, 'gcode_macro _klicky_status_ready': {'gcode': '\n{% if printer[\'gcode_macro status_ready\'] is defined %}\n_KlickyDebug msg="_klicky_status_ready activating the LED STATUS_READY"\nSTATUS_READY\n{% endif %}'}, 'gcode_macro _klicky_status_busy': {'gcode': '\n{% if printer[\'gcode_macro status_busy\'] is defined %}\n_KlickyDebug msg="_klicky_status_busy activating the LED STATUS_BUSY"\nSTATUS_BUSY\n{% endif %}'}, 'gcode_macro _klicky_status_leveling': {'gcode': '\n{% if printer[\'gcode_macro status_leveling\'] is defined %}\n_KlickyDebug msg="_klicky_status_leveling activating the LED STATUS_LEVELING"\nSTATUS_LEVELING\n{% endif %}'}, 'gcode_macro _klicky_status_homing': {'gcode': '\n{% if printer[\'gcode_macro status_homing\'] is defined %}\n_KlickyDebug msg="_klicky_status_homing activating the LED STATUS_HOMING"\nSTATUS_HOMING\n{% endif %}'}, 'gcode_macro _klicky_status_cleaning': {'gcode': '\n{% if printer[\'gcode_macro status_cleaning\'] is defined %}\n_KlickyDebug msg="_klicky_status_cleaning activating the LED STATUS_CLEANING"\nSTATUS_CLEANING\n{% endif %}'}, 'gcode_macro _klicky_status_meshing': {'gcode': '\n{% if printer[\'gcode_macro status_meshing\'] is defined %}\n_KlickyDebug msg="_klicky_status_meshing activating the LED STATUS_MESHING"\nSTATUS_MESHING\n{% endif %}'}, 'gcode_macro _klicky_status_calibrating_z': {'gcode': '\n{% if printer[\'gcode_macro status_calibrating_z\'] is defined %}\n_KlickyDebug msg="_klicky_status_calibrating_z activating the LED STATUS_CALIBRATING_Z"\nSTATUS_CALIBRATING_Z\n{% endif %}'}, 'z_calibration': {'nozzle_xy_position': '172, 301', 'switch_xy_position': '171.5, 282', 'bed_xy_position': '150, 150', 'switch_offset': '0.09', 'offset_margins': '-1.0,1.0', 'speed': '50', 'probing_first_fast': 'false', 'start_gcode': 'Attach_Probe', 'end_gcode': 'Dock_Probe'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_28003C001150535556323420-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '^PG6', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '25', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'PG9', 'position_min': '0', 'position_endstop': '300', 'position_max': '303.5', 'homing_speed': '25', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': '!PG3', 'enable_pin': '!PG5', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'PG10', 'position_max': '290', 'position_min': '-4.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3', 'position_endstop': '-0.711'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA0', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': '!PF10', 'enable_pin': '!PG2', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PC13', 'dir_pin': 'PF0', 'enable_pin': '!PF1', 'rotation_distance': '21.9459674016', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.75', 'heater_pin': 'PA1', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF4', 'min_temp': '10', 'max_temp': '270', 'max_power': '1.0', 'min_extrude_temp': '170', 'pressure_advance': '0.05', 'pressure_advance_smooth_time': '0.040', 'control': 'pid', 'pid_kp': '26.572', 'pid_ki': '2.036', 'pid_kd': '86.691'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.5', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PA2', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF3', 'max_power': '1', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '55.196', 'pid_ki': '2.091', 'pid_kd': '364.295'}, 'probe': {'pin': 'PG15', 'x_offset': '0', 'y_offset': '25.0', 'z_offset': '0', 'speed': '10.0', 'samples': '5', 'samples_result': 'median', 'sample_retract_dist': '3.0', 'samples_tolerance': '0.006', 'samples_tolerance_retries': '6'}, 'fan': {'pin': 'PA8', 'kick_start_time': '0.5', 'off_below': '0.10'}, 'heater_fan hotend_fan': {'pin': 'PE5', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'controller_fan controller_fan': {'pin': 'PD12', 'kick_start_time': '0.5', 'heater': 'heater_bed'}, 'heater_fan exhaust_fan': {'pin': 'PD13', 'max_power': '1.0', 'shutdown_speed': '0.0', 'kick_start_time': '5.0', 'heater': 'heater_bed', 'heater_temp': '60', 'fan_speed': '1.0'}, 'output_pin caselight': {'pin': 'PD15', 'pwm': 'true', 'shutdown_value': '0', 'value': '1', 'cycle_time': '0.01'}, 'neopixel headlight': {'pin': 'PB0', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '0.0', 'initial_green': '0.2157', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'temperature_sensor chamber_temp': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF5', 'min_temp': '0', 'max_temp': '100', 'gcode_id': 'chamber_th'}, 'idle_timeout': {'timeout': '1800'}, 'z_tilt': {'z_positions': '\n-50, 18\n150, 348\n350, 18', 'points': '\n30, 5\n150, 245\n270, 5', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'gcode_macro _User_Variables': {'variable_verbose': 'True', 'variable_debug': 'False', 'variable_travel_speed': '200', 'variable_move_accel': '1000', 'variable_dock_speed': '50', 'variable_release_speed': '75', 'variable_z_drop_speed': '20', 'variable_safe_z': '25', 'variable_enable_z_hop': 'True', 'variable_max_bed_y': '300', 'variable_max_bed_x': '300', 'variable_z_endstop_x': '172', 'variable_z_endstop_y': '301', 'variable_docklocation_x': '42', 'variable_docklocation_y': '297', 'variable_docklocation_z': '-128', 'variable_enable_dock_servo': 'False', 'variable_servo_name': "'NAME'", 'variable_servo_deploy': '10', 'variable_servo_retract': '11', 'variable_servo_delay': '250', 'variable_dockmove_x': '40', 'variable_dockmove_y': '0', 'variable_dockmove_z': '0', 'variable_attachmove_x': '0', 'variable_attachmove_y': '30', 'variable_attachmove_z': '0', 'variable_umbilical': 'False', 'variable_umbilical_x': '15', 'variable_umbilical_y': '15', 'variable_park_toolhead': 'False', 'variable_parkposition_x': '125', 'variable_parkposition_y': '125', 'variable_parkposition_z': '30', 'variable_version': '1', 'variable_attachmove2_x': '0', 'variable_attachmove2_y': '0', 'variable_attachmove2_z': '0', 'variable_home_backoff_x': '10', 'variable_home_backoff_y': '10', 'variable_override_homing': "''", 'variable_dock_on_zhome': 'True', 'gcode': '\n{% set Mx = printer[\'configfile\'].config["stepper_x"]["position_max"]|float %}\n{% set My = printer[\'configfile\'].config["stepper_y"]["position_max"]|float %}\n{% set Ox = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set Oy = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set Oz = printer[\'configfile\'].config["probe"]["z_offset"]|float %}\n\n\n{% if z_endstop_x != 0 or z_endstop_y != 0 %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ z_endstop_x }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ z_endstop_y }\n\n\n{% else %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ (Mx * 0.5) - Ox }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ (My * 0.5) - Oy }\n{% endif %}'}, 'gcode_macro PRINT_START': {'gcode': '\nM117 Homing...\nG28\nATTACH_PROBE\nZ_TILT_ADJUST\nDOCK_PROBE\nG28\n\n\n\n\n\n\n\nG0 X150 Y150 Z30 F3600'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_28003C001150535556323420-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro _probe_variables': {'gcode': '', 'description': 'G-Code macro', 'variable_probe_attached': 'False', 'variable_probe_state': 'False', 'variable_probe_lock': 'False', 'variable_probe_z_homed': 'False', 'variable_z_endstop_x': '0', 'variable_z_endstop_y': '0'}, 'gcode_macro _klicky_check_variables_version': {'gcode': '\n{% set version = printer["gcode_macro _User_Variables"].version|default(0) %}\n\n{% if version != 1 %}\n{ action_raise_error("Please update your klicky variables, there are some functionality changes") }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klickydebug': {'gcode': '\n{% set message  = params.MSG %}\n{% set debug = printer["gcode_macro _User_Variables"].debug|default(False) %}\n\n{% if debug %}\n{ action_respond_info(message) }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _exit_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move  = params.MOVE|default(0) %}\n{% set speed = printer["gcode_macro _User_Variables"].travel_speed %}\n\n\nM400\nSET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\nRESTORE_GCODE_STATE NAME={function} MOVE={move} MOVE_SPEED={speed}', 'description': 'G-Code macro'}, 'gcode_macro _entry_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move_accel = printer["gcode_macro _User_Variables"].move_accel|default(1000) %}\n\nM400\nSAVE_GCODE_STATE NAME={function}\n\nSET_GCODE_OFFSET Z=0\n\nG90\n\nSET_VELOCITY_LIMIT ACCEL={move_accel}', 'description': 'G-Code macro'}, 'gcode_macro _homing_variables': {'gcode': '\n{% set reset  = params.RESET|default(0) %}\n{% if reset %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro attach_probe_lock': {'gcode': '\nAttach_Probe\n_Probe_Lock', 'description': 'Attaches Klicky Probe, can only be docked after unlocking'}, 'gcode_macro dock_probe_unlock': {'gcode': '\n_Probe_Unlock\nDock_Probe', 'description': 'Docks Klicky Probe even if it was locked'}, 'gcode_macro _probe_unlock': {'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to False"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }', 'description': 'Unlocks Klicky Probe state'}, 'gcode_macro _probe_lock': {'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to True"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ True }', 'description': 'Locks Klicky Probe state'}, 'gcode_macro _deployklickydock': {'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_deploy = printer["gcode_macro _User_Variables"].servo_deploy|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_DeployKlickyDock Klicky servo configuration enabled"\n{% if servo_deploy == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo deploy angle specified") }\n{% endif %}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _DeployDock"] is defined %}\n_KlickyDebug msg="_DeployKlickyDock calling _DeployDock"\n_DeployDock\n{% endif %}', 'description': 'Deploys Klicky servo-controlled dock'}, 'gcode_macro _retractklickydock': {'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_retract = printer["gcode_macro _User_Variables"].servo_retract|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_RetractKlickyDock Klicky servo configuration enabled"\n{% if servo_retract == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo retract angle specified") }\n{% endif %}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _RetractDock"] is defined %}\n_KlickyDebug msg="_RetractKlickyDock calling _RetractDock"\n_RetractDock\n{% endif %}', 'description': 'Retracts Klicky servo-controlled dock'}, 'gcode_macro attach_probe': {'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set attachmove2_x = printer["gcode_macro _User_Variables"].attachmove2_x|default(0) %}\n{% set attachmove2_y = printer["gcode_macro _User_Variables"].attachmove2_y|default(0) %}\n{% set attachmove2_z = printer["gcode_macro _User_Variables"].attachmove2_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n_entry_point function=Attach_Probe\n\n{% if bypass_probe_docking == False %}\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n_KlickyDebug msg="Attach_Probe Axis homed"\n\n\n{% elif not probe_attached and not probe_lock %}\n_KlickyDebug msg="Attach_Probe going to attach probe"\n{% if verbose %}\n{ action_respond_info("Attaching Probe") }\n{% endif %}\n_KLICKY_STATUS_BUSY\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% if not enable_z_hop %}\n_KlickyDebug msg="Attach_Probe z_hop disabled"\n{% set safe_z = 0 %}\n{% endif %}\n{% endif %}\n\n\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero, duplicate?") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Umbilical_Path\n\n_entry_point function=Attach_Probe_intern\n\n\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n_DeployKlickyDock\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}"\nG0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}\n\n_RetractKlickyDock\n\n{% if ((printer.gcode_move.gcode_position.z < safe_z) or (docklocation_z != -128 and docklocation_z < safe_z ))%}\n_KlickyDebug msg="Attach_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\n_CheckProbe action=attach\n\n_exit_point function=Attach_Probe_intern move={goback}\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe locked not attaching probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already attached!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe already attached, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Attach_Probe\n{% else %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}', 'description': 'Attaches Klicky Probe'}, 'gcode_macro dock_probe': {'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n{% if bypass_probe_docking == True %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}\n\n{% if bypass_probe_docking != True %}\n_entry_point function=Dock_Probe\n\n\n{% if probe_attached and not probe_lock %}\n_KLICKY_STATUS_BUSY\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Dock_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n_Umbilical_Path\n\n\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n\n_DeployKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\n\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}"\nG0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}\n{% endif %}\n\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}\n\n\n_RetractKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving away from the dock to G0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}\n\n\n{% if (printer.gcode_move.gcode_position.z < safe_z) %}\n_KlickyDebug msg="Dock_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\nG4 P1000\n_CheckProbe action=dock\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe locked not docking probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already docked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe already docked, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Dock_Probe move={goback}\n{% else %}\n_KlickyDebug msg="Dock_Probe probe docking bypassed, doing nothing"\n{% endif %}', 'description': 'Docks Klicky Probe'}, 'gcode_macro probe_calibrate': {'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_calibrate Axis homed"\n_KlickyDebug msg="probe_calibrate Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_CALIBRATE with the probe above the BED, check klicky_variables bed size!") }\n{% endif %}\n\n{% if bypass_probe_docking == False %}\n_CheckProbe action=query\nG90\nAttach_Probe back=1\n_KLICKY_STATUS_CALIBRATING_Z\n\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nM118 moving the toolhead 20 mm from the bed\n_KlickyDebug msg="probe_calibrate Moving Z up by 20mm"\nTESTZ Z=20\nM118 remove manually the probe and continue calibration\n_KLICKY_STATUS_READY\n{% else %}\n_KLICKY_STATUS_CALIBRATING_Z\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n_KLICKY_STATUS_READY\n{% endif %}', 'rename_existing': '_PROBE_CALIBRATE', 'description': 'Calibrate the probes z_offset with klicky automount'}, 'gcode_macro probe_accuracy': {'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_accuracy Axis homed"\n_KlickyDebug msg="probe_accuracy Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n_entry_point function=PROBE_ACCURACY\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_ACCURACY with the probe above the BED, check klicky_variables bed size!") }\n{% endif%}\n\n_CheckProbe action=query\nAttach_Probe back=1\n\n_KlickyDebug msg="probe_accuracy calling klipper probe accuracy"\n_PROBE_ACCURACY {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nDock_Probe back=1\n\n_exit_point function=PROBE_ACCURACY move=1', 'rename_existing': '_PROBE_ACCURACY', 'description': 'Probe Z-height accuracy at current XY position with klicky automount'}, 'force_move': {'enable_force_move': True}, 'homing_override': {'axes': 'xyz', 'gcode': '\n\n_User_Variables\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n{% set kinematic_z = 0 %}\n{% set dock_on_zhome = printer["gcode_macro _User_Variables"].dock_on_zhome|default(True) %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set home_backoff_x = printer["gcode_macro _User_Variables"].home_backoff_x|default(0) %}\n{% set home_backoff_y = printer["gcode_macro _User_Variables"].home_backoff_y|default(0) %}\n{% set override_homing = printer["gcode_macro _User_Variables"].override_homing|default(\'\') %}\n\n\n_klicky_check_variables_version\n\n_CheckProbe action=query\n\n\n{% set home_x, home_y, home_z, leave_probe_attached = False, False, False, False %}\n\n{% if \'PROBE_LOCK\' in params%}\n{% if verbose %}\n{ action_respond_info("PROBE_LOCK = True") }\n{% endif %}\n{% set leave_probe_attached = True %}\n{% endif %}\n\n\n{% if not \'X\' in params\nand not \'Y\' in params\nand not \'Z\' in params %}\n\n{% set home_x, home_y, home_z = True, True, True %}\n_KlickyDebug msg="homing_override goint to home all axes"\n\n{% else %}\n{% if \'X\' in params %}\n{% set home_x = True %}\n_KlickyDebug msg="homing_override goint to home X"\n\n{% endif %}\n\n{% if \'Y\' in params %}\n{% set home_y = True %}\n_KlickyDebug msg="homing_override goint to home Y"\n{% endif %}\n\n{% if \'Z\' in params %}\n{% set home_z = True %}\n_KlickyDebug msg="homing_override goint to home Z"\n{% endif %}\n\n{% if \'X\' in params\nand \'Y\' in params\nand \'Z\' in params %}\n\n\n_Homing_Variables reset=1\n_KlickyDebug msg="homing_override goint to home all axes"\n{% endif %}\n\n{% endif %}\n\n_entry_point function=homing_override\n_KLICKY_STATUS_HOMING\n\n\n{% if \'z\' not in printer.toolhead.homed_axes %}\n{% if enable_z_hop == False %}\n_KlickyDebug msg="homing_override z_hop disabled"\n\n{% set kinematic_z = safe_z %}\n{% set safe_z = safe_z %}\n{% endif %}\n{% endif %}\n\n\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes and \'z\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("No axis homed") }\n{% endif %}\n_KlickyDebug msg="homing_override no axis homed, setting position as X=Y=0 Z={kinematic_z}"\nSET_KINEMATIC_POSITION X=0 Y=0 Z={kinematic_z}\nM400\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% if home_z != True %}\n_KlickyDebug msg="homing_override clearing axis homed state if not already homing Z"\nM84\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("X or Y not homed, forcing full G28") }\n{% endif %}\n{% set home_x, home_y, home_z = True, True, True %}\n{% endif %}\n{% endif %}\n\n\n{% if ((attachmove_y == 0 and override_homing == \'\' ) or (override_homing == \'Y\'))%}\n\n{% if home_y %}\n{% if override_homing == \'Y\' %}\n_KlickyDebug msg="homing_override Y homing first override, due to override_homing = Y"\n{% else %}\n_KlickyDebug msg="homing_override Y homing first override, due to attachmove_y = 0"\n{% endif %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y G28 Y0"\nG28 Y0\n\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop-home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n{% set home_y = False %}\n{% endif %}\n\n\n\n{% if home_x %}\n{% if verbose %}\n{ action_respond_info("Homing X") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in X homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_X"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_X external script to handle the X homing"\n_HOME_X\n{% else %}\n_KlickyDebug msg="homing_override Homing X, G28 X0"\nG28 X0\n\n{% if home_backoff_x != 0 %}\n{% if (printer.configfile.settings.stepper_x.position_endstop > (printer.configfile.settings.stepper_x.position_min|default(0) + printer.configfile.settings.stepper_x.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n\n{% if home_y %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y, G28 Y0"\nG28 Y0\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if verbose %}\n{ action_respond_info("Homing Z") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe configured as a virtual Z endstop attaching probe"\nAttach_Probe\n\n{% if leave_probe_attached %}\n_Probe_Lock\n{% endif %}\n{% elif dock_on_zhome == True %}\nDock_Probe\n{% endif %}\n\n_Home_Z_\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe no longer required, docking probe"\nDock_Probe\n{% elif dock_on_zhome == False %}\nDock_Probe\n{% endif %}\n{% endif %}\n_CheckProbe action=query\n\n\n_Park_Toolhead\n\n_exit_point function=homing_override\n_KLICKY_STATUS_READY'}, 'gcode_macro _umbilical_path': {'gcode': '\n{% set umbilical = printer["gcode_macro _User_Variables"].umbilical %}\n{% set umbilical_x = printer["gcode_macro _User_Variables"].umbilical_x %}\n{% set umbilical_y = printer["gcode_macro _User_Variables"].umbilical_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n\n{% if umbilical %}\n\n_entry_point function=Umbilical_Path\n\n_KlickyDebug msg="_Umbilical_Path moving to G0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}"\nG0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}\n\n_exit_point function=Umbilical_Path\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _home_z_': {'gcode': '\n{% set z_endstop_x = printer["gcode_macro _Probe_Variables"].z_endstop_x %}\n{% set z_endstop_y = printer["gcode_macro _Probe_Variables"].z_endstop_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}    {% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Home_Z\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n{% else %}\n_KlickyDebug msg="_Home_Z_ XY Axis homed"\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="_Home_Z_ Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n\n\n_KlickyDebug msg="_Home_Z_ moving to Z endstop position G0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}"\nG0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}\n_KlickyDebug msg="_Home_Z_ Homing Z G28 Z"\nG28 Z0\n_KlickyDebug msg="_Home_Z_ toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_exit_point function=Home_Z', 'description': 'G-Code macro'}, 'gcode_macro _checkprobe': {'gcode': '\nQuery_Probe\n_SetProbeState action={ params.ACTION }', 'description': 'G-Code macro', 'variable_probe_state': '0'}, 'gcode_macro _setprobestate': {'gcode': '\n{% set query_probe_triggered = printer.probe.last_query %}\n{% set action  = params.ACTION|default(\'\') %}\n\n\n{% if query_probe_triggered %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ False }\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ True }\n{% endif %}\n\n{% if action == \'query\' %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_state VALUE={ query_probe_triggered }\n{% endif %}\n\n\n\n\n{% if not query_probe_triggered and action == \'dock\' %}\n{ action_raise_error("Probe dock failed!") }\n{% endif %}\n\n\n{% if query_probe_triggered and action == \'attach\' %}\n{ action_raise_error("Probe attach failed!") }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _park_toolhead': {'gcode': '\n{% set park_toolhead = printer["gcode_macro _User_Variables"].park_toolhead %}\n{% set parkposition_x = printer["gcode_macro _User_Variables"].parkposition_x %}\n{% set parkposition_y = printer["gcode_macro _User_Variables"].parkposition_y %}\n{% set parkposition_z = printer["gcode_macro _User_Variables"].parkposition_z %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Park_Toolhead\n\n{% if park_toolhead and \'xyz\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Parking Toolhead") }\n{% endif %}\n{% if parkposition_z == -128 %}\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}\n\n{% else %}\n\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}\n\n{% endif %}\n\n{% endif %}\n_exit_point function=Park_Toolhead', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_ready': {'gcode': '\n{% if printer[\'gcode_macro status_ready\'] is defined %}\n_KlickyDebug msg="_klicky_status_ready activating the LED STATUS_READY"\nSTATUS_READY\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_busy': {'gcode': '\n{% if printer[\'gcode_macro status_busy\'] is defined %}\n_KlickyDebug msg="_klicky_status_busy activating the LED STATUS_BUSY"\nSTATUS_BUSY\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_leveling': {'gcode': '\n{% if printer[\'gcode_macro status_leveling\'] is defined %}\n_KlickyDebug msg="_klicky_status_leveling activating the LED STATUS_LEVELING"\nSTATUS_LEVELING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_homing': {'gcode': '\n{% if printer[\'gcode_macro status_homing\'] is defined %}\n_KlickyDebug msg="_klicky_status_homing activating the LED STATUS_HOMING"\nSTATUS_HOMING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_cleaning': {'gcode': '\n{% if printer[\'gcode_macro status_cleaning\'] is defined %}\n_KlickyDebug msg="_klicky_status_cleaning activating the LED STATUS_CLEANING"\nSTATUS_CLEANING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_meshing': {'gcode': '\n{% if printer[\'gcode_macro status_meshing\'] is defined %}\n_KlickyDebug msg="_klicky_status_meshing activating the LED STATUS_MESHING"\nSTATUS_MESHING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_calibrating_z': {'gcode': '\n{% if printer[\'gcode_macro status_calibrating_z\'] is defined %}\n_KlickyDebug msg="_klicky_status_calibrating_z activating the LED STATUS_CALIBRATING_Z"\nSTATUS_CALIBRATING_Z\n{% endif %}', 'description': 'G-Code macro'}, 'z_calibration': {'switch_offset': 0.09, 'offset_margins': '-1.0,1.0', 'speed': 50.0, 'samples_result': 'none', 'probing_first_fast': False, 'nozzle_xy_position': '172, 301', 'switch_xy_position': '171.5, 282', 'bed_xy_position': '150, 150', 'start_gcode': 'Attach_Probe', 'before_switch_gcode': '', 'end_gcode': 'Dock_Probe'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': '^PG6', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'PG9', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 303.5, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PF11', 'dir_pin': '!PG3', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG5', 'endstop_pin': 'PG10', 'position_endstop': -0.711, 'position_min': -4.5, 'position_max': 290.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA0'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PF9', 'dir_pin': '!PF10', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG2'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF4', 'min_temp': 10.0, 'max_temp': 270.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 26.572, 'pid_ki': 2.036, 'pid_kd': 86.691, 'heater_pin': 'PA1', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PC13', 'pressure_advance': 0.05, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'PF0', 'rotation_distance': 21.9459674016, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 55.196, 'pid_ki': 2.091, 'pid_kd': 364.295, 'heater_pin': 'PA2', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'probe': {'z_offset': 0.0, 'deactivate_on_each_sample': True, 'activate_gcode': '', 'deactivate_gcode': '', 'pin': 'PG15', 'speed': 10.0, 'lift_speed': 10.0, 'x_offset': 0.0, 'y_offset': 25.0, 'samples': 5, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.006, 'samples_tolerance_retries': 6}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE5', 'fan_speed': 1.0}, 'controller_fan controller_fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD12', 'fan_speed': 1.0, 'idle_speed': 1.0, 'idle_timeout': 30, 'heater': ['heater_bed']}, 'heater_fan exhaust_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 5.0, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13', 'fan_speed': 1.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PD15', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 1.0, 'maximum_mcu_duration': 0.0, 'value': 1.0, 'shutdown_value': 0.0}, 'neopixel headlight': {'pin': 'PB0', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 0.0, 'initial_green': 0.2157, 'initial_blue': 1.0, 'initial_white': 0.0}, 'temperature_sensor chamber_temp': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF5', 'min_temp': 0.0, 'max_temp': 100.0, 'gcode_id': 'chamber_th'}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [150.0, 348.0], [350.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 5.0], [150.0, 245.0], [270.0, 5.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'gcode_macro _user_variables': {'gcode': '\n{% set Mx = printer[\'configfile\'].config["stepper_x"]["position_max"]|float %}\n{% set My = printer[\'configfile\'].config["stepper_y"]["position_max"]|float %}\n{% set Ox = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set Oy = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set Oz = printer[\'configfile\'].config["probe"]["z_offset"]|float %}\n\n\n{% if z_endstop_x != 0 or z_endstop_y != 0 %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ z_endstop_x }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ z_endstop_y }\n\n\n{% else %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ (Mx * 0.5) - Ox }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ (My * 0.5) - Oy }\n{% endif %}', 'description': 'G-Code macro', 'variable_verbose': 'True', 'variable_debug': 'False', 'variable_travel_speed': '200', 'variable_move_accel': '1000', 'variable_dock_speed': '50', 'variable_release_speed': '75', 'variable_z_drop_speed': '20', 'variable_safe_z': '25', 'variable_enable_z_hop': 'True', 'variable_max_bed_y': '300', 'variable_max_bed_x': '300', 'variable_z_endstop_x': '172', 'variable_z_endstop_y': '301', 'variable_docklocation_x': '42', 'variable_docklocation_y': '297', 'variable_docklocation_z': '-128', 'variable_enable_dock_servo': 'False', 'variable_servo_name': "'NAME'", 'variable_servo_deploy': '10', 'variable_servo_retract': '11', 'variable_servo_delay': '250', 'variable_dockmove_x': '40', 'variable_dockmove_y': '0', 'variable_dockmove_z': '0', 'variable_attachmove_x': '0', 'variable_attachmove_y': '30', 'variable_attachmove_z': '0', 'variable_umbilical': 'False', 'variable_umbilical_x': '15', 'variable_umbilical_y': '15', 'variable_park_toolhead': 'False', 'variable_parkposition_x': '125', 'variable_parkposition_y': '125', 'variable_parkposition_z': '30', 'variable_version': '1', 'variable_attachmove2_x': '0', 'variable_attachmove2_y': '0', 'variable_attachmove2_z': '0', 'variable_home_backoff_x': '10', 'variable_home_backoff_y': '10', 'variable_override_homing': "''", 'variable_dock_on_zhome': 'True'}, 'gcode_macro print_start': {'gcode': '\nM117 Homing...\nG28\nATTACH_PROBE\nZ_TILT_ADJUST\nDOCK_PROBE\nG28\n\n\n\n\n\n\n\nG0 X150 Y150 Z30 F3600', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1500.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-02-19 20:23:10,468 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-19 20:23:10,469 [printer.py:reinit()] - Klipper version: v0.12.0-103-g6ce6fbbc-dirty
2024-02-19 20:23:10,469 [printer.py:reinit()] - # Extruders: 1
2024-02-19 20:23:10,469 [printer.py:reinit()] - # Temperature devices: 2
2024-02-19 20:23:10,469 [printer.py:reinit()] - # Fans: 4
2024-02-19 20:23:10,469 [printer.py:reinit()] - # Output pins: 1
2024-02-19 20:23:10,469 [printer.py:reinit()] - # Leds: 1
2024-02-19 20:23:10,481 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2024-02-19 20:23:10,482 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-02-19 20:23:10,774 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor chamber_temp&fan&controller_fan controller_fan&heater_fan hotend_fan&heater_fan exhaust_fan&output_pin caselight&neopixel headlight
2024-02-19 20:23:10,777 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-02-19 20:23:10,777 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-02-19 20:23:10,777 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-02-19 20:23:10,778 [screen.py:init_klipper()] - Printer initialized
2024-02-19 20:23:10,778 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2024-02-19 20:23:10,778 [printer.py:change_state()] - Adding callback for state: ready
2024-02-19 20:23:10,781 [screen.py:show_panel()] - Reinitializing panel
2024-02-19 20:23:10,834 [main_menu.py:__init__()] - ### Making MainMenu
2024-02-19 20:23:10,840 [main_menu.py:add_device()] - Adding device: extruder
2024-02-19 20:23:10,844 [main_menu.py:add_device()] - Adding device: heater_bed
2024-02-19 20:23:10,849 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber_temp
2024-02-19 20:23:10,873 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-02-19 20:23:10,889 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-02-19 20:23:10,892 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'temperature_sensor chamber_temp', 'extruder']
2024-02-19 20:23:10,901 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2024-02-19 20:23:10,902 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-02-19 20:24:26,901 [screen.py:show_panel()] - Reinitializing panel
2024-02-19 20:24:26,975 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-02-19 20:24:28,561 [screen.py:_menu_go_back()] - #### Menu go back
2024-02-19 20:24:28,578 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-02-19 20:24:29,281 [screen.py:_go_to_submenu()] - #### Go to submenu more
2024-02-19 20:24:29,281 [screen.py:_go_to_submenu()] - #### Menu __main
2024-02-19 20:24:29,286 [screen.py:show_panel()] - Reinitializing panel
2024-02-19 20:24:29,467 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more
2024-02-19 20:24:29,471 [menu.py:arrangeMenuItems()] - X > more bedlevel
2024-02-19 20:24:29,473 [menu.py:arrangeMenuItems()] - X > more bedmesh
2024-02-19 20:24:29,478 [menu.py:arrangeMenuItems()] - X > more retraction
2024-02-19 20:24:29,489 [menu.py:arrangeMenuItems()] - X > more power
2024-02-19 20:24:29,492 [menu.py:arrangeMenuItems()] - X > more camera
2024-02-19 20:24:29,496 [menu.py:arrangeMenuItems()] - X > more input_shaper
2024-02-19 20:24:29,504 [menu.py:arrangeMenuItems()] - X > more spoolman
2024-02-19 20:24:30,254 [screen.py:show_panel()] - Reinitializing panel
2024-02-19 20:24:30,285 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more > gcode_macros
2024-02-19 20:24:31,550 [screen.py:show_popup_message()] - echo: Attach_Probe 
2024-02-19 20:24:31,553 [screen.py:_send_action()] - printer.gcode.script: {'script': 'Attach_Probe'}
2024-02-19 20:24:36,293 [screen.py:_menu_go_back()] - #### Menu go back
2024-02-19 20:24:36,315 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more
2024-02-19 20:24:36,321 [menu.py:arrangeMenuItems()] - X > more bedlevel
2024-02-19 20:24:36,323 [menu.py:arrangeMenuItems()] - X > more bedmesh
2024-02-19 20:24:36,328 [menu.py:arrangeMenuItems()] - X > more retraction
2024-02-19 20:24:36,339 [menu.py:arrangeMenuItems()] - X > more power
2024-02-19 20:24:36,341 [menu.py:arrangeMenuItems()] - X > more camera
2024-02-19 20:24:36,346 [menu.py:arrangeMenuItems()] - X > more input_shaper
2024-02-19 20:24:36,353 [menu.py:arrangeMenuItems()] - X > more spoolman
2024-02-19 20:24:37,233 [screen.py:_menu_go_back()] - #### Menu go back
2024-02-19 20:24:37,250 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-02-19 20:24:38,143 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-02-19 20:24:39,593 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 X+25 F3000'}
2024-02-19 20:24:39,595 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 20:24:40,362 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 X+25 F3000'}
2024-02-19 20:24:40,364 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 20:24:41,394 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z-25 F600'}
2024-02-19 20:24:41,397 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 20:24:41,738 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 X+25 F3000'}
2024-02-19 20:24:41,740 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 20:24:44,654 [KlippyWebsocket.py:emergency_stop()] - Sending printer.emergency_stop
2024-02-19 20:24:44,755 [printer.py:change_state()] - Changing state from 'ready' to 'shutdown'
2024-02-19 20:24:44,756 [printer.py:change_state()] - Adding callback for state: shutdown
2024-02-19 20:24:44,758 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-19 20:24:44,761 [screen.py:show_panel()] - Reinitializing panel
2024-02-19 20:24:44,814 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-02-19 20:24:47,093 [KlippyWebsocket.py:restart_firmware()] - Sending printer.firmware_restart
2024-02-19 20:24:47,117 [printer.py:change_state()] - Changing state from 'shutdown' to 'disconnected'
2024-02-19 20:24:47,118 [printer.py:change_state()] - Adding callback for state: disconnected
2024-02-19 20:24:47,118 [screen.py:state_disconnected()] - ### Going to disconnected
2024-02-19 20:24:47,118 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-19 20:24:47,119 [screen.py:show_panel()] - Reinitializing panel
2024-02-19 20:24:47,150 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-02-19 20:24:50,297 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-19 20:24:50,314 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2024-02-19 20:24:50,316 [printer.py:configure_cameras()] - Cameras: []
2024-02-19 20:24:50,317 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'update_manager', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-310-g67c98f6', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-02-19 20:24:50,337 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2024-02-19 20:24:50,366 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2024-02-19 20:24:50,370 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro _Probe_Variables': {'variable_probe_attached': 'False', 'variable_probe_state': 'False', 'variable_probe_lock': 'False', 'variable_probe_z_homed': 'False', 'variable_z_endstop_x': '0', 'variable_z_endstop_y': '0', 'gcode': ''}, 'gcode_macro _klicky_check_variables_version': {'gcode': '\n{% set version = printer["gcode_macro _User_Variables"].version|default(0) %}\n\n{% if version != 1 %}\n{ action_raise_error("Please update your klicky variables, there are some functionality changes") }\n{% endif %}'}, 'gcode_macro _KlickyDebug': {'gcode': '\n{% set message  = params.MSG %}\n{% set debug = printer["gcode_macro _User_Variables"].debug|default(False) %}\n\n{% if debug %}\n{ action_respond_info(message) }\n{% endif %}'}, 'gcode_macro _exit_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move  = params.MOVE|default(0) %}\n{% set speed = printer["gcode_macro _User_Variables"].travel_speed %}\n\n\nM400\nSET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\nRESTORE_GCODE_STATE NAME={function} MOVE={move} MOVE_SPEED={speed}'}, 'gcode_macro _entry_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move_accel = printer["gcode_macro _User_Variables"].move_accel|default(1000) %}\n\nM400\nSAVE_GCODE_STATE NAME={function}\n\nSET_GCODE_OFFSET Z=0\n\nG90\n\nSET_VELOCITY_LIMIT ACCEL={move_accel}'}, 'gcode_macro _Homing_Variables': {'gcode': '\n{% set reset  = params.RESET|default(0) %}\n{% if reset %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }\n{% endif %}'}, 'gcode_macro Attach_Probe_Lock': {'description': 'Attaches Klicky Probe, can only be docked after unlocking', 'gcode': '\nAttach_Probe\n_Probe_Lock'}, 'gcode_macro Dock_Probe_Unlock': {'description': 'Docks Klicky Probe even if it was locked', 'gcode': '\n_Probe_Unlock\nDock_Probe'}, 'gcode_macro _Probe_Unlock': {'description': 'Unlocks Klicky Probe state', 'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to False"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }'}, 'gcode_macro _Probe_Lock': {'description': 'Locks Klicky Probe state', 'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to True"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ True }'}, 'gcode_macro _DeployKlickyDock': {'description': 'Deploys Klicky servo-controlled dock', 'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_deploy = printer["gcode_macro _User_Variables"].servo_deploy|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_DeployKlickyDock Klicky servo configuration enabled"\n{% if servo_deploy == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo deploy angle specified") }\n{% endif %}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _DeployDock"] is defined %}\n_KlickyDebug msg="_DeployKlickyDock calling _DeployDock"\n_DeployDock\n{% endif %}'}, 'gcode_macro _RetractKlickyDock': {'description': 'Retracts Klicky servo-controlled dock', 'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_retract = printer["gcode_macro _User_Variables"].servo_retract|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_RetractKlickyDock Klicky servo configuration enabled"\n{% if servo_retract == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo retract angle specified") }\n{% endif %}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _RetractDock"] is defined %}\n_KlickyDebug msg="_RetractKlickyDock calling _RetractDock"\n_RetractDock\n{% endif %}'}, 'gcode_macro Attach_Probe': {'description': 'Attaches Klicky Probe', 'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set attachmove2_x = printer["gcode_macro _User_Variables"].attachmove2_x|default(0) %}\n{% set attachmove2_y = printer["gcode_macro _User_Variables"].attachmove2_y|default(0) %}\n{% set attachmove2_z = printer["gcode_macro _User_Variables"].attachmove2_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n_entry_point function=Attach_Probe\n\n{% if bypass_probe_docking == False %}\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n_KlickyDebug msg="Attach_Probe Axis homed"\n\n\n{% elif not probe_attached and not probe_lock %}\n_KlickyDebug msg="Attach_Probe going to attach probe"\n{% if verbose %}\n{ action_respond_info("Attaching Probe") }\n{% endif %}\n_KLICKY_STATUS_BUSY\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% if not enable_z_hop %}\n_KlickyDebug msg="Attach_Probe z_hop disabled"\n{% set safe_z = 0 %}\n{% endif %}\n{% endif %}\n\n\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero, duplicate?") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Umbilical_Path\n\n_entry_point function=Attach_Probe_intern\n\n\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n_DeployKlickyDock\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}"\nG0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}\n\n_RetractKlickyDock\n\n{% if ((printer.gcode_move.gcode_position.z < safe_z) or (docklocation_z != -128 and docklocation_z < safe_z ))%}\n_KlickyDebug msg="Attach_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\n_CheckProbe action=attach\n\n_exit_point function=Attach_Probe_intern move={goback}\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe locked not attaching probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already attached!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe already attached, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Attach_Probe\n{% else %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}'}, 'gcode_macro Dock_Probe': {'description': 'Docks Klicky Probe', 'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n{% if bypass_probe_docking == True %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}\n\n{% if bypass_probe_docking != True %}\n_entry_point function=Dock_Probe\n\n\n{% if probe_attached and not probe_lock %}\n_KLICKY_STATUS_BUSY\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Dock_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n_Umbilical_Path\n\n\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n\n_DeployKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\n\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}"\nG0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}\n{% endif %}\n\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}\n\n\n_RetractKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving away from the dock to G0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}\n\n\n{% if (printer.gcode_move.gcode_position.z < safe_z) %}\n_KlickyDebug msg="Dock_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\nG4 P1000\n_CheckProbe action=dock\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe locked not docking probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already docked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe already docked, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Dock_Probe move={goback}\n{% else %}\n_KlickyDebug msg="Dock_Probe probe docking bypassed, doing nothing"\n{% endif %}'}, 'gcode_macro PROBE_CALIBRATE': {'rename_existing': '_PROBE_CALIBRATE', 'description': 'Calibrate the probes z_offset with klicky automount', 'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_calibrate Axis homed"\n_KlickyDebug msg="probe_calibrate Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_CALIBRATE with the probe above the BED, check klicky_variables bed size!") }\n{% endif %}\n\n{% if bypass_probe_docking == False %}\n_CheckProbe action=query\nG90\nAttach_Probe back=1\n_KLICKY_STATUS_CALIBRATING_Z\n\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nM118 moving the toolhead 20 mm from the bed\n_KlickyDebug msg="probe_calibrate Moving Z up by 20mm"\nTESTZ Z=20\nM118 remove manually the probe and continue calibration\n_KLICKY_STATUS_READY\n{% else %}\n_KLICKY_STATUS_CALIBRATING_Z\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n_KLICKY_STATUS_READY\n{% endif %}'}, 'gcode_macro PROBE_ACCURACY': {'rename_existing': '_PROBE_ACCURACY', 'description': 'Probe Z-height accuracy at current XY position with klicky automount', 'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_accuracy Axis homed"\n_KlickyDebug msg="probe_accuracy Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n_entry_point function=PROBE_ACCURACY\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_ACCURACY with the probe above the BED, check klicky_variables bed size!") }\n{% endif%}\n\n_CheckProbe action=query\nAttach_Probe back=1\n\n_KlickyDebug msg="probe_accuracy calling klipper probe accuracy"\n_PROBE_ACCURACY {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nDock_Probe back=1\n\n_exit_point function=PROBE_ACCURACY move=1'}, 'force_move': {'enable_force_move': 'True'}, 'homing_override': {'axes': 'xyz', 'gcode': '\n\n_User_Variables\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n{% set kinematic_z = 0 %}\n{% set dock_on_zhome = printer["gcode_macro _User_Variables"].dock_on_zhome|default(True) %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set home_backoff_x = printer["gcode_macro _User_Variables"].home_backoff_x|default(0) %}\n{% set home_backoff_y = printer["gcode_macro _User_Variables"].home_backoff_y|default(0) %}\n{% set override_homing = printer["gcode_macro _User_Variables"].override_homing|default(\'\') %}\n\n\n_klicky_check_variables_version\n\n_CheckProbe action=query\n\n\n{% set home_x, home_y, home_z, leave_probe_attached = False, False, False, False %}\n\n{% if \'PROBE_LOCK\' in params%}\n{% if verbose %}\n{ action_respond_info("PROBE_LOCK = True") }\n{% endif %}\n{% set leave_probe_attached = True %}\n{% endif %}\n\n\n{% if not \'X\' in params\nand not \'Y\' in params\nand not \'Z\' in params %}\n\n{% set home_x, home_y, home_z = True, True, True %}\n_KlickyDebug msg="homing_override goint to home all axes"\n\n{% else %}\n{% if \'X\' in params %}\n{% set home_x = True %}\n_KlickyDebug msg="homing_override goint to home X"\n\n{% endif %}\n\n{% if \'Y\' in params %}\n{% set home_y = True %}\n_KlickyDebug msg="homing_override goint to home Y"\n{% endif %}\n\n{% if \'Z\' in params %}\n{% set home_z = True %}\n_KlickyDebug msg="homing_override goint to home Z"\n{% endif %}\n\n{% if \'X\' in params\nand \'Y\' in params\nand \'Z\' in params %}\n\n\n_Homing_Variables reset=1\n_KlickyDebug msg="homing_override goint to home all axes"\n{% endif %}\n\n{% endif %}\n\n_entry_point function=homing_override\n_KLICKY_STATUS_HOMING\n\n\n{% if \'z\' not in printer.toolhead.homed_axes %}\n{% if enable_z_hop == False %}\n_KlickyDebug msg="homing_override z_hop disabled"\n\n{% set kinematic_z = safe_z %}\n{% set safe_z = safe_z %}\n{% endif %}\n{% endif %}\n\n\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes and \'z\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("No axis homed") }\n{% endif %}\n_KlickyDebug msg="homing_override no axis homed, setting position as X=Y=0 Z={kinematic_z}"\nSET_KINEMATIC_POSITION X=0 Y=0 Z={kinematic_z}\nM400\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% if home_z != True %}\n_KlickyDebug msg="homing_override clearing axis homed state if not already homing Z"\nM84\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("X or Y not homed, forcing full G28") }\n{% endif %}\n{% set home_x, home_y, home_z = True, True, True %}\n{% endif %}\n{% endif %}\n\n\n{% if ((attachmove_y == 0 and override_homing == \'\' ) or (override_homing == \'Y\'))%}\n\n{% if home_y %}\n{% if override_homing == \'Y\' %}\n_KlickyDebug msg="homing_override Y homing first override, due to override_homing = Y"\n{% else %}\n_KlickyDebug msg="homing_override Y homing first override, due to attachmove_y = 0"\n{% endif %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y G28 Y0"\nG28 Y0\n\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop-home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n{% set home_y = False %}\n{% endif %}\n\n\n\n{% if home_x %}\n{% if verbose %}\n{ action_respond_info("Homing X") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in X homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_X"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_X external script to handle the X homing"\n_HOME_X\n{% else %}\n_KlickyDebug msg="homing_override Homing X, G28 X0"\nG28 X0\n\n{% if home_backoff_x != 0 %}\n{% if (printer.configfile.settings.stepper_x.position_endstop > (printer.configfile.settings.stepper_x.position_min|default(0) + printer.configfile.settings.stepper_x.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n\n{% if home_y %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y, G28 Y0"\nG28 Y0\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if verbose %}\n{ action_respond_info("Homing Z") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe configured as a virtual Z endstop attaching probe"\nAttach_Probe\n\n{% if leave_probe_attached %}\n_Probe_Lock\n{% endif %}\n{% elif dock_on_zhome == True %}\nDock_Probe\n{% endif %}\n\n_Home_Z_\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe no longer required, docking probe"\nDock_Probe\n{% elif dock_on_zhome == False %}\nDock_Probe\n{% endif %}\n{% endif %}\n_CheckProbe action=query\n\n\n_Park_Toolhead\n\n_exit_point function=homing_override\n_KLICKY_STATUS_READY'}, 'gcode_macro _Umbilical_Path': {'gcode': '\n{% set umbilical = printer["gcode_macro _User_Variables"].umbilical %}\n{% set umbilical_x = printer["gcode_macro _User_Variables"].umbilical_x %}\n{% set umbilical_y = printer["gcode_macro _User_Variables"].umbilical_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n\n{% if umbilical %}\n\n_entry_point function=Umbilical_Path\n\n_KlickyDebug msg="_Umbilical_Path moving to G0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}"\nG0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}\n\n_exit_point function=Umbilical_Path\n{% endif %}'}, 'gcode_macro _Home_Z_': {'gcode': '\n{% set z_endstop_x = printer["gcode_macro _Probe_Variables"].z_endstop_x %}\n{% set z_endstop_y = printer["gcode_macro _Probe_Variables"].z_endstop_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}    {% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Home_Z\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n{% else %}\n_KlickyDebug msg="_Home_Z_ XY Axis homed"\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="_Home_Z_ Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n\n\n_KlickyDebug msg="_Home_Z_ moving to Z endstop position G0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}"\nG0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}\n_KlickyDebug msg="_Home_Z_ Homing Z G28 Z"\nG28 Z0\n_KlickyDebug msg="_Home_Z_ toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_exit_point function=Home_Z'}, 'gcode_macro _CheckProbe': {'variable_probe_state': '0', 'gcode': '\nQuery_Probe\n_SetProbeState action={ params.ACTION }'}, 'gcode_macro _SetProbeState': {'gcode': '\n{% set query_probe_triggered = printer.probe.last_query %}\n{% set action  = params.ACTION|default(\'\') %}\n\n\n{% if query_probe_triggered %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ False }\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ True }\n{% endif %}\n\n{% if action == \'query\' %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_state VALUE={ query_probe_triggered }\n{% endif %}\n\n\n\n\n{% if not query_probe_triggered and action == \'dock\' %}\n{ action_raise_error("Probe dock failed!") }\n{% endif %}\n\n\n{% if query_probe_triggered and action == \'attach\' %}\n{ action_raise_error("Probe attach failed!") }\n{% endif %}'}, 'gcode_macro _Park_Toolhead': {'gcode': '\n{% set park_toolhead = printer["gcode_macro _User_Variables"].park_toolhead %}\n{% set parkposition_x = printer["gcode_macro _User_Variables"].parkposition_x %}\n{% set parkposition_y = printer["gcode_macro _User_Variables"].parkposition_y %}\n{% set parkposition_z = printer["gcode_macro _User_Variables"].parkposition_z %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Park_Toolhead\n\n{% if park_toolhead and \'xyz\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Parking Toolhead") }\n{% endif %}\n{% if parkposition_z == -128 %}\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}\n\n{% else %}\n\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}\n\n{% endif %}\n\n{% endif %}\n_exit_point function=Park_Toolhead'}, 'gcode_macro _klicky_status_ready': {'gcode': '\n{% if printer[\'gcode_macro status_ready\'] is defined %}\n_KlickyDebug msg="_klicky_status_ready activating the LED STATUS_READY"\nSTATUS_READY\n{% endif %}'}, 'gcode_macro _klicky_status_busy': {'gcode': '\n{% if printer[\'gcode_macro status_busy\'] is defined %}\n_KlickyDebug msg="_klicky_status_busy activating the LED STATUS_BUSY"\nSTATUS_BUSY\n{% endif %}'}, 'gcode_macro _klicky_status_leveling': {'gcode': '\n{% if printer[\'gcode_macro status_leveling\'] is defined %}\n_KlickyDebug msg="_klicky_status_leveling activating the LED STATUS_LEVELING"\nSTATUS_LEVELING\n{% endif %}'}, 'gcode_macro _klicky_status_homing': {'gcode': '\n{% if printer[\'gcode_macro status_homing\'] is defined %}\n_KlickyDebug msg="_klicky_status_homing activating the LED STATUS_HOMING"\nSTATUS_HOMING\n{% endif %}'}, 'gcode_macro _klicky_status_cleaning': {'gcode': '\n{% if printer[\'gcode_macro status_cleaning\'] is defined %}\n_KlickyDebug msg="_klicky_status_cleaning activating the LED STATUS_CLEANING"\nSTATUS_CLEANING\n{% endif %}'}, 'gcode_macro _klicky_status_meshing': {'gcode': '\n{% if printer[\'gcode_macro status_meshing\'] is defined %}\n_KlickyDebug msg="_klicky_status_meshing activating the LED STATUS_MESHING"\nSTATUS_MESHING\n{% endif %}'}, 'gcode_macro _klicky_status_calibrating_z': {'gcode': '\n{% if printer[\'gcode_macro status_calibrating_z\'] is defined %}\n_KlickyDebug msg="_klicky_status_calibrating_z activating the LED STATUS_CALIBRATING_Z"\nSTATUS_CALIBRATING_Z\n{% endif %}'}, 'z_calibration': {'nozzle_xy_position': '172, 301', 'switch_xy_position': '171.5, 282', 'bed_xy_position': '150, 150', 'switch_offset': '0.09', 'offset_margins': '-1.0,1.0', 'speed': '50', 'probing_first_fast': 'false', 'start_gcode': 'Attach_Probe', 'end_gcode': 'Dock_Probe'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_28003C001150535556323420-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '^PG6', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '25', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'PG9', 'position_min': '0', 'position_endstop': '300', 'position_max': '303.5', 'homing_speed': '25', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': '!PG3', 'enable_pin': '!PG5', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'PG10', 'position_max': '290', 'position_min': '-4.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3', 'position_endstop': '-0.711'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA0', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': '!PF10', 'enable_pin': '!PG2', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PC13', 'dir_pin': 'PF0', 'enable_pin': '!PF1', 'rotation_distance': '21.9459674016', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.75', 'heater_pin': 'PA1', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF4', 'min_temp': '10', 'max_temp': '270', 'max_power': '1.0', 'min_extrude_temp': '170', 'pressure_advance': '0.05', 'pressure_advance_smooth_time': '0.040', 'control': 'pid', 'pid_kp': '26.572', 'pid_ki': '2.036', 'pid_kd': '86.691'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.5', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PA2', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF3', 'max_power': '1', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '55.196', 'pid_ki': '2.091', 'pid_kd': '364.295'}, 'probe': {'pin': 'PG15', 'x_offset': '0', 'y_offset': '25.0', 'z_offset': '0', 'speed': '10.0', 'samples': '5', 'samples_result': 'median', 'sample_retract_dist': '3.0', 'samples_tolerance': '0.006', 'samples_tolerance_retries': '6'}, 'fan': {'pin': 'PA8', 'kick_start_time': '0.5', 'off_below': '0.10'}, 'heater_fan hotend_fan': {'pin': 'PE5', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'controller_fan controller_fan': {'pin': 'PD12', 'kick_start_time': '0.5', 'heater': 'heater_bed'}, 'heater_fan exhaust_fan': {'pin': 'PD13', 'max_power': '1.0', 'shutdown_speed': '0.0', 'kick_start_time': '5.0', 'heater': 'heater_bed', 'heater_temp': '60', 'fan_speed': '1.0'}, 'output_pin caselight': {'pin': 'PD15', 'pwm': 'true', 'shutdown_value': '0', 'value': '1', 'cycle_time': '0.01'}, 'neopixel headlight': {'pin': 'PB0', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '0.0', 'initial_green': '0.2157', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'temperature_sensor chamber_temp': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF5', 'min_temp': '0', 'max_temp': '100', 'gcode_id': 'chamber_th'}, 'idle_timeout': {'timeout': '1800'}, 'z_tilt': {'z_positions': '\n-50, 18\n150, 348\n350, 18', 'points': '\n30, 5\n150, 245\n270, 5', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'gcode_macro _User_Variables': {'variable_verbose': 'True', 'variable_debug': 'False', 'variable_travel_speed': '200', 'variable_move_accel': '1000', 'variable_dock_speed': '50', 'variable_release_speed': '75', 'variable_z_drop_speed': '20', 'variable_safe_z': '25', 'variable_enable_z_hop': 'True', 'variable_max_bed_y': '300', 'variable_max_bed_x': '300', 'variable_z_endstop_x': '172', 'variable_z_endstop_y': '301', 'variable_docklocation_x': '42', 'variable_docklocation_y': '297', 'variable_docklocation_z': '-128', 'variable_enable_dock_servo': 'False', 'variable_servo_name': "'NAME'", 'variable_servo_deploy': '10', 'variable_servo_retract': '11', 'variable_servo_delay': '250', 'variable_dockmove_x': '40', 'variable_dockmove_y': '0', 'variable_dockmove_z': '0', 'variable_attachmove_x': '0', 'variable_attachmove_y': '30', 'variable_attachmove_z': '0', 'variable_umbilical': 'False', 'variable_umbilical_x': '15', 'variable_umbilical_y': '15', 'variable_park_toolhead': 'False', 'variable_parkposition_x': '125', 'variable_parkposition_y': '125', 'variable_parkposition_z': '30', 'variable_version': '1', 'variable_attachmove2_x': '0', 'variable_attachmove2_y': '0', 'variable_attachmove2_z': '0', 'variable_home_backoff_x': '10', 'variable_home_backoff_y': '10', 'variable_override_homing': "''", 'variable_dock_on_zhome': 'True', 'gcode': '\n{% set Mx = printer[\'configfile\'].config["stepper_x"]["position_max"]|float %}\n{% set My = printer[\'configfile\'].config["stepper_y"]["position_max"]|float %}\n{% set Ox = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set Oy = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set Oz = printer[\'configfile\'].config["probe"]["z_offset"]|float %}\n\n\n{% if z_endstop_x != 0 or z_endstop_y != 0 %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ z_endstop_x }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ z_endstop_y }\n\n\n{% else %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ (Mx * 0.5) - Ox }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ (My * 0.5) - Oy }\n{% endif %}'}, 'gcode_macro PRINT_START': {'gcode': '\nM117 Homing...\nG28\nATTACH_PROBE\nZ_TILT_ADJUST\nDOCK_PROBE\nG28\n\n\n\n\n\n\n\nG0 X150 Y150 Z30 F3600'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_28003C001150535556323420-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro _probe_variables': {'gcode': '', 'description': 'G-Code macro', 'variable_probe_attached': 'False', 'variable_probe_state': 'False', 'variable_probe_lock': 'False', 'variable_probe_z_homed': 'False', 'variable_z_endstop_x': '0', 'variable_z_endstop_y': '0'}, 'gcode_macro _klicky_check_variables_version': {'gcode': '\n{% set version = printer["gcode_macro _User_Variables"].version|default(0) %}\n\n{% if version != 1 %}\n{ action_raise_error("Please update your klicky variables, there are some functionality changes") }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klickydebug': {'gcode': '\n{% set message  = params.MSG %}\n{% set debug = printer["gcode_macro _User_Variables"].debug|default(False) %}\n\n{% if debug %}\n{ action_respond_info(message) }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _exit_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move  = params.MOVE|default(0) %}\n{% set speed = printer["gcode_macro _User_Variables"].travel_speed %}\n\n\nM400\nSET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\nRESTORE_GCODE_STATE NAME={function} MOVE={move} MOVE_SPEED={speed}', 'description': 'G-Code macro'}, 'gcode_macro _entry_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move_accel = printer["gcode_macro _User_Variables"].move_accel|default(1000) %}\n\nM400\nSAVE_GCODE_STATE NAME={function}\n\nSET_GCODE_OFFSET Z=0\n\nG90\n\nSET_VELOCITY_LIMIT ACCEL={move_accel}', 'description': 'G-Code macro'}, 'gcode_macro _homing_variables': {'gcode': '\n{% set reset  = params.RESET|default(0) %}\n{% if reset %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro attach_probe_lock': {'gcode': '\nAttach_Probe\n_Probe_Lock', 'description': 'Attaches Klicky Probe, can only be docked after unlocking'}, 'gcode_macro dock_probe_unlock': {'gcode': '\n_Probe_Unlock\nDock_Probe', 'description': 'Docks Klicky Probe even if it was locked'}, 'gcode_macro _probe_unlock': {'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to False"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }', 'description': 'Unlocks Klicky Probe state'}, 'gcode_macro _probe_lock': {'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to True"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ True }', 'description': 'Locks Klicky Probe state'}, 'gcode_macro _deployklickydock': {'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_deploy = printer["gcode_macro _User_Variables"].servo_deploy|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_DeployKlickyDock Klicky servo configuration enabled"\n{% if servo_deploy == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo deploy angle specified") }\n{% endif %}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _DeployDock"] is defined %}\n_KlickyDebug msg="_DeployKlickyDock calling _DeployDock"\n_DeployDock\n{% endif %}', 'description': 'Deploys Klicky servo-controlled dock'}, 'gcode_macro _retractklickydock': {'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_retract = printer["gcode_macro _User_Variables"].servo_retract|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_RetractKlickyDock Klicky servo configuration enabled"\n{% if servo_retract == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo retract angle specified") }\n{% endif %}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _RetractDock"] is defined %}\n_KlickyDebug msg="_RetractKlickyDock calling _RetractDock"\n_RetractDock\n{% endif %}', 'description': 'Retracts Klicky servo-controlled dock'}, 'gcode_macro attach_probe': {'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set attachmove2_x = printer["gcode_macro _User_Variables"].attachmove2_x|default(0) %}\n{% set attachmove2_y = printer["gcode_macro _User_Variables"].attachmove2_y|default(0) %}\n{% set attachmove2_z = printer["gcode_macro _User_Variables"].attachmove2_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n_entry_point function=Attach_Probe\n\n{% if bypass_probe_docking == False %}\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n_KlickyDebug msg="Attach_Probe Axis homed"\n\n\n{% elif not probe_attached and not probe_lock %}\n_KlickyDebug msg="Attach_Probe going to attach probe"\n{% if verbose %}\n{ action_respond_info("Attaching Probe") }\n{% endif %}\n_KLICKY_STATUS_BUSY\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% if not enable_z_hop %}\n_KlickyDebug msg="Attach_Probe z_hop disabled"\n{% set safe_z = 0 %}\n{% endif %}\n{% endif %}\n\n\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero, duplicate?") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Umbilical_Path\n\n_entry_point function=Attach_Probe_intern\n\n\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n_DeployKlickyDock\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}"\nG0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}\n\n_RetractKlickyDock\n\n{% if ((printer.gcode_move.gcode_position.z < safe_z) or (docklocation_z != -128 and docklocation_z < safe_z ))%}\n_KlickyDebug msg="Attach_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\n_CheckProbe action=attach\n\n_exit_point function=Attach_Probe_intern move={goback}\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe locked not attaching probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already attached!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe already attached, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Attach_Probe\n{% else %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}', 'description': 'Attaches Klicky Probe'}, 'gcode_macro dock_probe': {'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n{% if bypass_probe_docking == True %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}\n\n{% if bypass_probe_docking != True %}\n_entry_point function=Dock_Probe\n\n\n{% if probe_attached and not probe_lock %}\n_KLICKY_STATUS_BUSY\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Dock_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n_Umbilical_Path\n\n\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n\n_DeployKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\n\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}"\nG0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}\n{% endif %}\n\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}\n\n\n_RetractKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving away from the dock to G0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}\n\n\n{% if (printer.gcode_move.gcode_position.z < safe_z) %}\n_KlickyDebug msg="Dock_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\nG4 P1000\n_CheckProbe action=dock\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe locked not docking probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already docked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe already docked, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Dock_Probe move={goback}\n{% else %}\n_KlickyDebug msg="Dock_Probe probe docking bypassed, doing nothing"\n{% endif %}', 'description': 'Docks Klicky Probe'}, 'gcode_macro probe_calibrate': {'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_calibrate Axis homed"\n_KlickyDebug msg="probe_calibrate Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_CALIBRATE with the probe above the BED, check klicky_variables bed size!") }\n{% endif %}\n\n{% if bypass_probe_docking == False %}\n_CheckProbe action=query\nG90\nAttach_Probe back=1\n_KLICKY_STATUS_CALIBRATING_Z\n\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nM118 moving the toolhead 20 mm from the bed\n_KlickyDebug msg="probe_calibrate Moving Z up by 20mm"\nTESTZ Z=20\nM118 remove manually the probe and continue calibration\n_KLICKY_STATUS_READY\n{% else %}\n_KLICKY_STATUS_CALIBRATING_Z\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n_KLICKY_STATUS_READY\n{% endif %}', 'rename_existing': '_PROBE_CALIBRATE', 'description': 'Calibrate the probes z_offset with klicky automount'}, 'gcode_macro probe_accuracy': {'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_accuracy Axis homed"\n_KlickyDebug msg="probe_accuracy Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n_entry_point function=PROBE_ACCURACY\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_ACCURACY with the probe above the BED, check klicky_variables bed size!") }\n{% endif%}\n\n_CheckProbe action=query\nAttach_Probe back=1\n\n_KlickyDebug msg="probe_accuracy calling klipper probe accuracy"\n_PROBE_ACCURACY {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nDock_Probe back=1\n\n_exit_point function=PROBE_ACCURACY move=1', 'rename_existing': '_PROBE_ACCURACY', 'description': 'Probe Z-height accuracy at current XY position with klicky automount'}, 'force_move': {'enable_force_move': True}, 'homing_override': {'axes': 'xyz', 'gcode': '\n\n_User_Variables\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n{% set kinematic_z = 0 %}\n{% set dock_on_zhome = printer["gcode_macro _User_Variables"].dock_on_zhome|default(True) %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set home_backoff_x = printer["gcode_macro _User_Variables"].home_backoff_x|default(0) %}\n{% set home_backoff_y = printer["gcode_macro _User_Variables"].home_backoff_y|default(0) %}\n{% set override_homing = printer["gcode_macro _User_Variables"].override_homing|default(\'\') %}\n\n\n_klicky_check_variables_version\n\n_CheckProbe action=query\n\n\n{% set home_x, home_y, home_z, leave_probe_attached = False, False, False, False %}\n\n{% if \'PROBE_LOCK\' in params%}\n{% if verbose %}\n{ action_respond_info("PROBE_LOCK = True") }\n{% endif %}\n{% set leave_probe_attached = True %}\n{% endif %}\n\n\n{% if not \'X\' in params\nand not \'Y\' in params\nand not \'Z\' in params %}\n\n{% set home_x, home_y, home_z = True, True, True %}\n_KlickyDebug msg="homing_override goint to home all axes"\n\n{% else %}\n{% if \'X\' in params %}\n{% set home_x = True %}\n_KlickyDebug msg="homing_override goint to home X"\n\n{% endif %}\n\n{% if \'Y\' in params %}\n{% set home_y = True %}\n_KlickyDebug msg="homing_override goint to home Y"\n{% endif %}\n\n{% if \'Z\' in params %}\n{% set home_z = True %}\n_KlickyDebug msg="homing_override goint to home Z"\n{% endif %}\n\n{% if \'X\' in params\nand \'Y\' in params\nand \'Z\' in params %}\n\n\n_Homing_Variables reset=1\n_KlickyDebug msg="homing_override goint to home all axes"\n{% endif %}\n\n{% endif %}\n\n_entry_point function=homing_override\n_KLICKY_STATUS_HOMING\n\n\n{% if \'z\' not in printer.toolhead.homed_axes %}\n{% if enable_z_hop == False %}\n_KlickyDebug msg="homing_override z_hop disabled"\n\n{% set kinematic_z = safe_z %}\n{% set safe_z = safe_z %}\n{% endif %}\n{% endif %}\n\n\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes and \'z\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("No axis homed") }\n{% endif %}\n_KlickyDebug msg="homing_override no axis homed, setting position as X=Y=0 Z={kinematic_z}"\nSET_KINEMATIC_POSITION X=0 Y=0 Z={kinematic_z}\nM400\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% if home_z != True %}\n_KlickyDebug msg="homing_override clearing axis homed state if not already homing Z"\nM84\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("X or Y not homed, forcing full G28") }\n{% endif %}\n{% set home_x, home_y, home_z = True, True, True %}\n{% endif %}\n{% endif %}\n\n\n{% if ((attachmove_y == 0 and override_homing == \'\' ) or (override_homing == \'Y\'))%}\n\n{% if home_y %}\n{% if override_homing == \'Y\' %}\n_KlickyDebug msg="homing_override Y homing first override, due to override_homing = Y"\n{% else %}\n_KlickyDebug msg="homing_override Y homing first override, due to attachmove_y = 0"\n{% endif %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y G28 Y0"\nG28 Y0\n\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop-home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n{% set home_y = False %}\n{% endif %}\n\n\n\n{% if home_x %}\n{% if verbose %}\n{ action_respond_info("Homing X") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in X homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_X"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_X external script to handle the X homing"\n_HOME_X\n{% else %}\n_KlickyDebug msg="homing_override Homing X, G28 X0"\nG28 X0\n\n{% if home_backoff_x != 0 %}\n{% if (printer.configfile.settings.stepper_x.position_endstop > (printer.configfile.settings.stepper_x.position_min|default(0) + printer.configfile.settings.stepper_x.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n\n{% if home_y %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y, G28 Y0"\nG28 Y0\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if verbose %}\n{ action_respond_info("Homing Z") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe configured as a virtual Z endstop attaching probe"\nAttach_Probe\n\n{% if leave_probe_attached %}\n_Probe_Lock\n{% endif %}\n{% elif dock_on_zhome == True %}\nDock_Probe\n{% endif %}\n\n_Home_Z_\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe no longer required, docking probe"\nDock_Probe\n{% elif dock_on_zhome == False %}\nDock_Probe\n{% endif %}\n{% endif %}\n_CheckProbe action=query\n\n\n_Park_Toolhead\n\n_exit_point function=homing_override\n_KLICKY_STATUS_READY'}, 'gcode_macro _umbilical_path': {'gcode': '\n{% set umbilical = printer["gcode_macro _User_Variables"].umbilical %}\n{% set umbilical_x = printer["gcode_macro _User_Variables"].umbilical_x %}\n{% set umbilical_y = printer["gcode_macro _User_Variables"].umbilical_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n\n{% if umbilical %}\n\n_entry_point function=Umbilical_Path\n\n_KlickyDebug msg="_Umbilical_Path moving to G0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}"\nG0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}\n\n_exit_point function=Umbilical_Path\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _home_z_': {'gcode': '\n{% set z_endstop_x = printer["gcode_macro _Probe_Variables"].z_endstop_x %}\n{% set z_endstop_y = printer["gcode_macro _Probe_Variables"].z_endstop_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}    {% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Home_Z\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n{% else %}\n_KlickyDebug msg="_Home_Z_ XY Axis homed"\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="_Home_Z_ Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n\n\n_KlickyDebug msg="_Home_Z_ moving to Z endstop position G0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}"\nG0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}\n_KlickyDebug msg="_Home_Z_ Homing Z G28 Z"\nG28 Z0\n_KlickyDebug msg="_Home_Z_ toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_exit_point function=Home_Z', 'description': 'G-Code macro'}, 'gcode_macro _checkprobe': {'gcode': '\nQuery_Probe\n_SetProbeState action={ params.ACTION }', 'description': 'G-Code macro', 'variable_probe_state': '0'}, 'gcode_macro _setprobestate': {'gcode': '\n{% set query_probe_triggered = printer.probe.last_query %}\n{% set action  = params.ACTION|default(\'\') %}\n\n\n{% if query_probe_triggered %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ False }\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ True }\n{% endif %}\n\n{% if action == \'query\' %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_state VALUE={ query_probe_triggered }\n{% endif %}\n\n\n\n\n{% if not query_probe_triggered and action == \'dock\' %}\n{ action_raise_error("Probe dock failed!") }\n{% endif %}\n\n\n{% if query_probe_triggered and action == \'attach\' %}\n{ action_raise_error("Probe attach failed!") }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _park_toolhead': {'gcode': '\n{% set park_toolhead = printer["gcode_macro _User_Variables"].park_toolhead %}\n{% set parkposition_x = printer["gcode_macro _User_Variables"].parkposition_x %}\n{% set parkposition_y = printer["gcode_macro _User_Variables"].parkposition_y %}\n{% set parkposition_z = printer["gcode_macro _User_Variables"].parkposition_z %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Park_Toolhead\n\n{% if park_toolhead and \'xyz\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Parking Toolhead") }\n{% endif %}\n{% if parkposition_z == -128 %}\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}\n\n{% else %}\n\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}\n\n{% endif %}\n\n{% endif %}\n_exit_point function=Park_Toolhead', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_ready': {'gcode': '\n{% if printer[\'gcode_macro status_ready\'] is defined %}\n_KlickyDebug msg="_klicky_status_ready activating the LED STATUS_READY"\nSTATUS_READY\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_busy': {'gcode': '\n{% if printer[\'gcode_macro status_busy\'] is defined %}\n_KlickyDebug msg="_klicky_status_busy activating the LED STATUS_BUSY"\nSTATUS_BUSY\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_leveling': {'gcode': '\n{% if printer[\'gcode_macro status_leveling\'] is defined %}\n_KlickyDebug msg="_klicky_status_leveling activating the LED STATUS_LEVELING"\nSTATUS_LEVELING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_homing': {'gcode': '\n{% if printer[\'gcode_macro status_homing\'] is defined %}\n_KlickyDebug msg="_klicky_status_homing activating the LED STATUS_HOMING"\nSTATUS_HOMING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_cleaning': {'gcode': '\n{% if printer[\'gcode_macro status_cleaning\'] is defined %}\n_KlickyDebug msg="_klicky_status_cleaning activating the LED STATUS_CLEANING"\nSTATUS_CLEANING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_meshing': {'gcode': '\n{% if printer[\'gcode_macro status_meshing\'] is defined %}\n_KlickyDebug msg="_klicky_status_meshing activating the LED STATUS_MESHING"\nSTATUS_MESHING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_calibrating_z': {'gcode': '\n{% if printer[\'gcode_macro status_calibrating_z\'] is defined %}\n_KlickyDebug msg="_klicky_status_calibrating_z activating the LED STATUS_CALIBRATING_Z"\nSTATUS_CALIBRATING_Z\n{% endif %}', 'description': 'G-Code macro'}, 'z_calibration': {'switch_offset': 0.09, 'offset_margins': '-1.0,1.0', 'speed': 50.0, 'samples_result': 'none', 'probing_first_fast': False, 'nozzle_xy_position': '172, 301', 'switch_xy_position': '171.5, 282', 'bed_xy_position': '150, 150', 'start_gcode': 'Attach_Probe', 'before_switch_gcode': '', 'end_gcode': 'Dock_Probe'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': '^PG6', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'PG9', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 303.5, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PF11', 'dir_pin': '!PG3', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG5', 'endstop_pin': 'PG10', 'position_endstop': -0.711, 'position_min': -4.5, 'position_max': 290.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA0'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PF9', 'dir_pin': '!PF10', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG2'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF4', 'min_temp': 10.0, 'max_temp': 270.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 26.572, 'pid_ki': 2.036, 'pid_kd': 86.691, 'heater_pin': 'PA1', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PC13', 'pressure_advance': 0.05, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'PF0', 'rotation_distance': 21.9459674016, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 55.196, 'pid_ki': 2.091, 'pid_kd': 364.295, 'heater_pin': 'PA2', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'probe': {'z_offset': 0.0, 'deactivate_on_each_sample': True, 'activate_gcode': '', 'deactivate_gcode': '', 'pin': 'PG15', 'speed': 10.0, 'lift_speed': 10.0, 'x_offset': 0.0, 'y_offset': 25.0, 'samples': 5, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.006, 'samples_tolerance_retries': 6}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE5', 'fan_speed': 1.0}, 'controller_fan controller_fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD12', 'fan_speed': 1.0, 'idle_speed': 1.0, 'idle_timeout': 30, 'heater': ['heater_bed']}, 'heater_fan exhaust_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 5.0, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13', 'fan_speed': 1.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PD15', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 1.0, 'maximum_mcu_duration': 0.0, 'value': 1.0, 'shutdown_value': 0.0}, 'neopixel headlight': {'pin': 'PB0', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 0.0, 'initial_green': 0.2157, 'initial_blue': 1.0, 'initial_white': 0.0}, 'temperature_sensor chamber_temp': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF5', 'min_temp': 0.0, 'max_temp': 100.0, 'gcode_id': 'chamber_th'}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [150.0, 348.0], [350.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 5.0], [150.0, 245.0], [270.0, 5.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'gcode_macro _user_variables': {'gcode': '\n{% set Mx = printer[\'configfile\'].config["stepper_x"]["position_max"]|float %}\n{% set My = printer[\'configfile\'].config["stepper_y"]["position_max"]|float %}\n{% set Ox = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set Oy = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set Oz = printer[\'configfile\'].config["probe"]["z_offset"]|float %}\n\n\n{% if z_endstop_x != 0 or z_endstop_y != 0 %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ z_endstop_x }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ z_endstop_y }\n\n\n{% else %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ (Mx * 0.5) - Ox }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ (My * 0.5) - Oy }\n{% endif %}', 'description': 'G-Code macro', 'variable_verbose': 'True', 'variable_debug': 'False', 'variable_travel_speed': '200', 'variable_move_accel': '1000', 'variable_dock_speed': '50', 'variable_release_speed': '75', 'variable_z_drop_speed': '20', 'variable_safe_z': '25', 'variable_enable_z_hop': 'True', 'variable_max_bed_y': '300', 'variable_max_bed_x': '300', 'variable_z_endstop_x': '172', 'variable_z_endstop_y': '301', 'variable_docklocation_x': '42', 'variable_docklocation_y': '297', 'variable_docklocation_z': '-128', 'variable_enable_dock_servo': 'False', 'variable_servo_name': "'NAME'", 'variable_servo_deploy': '10', 'variable_servo_retract': '11', 'variable_servo_delay': '250', 'variable_dockmove_x': '40', 'variable_dockmove_y': '0', 'variable_dockmove_z': '0', 'variable_attachmove_x': '0', 'variable_attachmove_y': '30', 'variable_attachmove_z': '0', 'variable_umbilical': 'False', 'variable_umbilical_x': '15', 'variable_umbilical_y': '15', 'variable_park_toolhead': 'False', 'variable_parkposition_x': '125', 'variable_parkposition_y': '125', 'variable_parkposition_z': '30', 'variable_version': '1', 'variable_attachmove2_x': '0', 'variable_attachmove2_y': '0', 'variable_attachmove2_z': '0', 'variable_home_backoff_x': '10', 'variable_home_backoff_y': '10', 'variable_override_homing': "''", 'variable_dock_on_zhome': 'True'}, 'gcode_macro print_start': {'gcode': '\nM117 Homing...\nG28\nATTACH_PROBE\nZ_TILT_ADJUST\nDOCK_PROBE\nG28\n\n\n\n\n\n\n\nG0 X150 Y150 Z30 F3600', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1500.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-02-19 20:24:50,375 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-19 20:24:50,376 [printer.py:reinit()] - Klipper version: v0.12.0-103-g6ce6fbbc-dirty
2024-02-19 20:24:50,376 [printer.py:reinit()] - # Extruders: 1
2024-02-19 20:24:50,376 [printer.py:reinit()] - # Temperature devices: 2
2024-02-19 20:24:50,376 [printer.py:reinit()] - # Fans: 4
2024-02-19 20:24:50,376 [printer.py:reinit()] - # Output pins: 1
2024-02-19 20:24:50,376 [printer.py:reinit()] - # Leds: 1
2024-02-19 20:24:50,394 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2024-02-19 20:24:50,396 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-02-19 20:24:50,625 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor chamber_temp&fan&controller_fan controller_fan&heater_fan hotend_fan&heater_fan exhaust_fan&output_pin caselight&neopixel headlight
2024-02-19 20:24:50,630 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-02-19 20:24:50,631 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-02-19 20:24:50,633 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-02-19 20:24:50,634 [screen.py:init_klipper()] - Printer initialized
2024-02-19 20:24:50,635 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2024-02-19 20:24:50,635 [printer.py:change_state()] - Adding callback for state: ready
2024-02-19 20:24:50,640 [screen.py:show_panel()] - Reinitializing panel
2024-02-19 20:24:50,739 [main_menu.py:__init__()] - ### Making MainMenu
2024-02-19 20:24:50,745 [main_menu.py:add_device()] - Adding device: extruder
2024-02-19 20:24:50,749 [main_menu.py:add_device()] - Adding device: heater_bed
2024-02-19 20:24:50,754 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber_temp
2024-02-19 20:24:50,778 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-02-19 20:24:50,795 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-02-19 20:24:50,798 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'temperature_sensor chamber_temp', 'extruder']
2024-02-19 20:24:50,807 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2024-02-19 20:24:50,808 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-02-19 20:24:57,568 [screen.py:show_panel()] - Reinitializing panel
2024-02-19 20:24:57,669 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-02-19 20:24:58,669 [screen.py:_menu_go_back()] - #### Menu go back
2024-02-19 20:24:58,686 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-02-19 20:25:00,230 [screen.py:_load_panel()] - Loading panel: temperature
2024-02-19 20:25:00,240 [temperature.py:add_device()] - Adding device: extruder
2024-02-19 20:25:00,245 [temperature.py:add_device()] - Adding device: heater_bed
2024-02-19 20:25:00,250 [temperature.py:add_device()] - Adding device: temperature_sensor chamber_temp
2024-02-19 20:25:00,255 [temperature.py:select_heater()] - Selecting extruder
2024-02-19 20:25:00,256 [temperature.py:select_heater()] - Selecting heater_bed
2024-02-19 20:25:00,279 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > temperature
2024-02-19 20:25:03,050 [temperature.py:verify_max_temp()] - 240/270
2024-02-19 20:25:03,050 [KlippyWebsocket.py:set_tool_temp()] - Sending set_tool_temp: M104 T0 S240
2024-02-19 20:25:05,518 [temperature.py:verify_max_temp()] - 105/120
2024-02-19 20:25:05,518 [KlippyWebsocket.py:set_bed_temp()] - Sending set_bed_temp: M140 S105
2024-02-19 20:25:08,045 [screen.py:_menu_go_back()] - #### Menu go back
2024-02-19 20:25:08,063 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-02-19 20:25:09,047 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-02-19 20:25:09,919 [screen.py:show_panel()] - Reinitializing panel
2024-02-19 20:25:09,997 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move > menu
2024-02-19 20:25:10,006 [menu.py:arrangeMenuItems()] - X > homing quad_gantry_level
2024-02-19 20:25:11,073 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G28'}
2024-02-19 20:26:00,742 [screen.py:_menu_go_back()] - #### Menu go back
2024-02-19 20:26:00,777 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-02-19 20:26:03,161 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move > menu
2024-02-19 20:26:03,180 [menu.py:arrangeMenuItems()] - X > homing quad_gantry_level
2024-02-19 20:26:04,117 [screen.py:_send_action()] - printer.gcode.script: {'script': 'Z_TILT_ADJUST'}
2024-02-19 20:26:07,179 [screen.py:show_popup_message()] - error: Probe triggered prior to movement
2024-02-19 20:26:11,691 [screen.py:_menu_go_back()] - #### Menu go back
2024-02-19 20:26:11,738 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-02-19 20:26:13,378 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z+25 F600'}
2024-02-19 20:26:13,382 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 20:26:15,207 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move > menu
2024-02-19 20:26:15,225 [menu.py:arrangeMenuItems()] - X > homing quad_gantry_level
2024-02-19 20:26:16,822 [screen.py:_send_action()] - printer.gcode.script: {'script': 'Z_TILT_ADJUST'}
2024-02-19 20:26:18,862 [screen.py:show_popup_message()] - error: Probe triggered prior to movement
2024-02-19 20:26:20,773 [screen.py:_menu_go_back()] - #### Menu go back
2024-02-19 20:26:20,791 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-02-19 20:26:26,702 [KlippyGtk.py:Dialog()] - Showing dialog KlipperScreen (width=800, height=480)
2024-02-19 20:26:27,398 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-02-19 20:26:27,398 [screen.py:_send_action()] - printer.gcode.script: {'script': 'M18'}
2024-02-19 20:26:29,475 [screen_panel.py:load_menu()] - loading menu options
2024-02-19 20:26:30,438 [screen_panel.py:unload_menu()] - self.menu: ['move_menu', 'options_menu']
2024-02-19 20:26:39,951 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move > menu
2024-02-19 20:26:39,971 [menu.py:arrangeMenuItems()] - X > homing quad_gantry_level
2024-02-19 20:26:41,270 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G28'}
2024-02-19 20:29:18,490 [screen.py:_menu_go_back()] - #### Menu go back
2024-02-19 20:29:18,527 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-02-19 20:29:23,806 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+25 F3000'}
2024-02-19 20:29:23,810 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 20:29:24,262 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+25 F3000'}
2024-02-19 20:29:24,265 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 20:29:24,622 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+25 F3000'}
2024-02-19 20:29:24,625 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 20:29:25,035 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+25 F3000'}
2024-02-19 20:29:25,040 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 20:29:25,586 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+25 F3000'}
2024-02-19 20:29:25,588 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 20:29:26,286 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+25 F3000'}
2024-02-19 20:29:26,289 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 20:29:26,866 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+25 F3000'}
2024-02-19 20:29:26,870 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 20:29:27,514 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+25 F3000'}
2024-02-19 20:29:27,517 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 20:29:28,334 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+25 F3000'}
2024-02-19 20:29:28,336 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 20:29:29,250 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+25 F3000'}
2024-02-19 20:29:29,254 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 20:29:30,078 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+25 F3000'}
2024-02-19 20:29:30,080 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 20:29:33,187 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 X-25 F3000'}
2024-02-19 20:29:33,190 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 20:29:33,718 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 X-25 F3000'}
2024-02-19 20:29:33,722 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 20:29:34,758 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 X-25 F3000'}
2024-02-19 20:29:34,761 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 20:29:35,670 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 X-25 F3000'}
2024-02-19 20:29:35,673 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 20:29:38,443 [move.py:change_distance()] - ### Distance 5
2024-02-19 20:29:38,827 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y-5 F3000'}
2024-02-19 20:29:38,833 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 20:29:41,574 [move.py:change_distance()] - ### Distance 1
2024-02-19 20:29:41,935 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 X+1 F3000'}
2024-02-19 20:29:41,939 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 20:29:42,678 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 X+1 F3000'}
2024-02-19 20:29:42,683 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 20:29:43,542 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 X+1 F3000'}
2024-02-19 20:29:43,546 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 20:29:45,030 [move.py:change_distance()] - ### Distance .5
2024-02-19 20:29:45,371 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 X-.5 F3000'}
2024-02-19 20:29:45,375 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 20:29:46,707 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y-.5 F3000'}
2024-02-19 20:29:46,711 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 20:29:47,259 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y-.5 F3000'}
2024-02-19 20:29:47,262 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 20:29:47,554 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y-.5 F3000'}
2024-02-19 20:29:47,556 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 20:29:47,821 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y-.5 F3000'}
2024-02-19 20:29:47,825 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 20:29:48,254 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y-.5 F3000'}
2024-02-19 20:29:48,256 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 20:29:49,434 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y-.5 F3000'}
2024-02-19 20:29:49,436 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 20:29:56,171 [move.py:change_distance()] - ### Distance 5
2024-02-19 20:29:56,619 [move.py:change_distance()] - ### Distance 1
2024-02-19 20:29:57,123 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+1 F3000'}
2024-02-19 20:29:57,125 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 20:30:02,282 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+1 F3000'}
2024-02-19 20:30:02,285 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 20:30:07,126 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+1 F3000'}
2024-02-19 20:30:07,128 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 20:30:41,771 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 X-1 F3000'}
2024-02-19 20:30:41,773 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 20:30:44,718 [move.py:change_distance()] - ### Distance .5
2024-02-19 20:30:45,103 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 X+.5 F3000'}
2024-02-19 20:30:45,105 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 20:30:50,206 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z-.5 F600'}
2024-02-19 20:30:50,212 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 20:30:50,498 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z-.5 F600'}
2024-02-19 20:30:50,500 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 20:30:50,930 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z-.5 F600'}
2024-02-19 20:30:50,933 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 20:30:51,338 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z-.5 F600'}
2024-02-19 20:30:51,340 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 20:30:51,722 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z-.5 F600'}
2024-02-19 20:30:51,725 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 20:30:52,131 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z-.5 F600'}
2024-02-19 20:30:52,133 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 20:30:52,515 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z-.5 F600'}
2024-02-19 20:30:52,518 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 20:30:52,922 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z-.5 F600'}
2024-02-19 20:30:52,926 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 20:30:53,714 [move.py:change_distance()] - ### Distance 1
2024-02-19 20:30:54,099 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z-1 F600'}
2024-02-19 20:30:54,102 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 20:30:54,867 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z-1 F600'}
2024-02-19 20:30:54,869 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 20:30:55,494 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z-1 F600'}
2024-02-19 20:30:55,497 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 20:30:56,218 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z-1 F600'}
2024-02-19 20:30:56,221 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 20:30:57,014 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z-1 F600'}
2024-02-19 20:30:57,017 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 20:30:57,838 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z-1 F600'}
2024-02-19 20:30:57,841 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 20:30:58,894 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z-1 F600'}
2024-02-19 20:30:58,896 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 20:31:01,390 [move.py:change_distance()] - ### Distance 10
2024-02-19 20:31:01,759 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z+10 F600'}
2024-02-19 20:31:01,762 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 20:31:02,574 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z+10 F600'}
2024-02-19 20:31:02,578 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 20:31:24,438 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-02-19 20:31:24,438 [printer.py:change_state()] - Adding callback for state: disconnected
2024-02-19 20:31:24,439 [screen.py:state_disconnected()] - ### Going to disconnected
2024-02-19 20:31:24,439 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-19 20:31:24,443 [screen.py:show_panel()] - Reinitializing panel
2024-02-19 20:31:24,511 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-02-19 20:31:27,287 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-19 20:31:27,296 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2024-02-19 20:31:27,296 [printer.py:configure_cameras()] - Cameras: []
2024-02-19 20:31:27,296 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'update_manager', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-310-g67c98f6', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-02-19 20:31:27,306 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2024-02-19 20:31:27,325 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2024-02-19 20:31:27,328 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro _Probe_Variables': {'variable_probe_attached': 'False', 'variable_probe_state': 'False', 'variable_probe_lock': 'False', 'variable_probe_z_homed': 'False', 'variable_z_endstop_x': '0', 'variable_z_endstop_y': '0', 'gcode': ''}, 'gcode_macro _klicky_check_variables_version': {'gcode': '\n{% set version = printer["gcode_macro _User_Variables"].version|default(0) %}\n\n{% if version != 1 %}\n{ action_raise_error("Please update your klicky variables, there are some functionality changes") }\n{% endif %}'}, 'gcode_macro _KlickyDebug': {'gcode': '\n{% set message  = params.MSG %}\n{% set debug = printer["gcode_macro _User_Variables"].debug|default(False) %}\n\n{% if debug %}\n{ action_respond_info(message) }\n{% endif %}'}, 'gcode_macro _exit_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move  = params.MOVE|default(0) %}\n{% set speed = printer["gcode_macro _User_Variables"].travel_speed %}\n\n\nM400\nSET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\nRESTORE_GCODE_STATE NAME={function} MOVE={move} MOVE_SPEED={speed}'}, 'gcode_macro _entry_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move_accel = printer["gcode_macro _User_Variables"].move_accel|default(1000) %}\n\nM400\nSAVE_GCODE_STATE NAME={function}\n\nSET_GCODE_OFFSET Z=0\n\nG90\n\nSET_VELOCITY_LIMIT ACCEL={move_accel}'}, 'gcode_macro _Homing_Variables': {'gcode': '\n{% set reset  = params.RESET|default(0) %}\n{% if reset %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }\n{% endif %}'}, 'gcode_macro Attach_Probe_Lock': {'description': 'Attaches Klicky Probe, can only be docked after unlocking', 'gcode': '\nAttach_Probe\n_Probe_Lock'}, 'gcode_macro Dock_Probe_Unlock': {'description': 'Docks Klicky Probe even if it was locked', 'gcode': '\n_Probe_Unlock\nDock_Probe'}, 'gcode_macro _Probe_Unlock': {'description': 'Unlocks Klicky Probe state', 'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to False"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }'}, 'gcode_macro _Probe_Lock': {'description': 'Locks Klicky Probe state', 'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to True"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ True }'}, 'gcode_macro _DeployKlickyDock': {'description': 'Deploys Klicky servo-controlled dock', 'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_deploy = printer["gcode_macro _User_Variables"].servo_deploy|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_DeployKlickyDock Klicky servo configuration enabled"\n{% if servo_deploy == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo deploy angle specified") }\n{% endif %}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _DeployDock"] is defined %}\n_KlickyDebug msg="_DeployKlickyDock calling _DeployDock"\n_DeployDock\n{% endif %}'}, 'gcode_macro _RetractKlickyDock': {'description': 'Retracts Klicky servo-controlled dock', 'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_retract = printer["gcode_macro _User_Variables"].servo_retract|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_RetractKlickyDock Klicky servo configuration enabled"\n{% if servo_retract == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo retract angle specified") }\n{% endif %}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _RetractDock"] is defined %}\n_KlickyDebug msg="_RetractKlickyDock calling _RetractDock"\n_RetractDock\n{% endif %}'}, 'gcode_macro Attach_Probe': {'description': 'Attaches Klicky Probe', 'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set attachmove2_x = printer["gcode_macro _User_Variables"].attachmove2_x|default(0) %}\n{% set attachmove2_y = printer["gcode_macro _User_Variables"].attachmove2_y|default(0) %}\n{% set attachmove2_z = printer["gcode_macro _User_Variables"].attachmove2_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n_entry_point function=Attach_Probe\n\n{% if bypass_probe_docking == False %}\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n_KlickyDebug msg="Attach_Probe Axis homed"\n\n\n{% elif not probe_attached and not probe_lock %}\n_KlickyDebug msg="Attach_Probe going to attach probe"\n{% if verbose %}\n{ action_respond_info("Attaching Probe") }\n{% endif %}\n_KLICKY_STATUS_BUSY\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% if not enable_z_hop %}\n_KlickyDebug msg="Attach_Probe z_hop disabled"\n{% set safe_z = 0 %}\n{% endif %}\n{% endif %}\n\n\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero, duplicate?") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Umbilical_Path\n\n_entry_point function=Attach_Probe_intern\n\n\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n_DeployKlickyDock\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}"\nG0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}\n\n_RetractKlickyDock\n\n{% if ((printer.gcode_move.gcode_position.z < safe_z) or (docklocation_z != -128 and docklocation_z < safe_z ))%}\n_KlickyDebug msg="Attach_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\n_CheckProbe action=attach\n\n_exit_point function=Attach_Probe_intern move={goback}\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe locked not attaching probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already attached!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe already attached, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Attach_Probe\n{% else %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}'}, 'gcode_macro Dock_Probe': {'description': 'Docks Klicky Probe', 'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n{% if bypass_probe_docking == True %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}\n\n{% if bypass_probe_docking != True %}\n_entry_point function=Dock_Probe\n\n\n{% if probe_attached and not probe_lock %}\n_KLICKY_STATUS_BUSY\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Dock_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n_Umbilical_Path\n\n\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n\n_DeployKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\n\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}"\nG0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}\n{% endif %}\n\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}\n\n\n_RetractKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving away from the dock to G0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}\n\n\n{% if (printer.gcode_move.gcode_position.z < safe_z) %}\n_KlickyDebug msg="Dock_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\nG4 P1000\n_CheckProbe action=dock\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe locked not docking probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already docked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe already docked, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Dock_Probe move={goback}\n{% else %}\n_KlickyDebug msg="Dock_Probe probe docking bypassed, doing nothing"\n{% endif %}'}, 'gcode_macro PROBE_CALIBRATE': {'rename_existing': '_PROBE_CALIBRATE', 'description': 'Calibrate the probes z_offset with klicky automount', 'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_calibrate Axis homed"\n_KlickyDebug msg="probe_calibrate Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_CALIBRATE with the probe above the BED, check klicky_variables bed size!") }\n{% endif %}\n\n{% if bypass_probe_docking == False %}\n_CheckProbe action=query\nG90\nAttach_Probe back=1\n_KLICKY_STATUS_CALIBRATING_Z\n\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nM118 moving the toolhead 20 mm from the bed\n_KlickyDebug msg="probe_calibrate Moving Z up by 20mm"\nTESTZ Z=20\nM118 remove manually the probe and continue calibration\n_KLICKY_STATUS_READY\n{% else %}\n_KLICKY_STATUS_CALIBRATING_Z\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n_KLICKY_STATUS_READY\n{% endif %}'}, 'gcode_macro PROBE_ACCURACY': {'rename_existing': '_PROBE_ACCURACY', 'description': 'Probe Z-height accuracy at current XY position with klicky automount', 'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_accuracy Axis homed"\n_KlickyDebug msg="probe_accuracy Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n_entry_point function=PROBE_ACCURACY\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_ACCURACY with the probe above the BED, check klicky_variables bed size!") }\n{% endif%}\n\n_CheckProbe action=query\nAttach_Probe back=1\n\n_KlickyDebug msg="probe_accuracy calling klipper probe accuracy"\n_PROBE_ACCURACY {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nDock_Probe back=1\n\n_exit_point function=PROBE_ACCURACY move=1'}, 'force_move': {'enable_force_move': 'True'}, 'homing_override': {'axes': 'xyz', 'gcode': '\n\n_User_Variables\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n{% set kinematic_z = 0 %}\n{% set dock_on_zhome = printer["gcode_macro _User_Variables"].dock_on_zhome|default(True) %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set home_backoff_x = printer["gcode_macro _User_Variables"].home_backoff_x|default(0) %}\n{% set home_backoff_y = printer["gcode_macro _User_Variables"].home_backoff_y|default(0) %}\n{% set override_homing = printer["gcode_macro _User_Variables"].override_homing|default(\'\') %}\n\n\n_klicky_check_variables_version\n\n_CheckProbe action=query\n\n\n{% set home_x, home_y, home_z, leave_probe_attached = False, False, False, False %}\n\n{% if \'PROBE_LOCK\' in params%}\n{% if verbose %}\n{ action_respond_info("PROBE_LOCK = True") }\n{% endif %}\n{% set leave_probe_attached = True %}\n{% endif %}\n\n\n{% if not \'X\' in params\nand not \'Y\' in params\nand not \'Z\' in params %}\n\n{% set home_x, home_y, home_z = True, True, True %}\n_KlickyDebug msg="homing_override goint to home all axes"\n\n{% else %}\n{% if \'X\' in params %}\n{% set home_x = True %}\n_KlickyDebug msg="homing_override goint to home X"\n\n{% endif %}\n\n{% if \'Y\' in params %}\n{% set home_y = True %}\n_KlickyDebug msg="homing_override goint to home Y"\n{% endif %}\n\n{% if \'Z\' in params %}\n{% set home_z = True %}\n_KlickyDebug msg="homing_override goint to home Z"\n{% endif %}\n\n{% if \'X\' in params\nand \'Y\' in params\nand \'Z\' in params %}\n\n\n_Homing_Variables reset=1\n_KlickyDebug msg="homing_override goint to home all axes"\n{% endif %}\n\n{% endif %}\n\n_entry_point function=homing_override\n_KLICKY_STATUS_HOMING\n\n\n{% if \'z\' not in printer.toolhead.homed_axes %}\n{% if enable_z_hop == False %}\n_KlickyDebug msg="homing_override z_hop disabled"\n\n{% set kinematic_z = safe_z %}\n{% set safe_z = safe_z %}\n{% endif %}\n{% endif %}\n\n\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes and \'z\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("No axis homed") }\n{% endif %}\n_KlickyDebug msg="homing_override no axis homed, setting position as X=Y=0 Z={kinematic_z}"\nSET_KINEMATIC_POSITION X=0 Y=0 Z={kinematic_z}\nM400\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% if home_z != True %}\n_KlickyDebug msg="homing_override clearing axis homed state if not already homing Z"\nM84\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("X or Y not homed, forcing full G28") }\n{% endif %}\n{% set home_x, home_y, home_z = True, True, True %}\n{% endif %}\n{% endif %}\n\n\n{% if ((attachmove_y == 0 and override_homing == \'\' ) or (override_homing == \'Y\'))%}\n\n{% if home_y %}\n{% if override_homing == \'Y\' %}\n_KlickyDebug msg="homing_override Y homing first override, due to override_homing = Y"\n{% else %}\n_KlickyDebug msg="homing_override Y homing first override, due to attachmove_y = 0"\n{% endif %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y G28 Y0"\nG28 Y0\n\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop-home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n{% set home_y = False %}\n{% endif %}\n\n\n\n{% if home_x %}\n{% if verbose %}\n{ action_respond_info("Homing X") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in X homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_X"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_X external script to handle the X homing"\n_HOME_X\n{% else %}\n_KlickyDebug msg="homing_override Homing X, G28 X0"\nG28 X0\n\n{% if home_backoff_x != 0 %}\n{% if (printer.configfile.settings.stepper_x.position_endstop > (printer.configfile.settings.stepper_x.position_min|default(0) + printer.configfile.settings.stepper_x.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n\n{% if home_y %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y, G28 Y0"\nG28 Y0\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if verbose %}\n{ action_respond_info("Homing Z") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe configured as a virtual Z endstop attaching probe"\nAttach_Probe\n\n{% if leave_probe_attached %}\n_Probe_Lock\n{% endif %}\n{% elif dock_on_zhome == True %}\nDock_Probe\n{% endif %}\n\n_Home_Z_\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe no longer required, docking probe"\nDock_Probe\n{% elif dock_on_zhome == False %}\nDock_Probe\n{% endif %}\n{% endif %}\n_CheckProbe action=query\n\n\n_Park_Toolhead\n\n_exit_point function=homing_override\n_KLICKY_STATUS_READY'}, 'gcode_macro _Umbilical_Path': {'gcode': '\n{% set umbilical = printer["gcode_macro _User_Variables"].umbilical %}\n{% set umbilical_x = printer["gcode_macro _User_Variables"].umbilical_x %}\n{% set umbilical_y = printer["gcode_macro _User_Variables"].umbilical_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n\n{% if umbilical %}\n\n_entry_point function=Umbilical_Path\n\n_KlickyDebug msg="_Umbilical_Path moving to G0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}"\nG0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}\n\n_exit_point function=Umbilical_Path\n{% endif %}'}, 'gcode_macro _Home_Z_': {'gcode': '\n{% set z_endstop_x = printer["gcode_macro _Probe_Variables"].z_endstop_x %}\n{% set z_endstop_y = printer["gcode_macro _Probe_Variables"].z_endstop_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}    {% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Home_Z\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n{% else %}\n_KlickyDebug msg="_Home_Z_ XY Axis homed"\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="_Home_Z_ Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n\n\n_KlickyDebug msg="_Home_Z_ moving to Z endstop position G0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}"\nG0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}\n_KlickyDebug msg="_Home_Z_ Homing Z G28 Z"\nG28 Z0\n_KlickyDebug msg="_Home_Z_ toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_exit_point function=Home_Z'}, 'gcode_macro _CheckProbe': {'variable_probe_state': '0', 'gcode': '\nQuery_Probe\n_SetProbeState action={ params.ACTION }'}, 'gcode_macro _SetProbeState': {'gcode': '\n{% set query_probe_triggered = printer.probe.last_query %}\n{% set action  = params.ACTION|default(\'\') %}\n\n\n{% if query_probe_triggered %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ False }\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ True }\n{% endif %}\n\n{% if action == \'query\' %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_state VALUE={ query_probe_triggered }\n{% endif %}\n\n\n\n\n{% if not query_probe_triggered and action == \'dock\' %}\n{ action_raise_error("Probe dock failed!") }\n{% endif %}\n\n\n{% if query_probe_triggered and action == \'attach\' %}\n{ action_raise_error("Probe attach failed!") }\n{% endif %}'}, 'gcode_macro _Park_Toolhead': {'gcode': '\n{% set park_toolhead = printer["gcode_macro _User_Variables"].park_toolhead %}\n{% set parkposition_x = printer["gcode_macro _User_Variables"].parkposition_x %}\n{% set parkposition_y = printer["gcode_macro _User_Variables"].parkposition_y %}\n{% set parkposition_z = printer["gcode_macro _User_Variables"].parkposition_z %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Park_Toolhead\n\n{% if park_toolhead and \'xyz\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Parking Toolhead") }\n{% endif %}\n{% if parkposition_z == -128 %}\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}\n\n{% else %}\n\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}\n\n{% endif %}\n\n{% endif %}\n_exit_point function=Park_Toolhead'}, 'gcode_macro _klicky_status_ready': {'gcode': '\n{% if printer[\'gcode_macro status_ready\'] is defined %}\n_KlickyDebug msg="_klicky_status_ready activating the LED STATUS_READY"\nSTATUS_READY\n{% endif %}'}, 'gcode_macro _klicky_status_busy': {'gcode': '\n{% if printer[\'gcode_macro status_busy\'] is defined %}\n_KlickyDebug msg="_klicky_status_busy activating the LED STATUS_BUSY"\nSTATUS_BUSY\n{% endif %}'}, 'gcode_macro _klicky_status_leveling': {'gcode': '\n{% if printer[\'gcode_macro status_leveling\'] is defined %}\n_KlickyDebug msg="_klicky_status_leveling activating the LED STATUS_LEVELING"\nSTATUS_LEVELING\n{% endif %}'}, 'gcode_macro _klicky_status_homing': {'gcode': '\n{% if printer[\'gcode_macro status_homing\'] is defined %}\n_KlickyDebug msg="_klicky_status_homing activating the LED STATUS_HOMING"\nSTATUS_HOMING\n{% endif %}'}, 'gcode_macro _klicky_status_cleaning': {'gcode': '\n{% if printer[\'gcode_macro status_cleaning\'] is defined %}\n_KlickyDebug msg="_klicky_status_cleaning activating the LED STATUS_CLEANING"\nSTATUS_CLEANING\n{% endif %}'}, 'gcode_macro _klicky_status_meshing': {'gcode': '\n{% if printer[\'gcode_macro status_meshing\'] is defined %}\n_KlickyDebug msg="_klicky_status_meshing activating the LED STATUS_MESHING"\nSTATUS_MESHING\n{% endif %}'}, 'gcode_macro _klicky_status_calibrating_z': {'gcode': '\n{% if printer[\'gcode_macro status_calibrating_z\'] is defined %}\n_KlickyDebug msg="_klicky_status_calibrating_z activating the LED STATUS_CALIBRATING_Z"\nSTATUS_CALIBRATING_Z\n{% endif %}'}, 'z_calibration': {'nozzle_xy_position': '172, 301', 'switch_xy_position': '172, 275', 'bed_xy_position': '150, 150', 'switch_offset': '0.5', 'offset_margins': '-1.0,1.0', 'speed': '50', 'probing_first_fast': 'false', 'start_gcode': 'Attach_Probe', 'end_gcode': 'Dock_Probe'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_28003C001150535556323420-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '^PG6', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '25', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'PG9', 'position_min': '0', 'position_endstop': '300', 'position_max': '303.5', 'homing_speed': '25', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': '!PG3', 'enable_pin': '!PG5', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'PG10', 'position_max': '290', 'position_min': '-4.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3', 'position_endstop': '-0.711'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA0', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': '!PF10', 'enable_pin': '!PG2', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PC13', 'dir_pin': 'PF0', 'enable_pin': '!PF1', 'rotation_distance': '21.9459674016', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.75', 'heater_pin': 'PA1', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF4', 'min_temp': '10', 'max_temp': '270', 'max_power': '1.0', 'min_extrude_temp': '170', 'pressure_advance': '0.05', 'pressure_advance_smooth_time': '0.040', 'control': 'pid', 'pid_kp': '26.572', 'pid_ki': '2.036', 'pid_kd': '86.691'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.5', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PA2', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF3', 'max_power': '1', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '55.196', 'pid_ki': '2.091', 'pid_kd': '364.295'}, 'probe': {'pin': 'PG15', 'x_offset': '0', 'y_offset': '25.0', 'z_offset': '0', 'speed': '10.0', 'samples': '5', 'samples_result': 'median', 'sample_retract_dist': '3.0', 'samples_tolerance': '0.006', 'samples_tolerance_retries': '6'}, 'fan': {'pin': 'PA8', 'kick_start_time': '0.5', 'off_below': '0.10'}, 'heater_fan hotend_fan': {'pin': 'PE5', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'controller_fan controller_fan': {'pin': 'PD12', 'kick_start_time': '0.5', 'heater': 'heater_bed'}, 'heater_fan exhaust_fan': {'pin': 'PD13', 'max_power': '1.0', 'shutdown_speed': '0.0', 'kick_start_time': '5.0', 'heater': 'heater_bed', 'heater_temp': '60', 'fan_speed': '1.0'}, 'output_pin caselight': {'pin': 'PD15', 'pwm': 'true', 'shutdown_value': '0', 'value': '1', 'cycle_time': '0.01'}, 'neopixel headlight': {'pin': 'PB0', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '0.0', 'initial_green': '0.2157', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'temperature_sensor chamber_temp': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF5', 'min_temp': '0', 'max_temp': '100', 'gcode_id': 'chamber_th'}, 'idle_timeout': {'timeout': '1800'}, 'z_tilt': {'z_positions': '\n-50, 18\n150, 348\n350, 18', 'points': '\n30, 5\n150, 245\n270, 5', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'gcode_macro _User_Variables': {'variable_verbose': 'True', 'variable_debug': 'False', 'variable_travel_speed': '200', 'variable_move_accel': '1000', 'variable_dock_speed': '50', 'variable_release_speed': '75', 'variable_z_drop_speed': '20', 'variable_safe_z': '25', 'variable_enable_z_hop': 'True', 'variable_max_bed_y': '300', 'variable_max_bed_x': '300', 'variable_z_endstop_x': '172', 'variable_z_endstop_y': '301', 'variable_docklocation_x': '42', 'variable_docklocation_y': '297', 'variable_docklocation_z': '-128', 'variable_enable_dock_servo': 'False', 'variable_servo_name': "'NAME'", 'variable_servo_deploy': '10', 'variable_servo_retract': '11', 'variable_servo_delay': '250', 'variable_dockmove_x': '40', 'variable_dockmove_y': '0', 'variable_dockmove_z': '0', 'variable_attachmove_x': '0', 'variable_attachmove_y': '30', 'variable_attachmove_z': '0', 'variable_umbilical': 'False', 'variable_umbilical_x': '15', 'variable_umbilical_y': '15', 'variable_park_toolhead': 'False', 'variable_parkposition_x': '125', 'variable_parkposition_y': '125', 'variable_parkposition_z': '30', 'variable_version': '1', 'variable_attachmove2_x': '0', 'variable_attachmove2_y': '0', 'variable_attachmove2_z': '0', 'variable_home_backoff_x': '10', 'variable_home_backoff_y': '10', 'variable_override_homing': "''", 'variable_dock_on_zhome': 'True', 'gcode': '\n{% set Mx = printer[\'configfile\'].config["stepper_x"]["position_max"]|float %}\n{% set My = printer[\'configfile\'].config["stepper_y"]["position_max"]|float %}\n{% set Ox = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set Oy = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set Oz = printer[\'configfile\'].config["probe"]["z_offset"]|float %}\n\n\n{% if z_endstop_x != 0 or z_endstop_y != 0 %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ z_endstop_x }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ z_endstop_y }\n\n\n{% else %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ (Mx * 0.5) - Ox }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ (My * 0.5) - Oy }\n{% endif %}'}, 'gcode_macro PRINT_START': {'gcode': '\nM117 Homing...\nG28\nATTACH_PROBE\nZ_TILT_ADJUST\nDOCK_PROBE\nG28\n\n\n\n\n\n\n\nG0 X150 Y150 Z30 F3600'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_28003C001150535556323420-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro _probe_variables': {'gcode': '', 'description': 'G-Code macro', 'variable_probe_attached': 'False', 'variable_probe_state': 'False', 'variable_probe_lock': 'False', 'variable_probe_z_homed': 'False', 'variable_z_endstop_x': '0', 'variable_z_endstop_y': '0'}, 'gcode_macro _klicky_check_variables_version': {'gcode': '\n{% set version = printer["gcode_macro _User_Variables"].version|default(0) %}\n\n{% if version != 1 %}\n{ action_raise_error("Please update your klicky variables, there are some functionality changes") }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klickydebug': {'gcode': '\n{% set message  = params.MSG %}\n{% set debug = printer["gcode_macro _User_Variables"].debug|default(False) %}\n\n{% if debug %}\n{ action_respond_info(message) }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _exit_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move  = params.MOVE|default(0) %}\n{% set speed = printer["gcode_macro _User_Variables"].travel_speed %}\n\n\nM400\nSET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\nRESTORE_GCODE_STATE NAME={function} MOVE={move} MOVE_SPEED={speed}', 'description': 'G-Code macro'}, 'gcode_macro _entry_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move_accel = printer["gcode_macro _User_Variables"].move_accel|default(1000) %}\n\nM400\nSAVE_GCODE_STATE NAME={function}\n\nSET_GCODE_OFFSET Z=0\n\nG90\n\nSET_VELOCITY_LIMIT ACCEL={move_accel}', 'description': 'G-Code macro'}, 'gcode_macro _homing_variables': {'gcode': '\n{% set reset  = params.RESET|default(0) %}\n{% if reset %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro attach_probe_lock': {'gcode': '\nAttach_Probe\n_Probe_Lock', 'description': 'Attaches Klicky Probe, can only be docked after unlocking'}, 'gcode_macro dock_probe_unlock': {'gcode': '\n_Probe_Unlock\nDock_Probe', 'description': 'Docks Klicky Probe even if it was locked'}, 'gcode_macro _probe_unlock': {'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to False"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }', 'description': 'Unlocks Klicky Probe state'}, 'gcode_macro _probe_lock': {'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to True"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ True }', 'description': 'Locks Klicky Probe state'}, 'gcode_macro _deployklickydock': {'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_deploy = printer["gcode_macro _User_Variables"].servo_deploy|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_DeployKlickyDock Klicky servo configuration enabled"\n{% if servo_deploy == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo deploy angle specified") }\n{% endif %}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _DeployDock"] is defined %}\n_KlickyDebug msg="_DeployKlickyDock calling _DeployDock"\n_DeployDock\n{% endif %}', 'description': 'Deploys Klicky servo-controlled dock'}, 'gcode_macro _retractklickydock': {'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_retract = printer["gcode_macro _User_Variables"].servo_retract|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_RetractKlickyDock Klicky servo configuration enabled"\n{% if servo_retract == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo retract angle specified") }\n{% endif %}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _RetractDock"] is defined %}\n_KlickyDebug msg="_RetractKlickyDock calling _RetractDock"\n_RetractDock\n{% endif %}', 'description': 'Retracts Klicky servo-controlled dock'}, 'gcode_macro attach_probe': {'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set attachmove2_x = printer["gcode_macro _User_Variables"].attachmove2_x|default(0) %}\n{% set attachmove2_y = printer["gcode_macro _User_Variables"].attachmove2_y|default(0) %}\n{% set attachmove2_z = printer["gcode_macro _User_Variables"].attachmove2_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n_entry_point function=Attach_Probe\n\n{% if bypass_probe_docking == False %}\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n_KlickyDebug msg="Attach_Probe Axis homed"\n\n\n{% elif not probe_attached and not probe_lock %}\n_KlickyDebug msg="Attach_Probe going to attach probe"\n{% if verbose %}\n{ action_respond_info("Attaching Probe") }\n{% endif %}\n_KLICKY_STATUS_BUSY\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% if not enable_z_hop %}\n_KlickyDebug msg="Attach_Probe z_hop disabled"\n{% set safe_z = 0 %}\n{% endif %}\n{% endif %}\n\n\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero, duplicate?") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Umbilical_Path\n\n_entry_point function=Attach_Probe_intern\n\n\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n_DeployKlickyDock\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}"\nG0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}\n\n_RetractKlickyDock\n\n{% if ((printer.gcode_move.gcode_position.z < safe_z) or (docklocation_z != -128 and docklocation_z < safe_z ))%}\n_KlickyDebug msg="Attach_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\n_CheckProbe action=attach\n\n_exit_point function=Attach_Probe_intern move={goback}\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe locked not attaching probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already attached!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe already attached, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Attach_Probe\n{% else %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}', 'description': 'Attaches Klicky Probe'}, 'gcode_macro dock_probe': {'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n{% if bypass_probe_docking == True %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}\n\n{% if bypass_probe_docking != True %}\n_entry_point function=Dock_Probe\n\n\n{% if probe_attached and not probe_lock %}\n_KLICKY_STATUS_BUSY\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Dock_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n_Umbilical_Path\n\n\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n\n_DeployKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\n\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}"\nG0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}\n{% endif %}\n\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}\n\n\n_RetractKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving away from the dock to G0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}\n\n\n{% if (printer.gcode_move.gcode_position.z < safe_z) %}\n_KlickyDebug msg="Dock_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\nG4 P1000\n_CheckProbe action=dock\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe locked not docking probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already docked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe already docked, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Dock_Probe move={goback}\n{% else %}\n_KlickyDebug msg="Dock_Probe probe docking bypassed, doing nothing"\n{% endif %}', 'description': 'Docks Klicky Probe'}, 'gcode_macro probe_calibrate': {'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_calibrate Axis homed"\n_KlickyDebug msg="probe_calibrate Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_CALIBRATE with the probe above the BED, check klicky_variables bed size!") }\n{% endif %}\n\n{% if bypass_probe_docking == False %}\n_CheckProbe action=query\nG90\nAttach_Probe back=1\n_KLICKY_STATUS_CALIBRATING_Z\n\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nM118 moving the toolhead 20 mm from the bed\n_KlickyDebug msg="probe_calibrate Moving Z up by 20mm"\nTESTZ Z=20\nM118 remove manually the probe and continue calibration\n_KLICKY_STATUS_READY\n{% else %}\n_KLICKY_STATUS_CALIBRATING_Z\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n_KLICKY_STATUS_READY\n{% endif %}', 'rename_existing': '_PROBE_CALIBRATE', 'description': 'Calibrate the probes z_offset with klicky automount'}, 'gcode_macro probe_accuracy': {'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_accuracy Axis homed"\n_KlickyDebug msg="probe_accuracy Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n_entry_point function=PROBE_ACCURACY\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_ACCURACY with the probe above the BED, check klicky_variables bed size!") }\n{% endif%}\n\n_CheckProbe action=query\nAttach_Probe back=1\n\n_KlickyDebug msg="probe_accuracy calling klipper probe accuracy"\n_PROBE_ACCURACY {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nDock_Probe back=1\n\n_exit_point function=PROBE_ACCURACY move=1', 'rename_existing': '_PROBE_ACCURACY', 'description': 'Probe Z-height accuracy at current XY position with klicky automount'}, 'force_move': {'enable_force_move': True}, 'homing_override': {'axes': 'xyz', 'gcode': '\n\n_User_Variables\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n{% set kinematic_z = 0 %}\n{% set dock_on_zhome = printer["gcode_macro _User_Variables"].dock_on_zhome|default(True) %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set home_backoff_x = printer["gcode_macro _User_Variables"].home_backoff_x|default(0) %}\n{% set home_backoff_y = printer["gcode_macro _User_Variables"].home_backoff_y|default(0) %}\n{% set override_homing = printer["gcode_macro _User_Variables"].override_homing|default(\'\') %}\n\n\n_klicky_check_variables_version\n\n_CheckProbe action=query\n\n\n{% set home_x, home_y, home_z, leave_probe_attached = False, False, False, False %}\n\n{% if \'PROBE_LOCK\' in params%}\n{% if verbose %}\n{ action_respond_info("PROBE_LOCK = True") }\n{% endif %}\n{% set leave_probe_attached = True %}\n{% endif %}\n\n\n{% if not \'X\' in params\nand not \'Y\' in params\nand not \'Z\' in params %}\n\n{% set home_x, home_y, home_z = True, True, True %}\n_KlickyDebug msg="homing_override goint to home all axes"\n\n{% else %}\n{% if \'X\' in params %}\n{% set home_x = True %}\n_KlickyDebug msg="homing_override goint to home X"\n\n{% endif %}\n\n{% if \'Y\' in params %}\n{% set home_y = True %}\n_KlickyDebug msg="homing_override goint to home Y"\n{% endif %}\n\n{% if \'Z\' in params %}\n{% set home_z = True %}\n_KlickyDebug msg="homing_override goint to home Z"\n{% endif %}\n\n{% if \'X\' in params\nand \'Y\' in params\nand \'Z\' in params %}\n\n\n_Homing_Variables reset=1\n_KlickyDebug msg="homing_override goint to home all axes"\n{% endif %}\n\n{% endif %}\n\n_entry_point function=homing_override\n_KLICKY_STATUS_HOMING\n\n\n{% if \'z\' not in printer.toolhead.homed_axes %}\n{% if enable_z_hop == False %}\n_KlickyDebug msg="homing_override z_hop disabled"\n\n{% set kinematic_z = safe_z %}\n{% set safe_z = safe_z %}\n{% endif %}\n{% endif %}\n\n\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes and \'z\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("No axis homed") }\n{% endif %}\n_KlickyDebug msg="homing_override no axis homed, setting position as X=Y=0 Z={kinematic_z}"\nSET_KINEMATIC_POSITION X=0 Y=0 Z={kinematic_z}\nM400\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% if home_z != True %}\n_KlickyDebug msg="homing_override clearing axis homed state if not already homing Z"\nM84\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("X or Y not homed, forcing full G28") }\n{% endif %}\n{% set home_x, home_y, home_z = True, True, True %}\n{% endif %}\n{% endif %}\n\n\n{% if ((attachmove_y == 0 and override_homing == \'\' ) or (override_homing == \'Y\'))%}\n\n{% if home_y %}\n{% if override_homing == \'Y\' %}\n_KlickyDebug msg="homing_override Y homing first override, due to override_homing = Y"\n{% else %}\n_KlickyDebug msg="homing_override Y homing first override, due to attachmove_y = 0"\n{% endif %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y G28 Y0"\nG28 Y0\n\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop-home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n{% set home_y = False %}\n{% endif %}\n\n\n\n{% if home_x %}\n{% if verbose %}\n{ action_respond_info("Homing X") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in X homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_X"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_X external script to handle the X homing"\n_HOME_X\n{% else %}\n_KlickyDebug msg="homing_override Homing X, G28 X0"\nG28 X0\n\n{% if home_backoff_x != 0 %}\n{% if (printer.configfile.settings.stepper_x.position_endstop > (printer.configfile.settings.stepper_x.position_min|default(0) + printer.configfile.settings.stepper_x.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n\n{% if home_y %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y, G28 Y0"\nG28 Y0\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if verbose %}\n{ action_respond_info("Homing Z") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe configured as a virtual Z endstop attaching probe"\nAttach_Probe\n\n{% if leave_probe_attached %}\n_Probe_Lock\n{% endif %}\n{% elif dock_on_zhome == True %}\nDock_Probe\n{% endif %}\n\n_Home_Z_\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe no longer required, docking probe"\nDock_Probe\n{% elif dock_on_zhome == False %}\nDock_Probe\n{% endif %}\n{% endif %}\n_CheckProbe action=query\n\n\n_Park_Toolhead\n\n_exit_point function=homing_override\n_KLICKY_STATUS_READY'}, 'gcode_macro _umbilical_path': {'gcode': '\n{% set umbilical = printer["gcode_macro _User_Variables"].umbilical %}\n{% set umbilical_x = printer["gcode_macro _User_Variables"].umbilical_x %}\n{% set umbilical_y = printer["gcode_macro _User_Variables"].umbilical_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n\n{% if umbilical %}\n\n_entry_point function=Umbilical_Path\n\n_KlickyDebug msg="_Umbilical_Path moving to G0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}"\nG0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}\n\n_exit_point function=Umbilical_Path\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _home_z_': {'gcode': '\n{% set z_endstop_x = printer["gcode_macro _Probe_Variables"].z_endstop_x %}\n{% set z_endstop_y = printer["gcode_macro _Probe_Variables"].z_endstop_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}    {% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Home_Z\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n{% else %}\n_KlickyDebug msg="_Home_Z_ XY Axis homed"\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="_Home_Z_ Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n\n\n_KlickyDebug msg="_Home_Z_ moving to Z endstop position G0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}"\nG0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}\n_KlickyDebug msg="_Home_Z_ Homing Z G28 Z"\nG28 Z0\n_KlickyDebug msg="_Home_Z_ toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_exit_point function=Home_Z', 'description': 'G-Code macro'}, 'gcode_macro _checkprobe': {'gcode': '\nQuery_Probe\n_SetProbeState action={ params.ACTION }', 'description': 'G-Code macro', 'variable_probe_state': '0'}, 'gcode_macro _setprobestate': {'gcode': '\n{% set query_probe_triggered = printer.probe.last_query %}\n{% set action  = params.ACTION|default(\'\') %}\n\n\n{% if query_probe_triggered %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ False }\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ True }\n{% endif %}\n\n{% if action == \'query\' %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_state VALUE={ query_probe_triggered }\n{% endif %}\n\n\n\n\n{% if not query_probe_triggered and action == \'dock\' %}\n{ action_raise_error("Probe dock failed!") }\n{% endif %}\n\n\n{% if query_probe_triggered and action == \'attach\' %}\n{ action_raise_error("Probe attach failed!") }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _park_toolhead': {'gcode': '\n{% set park_toolhead = printer["gcode_macro _User_Variables"].park_toolhead %}\n{% set parkposition_x = printer["gcode_macro _User_Variables"].parkposition_x %}\n{% set parkposition_y = printer["gcode_macro _User_Variables"].parkposition_y %}\n{% set parkposition_z = printer["gcode_macro _User_Variables"].parkposition_z %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Park_Toolhead\n\n{% if park_toolhead and \'xyz\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Parking Toolhead") }\n{% endif %}\n{% if parkposition_z == -128 %}\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}\n\n{% else %}\n\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}\n\n{% endif %}\n\n{% endif %}\n_exit_point function=Park_Toolhead', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_ready': {'gcode': '\n{% if printer[\'gcode_macro status_ready\'] is defined %}\n_KlickyDebug msg="_klicky_status_ready activating the LED STATUS_READY"\nSTATUS_READY\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_busy': {'gcode': '\n{% if printer[\'gcode_macro status_busy\'] is defined %}\n_KlickyDebug msg="_klicky_status_busy activating the LED STATUS_BUSY"\nSTATUS_BUSY\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_leveling': {'gcode': '\n{% if printer[\'gcode_macro status_leveling\'] is defined %}\n_KlickyDebug msg="_klicky_status_leveling activating the LED STATUS_LEVELING"\nSTATUS_LEVELING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_homing': {'gcode': '\n{% if printer[\'gcode_macro status_homing\'] is defined %}\n_KlickyDebug msg="_klicky_status_homing activating the LED STATUS_HOMING"\nSTATUS_HOMING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_cleaning': {'gcode': '\n{% if printer[\'gcode_macro status_cleaning\'] is defined %}\n_KlickyDebug msg="_klicky_status_cleaning activating the LED STATUS_CLEANING"\nSTATUS_CLEANING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_meshing': {'gcode': '\n{% if printer[\'gcode_macro status_meshing\'] is defined %}\n_KlickyDebug msg="_klicky_status_meshing activating the LED STATUS_MESHING"\nSTATUS_MESHING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_calibrating_z': {'gcode': '\n{% if printer[\'gcode_macro status_calibrating_z\'] is defined %}\n_KlickyDebug msg="_klicky_status_calibrating_z activating the LED STATUS_CALIBRATING_Z"\nSTATUS_CALIBRATING_Z\n{% endif %}', 'description': 'G-Code macro'}, 'z_calibration': {'switch_offset': 0.5, 'offset_margins': '-1.0,1.0', 'speed': 50.0, 'samples_result': 'none', 'probing_first_fast': False, 'nozzle_xy_position': '172, 301', 'switch_xy_position': '172, 275', 'bed_xy_position': '150, 150', 'start_gcode': 'Attach_Probe', 'before_switch_gcode': '', 'end_gcode': 'Dock_Probe'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': '^PG6', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'PG9', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 303.5, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PF11', 'dir_pin': '!PG3', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG5', 'endstop_pin': 'PG10', 'position_endstop': -0.711, 'position_min': -4.5, 'position_max': 290.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA0'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PF9', 'dir_pin': '!PF10', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG2'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF4', 'min_temp': 10.0, 'max_temp': 270.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 26.572, 'pid_ki': 2.036, 'pid_kd': 86.691, 'heater_pin': 'PA1', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PC13', 'pressure_advance': 0.05, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'PF0', 'rotation_distance': 21.9459674016, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 55.196, 'pid_ki': 2.091, 'pid_kd': 364.295, 'heater_pin': 'PA2', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'probe': {'z_offset': 0.0, 'deactivate_on_each_sample': True, 'activate_gcode': '', 'deactivate_gcode': '', 'pin': 'PG15', 'speed': 10.0, 'lift_speed': 10.0, 'x_offset': 0.0, 'y_offset': 25.0, 'samples': 5, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.006, 'samples_tolerance_retries': 6}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE5', 'fan_speed': 1.0}, 'controller_fan controller_fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD12', 'fan_speed': 1.0, 'idle_speed': 1.0, 'idle_timeout': 30, 'heater': ['heater_bed']}, 'heater_fan exhaust_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 5.0, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13', 'fan_speed': 1.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PD15', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 1.0, 'maximum_mcu_duration': 0.0, 'value': 1.0, 'shutdown_value': 0.0}, 'neopixel headlight': {'pin': 'PB0', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 0.0, 'initial_green': 0.2157, 'initial_blue': 1.0, 'initial_white': 0.0}, 'temperature_sensor chamber_temp': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF5', 'min_temp': 0.0, 'max_temp': 100.0, 'gcode_id': 'chamber_th'}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [150.0, 348.0], [350.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 5.0], [150.0, 245.0], [270.0, 5.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'gcode_macro _user_variables': {'gcode': '\n{% set Mx = printer[\'configfile\'].config["stepper_x"]["position_max"]|float %}\n{% set My = printer[\'configfile\'].config["stepper_y"]["position_max"]|float %}\n{% set Ox = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set Oy = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set Oz = printer[\'configfile\'].config["probe"]["z_offset"]|float %}\n\n\n{% if z_endstop_x != 0 or z_endstop_y != 0 %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ z_endstop_x }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ z_endstop_y }\n\n\n{% else %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ (Mx * 0.5) - Ox }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ (My * 0.5) - Oy }\n{% endif %}', 'description': 'G-Code macro', 'variable_verbose': 'True', 'variable_debug': 'False', 'variable_travel_speed': '200', 'variable_move_accel': '1000', 'variable_dock_speed': '50', 'variable_release_speed': '75', 'variable_z_drop_speed': '20', 'variable_safe_z': '25', 'variable_enable_z_hop': 'True', 'variable_max_bed_y': '300', 'variable_max_bed_x': '300', 'variable_z_endstop_x': '172', 'variable_z_endstop_y': '301', 'variable_docklocation_x': '42', 'variable_docklocation_y': '297', 'variable_docklocation_z': '-128', 'variable_enable_dock_servo': 'False', 'variable_servo_name': "'NAME'", 'variable_servo_deploy': '10', 'variable_servo_retract': '11', 'variable_servo_delay': '250', 'variable_dockmove_x': '40', 'variable_dockmove_y': '0', 'variable_dockmove_z': '0', 'variable_attachmove_x': '0', 'variable_attachmove_y': '30', 'variable_attachmove_z': '0', 'variable_umbilical': 'False', 'variable_umbilical_x': '15', 'variable_umbilical_y': '15', 'variable_park_toolhead': 'False', 'variable_parkposition_x': '125', 'variable_parkposition_y': '125', 'variable_parkposition_z': '30', 'variable_version': '1', 'variable_attachmove2_x': '0', 'variable_attachmove2_y': '0', 'variable_attachmove2_z': '0', 'variable_home_backoff_x': '10', 'variable_home_backoff_y': '10', 'variable_override_homing': "''", 'variable_dock_on_zhome': 'True'}, 'gcode_macro print_start': {'gcode': '\nM117 Homing...\nG28\nATTACH_PROBE\nZ_TILT_ADJUST\nDOCK_PROBE\nG28\n\n\n\n\n\n\n\nG0 X150 Y150 Z30 F3600', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1500.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-02-19 20:31:27,331 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-19 20:31:27,331 [printer.py:reinit()] - Klipper version: v0.12.0-103-g6ce6fbbc-dirty
2024-02-19 20:31:27,332 [printer.py:reinit()] - # Extruders: 1
2024-02-19 20:31:27,332 [printer.py:reinit()] - # Temperature devices: 2
2024-02-19 20:31:27,332 [printer.py:reinit()] - # Fans: 4
2024-02-19 20:31:27,332 [printer.py:reinit()] - # Output pins: 1
2024-02-19 20:31:27,332 [printer.py:reinit()] - # Leds: 1
2024-02-19 20:31:27,344 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2024-02-19 20:31:27,345 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-02-19 20:31:27,620 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor chamber_temp&fan&controller_fan controller_fan&heater_fan hotend_fan&heater_fan exhaust_fan&output_pin caselight&neopixel headlight
2024-02-19 20:31:27,622 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-02-19 20:31:27,622 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-02-19 20:31:27,623 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-02-19 20:31:27,623 [screen.py:init_klipper()] - Printer initialized
2024-02-19 20:31:27,624 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2024-02-19 20:31:27,624 [printer.py:change_state()] - Adding callback for state: ready
2024-02-19 20:31:27,627 [screen.py:show_panel()] - Reinitializing panel
2024-02-19 20:31:27,680 [main_menu.py:__init__()] - ### Making MainMenu
2024-02-19 20:31:27,686 [main_menu.py:add_device()] - Adding device: extruder
2024-02-19 20:31:27,690 [main_menu.py:add_device()] - Adding device: heater_bed
2024-02-19 20:31:27,695 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber_temp
2024-02-19 20:31:27,719 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-02-19 20:31:27,735 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-02-19 20:31:27,738 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'temperature_sensor chamber_temp', 'extruder']
2024-02-19 20:31:27,748 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2024-02-19 20:31:27,749 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-02-19 20:34:34,521 [screen.py:show_popup_message()] - error: No trigger on probe after full movement
2024-02-19 20:37:35,984 [screen.py:show_panel()] - Reinitializing panel
2024-02-19 20:37:36,086 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-02-19 20:37:37,257 [move.py:change_distance()] - ### Distance 1
2024-02-19 20:37:38,458 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z+1 F600'}
2024-02-19 20:37:38,459 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 20:37:41,918 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z-1 F600'}
2024-02-19 20:37:41,923 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 20:37:48,443 [screen_panel.py:load_menu()] - loading menu options
2024-02-19 20:37:49,429 [screen_panel.py:unload_menu()] - self.menu: ['move_menu', 'options_menu']
2024-02-19 20:39:05,704 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-02-19 20:39:05,704 [printer.py:change_state()] - Adding callback for state: disconnected
2024-02-19 20:39:05,705 [screen.py:state_disconnected()] - ### Going to disconnected
2024-02-19 20:39:05,705 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-19 20:39:05,709 [screen.py:show_panel()] - Reinitializing panel
2024-02-19 20:39:05,785 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-02-19 20:39:09,287 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-19 20:39:09,295 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2024-02-19 20:39:09,296 [printer.py:configure_cameras()] - Cameras: []
2024-02-19 20:39:09,297 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'update_manager', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-310-g67c98f6', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-02-19 20:39:09,305 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2024-02-19 20:39:09,455 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2024-02-19 20:39:09,459 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro _Probe_Variables': {'variable_probe_attached': 'False', 'variable_probe_state': 'False', 'variable_probe_lock': 'False', 'variable_probe_z_homed': 'False', 'variable_z_endstop_x': '0', 'variable_z_endstop_y': '0', 'gcode': ''}, 'gcode_macro _klicky_check_variables_version': {'gcode': '\n{% set version = printer["gcode_macro _User_Variables"].version|default(0) %}\n\n{% if version != 1 %}\n{ action_raise_error("Please update your klicky variables, there are some functionality changes") }\n{% endif %}'}, 'gcode_macro _KlickyDebug': {'gcode': '\n{% set message  = params.MSG %}\n{% set debug = printer["gcode_macro _User_Variables"].debug|default(False) %}\n\n{% if debug %}\n{ action_respond_info(message) }\n{% endif %}'}, 'gcode_macro _exit_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move  = params.MOVE|default(0) %}\n{% set speed = printer["gcode_macro _User_Variables"].travel_speed %}\n\n\nM400\nSET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\nRESTORE_GCODE_STATE NAME={function} MOVE={move} MOVE_SPEED={speed}'}, 'gcode_macro _entry_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move_accel = printer["gcode_macro _User_Variables"].move_accel|default(1000) %}\n\nM400\nSAVE_GCODE_STATE NAME={function}\n\nSET_GCODE_OFFSET Z=0\n\nG90\n\nSET_VELOCITY_LIMIT ACCEL={move_accel}'}, 'gcode_macro _Homing_Variables': {'gcode': '\n{% set reset  = params.RESET|default(0) %}\n{% if reset %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }\n{% endif %}'}, 'gcode_macro Attach_Probe_Lock': {'description': 'Attaches Klicky Probe, can only be docked after unlocking', 'gcode': '\nAttach_Probe\n_Probe_Lock'}, 'gcode_macro Dock_Probe_Unlock': {'description': 'Docks Klicky Probe even if it was locked', 'gcode': '\n_Probe_Unlock\nDock_Probe'}, 'gcode_macro _Probe_Unlock': {'description': 'Unlocks Klicky Probe state', 'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to False"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }'}, 'gcode_macro _Probe_Lock': {'description': 'Locks Klicky Probe state', 'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to True"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ True }'}, 'gcode_macro _DeployKlickyDock': {'description': 'Deploys Klicky servo-controlled dock', 'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_deploy = printer["gcode_macro _User_Variables"].servo_deploy|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_DeployKlickyDock Klicky servo configuration enabled"\n{% if servo_deploy == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo deploy angle specified") }\n{% endif %}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _DeployDock"] is defined %}\n_KlickyDebug msg="_DeployKlickyDock calling _DeployDock"\n_DeployDock\n{% endif %}'}, 'gcode_macro _RetractKlickyDock': {'description': 'Retracts Klicky servo-controlled dock', 'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_retract = printer["gcode_macro _User_Variables"].servo_retract|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_RetractKlickyDock Klicky servo configuration enabled"\n{% if servo_retract == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo retract angle specified") }\n{% endif %}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _RetractDock"] is defined %}\n_KlickyDebug msg="_RetractKlickyDock calling _RetractDock"\n_RetractDock\n{% endif %}'}, 'gcode_macro Attach_Probe': {'description': 'Attaches Klicky Probe', 'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set attachmove2_x = printer["gcode_macro _User_Variables"].attachmove2_x|default(0) %}\n{% set attachmove2_y = printer["gcode_macro _User_Variables"].attachmove2_y|default(0) %}\n{% set attachmove2_z = printer["gcode_macro _User_Variables"].attachmove2_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n_entry_point function=Attach_Probe\n\n{% if bypass_probe_docking == False %}\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n_KlickyDebug msg="Attach_Probe Axis homed"\n\n\n{% elif not probe_attached and not probe_lock %}\n_KlickyDebug msg="Attach_Probe going to attach probe"\n{% if verbose %}\n{ action_respond_info("Attaching Probe") }\n{% endif %}\n_KLICKY_STATUS_BUSY\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% if not enable_z_hop %}\n_KlickyDebug msg="Attach_Probe z_hop disabled"\n{% set safe_z = 0 %}\n{% endif %}\n{% endif %}\n\n\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero, duplicate?") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Umbilical_Path\n\n_entry_point function=Attach_Probe_intern\n\n\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n_DeployKlickyDock\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}"\nG0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}\n\n_RetractKlickyDock\n\n{% if ((printer.gcode_move.gcode_position.z < safe_z) or (docklocation_z != -128 and docklocation_z < safe_z ))%}\n_KlickyDebug msg="Attach_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\n_CheckProbe action=attach\n\n_exit_point function=Attach_Probe_intern move={goback}\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe locked not attaching probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already attached!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe already attached, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Attach_Probe\n{% else %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}'}, 'gcode_macro Dock_Probe': {'description': 'Docks Klicky Probe', 'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n{% if bypass_probe_docking == True %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}\n\n{% if bypass_probe_docking != True %}\n_entry_point function=Dock_Probe\n\n\n{% if probe_attached and not probe_lock %}\n_KLICKY_STATUS_BUSY\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Dock_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n_Umbilical_Path\n\n\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n\n_DeployKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\n\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}"\nG0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}\n{% endif %}\n\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}\n\n\n_RetractKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving away from the dock to G0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}\n\n\n{% if (printer.gcode_move.gcode_position.z < safe_z) %}\n_KlickyDebug msg="Dock_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\nG4 P1000\n_CheckProbe action=dock\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe locked not docking probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already docked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe already docked, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Dock_Probe move={goback}\n{% else %}\n_KlickyDebug msg="Dock_Probe probe docking bypassed, doing nothing"\n{% endif %}'}, 'gcode_macro PROBE_CALIBRATE': {'rename_existing': '_PROBE_CALIBRATE', 'description': 'Calibrate the probes z_offset with klicky automount', 'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_calibrate Axis homed"\n_KlickyDebug msg="probe_calibrate Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_CALIBRATE with the probe above the BED, check klicky_variables bed size!") }\n{% endif %}\n\n{% if bypass_probe_docking == False %}\n_CheckProbe action=query\nG90\nAttach_Probe back=1\n_KLICKY_STATUS_CALIBRATING_Z\n\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nM118 moving the toolhead 20 mm from the bed\n_KlickyDebug msg="probe_calibrate Moving Z up by 20mm"\nTESTZ Z=20\nM118 remove manually the probe and continue calibration\n_KLICKY_STATUS_READY\n{% else %}\n_KLICKY_STATUS_CALIBRATING_Z\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n_KLICKY_STATUS_READY\n{% endif %}'}, 'gcode_macro PROBE_ACCURACY': {'rename_existing': '_PROBE_ACCURACY', 'description': 'Probe Z-height accuracy at current XY position with klicky automount', 'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_accuracy Axis homed"\n_KlickyDebug msg="probe_accuracy Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n_entry_point function=PROBE_ACCURACY\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_ACCURACY with the probe above the BED, check klicky_variables bed size!") }\n{% endif%}\n\n_CheckProbe action=query\nAttach_Probe back=1\n\n_KlickyDebug msg="probe_accuracy calling klipper probe accuracy"\n_PROBE_ACCURACY {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nDock_Probe back=1\n\n_exit_point function=PROBE_ACCURACY move=1'}, 'force_move': {'enable_force_move': 'True'}, 'homing_override': {'axes': 'xyz', 'gcode': '\n\n_User_Variables\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n{% set kinematic_z = 0 %}\n{% set dock_on_zhome = printer["gcode_macro _User_Variables"].dock_on_zhome|default(True) %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set home_backoff_x = printer["gcode_macro _User_Variables"].home_backoff_x|default(0) %}\n{% set home_backoff_y = printer["gcode_macro _User_Variables"].home_backoff_y|default(0) %}\n{% set override_homing = printer["gcode_macro _User_Variables"].override_homing|default(\'\') %}\n\n\n_klicky_check_variables_version\n\n_CheckProbe action=query\n\n\n{% set home_x, home_y, home_z, leave_probe_attached = False, False, False, False %}\n\n{% if \'PROBE_LOCK\' in params%}\n{% if verbose %}\n{ action_respond_info("PROBE_LOCK = True") }\n{% endif %}\n{% set leave_probe_attached = True %}\n{% endif %}\n\n\n{% if not \'X\' in params\nand not \'Y\' in params\nand not \'Z\' in params %}\n\n{% set home_x, home_y, home_z = True, True, True %}\n_KlickyDebug msg="homing_override goint to home all axes"\n\n{% else %}\n{% if \'X\' in params %}\n{% set home_x = True %}\n_KlickyDebug msg="homing_override goint to home X"\n\n{% endif %}\n\n{% if \'Y\' in params %}\n{% set home_y = True %}\n_KlickyDebug msg="homing_override goint to home Y"\n{% endif %}\n\n{% if \'Z\' in params %}\n{% set home_z = True %}\n_KlickyDebug msg="homing_override goint to home Z"\n{% endif %}\n\n{% if \'X\' in params\nand \'Y\' in params\nand \'Z\' in params %}\n\n\n_Homing_Variables reset=1\n_KlickyDebug msg="homing_override goint to home all axes"\n{% endif %}\n\n{% endif %}\n\n_entry_point function=homing_override\n_KLICKY_STATUS_HOMING\n\n\n{% if \'z\' not in printer.toolhead.homed_axes %}\n{% if enable_z_hop == False %}\n_KlickyDebug msg="homing_override z_hop disabled"\n\n{% set kinematic_z = safe_z %}\n{% set safe_z = safe_z %}\n{% endif %}\n{% endif %}\n\n\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes and \'z\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("No axis homed") }\n{% endif %}\n_KlickyDebug msg="homing_override no axis homed, setting position as X=Y=0 Z={kinematic_z}"\nSET_KINEMATIC_POSITION X=0 Y=0 Z={kinematic_z}\nM400\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% if home_z != True %}\n_KlickyDebug msg="homing_override clearing axis homed state if not already homing Z"\nM84\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("X or Y not homed, forcing full G28") }\n{% endif %}\n{% set home_x, home_y, home_z = True, True, True %}\n{% endif %}\n{% endif %}\n\n\n{% if ((attachmove_y == 0 and override_homing == \'\' ) or (override_homing == \'Y\'))%}\n\n{% if home_y %}\n{% if override_homing == \'Y\' %}\n_KlickyDebug msg="homing_override Y homing first override, due to override_homing = Y"\n{% else %}\n_KlickyDebug msg="homing_override Y homing first override, due to attachmove_y = 0"\n{% endif %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y G28 Y0"\nG28 Y0\n\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop-home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n{% set home_y = False %}\n{% endif %}\n\n\n\n{% if home_x %}\n{% if verbose %}\n{ action_respond_info("Homing X") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in X homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_X"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_X external script to handle the X homing"\n_HOME_X\n{% else %}\n_KlickyDebug msg="homing_override Homing X, G28 X0"\nG28 X0\n\n{% if home_backoff_x != 0 %}\n{% if (printer.configfile.settings.stepper_x.position_endstop > (printer.configfile.settings.stepper_x.position_min|default(0) + printer.configfile.settings.stepper_x.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n\n{% if home_y %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y, G28 Y0"\nG28 Y0\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if verbose %}\n{ action_respond_info("Homing Z") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe configured as a virtual Z endstop attaching probe"\nAttach_Probe\n\n{% if leave_probe_attached %}\n_Probe_Lock\n{% endif %}\n{% elif dock_on_zhome == True %}\nDock_Probe\n{% endif %}\n\n_Home_Z_\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe no longer required, docking probe"\nDock_Probe\n{% elif dock_on_zhome == False %}\nDock_Probe\n{% endif %}\n{% endif %}\n_CheckProbe action=query\n\n\n_Park_Toolhead\n\n_exit_point function=homing_override\n_KLICKY_STATUS_READY'}, 'gcode_macro _Umbilical_Path': {'gcode': '\n{% set umbilical = printer["gcode_macro _User_Variables"].umbilical %}\n{% set umbilical_x = printer["gcode_macro _User_Variables"].umbilical_x %}\n{% set umbilical_y = printer["gcode_macro _User_Variables"].umbilical_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n\n{% if umbilical %}\n\n_entry_point function=Umbilical_Path\n\n_KlickyDebug msg="_Umbilical_Path moving to G0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}"\nG0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}\n\n_exit_point function=Umbilical_Path\n{% endif %}'}, 'gcode_macro _Home_Z_': {'gcode': '\n{% set z_endstop_x = printer["gcode_macro _Probe_Variables"].z_endstop_x %}\n{% set z_endstop_y = printer["gcode_macro _Probe_Variables"].z_endstop_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}    {% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Home_Z\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n{% else %}\n_KlickyDebug msg="_Home_Z_ XY Axis homed"\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="_Home_Z_ Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n\n\n_KlickyDebug msg="_Home_Z_ moving to Z endstop position G0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}"\nG0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}\n_KlickyDebug msg="_Home_Z_ Homing Z G28 Z"\nG28 Z0\n_KlickyDebug msg="_Home_Z_ toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_exit_point function=Home_Z'}, 'gcode_macro _CheckProbe': {'variable_probe_state': '0', 'gcode': '\nQuery_Probe\n_SetProbeState action={ params.ACTION }'}, 'gcode_macro _SetProbeState': {'gcode': '\n{% set query_probe_triggered = printer.probe.last_query %}\n{% set action  = params.ACTION|default(\'\') %}\n\n\n{% if query_probe_triggered %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ False }\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ True }\n{% endif %}\n\n{% if action == \'query\' %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_state VALUE={ query_probe_triggered }\n{% endif %}\n\n\n\n\n{% if not query_probe_triggered and action == \'dock\' %}\n{ action_raise_error("Probe dock failed!") }\n{% endif %}\n\n\n{% if query_probe_triggered and action == \'attach\' %}\n{ action_raise_error("Probe attach failed!") }\n{% endif %}'}, 'gcode_macro _Park_Toolhead': {'gcode': '\n{% set park_toolhead = printer["gcode_macro _User_Variables"].park_toolhead %}\n{% set parkposition_x = printer["gcode_macro _User_Variables"].parkposition_x %}\n{% set parkposition_y = printer["gcode_macro _User_Variables"].parkposition_y %}\n{% set parkposition_z = printer["gcode_macro _User_Variables"].parkposition_z %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Park_Toolhead\n\n{% if park_toolhead and \'xyz\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Parking Toolhead") }\n{% endif %}\n{% if parkposition_z == -128 %}\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}\n\n{% else %}\n\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}\n\n{% endif %}\n\n{% endif %}\n_exit_point function=Park_Toolhead'}, 'gcode_macro _klicky_status_ready': {'gcode': '\n{% if printer[\'gcode_macro status_ready\'] is defined %}\n_KlickyDebug msg="_klicky_status_ready activating the LED STATUS_READY"\nSTATUS_READY\n{% endif %}'}, 'gcode_macro _klicky_status_busy': {'gcode': '\n{% if printer[\'gcode_macro status_busy\'] is defined %}\n_KlickyDebug msg="_klicky_status_busy activating the LED STATUS_BUSY"\nSTATUS_BUSY\n{% endif %}'}, 'gcode_macro _klicky_status_leveling': {'gcode': '\n{% if printer[\'gcode_macro status_leveling\'] is defined %}\n_KlickyDebug msg="_klicky_status_leveling activating the LED STATUS_LEVELING"\nSTATUS_LEVELING\n{% endif %}'}, 'gcode_macro _klicky_status_homing': {'gcode': '\n{% if printer[\'gcode_macro status_homing\'] is defined %}\n_KlickyDebug msg="_klicky_status_homing activating the LED STATUS_HOMING"\nSTATUS_HOMING\n{% endif %}'}, 'gcode_macro _klicky_status_cleaning': {'gcode': '\n{% if printer[\'gcode_macro status_cleaning\'] is defined %}\n_KlickyDebug msg="_klicky_status_cleaning activating the LED STATUS_CLEANING"\nSTATUS_CLEANING\n{% endif %}'}, 'gcode_macro _klicky_status_meshing': {'gcode': '\n{% if printer[\'gcode_macro status_meshing\'] is defined %}\n_KlickyDebug msg="_klicky_status_meshing activating the LED STATUS_MESHING"\nSTATUS_MESHING\n{% endif %}'}, 'gcode_macro _klicky_status_calibrating_z': {'gcode': '\n{% if printer[\'gcode_macro status_calibrating_z\'] is defined %}\n_KlickyDebug msg="_klicky_status_calibrating_z activating the LED STATUS_CALIBRATING_Z"\nSTATUS_CALIBRATING_Z\n{% endif %}'}, 'z_calibration': {'nozzle_xy_position': '172, 301', 'switch_xy_position': '172, 275', 'bed_xy_position': '150, 150', 'switch_offset': '0.5', 'offset_margins': '-1.0,1.0', 'speed': '50', 'probing_first_fast': 'false', 'start_gcode': 'Attach_Probe', 'end_gcode': 'Dock_Probe'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_28003C001150535556323420-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '^PG6', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '25', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'PG9', 'position_min': '0', 'position_endstop': '300', 'position_max': '303.5', 'homing_speed': '25', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': '!PG3', 'enable_pin': '!PG5', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'PG10', 'position_endstop': '-0.5', 'position_max': '290', 'position_min': '-4.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA0', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': '!PF10', 'enable_pin': '!PG2', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PC13', 'dir_pin': 'PF0', 'enable_pin': '!PF1', 'rotation_distance': '21.9459674016', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.75', 'heater_pin': 'PA1', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF4', 'min_temp': '10', 'max_temp': '270', 'max_power': '1.0', 'min_extrude_temp': '170', 'pressure_advance': '0.05', 'pressure_advance_smooth_time': '0.040', 'control': 'pid', 'pid_kp': '26.572', 'pid_ki': '2.036', 'pid_kd': '86.691'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.5', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PA2', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF3', 'max_power': '1', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '55.196', 'pid_ki': '2.091', 'pid_kd': '364.295'}, 'probe': {'pin': 'PG15', 'x_offset': '0', 'y_offset': '25.0', 'z_offset': '0', 'speed': '10.0', 'samples': '5', 'samples_result': 'median', 'sample_retract_dist': '3.0', 'samples_tolerance': '0.006', 'samples_tolerance_retries': '6'}, 'fan': {'pin': 'PA8', 'kick_start_time': '0.5', 'off_below': '0.10'}, 'heater_fan hotend_fan': {'pin': 'PE5', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'controller_fan controller_fan': {'pin': 'PD12', 'kick_start_time': '0.5', 'heater': 'heater_bed'}, 'heater_fan exhaust_fan': {'pin': 'PD13', 'max_power': '1.0', 'shutdown_speed': '0.0', 'kick_start_time': '5.0', 'heater': 'heater_bed', 'heater_temp': '60', 'fan_speed': '1.0'}, 'output_pin caselight': {'pin': 'PD15', 'pwm': 'true', 'shutdown_value': '0', 'value': '1', 'cycle_time': '0.01'}, 'neopixel headlight': {'pin': 'PB0', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '0.0', 'initial_green': '0.2157', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'temperature_sensor chamber_temp': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF5', 'min_temp': '0', 'max_temp': '100', 'gcode_id': 'chamber_th'}, 'idle_timeout': {'timeout': '1800'}, 'z_tilt': {'z_positions': '\n-50, 18\n150, 348\n350, 18', 'points': '\n30, 5\n150, 245\n270, 5', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'gcode_macro _User_Variables': {'variable_verbose': 'True', 'variable_debug': 'False', 'variable_travel_speed': '200', 'variable_move_accel': '1000', 'variable_dock_speed': '50', 'variable_release_speed': '75', 'variable_z_drop_speed': '20', 'variable_safe_z': '25', 'variable_enable_z_hop': 'True', 'variable_max_bed_y': '300', 'variable_max_bed_x': '300', 'variable_z_endstop_x': '172', 'variable_z_endstop_y': '301', 'variable_docklocation_x': '42', 'variable_docklocation_y': '297', 'variable_docklocation_z': '-128', 'variable_enable_dock_servo': 'False', 'variable_servo_name': "'NAME'", 'variable_servo_deploy': '10', 'variable_servo_retract': '11', 'variable_servo_delay': '250', 'variable_dockmove_x': '40', 'variable_dockmove_y': '0', 'variable_dockmove_z': '0', 'variable_attachmove_x': '0', 'variable_attachmove_y': '30', 'variable_attachmove_z': '0', 'variable_umbilical': 'False', 'variable_umbilical_x': '15', 'variable_umbilical_y': '15', 'variable_park_toolhead': 'False', 'variable_parkposition_x': '125', 'variable_parkposition_y': '125', 'variable_parkposition_z': '30', 'variable_version': '1', 'variable_attachmove2_x': '0', 'variable_attachmove2_y': '0', 'variable_attachmove2_z': '0', 'variable_home_backoff_x': '10', 'variable_home_backoff_y': '10', 'variable_override_homing': "''", 'variable_dock_on_zhome': 'True', 'gcode': '\n{% set Mx = printer[\'configfile\'].config["stepper_x"]["position_max"]|float %}\n{% set My = printer[\'configfile\'].config["stepper_y"]["position_max"]|float %}\n{% set Ox = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set Oy = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set Oz = printer[\'configfile\'].config["probe"]["z_offset"]|float %}\n\n\n{% if z_endstop_x != 0 or z_endstop_y != 0 %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ z_endstop_x }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ z_endstop_y }\n\n\n{% else %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ (Mx * 0.5) - Ox }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ (My * 0.5) - Oy }\n{% endif %}'}, 'gcode_macro PRINT_START': {'gcode': '\nM117 Homing...\nG28\nATTACH_PROBE\nZ_TILT_ADJUST\nDOCK_PROBE\nG28\n\n\n\n\n\n\n\nG0 X150 Y150 Z30 F3600'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_28003C001150535556323420-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro _probe_variables': {'gcode': '', 'description': 'G-Code macro', 'variable_probe_attached': 'False', 'variable_probe_state': 'False', 'variable_probe_lock': 'False', 'variable_probe_z_homed': 'False', 'variable_z_endstop_x': '0', 'variable_z_endstop_y': '0'}, 'gcode_macro _klicky_check_variables_version': {'gcode': '\n{% set version = printer["gcode_macro _User_Variables"].version|default(0) %}\n\n{% if version != 1 %}\n{ action_raise_error("Please update your klicky variables, there are some functionality changes") }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klickydebug': {'gcode': '\n{% set message  = params.MSG %}\n{% set debug = printer["gcode_macro _User_Variables"].debug|default(False) %}\n\n{% if debug %}\n{ action_respond_info(message) }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _exit_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move  = params.MOVE|default(0) %}\n{% set speed = printer["gcode_macro _User_Variables"].travel_speed %}\n\n\nM400\nSET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\nRESTORE_GCODE_STATE NAME={function} MOVE={move} MOVE_SPEED={speed}', 'description': 'G-Code macro'}, 'gcode_macro _entry_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move_accel = printer["gcode_macro _User_Variables"].move_accel|default(1000) %}\n\nM400\nSAVE_GCODE_STATE NAME={function}\n\nSET_GCODE_OFFSET Z=0\n\nG90\n\nSET_VELOCITY_LIMIT ACCEL={move_accel}', 'description': 'G-Code macro'}, 'gcode_macro _homing_variables': {'gcode': '\n{% set reset  = params.RESET|default(0) %}\n{% if reset %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro attach_probe_lock': {'gcode': '\nAttach_Probe\n_Probe_Lock', 'description': 'Attaches Klicky Probe, can only be docked after unlocking'}, 'gcode_macro dock_probe_unlock': {'gcode': '\n_Probe_Unlock\nDock_Probe', 'description': 'Docks Klicky Probe even if it was locked'}, 'gcode_macro _probe_unlock': {'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to False"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }', 'description': 'Unlocks Klicky Probe state'}, 'gcode_macro _probe_lock': {'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to True"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ True }', 'description': 'Locks Klicky Probe state'}, 'gcode_macro _deployklickydock': {'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_deploy = printer["gcode_macro _User_Variables"].servo_deploy|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_DeployKlickyDock Klicky servo configuration enabled"\n{% if servo_deploy == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo deploy angle specified") }\n{% endif %}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _DeployDock"] is defined %}\n_KlickyDebug msg="_DeployKlickyDock calling _DeployDock"\n_DeployDock\n{% endif %}', 'description': 'Deploys Klicky servo-controlled dock'}, 'gcode_macro _retractklickydock': {'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_retract = printer["gcode_macro _User_Variables"].servo_retract|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_RetractKlickyDock Klicky servo configuration enabled"\n{% if servo_retract == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo retract angle specified") }\n{% endif %}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _RetractDock"] is defined %}\n_KlickyDebug msg="_RetractKlickyDock calling _RetractDock"\n_RetractDock\n{% endif %}', 'description': 'Retracts Klicky servo-controlled dock'}, 'gcode_macro attach_probe': {'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set attachmove2_x = printer["gcode_macro _User_Variables"].attachmove2_x|default(0) %}\n{% set attachmove2_y = printer["gcode_macro _User_Variables"].attachmove2_y|default(0) %}\n{% set attachmove2_z = printer["gcode_macro _User_Variables"].attachmove2_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n_entry_point function=Attach_Probe\n\n{% if bypass_probe_docking == False %}\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n_KlickyDebug msg="Attach_Probe Axis homed"\n\n\n{% elif not probe_attached and not probe_lock %}\n_KlickyDebug msg="Attach_Probe going to attach probe"\n{% if verbose %}\n{ action_respond_info("Attaching Probe") }\n{% endif %}\n_KLICKY_STATUS_BUSY\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% if not enable_z_hop %}\n_KlickyDebug msg="Attach_Probe z_hop disabled"\n{% set safe_z = 0 %}\n{% endif %}\n{% endif %}\n\n\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero, duplicate?") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Umbilical_Path\n\n_entry_point function=Attach_Probe_intern\n\n\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n_DeployKlickyDock\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}"\nG0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}\n\n_RetractKlickyDock\n\n{% if ((printer.gcode_move.gcode_position.z < safe_z) or (docklocation_z != -128 and docklocation_z < safe_z ))%}\n_KlickyDebug msg="Attach_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\n_CheckProbe action=attach\n\n_exit_point function=Attach_Probe_intern move={goback}\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe locked not attaching probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already attached!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe already attached, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Attach_Probe\n{% else %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}', 'description': 'Attaches Klicky Probe'}, 'gcode_macro dock_probe': {'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n{% if bypass_probe_docking == True %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}\n\n{% if bypass_probe_docking != True %}\n_entry_point function=Dock_Probe\n\n\n{% if probe_attached and not probe_lock %}\n_KLICKY_STATUS_BUSY\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Dock_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n_Umbilical_Path\n\n\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n\n_DeployKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\n\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}"\nG0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}\n{% endif %}\n\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}\n\n\n_RetractKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving away from the dock to G0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}\n\n\n{% if (printer.gcode_move.gcode_position.z < safe_z) %}\n_KlickyDebug msg="Dock_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\nG4 P1000\n_CheckProbe action=dock\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe locked not docking probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already docked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe already docked, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Dock_Probe move={goback}\n{% else %}\n_KlickyDebug msg="Dock_Probe probe docking bypassed, doing nothing"\n{% endif %}', 'description': 'Docks Klicky Probe'}, 'gcode_macro probe_calibrate': {'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_calibrate Axis homed"\n_KlickyDebug msg="probe_calibrate Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_CALIBRATE with the probe above the BED, check klicky_variables bed size!") }\n{% endif %}\n\n{% if bypass_probe_docking == False %}\n_CheckProbe action=query\nG90\nAttach_Probe back=1\n_KLICKY_STATUS_CALIBRATING_Z\n\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nM118 moving the toolhead 20 mm from the bed\n_KlickyDebug msg="probe_calibrate Moving Z up by 20mm"\nTESTZ Z=20\nM118 remove manually the probe and continue calibration\n_KLICKY_STATUS_READY\n{% else %}\n_KLICKY_STATUS_CALIBRATING_Z\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n_KLICKY_STATUS_READY\n{% endif %}', 'rename_existing': '_PROBE_CALIBRATE', 'description': 'Calibrate the probes z_offset with klicky automount'}, 'gcode_macro probe_accuracy': {'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_accuracy Axis homed"\n_KlickyDebug msg="probe_accuracy Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n_entry_point function=PROBE_ACCURACY\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_ACCURACY with the probe above the BED, check klicky_variables bed size!") }\n{% endif%}\n\n_CheckProbe action=query\nAttach_Probe back=1\n\n_KlickyDebug msg="probe_accuracy calling klipper probe accuracy"\n_PROBE_ACCURACY {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nDock_Probe back=1\n\n_exit_point function=PROBE_ACCURACY move=1', 'rename_existing': '_PROBE_ACCURACY', 'description': 'Probe Z-height accuracy at current XY position with klicky automount'}, 'force_move': {'enable_force_move': True}, 'homing_override': {'axes': 'xyz', 'gcode': '\n\n_User_Variables\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n{% set kinematic_z = 0 %}\n{% set dock_on_zhome = printer["gcode_macro _User_Variables"].dock_on_zhome|default(True) %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set home_backoff_x = printer["gcode_macro _User_Variables"].home_backoff_x|default(0) %}\n{% set home_backoff_y = printer["gcode_macro _User_Variables"].home_backoff_y|default(0) %}\n{% set override_homing = printer["gcode_macro _User_Variables"].override_homing|default(\'\') %}\n\n\n_klicky_check_variables_version\n\n_CheckProbe action=query\n\n\n{% set home_x, home_y, home_z, leave_probe_attached = False, False, False, False %}\n\n{% if \'PROBE_LOCK\' in params%}\n{% if verbose %}\n{ action_respond_info("PROBE_LOCK = True") }\n{% endif %}\n{% set leave_probe_attached = True %}\n{% endif %}\n\n\n{% if not \'X\' in params\nand not \'Y\' in params\nand not \'Z\' in params %}\n\n{% set home_x, home_y, home_z = True, True, True %}\n_KlickyDebug msg="homing_override goint to home all axes"\n\n{% else %}\n{% if \'X\' in params %}\n{% set home_x = True %}\n_KlickyDebug msg="homing_override goint to home X"\n\n{% endif %}\n\n{% if \'Y\' in params %}\n{% set home_y = True %}\n_KlickyDebug msg="homing_override goint to home Y"\n{% endif %}\n\n{% if \'Z\' in params %}\n{% set home_z = True %}\n_KlickyDebug msg="homing_override goint to home Z"\n{% endif %}\n\n{% if \'X\' in params\nand \'Y\' in params\nand \'Z\' in params %}\n\n\n_Homing_Variables reset=1\n_KlickyDebug msg="homing_override goint to home all axes"\n{% endif %}\n\n{% endif %}\n\n_entry_point function=homing_override\n_KLICKY_STATUS_HOMING\n\n\n{% if \'z\' not in printer.toolhead.homed_axes %}\n{% if enable_z_hop == False %}\n_KlickyDebug msg="homing_override z_hop disabled"\n\n{% set kinematic_z = safe_z %}\n{% set safe_z = safe_z %}\n{% endif %}\n{% endif %}\n\n\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes and \'z\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("No axis homed") }\n{% endif %}\n_KlickyDebug msg="homing_override no axis homed, setting position as X=Y=0 Z={kinematic_z}"\nSET_KINEMATIC_POSITION X=0 Y=0 Z={kinematic_z}\nM400\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% if home_z != True %}\n_KlickyDebug msg="homing_override clearing axis homed state if not already homing Z"\nM84\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("X or Y not homed, forcing full G28") }\n{% endif %}\n{% set home_x, home_y, home_z = True, True, True %}\n{% endif %}\n{% endif %}\n\n\n{% if ((attachmove_y == 0 and override_homing == \'\' ) or (override_homing == \'Y\'))%}\n\n{% if home_y %}\n{% if override_homing == \'Y\' %}\n_KlickyDebug msg="homing_override Y homing first override, due to override_homing = Y"\n{% else %}\n_KlickyDebug msg="homing_override Y homing first override, due to attachmove_y = 0"\n{% endif %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y G28 Y0"\nG28 Y0\n\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop-home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n{% set home_y = False %}\n{% endif %}\n\n\n\n{% if home_x %}\n{% if verbose %}\n{ action_respond_info("Homing X") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in X homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_X"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_X external script to handle the X homing"\n_HOME_X\n{% else %}\n_KlickyDebug msg="homing_override Homing X, G28 X0"\nG28 X0\n\n{% if home_backoff_x != 0 %}\n{% if (printer.configfile.settings.stepper_x.position_endstop > (printer.configfile.settings.stepper_x.position_min|default(0) + printer.configfile.settings.stepper_x.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n\n{% if home_y %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y, G28 Y0"\nG28 Y0\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if verbose %}\n{ action_respond_info("Homing Z") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe configured as a virtual Z endstop attaching probe"\nAttach_Probe\n\n{% if leave_probe_attached %}\n_Probe_Lock\n{% endif %}\n{% elif dock_on_zhome == True %}\nDock_Probe\n{% endif %}\n\n_Home_Z_\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe no longer required, docking probe"\nDock_Probe\n{% elif dock_on_zhome == False %}\nDock_Probe\n{% endif %}\n{% endif %}\n_CheckProbe action=query\n\n\n_Park_Toolhead\n\n_exit_point function=homing_override\n_KLICKY_STATUS_READY'}, 'gcode_macro _umbilical_path': {'gcode': '\n{% set umbilical = printer["gcode_macro _User_Variables"].umbilical %}\n{% set umbilical_x = printer["gcode_macro _User_Variables"].umbilical_x %}\n{% set umbilical_y = printer["gcode_macro _User_Variables"].umbilical_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n\n{% if umbilical %}\n\n_entry_point function=Umbilical_Path\n\n_KlickyDebug msg="_Umbilical_Path moving to G0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}"\nG0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}\n\n_exit_point function=Umbilical_Path\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _home_z_': {'gcode': '\n{% set z_endstop_x = printer["gcode_macro _Probe_Variables"].z_endstop_x %}\n{% set z_endstop_y = printer["gcode_macro _Probe_Variables"].z_endstop_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}    {% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Home_Z\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n{% else %}\n_KlickyDebug msg="_Home_Z_ XY Axis homed"\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="_Home_Z_ Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n\n\n_KlickyDebug msg="_Home_Z_ moving to Z endstop position G0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}"\nG0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}\n_KlickyDebug msg="_Home_Z_ Homing Z G28 Z"\nG28 Z0\n_KlickyDebug msg="_Home_Z_ toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_exit_point function=Home_Z', 'description': 'G-Code macro'}, 'gcode_macro _checkprobe': {'gcode': '\nQuery_Probe\n_SetProbeState action={ params.ACTION }', 'description': 'G-Code macro', 'variable_probe_state': '0'}, 'gcode_macro _setprobestate': {'gcode': '\n{% set query_probe_triggered = printer.probe.last_query %}\n{% set action  = params.ACTION|default(\'\') %}\n\n\n{% if query_probe_triggered %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ False }\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ True }\n{% endif %}\n\n{% if action == \'query\' %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_state VALUE={ query_probe_triggered }\n{% endif %}\n\n\n\n\n{% if not query_probe_triggered and action == \'dock\' %}\n{ action_raise_error("Probe dock failed!") }\n{% endif %}\n\n\n{% if query_probe_triggered and action == \'attach\' %}\n{ action_raise_error("Probe attach failed!") }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _park_toolhead': {'gcode': '\n{% set park_toolhead = printer["gcode_macro _User_Variables"].park_toolhead %}\n{% set parkposition_x = printer["gcode_macro _User_Variables"].parkposition_x %}\n{% set parkposition_y = printer["gcode_macro _User_Variables"].parkposition_y %}\n{% set parkposition_z = printer["gcode_macro _User_Variables"].parkposition_z %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Park_Toolhead\n\n{% if park_toolhead and \'xyz\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Parking Toolhead") }\n{% endif %}\n{% if parkposition_z == -128 %}\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}\n\n{% else %}\n\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}\n\n{% endif %}\n\n{% endif %}\n_exit_point function=Park_Toolhead', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_ready': {'gcode': '\n{% if printer[\'gcode_macro status_ready\'] is defined %}\n_KlickyDebug msg="_klicky_status_ready activating the LED STATUS_READY"\nSTATUS_READY\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_busy': {'gcode': '\n{% if printer[\'gcode_macro status_busy\'] is defined %}\n_KlickyDebug msg="_klicky_status_busy activating the LED STATUS_BUSY"\nSTATUS_BUSY\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_leveling': {'gcode': '\n{% if printer[\'gcode_macro status_leveling\'] is defined %}\n_KlickyDebug msg="_klicky_status_leveling activating the LED STATUS_LEVELING"\nSTATUS_LEVELING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_homing': {'gcode': '\n{% if printer[\'gcode_macro status_homing\'] is defined %}\n_KlickyDebug msg="_klicky_status_homing activating the LED STATUS_HOMING"\nSTATUS_HOMING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_cleaning': {'gcode': '\n{% if printer[\'gcode_macro status_cleaning\'] is defined %}\n_KlickyDebug msg="_klicky_status_cleaning activating the LED STATUS_CLEANING"\nSTATUS_CLEANING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_meshing': {'gcode': '\n{% if printer[\'gcode_macro status_meshing\'] is defined %}\n_KlickyDebug msg="_klicky_status_meshing activating the LED STATUS_MESHING"\nSTATUS_MESHING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_calibrating_z': {'gcode': '\n{% if printer[\'gcode_macro status_calibrating_z\'] is defined %}\n_KlickyDebug msg="_klicky_status_calibrating_z activating the LED STATUS_CALIBRATING_Z"\nSTATUS_CALIBRATING_Z\n{% endif %}', 'description': 'G-Code macro'}, 'z_calibration': {'switch_offset': 0.5, 'offset_margins': '-1.0,1.0', 'speed': 50.0, 'samples_result': 'none', 'probing_first_fast': False, 'nozzle_xy_position': '172, 301', 'switch_xy_position': '172, 275', 'bed_xy_position': '150, 150', 'start_gcode': 'Attach_Probe', 'before_switch_gcode': '', 'end_gcode': 'Dock_Probe'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': '^PG6', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'PG9', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 303.5, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PF11', 'dir_pin': '!PG3', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG5', 'endstop_pin': 'PG10', 'position_endstop': -0.5, 'position_min': -4.5, 'position_max': 290.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA0'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PF9', 'dir_pin': '!PF10', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG2'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF4', 'min_temp': 10.0, 'max_temp': 270.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 26.572, 'pid_ki': 2.036, 'pid_kd': 86.691, 'heater_pin': 'PA1', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PC13', 'pressure_advance': 0.05, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'PF0', 'rotation_distance': 21.9459674016, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 55.196, 'pid_ki': 2.091, 'pid_kd': 364.295, 'heater_pin': 'PA2', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'probe': {'z_offset': 0.0, 'deactivate_on_each_sample': True, 'activate_gcode': '', 'deactivate_gcode': '', 'pin': 'PG15', 'speed': 10.0, 'lift_speed': 10.0, 'x_offset': 0.0, 'y_offset': 25.0, 'samples': 5, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.006, 'samples_tolerance_retries': 6}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE5', 'fan_speed': 1.0}, 'controller_fan controller_fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD12', 'fan_speed': 1.0, 'idle_speed': 1.0, 'idle_timeout': 30, 'heater': ['heater_bed']}, 'heater_fan exhaust_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 5.0, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13', 'fan_speed': 1.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PD15', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 1.0, 'maximum_mcu_duration': 0.0, 'value': 1.0, 'shutdown_value': 0.0}, 'neopixel headlight': {'pin': 'PB0', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 0.0, 'initial_green': 0.2157, 'initial_blue': 1.0, 'initial_white': 0.0}, 'temperature_sensor chamber_temp': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF5', 'min_temp': 0.0, 'max_temp': 100.0, 'gcode_id': 'chamber_th'}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [150.0, 348.0], [350.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 5.0], [150.0, 245.0], [270.0, 5.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'gcode_macro _user_variables': {'gcode': '\n{% set Mx = printer[\'configfile\'].config["stepper_x"]["position_max"]|float %}\n{% set My = printer[\'configfile\'].config["stepper_y"]["position_max"]|float %}\n{% set Ox = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set Oy = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set Oz = printer[\'configfile\'].config["probe"]["z_offset"]|float %}\n\n\n{% if z_endstop_x != 0 or z_endstop_y != 0 %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ z_endstop_x }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ z_endstop_y }\n\n\n{% else %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ (Mx * 0.5) - Ox }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ (My * 0.5) - Oy }\n{% endif %}', 'description': 'G-Code macro', 'variable_verbose': 'True', 'variable_debug': 'False', 'variable_travel_speed': '200', 'variable_move_accel': '1000', 'variable_dock_speed': '50', 'variable_release_speed': '75', 'variable_z_drop_speed': '20', 'variable_safe_z': '25', 'variable_enable_z_hop': 'True', 'variable_max_bed_y': '300', 'variable_max_bed_x': '300', 'variable_z_endstop_x': '172', 'variable_z_endstop_y': '301', 'variable_docklocation_x': '42', 'variable_docklocation_y': '297', 'variable_docklocation_z': '-128', 'variable_enable_dock_servo': 'False', 'variable_servo_name': "'NAME'", 'variable_servo_deploy': '10', 'variable_servo_retract': '11', 'variable_servo_delay': '250', 'variable_dockmove_x': '40', 'variable_dockmove_y': '0', 'variable_dockmove_z': '0', 'variable_attachmove_x': '0', 'variable_attachmove_y': '30', 'variable_attachmove_z': '0', 'variable_umbilical': 'False', 'variable_umbilical_x': '15', 'variable_umbilical_y': '15', 'variable_park_toolhead': 'False', 'variable_parkposition_x': '125', 'variable_parkposition_y': '125', 'variable_parkposition_z': '30', 'variable_version': '1', 'variable_attachmove2_x': '0', 'variable_attachmove2_y': '0', 'variable_attachmove2_z': '0', 'variable_home_backoff_x': '10', 'variable_home_backoff_y': '10', 'variable_override_homing': "''", 'variable_dock_on_zhome': 'True'}, 'gcode_macro print_start': {'gcode': '\nM117 Homing...\nG28\nATTACH_PROBE\nZ_TILT_ADJUST\nDOCK_PROBE\nG28\n\n\n\n\n\n\n\nG0 X150 Y150 Z30 F3600', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1500.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-02-19 20:39:09,463 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-19 20:39:09,464 [printer.py:reinit()] - Klipper version: v0.12.0-103-g6ce6fbbc-dirty
2024-02-19 20:39:09,464 [printer.py:reinit()] - # Extruders: 1
2024-02-19 20:39:09,464 [printer.py:reinit()] - # Temperature devices: 2
2024-02-19 20:39:09,464 [printer.py:reinit()] - # Fans: 4
2024-02-19 20:39:09,464 [printer.py:reinit()] - # Output pins: 1
2024-02-19 20:39:09,464 [printer.py:reinit()] - # Leds: 1
2024-02-19 20:39:09,483 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2024-02-19 20:39:09,485 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-02-19 20:39:09,751 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor chamber_temp&fan&controller_fan controller_fan&heater_fan hotend_fan&heater_fan exhaust_fan&output_pin caselight&neopixel headlight
2024-02-19 20:39:09,754 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-02-19 20:39:09,755 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-02-19 20:39:09,757 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-02-19 20:39:09,757 [screen.py:init_klipper()] - Printer initialized
2024-02-19 20:39:09,758 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2024-02-19 20:39:09,758 [printer.py:change_state()] - Adding callback for state: ready
2024-02-19 20:39:09,761 [screen.py:show_panel()] - Reinitializing panel
2024-02-19 20:39:09,818 [main_menu.py:__init__()] - ### Making MainMenu
2024-02-19 20:39:09,824 [main_menu.py:add_device()] - Adding device: extruder
2024-02-19 20:39:09,829 [main_menu.py:add_device()] - Adding device: heater_bed
2024-02-19 20:39:09,834 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber_temp
2024-02-19 20:39:09,858 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-02-19 20:39:09,874 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-02-19 20:39:09,878 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'temperature_sensor chamber_temp', 'extruder']
2024-02-19 20:39:09,887 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2024-02-19 20:39:09,888 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-02-19 20:42:29,001 [screen.py:show_panel()] - Reinitializing panel
2024-02-19 20:42:29,090 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-02-19 20:42:31,785 [move.py:change_distance()] - ### Distance .1
2024-02-19 20:42:32,481 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z+.1 F600'}
2024-02-19 20:42:32,484 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 20:42:36,043 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z+.1 F600'}
2024-02-19 20:42:36,046 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 20:42:39,047 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z-.1 F600'}
2024-02-19 20:42:39,053 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 20:43:54,442 [move.py:change_distance()] - ### Distance 1
2024-02-19 20:43:55,431 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z+1 F600'}
2024-02-19 20:43:55,434 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 20:43:58,194 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Z-1 F600'}
2024-02-19 20:43:58,197 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-19 20:44:26,818 [screen.py:_menu_go_back()] - #### Menu go back
2024-02-19 20:44:26,854 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-02-19 20:44:28,235 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-02-19 20:44:29,810 [screen_panel.py:load_menu()] - loading menu options
2024-02-19 20:44:30,725 [screen_panel.py:unload_menu()] - self.menu: ['move_menu', 'options_menu']
2024-02-19 20:44:31,253 [screen.py:_menu_go_back()] - #### Menu go back
2024-02-19 20:44:31,270 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-02-19 20:44:31,999 [screen.py:_go_to_submenu()] - #### Go to submenu more
2024-02-19 20:44:31,999 [screen.py:_go_to_submenu()] - #### Menu __main
2024-02-19 20:44:32,007 [screen.py:show_panel()] - Reinitializing panel
2024-02-19 20:44:32,231 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more
2024-02-19 20:44:32,234 [menu.py:arrangeMenuItems()] - X > more bedlevel
2024-02-19 20:44:32,236 [menu.py:arrangeMenuItems()] - X > more bedmesh
2024-02-19 20:44:32,241 [menu.py:arrangeMenuItems()] - X > more retraction
2024-02-19 20:44:32,254 [menu.py:arrangeMenuItems()] - X > more power
2024-02-19 20:44:32,256 [menu.py:arrangeMenuItems()] - X > more camera
2024-02-19 20:44:32,261 [menu.py:arrangeMenuItems()] - X > more input_shaper
2024-02-19 20:44:32,268 [menu.py:arrangeMenuItems()] - X > more spoolman
2024-02-19 20:44:33,534 [screen.py:_load_panel()] - Loading panel: zcalibrate
2024-02-19 20:44:33,538 [printer.py:get_probe()] - Probe type: probe
2024-02-19 20:44:33,538 [zcalibrate.py:__init__()] - Z offset: 0.0
2024-02-19 20:44:33,557 [zcalibrate.py:__init__()] - Available functions for calibration: ['endstop', 'probe']
2024-02-19 20:44:33,573 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more > zcalibrate
2024-02-19 20:44:41,282 [zcalibrate.py:change_distance()] - ### Distance .05
2024-02-19 20:44:43,575 [zcalibrate.py:change_distance()] - ### Distance .05
2024-02-19 20:44:43,934 [zcalibrate.py:change_distance()] - ### Distance .1
2024-02-19 20:44:44,346 [zcalibrate.py:change_distance()] - ### Distance .05
2024-02-19 20:44:44,683 [zcalibrate.py:change_distance()] - ### Distance .5
2024-02-19 20:44:44,994 [zcalibrate.py:change_distance()] - ### Distance 1
2024-02-19 20:44:45,378 [zcalibrate.py:change_distance()] - ### Distance .05
2024-02-19 20:44:46,490 [screen.py:_menu_go_back()] - #### Menu go back
2024-02-19 20:44:46,530 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more
2024-02-19 20:44:46,538 [menu.py:arrangeMenuItems()] - X > more bedlevel
2024-02-19 20:44:46,542 [menu.py:arrangeMenuItems()] - X > more bedmesh
2024-02-19 20:44:46,550 [menu.py:arrangeMenuItems()] - X > more retraction
2024-02-19 20:44:46,571 [menu.py:arrangeMenuItems()] - X > more power
2024-02-19 20:44:46,575 [menu.py:arrangeMenuItems()] - X > more camera
2024-02-19 20:44:46,583 [menu.py:arrangeMenuItems()] - X > more input_shaper
2024-02-19 20:44:46,594 [menu.py:arrangeMenuItems()] - X > more spoolman
2024-02-19 20:44:49,123 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more > zcalibrate
2024-02-19 20:44:54,286 [screen.py:_menu_go_back()] - #### Menu go back
2024-02-19 20:44:54,324 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more
2024-02-19 20:44:54,331 [menu.py:arrangeMenuItems()] - X > more bedlevel
2024-02-19 20:44:54,335 [menu.py:arrangeMenuItems()] - X > more bedmesh
2024-02-19 20:44:54,342 [menu.py:arrangeMenuItems()] - X > more retraction
2024-02-19 20:44:54,359 [menu.py:arrangeMenuItems()] - X > more power
2024-02-19 20:44:54,363 [menu.py:arrangeMenuItems()] - X > more camera
2024-02-19 20:44:54,369 [menu.py:arrangeMenuItems()] - X > more input_shaper
2024-02-19 20:44:54,379 [menu.py:arrangeMenuItems()] - X > more spoolman
2024-02-19 20:47:24,219 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-02-19 20:47:24,220 [printer.py:change_state()] - Adding callback for state: disconnected
2024-02-19 20:47:24,222 [screen.py:state_disconnected()] - ### Going to disconnected
2024-02-19 20:47:24,222 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-19 20:47:24,225 [screen.py:show_panel()] - Reinitializing panel
2024-02-19 20:47:24,292 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-02-19 20:47:27,287 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-19 20:47:27,296 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2024-02-19 20:47:27,296 [printer.py:configure_cameras()] - Cameras: []
2024-02-19 20:47:27,296 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'update_manager', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-310-g67c98f6', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-02-19 20:47:27,305 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2024-02-19 20:47:27,323 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2024-02-19 20:47:27,326 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro _Probe_Variables': {'variable_probe_attached': 'False', 'variable_probe_state': 'False', 'variable_probe_lock': 'False', 'variable_probe_z_homed': 'False', 'variable_z_endstop_x': '0', 'variable_z_endstop_y': '0', 'gcode': ''}, 'gcode_macro _klicky_check_variables_version': {'gcode': '\n{% set version = printer["gcode_macro _User_Variables"].version|default(0) %}\n\n{% if version != 1 %}\n{ action_raise_error("Please update your klicky variables, there are some functionality changes") }\n{% endif %}'}, 'gcode_macro _KlickyDebug': {'gcode': '\n{% set message  = params.MSG %}\n{% set debug = printer["gcode_macro _User_Variables"].debug|default(False) %}\n\n{% if debug %}\n{ action_respond_info(message) }\n{% endif %}'}, 'gcode_macro _exit_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move  = params.MOVE|default(0) %}\n{% set speed = printer["gcode_macro _User_Variables"].travel_speed %}\n\n\nM400\nSET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\nRESTORE_GCODE_STATE NAME={function} MOVE={move} MOVE_SPEED={speed}'}, 'gcode_macro _entry_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move_accel = printer["gcode_macro _User_Variables"].move_accel|default(1000) %}\n\nM400\nSAVE_GCODE_STATE NAME={function}\n\nSET_GCODE_OFFSET Z=0\n\nG90\n\nSET_VELOCITY_LIMIT ACCEL={move_accel}'}, 'gcode_macro _Homing_Variables': {'gcode': '\n{% set reset  = params.RESET|default(0) %}\n{% if reset %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }\n{% endif %}'}, 'gcode_macro Attach_Probe_Lock': {'description': 'Attaches Klicky Probe, can only be docked after unlocking', 'gcode': '\nAttach_Probe\n_Probe_Lock'}, 'gcode_macro Dock_Probe_Unlock': {'description': 'Docks Klicky Probe even if it was locked', 'gcode': '\n_Probe_Unlock\nDock_Probe'}, 'gcode_macro _Probe_Unlock': {'description': 'Unlocks Klicky Probe state', 'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to False"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }'}, 'gcode_macro _Probe_Lock': {'description': 'Locks Klicky Probe state', 'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to True"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ True }'}, 'gcode_macro _DeployKlickyDock': {'description': 'Deploys Klicky servo-controlled dock', 'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_deploy = printer["gcode_macro _User_Variables"].servo_deploy|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_DeployKlickyDock Klicky servo configuration enabled"\n{% if servo_deploy == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo deploy angle specified") }\n{% endif %}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _DeployDock"] is defined %}\n_KlickyDebug msg="_DeployKlickyDock calling _DeployDock"\n_DeployDock\n{% endif %}'}, 'gcode_macro _RetractKlickyDock': {'description': 'Retracts Klicky servo-controlled dock', 'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_retract = printer["gcode_macro _User_Variables"].servo_retract|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_RetractKlickyDock Klicky servo configuration enabled"\n{% if servo_retract == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo retract angle specified") }\n{% endif %}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _RetractDock"] is defined %}\n_KlickyDebug msg="_RetractKlickyDock calling _RetractDock"\n_RetractDock\n{% endif %}'}, 'gcode_macro Attach_Probe': {'description': 'Attaches Klicky Probe', 'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set attachmove2_x = printer["gcode_macro _User_Variables"].attachmove2_x|default(0) %}\n{% set attachmove2_y = printer["gcode_macro _User_Variables"].attachmove2_y|default(0) %}\n{% set attachmove2_z = printer["gcode_macro _User_Variables"].attachmove2_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n_entry_point function=Attach_Probe\n\n{% if bypass_probe_docking == False %}\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n_KlickyDebug msg="Attach_Probe Axis homed"\n\n\n{% elif not probe_attached and not probe_lock %}\n_KlickyDebug msg="Attach_Probe going to attach probe"\n{% if verbose %}\n{ action_respond_info("Attaching Probe") }\n{% endif %}\n_KLICKY_STATUS_BUSY\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% if not enable_z_hop %}\n_KlickyDebug msg="Attach_Probe z_hop disabled"\n{% set safe_z = 0 %}\n{% endif %}\n{% endif %}\n\n\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero, duplicate?") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Umbilical_Path\n\n_entry_point function=Attach_Probe_intern\n\n\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n_DeployKlickyDock\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}"\nG0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}\n\n_RetractKlickyDock\n\n{% if ((printer.gcode_move.gcode_position.z < safe_z) or (docklocation_z != -128 and docklocation_z < safe_z ))%}\n_KlickyDebug msg="Attach_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\n_CheckProbe action=attach\n\n_exit_point function=Attach_Probe_intern move={goback}\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe locked not attaching probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already attached!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe already attached, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Attach_Probe\n{% else %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}'}, 'gcode_macro Dock_Probe': {'description': 'Docks Klicky Probe', 'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n{% if bypass_probe_docking == True %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}\n\n{% if bypass_probe_docking != True %}\n_entry_point function=Dock_Probe\n\n\n{% if probe_attached and not probe_lock %}\n_KLICKY_STATUS_BUSY\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Dock_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n_Umbilical_Path\n\n\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n\n_DeployKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\n\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}"\nG0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}\n{% endif %}\n\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}\n\n\n_RetractKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving away from the dock to G0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}\n\n\n{% if (printer.gcode_move.gcode_position.z < safe_z) %}\n_KlickyDebug msg="Dock_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\nG4 P1000\n_CheckProbe action=dock\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe locked not docking probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already docked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe already docked, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Dock_Probe move={goback}\n{% else %}\n_KlickyDebug msg="Dock_Probe probe docking bypassed, doing nothing"\n{% endif %}'}, 'gcode_macro PROBE_CALIBRATE': {'rename_existing': '_PROBE_CALIBRATE', 'description': 'Calibrate the probes z_offset with klicky automount', 'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_calibrate Axis homed"\n_KlickyDebug msg="probe_calibrate Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_CALIBRATE with the probe above the BED, check klicky_variables bed size!") }\n{% endif %}\n\n{% if bypass_probe_docking == False %}\n_CheckProbe action=query\nG90\nAttach_Probe back=1\n_KLICKY_STATUS_CALIBRATING_Z\n\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nM118 moving the toolhead 20 mm from the bed\n_KlickyDebug msg="probe_calibrate Moving Z up by 20mm"\nTESTZ Z=20\nM118 remove manually the probe and continue calibration\n_KLICKY_STATUS_READY\n{% else %}\n_KLICKY_STATUS_CALIBRATING_Z\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n_KLICKY_STATUS_READY\n{% endif %}'}, 'gcode_macro PROBE_ACCURACY': {'rename_existing': '_PROBE_ACCURACY', 'description': 'Probe Z-height accuracy at current XY position with klicky automount', 'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_accuracy Axis homed"\n_KlickyDebug msg="probe_accuracy Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n_entry_point function=PROBE_ACCURACY\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_ACCURACY with the probe above the BED, check klicky_variables bed size!") }\n{% endif%}\n\n_CheckProbe action=query\nAttach_Probe back=1\n\n_KlickyDebug msg="probe_accuracy calling klipper probe accuracy"\n_PROBE_ACCURACY {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nDock_Probe back=1\n\n_exit_point function=PROBE_ACCURACY move=1'}, 'force_move': {'enable_force_move': 'True'}, 'homing_override': {'axes': 'xyz', 'gcode': '\n\n_User_Variables\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n{% set kinematic_z = 0 %}\n{% set dock_on_zhome = printer["gcode_macro _User_Variables"].dock_on_zhome|default(True) %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set home_backoff_x = printer["gcode_macro _User_Variables"].home_backoff_x|default(0) %}\n{% set home_backoff_y = printer["gcode_macro _User_Variables"].home_backoff_y|default(0) %}\n{% set override_homing = printer["gcode_macro _User_Variables"].override_homing|default(\'\') %}\n\n\n_klicky_check_variables_version\n\n_CheckProbe action=query\n\n\n{% set home_x, home_y, home_z, leave_probe_attached = False, False, False, False %}\n\n{% if \'PROBE_LOCK\' in params%}\n{% if verbose %}\n{ action_respond_info("PROBE_LOCK = True") }\n{% endif %}\n{% set leave_probe_attached = True %}\n{% endif %}\n\n\n{% if not \'X\' in params\nand not \'Y\' in params\nand not \'Z\' in params %}\n\n{% set home_x, home_y, home_z = True, True, True %}\n_KlickyDebug msg="homing_override goint to home all axes"\n\n{% else %}\n{% if \'X\' in params %}\n{% set home_x = True %}\n_KlickyDebug msg="homing_override goint to home X"\n\n{% endif %}\n\n{% if \'Y\' in params %}\n{% set home_y = True %}\n_KlickyDebug msg="homing_override goint to home Y"\n{% endif %}\n\n{% if \'Z\' in params %}\n{% set home_z = True %}\n_KlickyDebug msg="homing_override goint to home Z"\n{% endif %}\n\n{% if \'X\' in params\nand \'Y\' in params\nand \'Z\' in params %}\n\n\n_Homing_Variables reset=1\n_KlickyDebug msg="homing_override goint to home all axes"\n{% endif %}\n\n{% endif %}\n\n_entry_point function=homing_override\n_KLICKY_STATUS_HOMING\n\n\n{% if \'z\' not in printer.toolhead.homed_axes %}\n{% if enable_z_hop == False %}\n_KlickyDebug msg="homing_override z_hop disabled"\n\n{% set kinematic_z = safe_z %}\n{% set safe_z = safe_z %}\n{% endif %}\n{% endif %}\n\n\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes and \'z\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("No axis homed") }\n{% endif %}\n_KlickyDebug msg="homing_override no axis homed, setting position as X=Y=0 Z={kinematic_z}"\nSET_KINEMATIC_POSITION X=0 Y=0 Z={kinematic_z}\nM400\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% if home_z != True %}\n_KlickyDebug msg="homing_override clearing axis homed state if not already homing Z"\nM84\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("X or Y not homed, forcing full G28") }\n{% endif %}\n{% set home_x, home_y, home_z = True, True, True %}\n{% endif %}\n{% endif %}\n\n\n{% if ((attachmove_y == 0 and override_homing == \'\' ) or (override_homing == \'Y\'))%}\n\n{% if home_y %}\n{% if override_homing == \'Y\' %}\n_KlickyDebug msg="homing_override Y homing first override, due to override_homing = Y"\n{% else %}\n_KlickyDebug msg="homing_override Y homing first override, due to attachmove_y = 0"\n{% endif %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y G28 Y0"\nG28 Y0\n\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop-home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n{% set home_y = False %}\n{% endif %}\n\n\n\n{% if home_x %}\n{% if verbose %}\n{ action_respond_info("Homing X") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in X homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_X"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_X external script to handle the X homing"\n_HOME_X\n{% else %}\n_KlickyDebug msg="homing_override Homing X, G28 X0"\nG28 X0\n\n{% if home_backoff_x != 0 %}\n{% if (printer.configfile.settings.stepper_x.position_endstop > (printer.configfile.settings.stepper_x.position_min|default(0) + printer.configfile.settings.stepper_x.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n\n{% if home_y %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y, G28 Y0"\nG28 Y0\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if verbose %}\n{ action_respond_info("Homing Z") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe configured as a virtual Z endstop attaching probe"\nAttach_Probe\n\n{% if leave_probe_attached %}\n_Probe_Lock\n{% endif %}\n{% elif dock_on_zhome == True %}\nDock_Probe\n{% endif %}\n\n_Home_Z_\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe no longer required, docking probe"\nDock_Probe\n{% elif dock_on_zhome == False %}\nDock_Probe\n{% endif %}\n{% endif %}\n_CheckProbe action=query\n\n\n_Park_Toolhead\n\n_exit_point function=homing_override\n_KLICKY_STATUS_READY'}, 'gcode_macro _Umbilical_Path': {'gcode': '\n{% set umbilical = printer["gcode_macro _User_Variables"].umbilical %}\n{% set umbilical_x = printer["gcode_macro _User_Variables"].umbilical_x %}\n{% set umbilical_y = printer["gcode_macro _User_Variables"].umbilical_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n\n{% if umbilical %}\n\n_entry_point function=Umbilical_Path\n\n_KlickyDebug msg="_Umbilical_Path moving to G0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}"\nG0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}\n\n_exit_point function=Umbilical_Path\n{% endif %}'}, 'gcode_macro _Home_Z_': {'gcode': '\n{% set z_endstop_x = printer["gcode_macro _Probe_Variables"].z_endstop_x %}\n{% set z_endstop_y = printer["gcode_macro _Probe_Variables"].z_endstop_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}    {% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Home_Z\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n{% else %}\n_KlickyDebug msg="_Home_Z_ XY Axis homed"\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="_Home_Z_ Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n\n\n_KlickyDebug msg="_Home_Z_ moving to Z endstop position G0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}"\nG0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}\n_KlickyDebug msg="_Home_Z_ Homing Z G28 Z"\nG28 Z0\n_KlickyDebug msg="_Home_Z_ toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_exit_point function=Home_Z'}, 'gcode_macro _CheckProbe': {'variable_probe_state': '0', 'gcode': '\nQuery_Probe\n_SetProbeState action={ params.ACTION }'}, 'gcode_macro _SetProbeState': {'gcode': '\n{% set query_probe_triggered = printer.probe.last_query %}\n{% set action  = params.ACTION|default(\'\') %}\n\n\n{% if query_probe_triggered %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ False }\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ True }\n{% endif %}\n\n{% if action == \'query\' %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_state VALUE={ query_probe_triggered }\n{% endif %}\n\n\n\n\n{% if not query_probe_triggered and action == \'dock\' %}\n{ action_raise_error("Probe dock failed!") }\n{% endif %}\n\n\n{% if query_probe_triggered and action == \'attach\' %}\n{ action_raise_error("Probe attach failed!") }\n{% endif %}'}, 'gcode_macro _Park_Toolhead': {'gcode': '\n{% set park_toolhead = printer["gcode_macro _User_Variables"].park_toolhead %}\n{% set parkposition_x = printer["gcode_macro _User_Variables"].parkposition_x %}\n{% set parkposition_y = printer["gcode_macro _User_Variables"].parkposition_y %}\n{% set parkposition_z = printer["gcode_macro _User_Variables"].parkposition_z %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Park_Toolhead\n\n{% if park_toolhead and \'xyz\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Parking Toolhead") }\n{% endif %}\n{% if parkposition_z == -128 %}\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}\n\n{% else %}\n\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}\n\n{% endif %}\n\n{% endif %}\n_exit_point function=Park_Toolhead'}, 'gcode_macro _klicky_status_ready': {'gcode': '\n{% if printer[\'gcode_macro status_ready\'] is defined %}\n_KlickyDebug msg="_klicky_status_ready activating the LED STATUS_READY"\nSTATUS_READY\n{% endif %}'}, 'gcode_macro _klicky_status_busy': {'gcode': '\n{% if printer[\'gcode_macro status_busy\'] is defined %}\n_KlickyDebug msg="_klicky_status_busy activating the LED STATUS_BUSY"\nSTATUS_BUSY\n{% endif %}'}, 'gcode_macro _klicky_status_leveling': {'gcode': '\n{% if printer[\'gcode_macro status_leveling\'] is defined %}\n_KlickyDebug msg="_klicky_status_leveling activating the LED STATUS_LEVELING"\nSTATUS_LEVELING\n{% endif %}'}, 'gcode_macro _klicky_status_homing': {'gcode': '\n{% if printer[\'gcode_macro status_homing\'] is defined %}\n_KlickyDebug msg="_klicky_status_homing activating the LED STATUS_HOMING"\nSTATUS_HOMING\n{% endif %}'}, 'gcode_macro _klicky_status_cleaning': {'gcode': '\n{% if printer[\'gcode_macro status_cleaning\'] is defined %}\n_KlickyDebug msg="_klicky_status_cleaning activating the LED STATUS_CLEANING"\nSTATUS_CLEANING\n{% endif %}'}, 'gcode_macro _klicky_status_meshing': {'gcode': '\n{% if printer[\'gcode_macro status_meshing\'] is defined %}\n_KlickyDebug msg="_klicky_status_meshing activating the LED STATUS_MESHING"\nSTATUS_MESHING\n{% endif %}'}, 'gcode_macro _klicky_status_calibrating_z': {'gcode': '\n{% if printer[\'gcode_macro status_calibrating_z\'] is defined %}\n_KlickyDebug msg="_klicky_status_calibrating_z activating the LED STATUS_CALIBRATING_Z"\nSTATUS_CALIBRATING_Z\n{% endif %}'}, 'z_calibration': {'nozzle_xy_position': '172, 301', 'switch_xy_position': '172, 275', 'bed_xy_position': '150, 150', 'switch_offset': '0.165', 'offset_margins': '-1.0,1.0', 'speed': '50', 'probing_first_fast': 'false', 'start_gcode': 'Attach_Probe', 'end_gcode': 'Dock_Probe'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_28003C001150535556323420-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '^PG6', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '25', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'PG9', 'position_min': '0', 'position_endstop': '300', 'position_max': '303.5', 'homing_speed': '25', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': '!PG3', 'enable_pin': '!PG5', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'PG10', 'position_endstop': '-0.5', 'position_max': '290', 'position_min': '-4.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA0', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': '!PF10', 'enable_pin': '!PG2', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PC13', 'dir_pin': 'PF0', 'enable_pin': '!PF1', 'rotation_distance': '21.9459674016', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.75', 'heater_pin': 'PA1', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF4', 'min_temp': '10', 'max_temp': '270', 'max_power': '1.0', 'min_extrude_temp': '170', 'pressure_advance': '0.05', 'pressure_advance_smooth_time': '0.040', 'control': 'pid', 'pid_kp': '26.572', 'pid_ki': '2.036', 'pid_kd': '86.691'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.5', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PA2', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF3', 'max_power': '1', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '55.196', 'pid_ki': '2.091', 'pid_kd': '364.295'}, 'probe': {'pin': 'PG15', 'x_offset': '0', 'y_offset': '25.0', 'z_offset': '0', 'speed': '10.0', 'samples': '5', 'samples_result': 'median', 'sample_retract_dist': '3.0', 'samples_tolerance': '0.006', 'samples_tolerance_retries': '6'}, 'fan': {'pin': 'PA8', 'kick_start_time': '0.5', 'off_below': '0.10'}, 'heater_fan hotend_fan': {'pin': 'PE5', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'controller_fan controller_fan': {'pin': 'PD12', 'kick_start_time': '0.5', 'heater': 'heater_bed'}, 'heater_fan exhaust_fan': {'pin': 'PD13', 'max_power': '1.0', 'shutdown_speed': '0.0', 'kick_start_time': '5.0', 'heater': 'heater_bed', 'heater_temp': '60', 'fan_speed': '1.0'}, 'output_pin caselight': {'pin': 'PD15', 'pwm': 'true', 'shutdown_value': '0', 'value': '1', 'cycle_time': '0.01'}, 'neopixel headlight': {'pin': 'PB0', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '0.0', 'initial_green': '0.2157', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'temperature_sensor chamber_temp': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF5', 'min_temp': '0', 'max_temp': '100', 'gcode_id': 'chamber_th'}, 'idle_timeout': {'timeout': '1800'}, 'z_tilt': {'z_positions': '\n-50, 18\n150, 348\n350, 18', 'points': '\n30, 5\n150, 245\n270, 5', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'gcode_macro _User_Variables': {'variable_verbose': 'True', 'variable_debug': 'False', 'variable_travel_speed': '200', 'variable_move_accel': '1000', 'variable_dock_speed': '50', 'variable_release_speed': '75', 'variable_z_drop_speed': '20', 'variable_safe_z': '25', 'variable_enable_z_hop': 'True', 'variable_max_bed_y': '300', 'variable_max_bed_x': '300', 'variable_z_endstop_x': '172', 'variable_z_endstop_y': '301', 'variable_docklocation_x': '42', 'variable_docklocation_y': '297', 'variable_docklocation_z': '-128', 'variable_enable_dock_servo': 'False', 'variable_servo_name': "'NAME'", 'variable_servo_deploy': '10', 'variable_servo_retract': '11', 'variable_servo_delay': '250', 'variable_dockmove_x': '40', 'variable_dockmove_y': '0', 'variable_dockmove_z': '0', 'variable_attachmove_x': '0', 'variable_attachmove_y': '30', 'variable_attachmove_z': '0', 'variable_umbilical': 'False', 'variable_umbilical_x': '15', 'variable_umbilical_y': '15', 'variable_park_toolhead': 'False', 'variable_parkposition_x': '125', 'variable_parkposition_y': '125', 'variable_parkposition_z': '30', 'variable_version': '1', 'variable_attachmove2_x': '0', 'variable_attachmove2_y': '0', 'variable_attachmove2_z': '0', 'variable_home_backoff_x': '10', 'variable_home_backoff_y': '10', 'variable_override_homing': "''", 'variable_dock_on_zhome': 'True', 'gcode': '\n{% set Mx = printer[\'configfile\'].config["stepper_x"]["position_max"]|float %}\n{% set My = printer[\'configfile\'].config["stepper_y"]["position_max"]|float %}\n{% set Ox = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set Oy = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set Oz = printer[\'configfile\'].config["probe"]["z_offset"]|float %}\n\n\n{% if z_endstop_x != 0 or z_endstop_y != 0 %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ z_endstop_x }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ z_endstop_y }\n\n\n{% else %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ (Mx * 0.5) - Ox }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ (My * 0.5) - Oy }\n{% endif %}'}, 'gcode_macro PRINT_START': {'gcode': '\nM117 Homing...\nG28\nATTACH_PROBE\nZ_TILT_ADJUST\nDOCK_PROBE\nG28\n\n\n\n\n\n\n\nG0 X150 Y150 Z30 F3600'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_28003C001150535556323420-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro _probe_variables': {'gcode': '', 'description': 'G-Code macro', 'variable_probe_attached': 'False', 'variable_probe_state': 'False', 'variable_probe_lock': 'False', 'variable_probe_z_homed': 'False', 'variable_z_endstop_x': '0', 'variable_z_endstop_y': '0'}, 'gcode_macro _klicky_check_variables_version': {'gcode': '\n{% set version = printer["gcode_macro _User_Variables"].version|default(0) %}\n\n{% if version != 1 %}\n{ action_raise_error("Please update your klicky variables, there are some functionality changes") }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klickydebug': {'gcode': '\n{% set message  = params.MSG %}\n{% set debug = printer["gcode_macro _User_Variables"].debug|default(False) %}\n\n{% if debug %}\n{ action_respond_info(message) }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _exit_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move  = params.MOVE|default(0) %}\n{% set speed = printer["gcode_macro _User_Variables"].travel_speed %}\n\n\nM400\nSET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\nRESTORE_GCODE_STATE NAME={function} MOVE={move} MOVE_SPEED={speed}', 'description': 'G-Code macro'}, 'gcode_macro _entry_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move_accel = printer["gcode_macro _User_Variables"].move_accel|default(1000) %}\n\nM400\nSAVE_GCODE_STATE NAME={function}\n\nSET_GCODE_OFFSET Z=0\n\nG90\n\nSET_VELOCITY_LIMIT ACCEL={move_accel}', 'description': 'G-Code macro'}, 'gcode_macro _homing_variables': {'gcode': '\n{% set reset  = params.RESET|default(0) %}\n{% if reset %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro attach_probe_lock': {'gcode': '\nAttach_Probe\n_Probe_Lock', 'description': 'Attaches Klicky Probe, can only be docked after unlocking'}, 'gcode_macro dock_probe_unlock': {'gcode': '\n_Probe_Unlock\nDock_Probe', 'description': 'Docks Klicky Probe even if it was locked'}, 'gcode_macro _probe_unlock': {'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to False"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }', 'description': 'Unlocks Klicky Probe state'}, 'gcode_macro _probe_lock': {'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to True"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ True }', 'description': 'Locks Klicky Probe state'}, 'gcode_macro _deployklickydock': {'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_deploy = printer["gcode_macro _User_Variables"].servo_deploy|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_DeployKlickyDock Klicky servo configuration enabled"\n{% if servo_deploy == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo deploy angle specified") }\n{% endif %}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _DeployDock"] is defined %}\n_KlickyDebug msg="_DeployKlickyDock calling _DeployDock"\n_DeployDock\n{% endif %}', 'description': 'Deploys Klicky servo-controlled dock'}, 'gcode_macro _retractklickydock': {'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_retract = printer["gcode_macro _User_Variables"].servo_retract|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_RetractKlickyDock Klicky servo configuration enabled"\n{% if servo_retract == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo retract angle specified") }\n{% endif %}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _RetractDock"] is defined %}\n_KlickyDebug msg="_RetractKlickyDock calling _RetractDock"\n_RetractDock\n{% endif %}', 'description': 'Retracts Klicky servo-controlled dock'}, 'gcode_macro attach_probe': {'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set attachmove2_x = printer["gcode_macro _User_Variables"].attachmove2_x|default(0) %}\n{% set attachmove2_y = printer["gcode_macro _User_Variables"].attachmove2_y|default(0) %}\n{% set attachmove2_z = printer["gcode_macro _User_Variables"].attachmove2_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n_entry_point function=Attach_Probe\n\n{% if bypass_probe_docking == False %}\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n_KlickyDebug msg="Attach_Probe Axis homed"\n\n\n{% elif not probe_attached and not probe_lock %}\n_KlickyDebug msg="Attach_Probe going to attach probe"\n{% if verbose %}\n{ action_respond_info("Attaching Probe") }\n{% endif %}\n_KLICKY_STATUS_BUSY\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% if not enable_z_hop %}\n_KlickyDebug msg="Attach_Probe z_hop disabled"\n{% set safe_z = 0 %}\n{% endif %}\n{% endif %}\n\n\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero, duplicate?") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Umbilical_Path\n\n_entry_point function=Attach_Probe_intern\n\n\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n_DeployKlickyDock\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}"\nG0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}\n\n_RetractKlickyDock\n\n{% if ((printer.gcode_move.gcode_position.z < safe_z) or (docklocation_z != -128 and docklocation_z < safe_z ))%}\n_KlickyDebug msg="Attach_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\n_CheckProbe action=attach\n\n_exit_point function=Attach_Probe_intern move={goback}\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe locked not attaching probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already attached!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe already attached, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Attach_Probe\n{% else %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}', 'description': 'Attaches Klicky Probe'}, 'gcode_macro dock_probe': {'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n{% if bypass_probe_docking == True %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}\n\n{% if bypass_probe_docking != True %}\n_entry_point function=Dock_Probe\n\n\n{% if probe_attached and not probe_lock %}\n_KLICKY_STATUS_BUSY\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Dock_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n_Umbilical_Path\n\n\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n\n_DeployKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\n\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}"\nG0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}\n{% endif %}\n\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}\n\n\n_RetractKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving away from the dock to G0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}\n\n\n{% if (printer.gcode_move.gcode_position.z < safe_z) %}\n_KlickyDebug msg="Dock_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\nG4 P1000\n_CheckProbe action=dock\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe locked not docking probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already docked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe already docked, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Dock_Probe move={goback}\n{% else %}\n_KlickyDebug msg="Dock_Probe probe docking bypassed, doing nothing"\n{% endif %}', 'description': 'Docks Klicky Probe'}, 'gcode_macro probe_calibrate': {'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_calibrate Axis homed"\n_KlickyDebug msg="probe_calibrate Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_CALIBRATE with the probe above the BED, check klicky_variables bed size!") }\n{% endif %}\n\n{% if bypass_probe_docking == False %}\n_CheckProbe action=query\nG90\nAttach_Probe back=1\n_KLICKY_STATUS_CALIBRATING_Z\n\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nM118 moving the toolhead 20 mm from the bed\n_KlickyDebug msg="probe_calibrate Moving Z up by 20mm"\nTESTZ Z=20\nM118 remove manually the probe and continue calibration\n_KLICKY_STATUS_READY\n{% else %}\n_KLICKY_STATUS_CALIBRATING_Z\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n_KLICKY_STATUS_READY\n{% endif %}', 'rename_existing': '_PROBE_CALIBRATE', 'description': 'Calibrate the probes z_offset with klicky automount'}, 'gcode_macro probe_accuracy': {'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_accuracy Axis homed"\n_KlickyDebug msg="probe_accuracy Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n_entry_point function=PROBE_ACCURACY\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_ACCURACY with the probe above the BED, check klicky_variables bed size!") }\n{% endif%}\n\n_CheckProbe action=query\nAttach_Probe back=1\n\n_KlickyDebug msg="probe_accuracy calling klipper probe accuracy"\n_PROBE_ACCURACY {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nDock_Probe back=1\n\n_exit_point function=PROBE_ACCURACY move=1', 'rename_existing': '_PROBE_ACCURACY', 'description': 'Probe Z-height accuracy at current XY position with klicky automount'}, 'force_move': {'enable_force_move': True}, 'homing_override': {'axes': 'xyz', 'gcode': '\n\n_User_Variables\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n{% set kinematic_z = 0 %}\n{% set dock_on_zhome = printer["gcode_macro _User_Variables"].dock_on_zhome|default(True) %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set home_backoff_x = printer["gcode_macro _User_Variables"].home_backoff_x|default(0) %}\n{% set home_backoff_y = printer["gcode_macro _User_Variables"].home_backoff_y|default(0) %}\n{% set override_homing = printer["gcode_macro _User_Variables"].override_homing|default(\'\') %}\n\n\n_klicky_check_variables_version\n\n_CheckProbe action=query\n\n\n{% set home_x, home_y, home_z, leave_probe_attached = False, False, False, False %}\n\n{% if \'PROBE_LOCK\' in params%}\n{% if verbose %}\n{ action_respond_info("PROBE_LOCK = True") }\n{% endif %}\n{% set leave_probe_attached = True %}\n{% endif %}\n\n\n{% if not \'X\' in params\nand not \'Y\' in params\nand not \'Z\' in params %}\n\n{% set home_x, home_y, home_z = True, True, True %}\n_KlickyDebug msg="homing_override goint to home all axes"\n\n{% else %}\n{% if \'X\' in params %}\n{% set home_x = True %}\n_KlickyDebug msg="homing_override goint to home X"\n\n{% endif %}\n\n{% if \'Y\' in params %}\n{% set home_y = True %}\n_KlickyDebug msg="homing_override goint to home Y"\n{% endif %}\n\n{% if \'Z\' in params %}\n{% set home_z = True %}\n_KlickyDebug msg="homing_override goint to home Z"\n{% endif %}\n\n{% if \'X\' in params\nand \'Y\' in params\nand \'Z\' in params %}\n\n\n_Homing_Variables reset=1\n_KlickyDebug msg="homing_override goint to home all axes"\n{% endif %}\n\n{% endif %}\n\n_entry_point function=homing_override\n_KLICKY_STATUS_HOMING\n\n\n{% if \'z\' not in printer.toolhead.homed_axes %}\n{% if enable_z_hop == False %}\n_KlickyDebug msg="homing_override z_hop disabled"\n\n{% set kinematic_z = safe_z %}\n{% set safe_z = safe_z %}\n{% endif %}\n{% endif %}\n\n\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes and \'z\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("No axis homed") }\n{% endif %}\n_KlickyDebug msg="homing_override no axis homed, setting position as X=Y=0 Z={kinematic_z}"\nSET_KINEMATIC_POSITION X=0 Y=0 Z={kinematic_z}\nM400\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% if home_z != True %}\n_KlickyDebug msg="homing_override clearing axis homed state if not already homing Z"\nM84\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("X or Y not homed, forcing full G28") }\n{% endif %}\n{% set home_x, home_y, home_z = True, True, True %}\n{% endif %}\n{% endif %}\n\n\n{% if ((attachmove_y == 0 and override_homing == \'\' ) or (override_homing == \'Y\'))%}\n\n{% if home_y %}\n{% if override_homing == \'Y\' %}\n_KlickyDebug msg="homing_override Y homing first override, due to override_homing = Y"\n{% else %}\n_KlickyDebug msg="homing_override Y homing first override, due to attachmove_y = 0"\n{% endif %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y G28 Y0"\nG28 Y0\n\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop-home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n{% set home_y = False %}\n{% endif %}\n\n\n\n{% if home_x %}\n{% if verbose %}\n{ action_respond_info("Homing X") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in X homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_X"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_X external script to handle the X homing"\n_HOME_X\n{% else %}\n_KlickyDebug msg="homing_override Homing X, G28 X0"\nG28 X0\n\n{% if home_backoff_x != 0 %}\n{% if (printer.configfile.settings.stepper_x.position_endstop > (printer.configfile.settings.stepper_x.position_min|default(0) + printer.configfile.settings.stepper_x.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n\n{% if home_y %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y, G28 Y0"\nG28 Y0\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if verbose %}\n{ action_respond_info("Homing Z") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe configured as a virtual Z endstop attaching probe"\nAttach_Probe\n\n{% if leave_probe_attached %}\n_Probe_Lock\n{% endif %}\n{% elif dock_on_zhome == True %}\nDock_Probe\n{% endif %}\n\n_Home_Z_\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe no longer required, docking probe"\nDock_Probe\n{% elif dock_on_zhome == False %}\nDock_Probe\n{% endif %}\n{% endif %}\n_CheckProbe action=query\n\n\n_Park_Toolhead\n\n_exit_point function=homing_override\n_KLICKY_STATUS_READY'}, 'gcode_macro _umbilical_path': {'gcode': '\n{% set umbilical = printer["gcode_macro _User_Variables"].umbilical %}\n{% set umbilical_x = printer["gcode_macro _User_Variables"].umbilical_x %}\n{% set umbilical_y = printer["gcode_macro _User_Variables"].umbilical_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n\n{% if umbilical %}\n\n_entry_point function=Umbilical_Path\n\n_KlickyDebug msg="_Umbilical_Path moving to G0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}"\nG0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}\n\n_exit_point function=Umbilical_Path\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _home_z_': {'gcode': '\n{% set z_endstop_x = printer["gcode_macro _Probe_Variables"].z_endstop_x %}\n{% set z_endstop_y = printer["gcode_macro _Probe_Variables"].z_endstop_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}    {% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Home_Z\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n{% else %}\n_KlickyDebug msg="_Home_Z_ XY Axis homed"\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="_Home_Z_ Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n\n\n_KlickyDebug msg="_Home_Z_ moving to Z endstop position G0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}"\nG0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}\n_KlickyDebug msg="_Home_Z_ Homing Z G28 Z"\nG28 Z0\n_KlickyDebug msg="_Home_Z_ toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_exit_point function=Home_Z', 'description': 'G-Code macro'}, 'gcode_macro _checkprobe': {'gcode': '\nQuery_Probe\n_SetProbeState action={ params.ACTION }', 'description': 'G-Code macro', 'variable_probe_state': '0'}, 'gcode_macro _setprobestate': {'gcode': '\n{% set query_probe_triggered = printer.probe.last_query %}\n{% set action  = params.ACTION|default(\'\') %}\n\n\n{% if query_probe_triggered %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ False }\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ True }\n{% endif %}\n\n{% if action == \'query\' %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_state VALUE={ query_probe_triggered }\n{% endif %}\n\n\n\n\n{% if not query_probe_triggered and action == \'dock\' %}\n{ action_raise_error("Probe dock failed!") }\n{% endif %}\n\n\n{% if query_probe_triggered and action == \'attach\' %}\n{ action_raise_error("Probe attach failed!") }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _park_toolhead': {'gcode': '\n{% set park_toolhead = printer["gcode_macro _User_Variables"].park_toolhead %}\n{% set parkposition_x = printer["gcode_macro _User_Variables"].parkposition_x %}\n{% set parkposition_y = printer["gcode_macro _User_Variables"].parkposition_y %}\n{% set parkposition_z = printer["gcode_macro _User_Variables"].parkposition_z %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Park_Toolhead\n\n{% if park_toolhead and \'xyz\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Parking Toolhead") }\n{% endif %}\n{% if parkposition_z == -128 %}\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}\n\n{% else %}\n\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}\n\n{% endif %}\n\n{% endif %}\n_exit_point function=Park_Toolhead', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_ready': {'gcode': '\n{% if printer[\'gcode_macro status_ready\'] is defined %}\n_KlickyDebug msg="_klicky_status_ready activating the LED STATUS_READY"\nSTATUS_READY\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_busy': {'gcode': '\n{% if printer[\'gcode_macro status_busy\'] is defined %}\n_KlickyDebug msg="_klicky_status_busy activating the LED STATUS_BUSY"\nSTATUS_BUSY\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_leveling': {'gcode': '\n{% if printer[\'gcode_macro status_leveling\'] is defined %}\n_KlickyDebug msg="_klicky_status_leveling activating the LED STATUS_LEVELING"\nSTATUS_LEVELING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_homing': {'gcode': '\n{% if printer[\'gcode_macro status_homing\'] is defined %}\n_KlickyDebug msg="_klicky_status_homing activating the LED STATUS_HOMING"\nSTATUS_HOMING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_cleaning': {'gcode': '\n{% if printer[\'gcode_macro status_cleaning\'] is defined %}\n_KlickyDebug msg="_klicky_status_cleaning activating the LED STATUS_CLEANING"\nSTATUS_CLEANING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_meshing': {'gcode': '\n{% if printer[\'gcode_macro status_meshing\'] is defined %}\n_KlickyDebug msg="_klicky_status_meshing activating the LED STATUS_MESHING"\nSTATUS_MESHING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_calibrating_z': {'gcode': '\n{% if printer[\'gcode_macro status_calibrating_z\'] is defined %}\n_KlickyDebug msg="_klicky_status_calibrating_z activating the LED STATUS_CALIBRATING_Z"\nSTATUS_CALIBRATING_Z\n{% endif %}', 'description': 'G-Code macro'}, 'z_calibration': {'switch_offset': 0.165, 'offset_margins': '-1.0,1.0', 'speed': 50.0, 'samples_result': 'none', 'probing_first_fast': False, 'nozzle_xy_position': '172, 301', 'switch_xy_position': '172, 275', 'bed_xy_position': '150, 150', 'start_gcode': 'Attach_Probe', 'before_switch_gcode': '', 'end_gcode': 'Dock_Probe'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': '^PG6', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'PG9', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 303.5, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PF11', 'dir_pin': '!PG3', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG5', 'endstop_pin': 'PG10', 'position_endstop': -0.5, 'position_min': -4.5, 'position_max': 290.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA0'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PF9', 'dir_pin': '!PF10', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG2'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF4', 'min_temp': 10.0, 'max_temp': 270.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 26.572, 'pid_ki': 2.036, 'pid_kd': 86.691, 'heater_pin': 'PA1', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PC13', 'pressure_advance': 0.05, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'PF0', 'rotation_distance': 21.9459674016, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 55.196, 'pid_ki': 2.091, 'pid_kd': 364.295, 'heater_pin': 'PA2', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'probe': {'z_offset': 0.0, 'deactivate_on_each_sample': True, 'activate_gcode': '', 'deactivate_gcode': '', 'pin': 'PG15', 'speed': 10.0, 'lift_speed': 10.0, 'x_offset': 0.0, 'y_offset': 25.0, 'samples': 5, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.006, 'samples_tolerance_retries': 6}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE5', 'fan_speed': 1.0}, 'controller_fan controller_fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD12', 'fan_speed': 1.0, 'idle_speed': 1.0, 'idle_timeout': 30, 'heater': ['heater_bed']}, 'heater_fan exhaust_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 5.0, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13', 'fan_speed': 1.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PD15', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 1.0, 'maximum_mcu_duration': 0.0, 'value': 1.0, 'shutdown_value': 0.0}, 'neopixel headlight': {'pin': 'PB0', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 0.0, 'initial_green': 0.2157, 'initial_blue': 1.0, 'initial_white': 0.0}, 'temperature_sensor chamber_temp': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF5', 'min_temp': 0.0, 'max_temp': 100.0, 'gcode_id': 'chamber_th'}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [150.0, 348.0], [350.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 5.0], [150.0, 245.0], [270.0, 5.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'gcode_macro _user_variables': {'gcode': '\n{% set Mx = printer[\'configfile\'].config["stepper_x"]["position_max"]|float %}\n{% set My = printer[\'configfile\'].config["stepper_y"]["position_max"]|float %}\n{% set Ox = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set Oy = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set Oz = printer[\'configfile\'].config["probe"]["z_offset"]|float %}\n\n\n{% if z_endstop_x != 0 or z_endstop_y != 0 %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ z_endstop_x }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ z_endstop_y }\n\n\n{% else %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ (Mx * 0.5) - Ox }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ (My * 0.5) - Oy }\n{% endif %}', 'description': 'G-Code macro', 'variable_verbose': 'True', 'variable_debug': 'False', 'variable_travel_speed': '200', 'variable_move_accel': '1000', 'variable_dock_speed': '50', 'variable_release_speed': '75', 'variable_z_drop_speed': '20', 'variable_safe_z': '25', 'variable_enable_z_hop': 'True', 'variable_max_bed_y': '300', 'variable_max_bed_x': '300', 'variable_z_endstop_x': '172', 'variable_z_endstop_y': '301', 'variable_docklocation_x': '42', 'variable_docklocation_y': '297', 'variable_docklocation_z': '-128', 'variable_enable_dock_servo': 'False', 'variable_servo_name': "'NAME'", 'variable_servo_deploy': '10', 'variable_servo_retract': '11', 'variable_servo_delay': '250', 'variable_dockmove_x': '40', 'variable_dockmove_y': '0', 'variable_dockmove_z': '0', 'variable_attachmove_x': '0', 'variable_attachmove_y': '30', 'variable_attachmove_z': '0', 'variable_umbilical': 'False', 'variable_umbilical_x': '15', 'variable_umbilical_y': '15', 'variable_park_toolhead': 'False', 'variable_parkposition_x': '125', 'variable_parkposition_y': '125', 'variable_parkposition_z': '30', 'variable_version': '1', 'variable_attachmove2_x': '0', 'variable_attachmove2_y': '0', 'variable_attachmove2_z': '0', 'variable_home_backoff_x': '10', 'variable_home_backoff_y': '10', 'variable_override_homing': "''", 'variable_dock_on_zhome': 'True'}, 'gcode_macro print_start': {'gcode': '\nM117 Homing...\nG28\nATTACH_PROBE\nZ_TILT_ADJUST\nDOCK_PROBE\nG28\n\n\n\n\n\n\n\nG0 X150 Y150 Z30 F3600', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1500.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-02-19 20:47:27,329 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-19 20:47:27,329 [printer.py:reinit()] - Klipper version: v0.12.0-103-g6ce6fbbc-dirty
2024-02-19 20:47:27,329 [printer.py:reinit()] - # Extruders: 1
2024-02-19 20:47:27,329 [printer.py:reinit()] - # Temperature devices: 2
2024-02-19 20:47:27,330 [printer.py:reinit()] - # Fans: 4
2024-02-19 20:47:27,330 [printer.py:reinit()] - # Output pins: 1
2024-02-19 20:47:27,330 [printer.py:reinit()] - # Leds: 1
2024-02-19 20:47:27,340 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2024-02-19 20:47:27,342 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-02-19 20:47:27,623 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor chamber_temp&fan&controller_fan controller_fan&heater_fan hotend_fan&heater_fan exhaust_fan&output_pin caselight&neopixel headlight
2024-02-19 20:47:27,626 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-02-19 20:47:27,626 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-02-19 20:47:27,627 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-02-19 20:47:27,628 [screen.py:init_klipper()] - Printer initialized
2024-02-19 20:47:27,628 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2024-02-19 20:47:27,628 [printer.py:change_state()] - Adding callback for state: ready
2024-02-19 20:47:27,631 [screen.py:show_panel()] - Reinitializing panel
2024-02-19 20:47:27,684 [main_menu.py:__init__()] - ### Making MainMenu
2024-02-19 20:47:27,689 [main_menu.py:add_device()] - Adding device: extruder
2024-02-19 20:47:27,694 [main_menu.py:add_device()] - Adding device: heater_bed
2024-02-19 20:47:27,699 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber_temp
2024-02-19 20:47:27,723 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-02-19 20:47:27,739 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-02-19 20:47:27,743 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'temperature_sensor chamber_temp', 'extruder']
2024-02-19 20:47:27,752 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2024-02-19 20:47:27,753 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-02-19 20:51:52,356 [KlippyGtk.py:remove_dialog()] - Cannot remove dialog <Gtk.Dialog object at 0x7f58a96880 (GtkDialog at 0x16fb16e0)>
2024-02-19 20:51:52,386 [KlippyGtk.py:Dialog()] - Showing dialog KlipperScreen (width=800, height=480)
2024-02-19 20:51:57,655 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-02-19 20:51:57,655 [printer.py:change_state()] - Adding callback for state: disconnected
2024-02-19 20:51:57,656 [screen.py:state_disconnected()] - ### Going to disconnected
2024-02-19 20:51:57,656 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-19 20:51:57,659 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-02-19 20:51:57,660 [screen.py:show_panel()] - Reinitializing panel
2024-02-19 20:51:57,691 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-02-19 20:52:01,286 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-19 20:52:01,294 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2024-02-19 20:52:01,295 [printer.py:configure_cameras()] - Cameras: []
2024-02-19 20:52:01,295 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'update_manager', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-310-g67c98f6', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-02-19 20:52:01,304 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2024-02-19 20:52:01,390 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2024-02-19 20:52:01,394 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro _Probe_Variables': {'variable_probe_attached': 'False', 'variable_probe_state': 'False', 'variable_probe_lock': 'False', 'variable_probe_z_homed': 'False', 'variable_z_endstop_x': '0', 'variable_z_endstop_y': '0', 'gcode': ''}, 'gcode_macro _klicky_check_variables_version': {'gcode': '\n{% set version = printer["gcode_macro _User_Variables"].version|default(0) %}\n\n{% if version != 1 %}\n{ action_raise_error("Please update your klicky variables, there are some functionality changes") }\n{% endif %}'}, 'gcode_macro _KlickyDebug': {'gcode': '\n{% set message  = params.MSG %}\n{% set debug = printer["gcode_macro _User_Variables"].debug|default(False) %}\n\n{% if debug %}\n{ action_respond_info(message) }\n{% endif %}'}, 'gcode_macro _exit_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move  = params.MOVE|default(0) %}\n{% set speed = printer["gcode_macro _User_Variables"].travel_speed %}\n\n\nM400\nSET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\nRESTORE_GCODE_STATE NAME={function} MOVE={move} MOVE_SPEED={speed}'}, 'gcode_macro _entry_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move_accel = printer["gcode_macro _User_Variables"].move_accel|default(1000) %}\n\nM400\nSAVE_GCODE_STATE NAME={function}\n\nSET_GCODE_OFFSET Z=0\n\nG90\n\nSET_VELOCITY_LIMIT ACCEL={move_accel}'}, 'gcode_macro _Homing_Variables': {'gcode': '\n{% set reset  = params.RESET|default(0) %}\n{% if reset %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }\n{% endif %}'}, 'gcode_macro Attach_Probe_Lock': {'description': 'Attaches Klicky Probe, can only be docked after unlocking', 'gcode': '\nAttach_Probe\n_Probe_Lock'}, 'gcode_macro Dock_Probe_Unlock': {'description': 'Docks Klicky Probe even if it was locked', 'gcode': '\n_Probe_Unlock\nDock_Probe'}, 'gcode_macro _Probe_Unlock': {'description': 'Unlocks Klicky Probe state', 'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to False"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }'}, 'gcode_macro _Probe_Lock': {'description': 'Locks Klicky Probe state', 'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to True"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ True }'}, 'gcode_macro _DeployKlickyDock': {'description': 'Deploys Klicky servo-controlled dock', 'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_deploy = printer["gcode_macro _User_Variables"].servo_deploy|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_DeployKlickyDock Klicky servo configuration enabled"\n{% if servo_deploy == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo deploy angle specified") }\n{% endif %}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _DeployDock"] is defined %}\n_KlickyDebug msg="_DeployKlickyDock calling _DeployDock"\n_DeployDock\n{% endif %}'}, 'gcode_macro _RetractKlickyDock': {'description': 'Retracts Klicky servo-controlled dock', 'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_retract = printer["gcode_macro _User_Variables"].servo_retract|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_RetractKlickyDock Klicky servo configuration enabled"\n{% if servo_retract == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo retract angle specified") }\n{% endif %}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _RetractDock"] is defined %}\n_KlickyDebug msg="_RetractKlickyDock calling _RetractDock"\n_RetractDock\n{% endif %}'}, 'gcode_macro Attach_Probe': {'description': 'Attaches Klicky Probe', 'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set attachmove2_x = printer["gcode_macro _User_Variables"].attachmove2_x|default(0) %}\n{% set attachmove2_y = printer["gcode_macro _User_Variables"].attachmove2_y|default(0) %}\n{% set attachmove2_z = printer["gcode_macro _User_Variables"].attachmove2_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n_entry_point function=Attach_Probe\n\n{% if bypass_probe_docking == False %}\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n_KlickyDebug msg="Attach_Probe Axis homed"\n\n\n{% elif not probe_attached and not probe_lock %}\n_KlickyDebug msg="Attach_Probe going to attach probe"\n{% if verbose %}\n{ action_respond_info("Attaching Probe") }\n{% endif %}\n_KLICKY_STATUS_BUSY\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% if not enable_z_hop %}\n_KlickyDebug msg="Attach_Probe z_hop disabled"\n{% set safe_z = 0 %}\n{% endif %}\n{% endif %}\n\n\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero, duplicate?") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Umbilical_Path\n\n_entry_point function=Attach_Probe_intern\n\n\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n_DeployKlickyDock\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}"\nG0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}\n\n_RetractKlickyDock\n\n{% if ((printer.gcode_move.gcode_position.z < safe_z) or (docklocation_z != -128 and docklocation_z < safe_z ))%}\n_KlickyDebug msg="Attach_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\n_CheckProbe action=attach\n\n_exit_point function=Attach_Probe_intern move={goback}\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe locked not attaching probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already attached!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe already attached, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Attach_Probe\n{% else %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}'}, 'gcode_macro Dock_Probe': {'description': 'Docks Klicky Probe', 'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n{% if bypass_probe_docking == True %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}\n\n{% if bypass_probe_docking != True %}\n_entry_point function=Dock_Probe\n\n\n{% if probe_attached and not probe_lock %}\n_KLICKY_STATUS_BUSY\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Dock_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n_Umbilical_Path\n\n\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n\n_DeployKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\n\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}"\nG0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}\n{% endif %}\n\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}\n\n\n_RetractKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving away from the dock to G0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}\n\n\n{% if (printer.gcode_move.gcode_position.z < safe_z) %}\n_KlickyDebug msg="Dock_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\nG4 P1000\n_CheckProbe action=dock\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe locked not docking probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already docked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe already docked, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Dock_Probe move={goback}\n{% else %}\n_KlickyDebug msg="Dock_Probe probe docking bypassed, doing nothing"\n{% endif %}'}, 'gcode_macro PROBE_CALIBRATE': {'rename_existing': '_PROBE_CALIBRATE', 'description': 'Calibrate the probes z_offset with klicky automount', 'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_calibrate Axis homed"\n_KlickyDebug msg="probe_calibrate Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_CALIBRATE with the probe above the BED, check klicky_variables bed size!") }\n{% endif %}\n\n{% if bypass_probe_docking == False %}\n_CheckProbe action=query\nG90\nAttach_Probe back=1\n_KLICKY_STATUS_CALIBRATING_Z\n\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nM118 moving the toolhead 20 mm from the bed\n_KlickyDebug msg="probe_calibrate Moving Z up by 20mm"\nTESTZ Z=20\nM118 remove manually the probe and continue calibration\n_KLICKY_STATUS_READY\n{% else %}\n_KLICKY_STATUS_CALIBRATING_Z\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n_KLICKY_STATUS_READY\n{% endif %}'}, 'gcode_macro PROBE_ACCURACY': {'rename_existing': '_PROBE_ACCURACY', 'description': 'Probe Z-height accuracy at current XY position with klicky automount', 'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_accuracy Axis homed"\n_KlickyDebug msg="probe_accuracy Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n_entry_point function=PROBE_ACCURACY\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_ACCURACY with the probe above the BED, check klicky_variables bed size!") }\n{% endif%}\n\n_CheckProbe action=query\nAttach_Probe back=1\n\n_KlickyDebug msg="probe_accuracy calling klipper probe accuracy"\n_PROBE_ACCURACY {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nDock_Probe back=1\n\n_exit_point function=PROBE_ACCURACY move=1'}, 'force_move': {'enable_force_move': 'True'}, 'homing_override': {'axes': 'xyz', 'gcode': '\n\n_User_Variables\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n{% set kinematic_z = 0 %}\n{% set dock_on_zhome = printer["gcode_macro _User_Variables"].dock_on_zhome|default(True) %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set home_backoff_x = printer["gcode_macro _User_Variables"].home_backoff_x|default(0) %}\n{% set home_backoff_y = printer["gcode_macro _User_Variables"].home_backoff_y|default(0) %}\n{% set override_homing = printer["gcode_macro _User_Variables"].override_homing|default(\'\') %}\n\n\n_klicky_check_variables_version\n\n_CheckProbe action=query\n\n\n{% set home_x, home_y, home_z, leave_probe_attached = False, False, False, False %}\n\n{% if \'PROBE_LOCK\' in params%}\n{% if verbose %}\n{ action_respond_info("PROBE_LOCK = True") }\n{% endif %}\n{% set leave_probe_attached = True %}\n{% endif %}\n\n\n{% if not \'X\' in params\nand not \'Y\' in params\nand not \'Z\' in params %}\n\n{% set home_x, home_y, home_z = True, True, True %}\n_KlickyDebug msg="homing_override goint to home all axes"\n\n{% else %}\n{% if \'X\' in params %}\n{% set home_x = True %}\n_KlickyDebug msg="homing_override goint to home X"\n\n{% endif %}\n\n{% if \'Y\' in params %}\n{% set home_y = True %}\n_KlickyDebug msg="homing_override goint to home Y"\n{% endif %}\n\n{% if \'Z\' in params %}\n{% set home_z = True %}\n_KlickyDebug msg="homing_override goint to home Z"\n{% endif %}\n\n{% if \'X\' in params\nand \'Y\' in params\nand \'Z\' in params %}\n\n\n_Homing_Variables reset=1\n_KlickyDebug msg="homing_override goint to home all axes"\n{% endif %}\n\n{% endif %}\n\n_entry_point function=homing_override\n_KLICKY_STATUS_HOMING\n\n\n{% if \'z\' not in printer.toolhead.homed_axes %}\n{% if enable_z_hop == False %}\n_KlickyDebug msg="homing_override z_hop disabled"\n\n{% set kinematic_z = safe_z %}\n{% set safe_z = safe_z %}\n{% endif %}\n{% endif %}\n\n\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes and \'z\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("No axis homed") }\n{% endif %}\n_KlickyDebug msg="homing_override no axis homed, setting position as X=Y=0 Z={kinematic_z}"\nSET_KINEMATIC_POSITION X=0 Y=0 Z={kinematic_z}\nM400\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% if home_z != True %}\n_KlickyDebug msg="homing_override clearing axis homed state if not already homing Z"\nM84\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("X or Y not homed, forcing full G28") }\n{% endif %}\n{% set home_x, home_y, home_z = True, True, True %}\n{% endif %}\n{% endif %}\n\n\n{% if ((attachmove_y == 0 and override_homing == \'\' ) or (override_homing == \'Y\'))%}\n\n{% if home_y %}\n{% if override_homing == \'Y\' %}\n_KlickyDebug msg="homing_override Y homing first override, due to override_homing = Y"\n{% else %}\n_KlickyDebug msg="homing_override Y homing first override, due to attachmove_y = 0"\n{% endif %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y G28 Y0"\nG28 Y0\n\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop-home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n{% set home_y = False %}\n{% endif %}\n\n\n\n{% if home_x %}\n{% if verbose %}\n{ action_respond_info("Homing X") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in X homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_X"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_X external script to handle the X homing"\n_HOME_X\n{% else %}\n_KlickyDebug msg="homing_override Homing X, G28 X0"\nG28 X0\n\n{% if home_backoff_x != 0 %}\n{% if (printer.configfile.settings.stepper_x.position_endstop > (printer.configfile.settings.stepper_x.position_min|default(0) + printer.configfile.settings.stepper_x.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n\n{% if home_y %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y, G28 Y0"\nG28 Y0\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if verbose %}\n{ action_respond_info("Homing Z") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe configured as a virtual Z endstop attaching probe"\nAttach_Probe\n\n{% if leave_probe_attached %}\n_Probe_Lock\n{% endif %}\n{% elif dock_on_zhome == True %}\nDock_Probe\n{% endif %}\n\n_Home_Z_\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe no longer required, docking probe"\nDock_Probe\n{% elif dock_on_zhome == False %}\nDock_Probe\n{% endif %}\n{% endif %}\n_CheckProbe action=query\n\n\n_Park_Toolhead\n\n_exit_point function=homing_override\n_KLICKY_STATUS_READY'}, 'gcode_macro _Umbilical_Path': {'gcode': '\n{% set umbilical = printer["gcode_macro _User_Variables"].umbilical %}\n{% set umbilical_x = printer["gcode_macro _User_Variables"].umbilical_x %}\n{% set umbilical_y = printer["gcode_macro _User_Variables"].umbilical_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n\n{% if umbilical %}\n\n_entry_point function=Umbilical_Path\n\n_KlickyDebug msg="_Umbilical_Path moving to G0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}"\nG0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}\n\n_exit_point function=Umbilical_Path\n{% endif %}'}, 'gcode_macro _Home_Z_': {'gcode': '\n{% set z_endstop_x = printer["gcode_macro _Probe_Variables"].z_endstop_x %}\n{% set z_endstop_y = printer["gcode_macro _Probe_Variables"].z_endstop_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}    {% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Home_Z\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n{% else %}\n_KlickyDebug msg="_Home_Z_ XY Axis homed"\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="_Home_Z_ Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n\n\n_KlickyDebug msg="_Home_Z_ moving to Z endstop position G0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}"\nG0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}\n_KlickyDebug msg="_Home_Z_ Homing Z G28 Z"\nG28 Z0\n_KlickyDebug msg="_Home_Z_ toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_exit_point function=Home_Z'}, 'gcode_macro _CheckProbe': {'variable_probe_state': '0', 'gcode': '\nQuery_Probe\n_SetProbeState action={ params.ACTION }'}, 'gcode_macro _SetProbeState': {'gcode': '\n{% set query_probe_triggered = printer.probe.last_query %}\n{% set action  = params.ACTION|default(\'\') %}\n\n\n{% if query_probe_triggered %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ False }\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ True }\n{% endif %}\n\n{% if action == \'query\' %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_state VALUE={ query_probe_triggered }\n{% endif %}\n\n\n\n\n{% if not query_probe_triggered and action == \'dock\' %}\n{ action_raise_error("Probe dock failed!") }\n{% endif %}\n\n\n{% if query_probe_triggered and action == \'attach\' %}\n{ action_raise_error("Probe attach failed!") }\n{% endif %}'}, 'gcode_macro _Park_Toolhead': {'gcode': '\n{% set park_toolhead = printer["gcode_macro _User_Variables"].park_toolhead %}\n{% set parkposition_x = printer["gcode_macro _User_Variables"].parkposition_x %}\n{% set parkposition_y = printer["gcode_macro _User_Variables"].parkposition_y %}\n{% set parkposition_z = printer["gcode_macro _User_Variables"].parkposition_z %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Park_Toolhead\n\n{% if park_toolhead and \'xyz\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Parking Toolhead") }\n{% endif %}\n{% if parkposition_z == -128 %}\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}\n\n{% else %}\n\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}\n\n{% endif %}\n\n{% endif %}\n_exit_point function=Park_Toolhead'}, 'gcode_macro _klicky_status_ready': {'gcode': '\n{% if printer[\'gcode_macro status_ready\'] is defined %}\n_KlickyDebug msg="_klicky_status_ready activating the LED STATUS_READY"\nSTATUS_READY\n{% endif %}'}, 'gcode_macro _klicky_status_busy': {'gcode': '\n{% if printer[\'gcode_macro status_busy\'] is defined %}\n_KlickyDebug msg="_klicky_status_busy activating the LED STATUS_BUSY"\nSTATUS_BUSY\n{% endif %}'}, 'gcode_macro _klicky_status_leveling': {'gcode': '\n{% if printer[\'gcode_macro status_leveling\'] is defined %}\n_KlickyDebug msg="_klicky_status_leveling activating the LED STATUS_LEVELING"\nSTATUS_LEVELING\n{% endif %}'}, 'gcode_macro _klicky_status_homing': {'gcode': '\n{% if printer[\'gcode_macro status_homing\'] is defined %}\n_KlickyDebug msg="_klicky_status_homing activating the LED STATUS_HOMING"\nSTATUS_HOMING\n{% endif %}'}, 'gcode_macro _klicky_status_cleaning': {'gcode': '\n{% if printer[\'gcode_macro status_cleaning\'] is defined %}\n_KlickyDebug msg="_klicky_status_cleaning activating the LED STATUS_CLEANING"\nSTATUS_CLEANING\n{% endif %}'}, 'gcode_macro _klicky_status_meshing': {'gcode': '\n{% if printer[\'gcode_macro status_meshing\'] is defined %}\n_KlickyDebug msg="_klicky_status_meshing activating the LED STATUS_MESHING"\nSTATUS_MESHING\n{% endif %}'}, 'gcode_macro _klicky_status_calibrating_z': {'gcode': '\n{% if printer[\'gcode_macro status_calibrating_z\'] is defined %}\n_KlickyDebug msg="_klicky_status_calibrating_z activating the LED STATUS_CALIBRATING_Z"\nSTATUS_CALIBRATING_Z\n{% endif %}'}, 'z_calibration': {'nozzle_xy_position': '172, 301', 'switch_xy_position': '172, 275', 'bed_xy_position': '150, 150', 'switch_offset': '0.165', 'offset_margins': '-1.0,1.0', 'speed': '50', 'probing_first_fast': 'false', 'start_gcode': 'Attach_Probe', 'end_gcode': 'Dock_Probe'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_28003C001150535556323420-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '^PG6', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '25', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'PG9', 'position_min': '0', 'position_endstop': '300', 'position_max': '303.5', 'homing_speed': '25', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': '!PG3', 'enable_pin': '!PG5', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'PG10', 'position_max': '290', 'position_min': '-4.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3', 'position_endstop': '-0.855'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA0', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': '!PF10', 'enable_pin': '!PG2', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PC13', 'dir_pin': 'PF0', 'enable_pin': '!PF1', 'rotation_distance': '21.9459674016', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.75', 'heater_pin': 'PA1', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF4', 'min_temp': '10', 'max_temp': '270', 'max_power': '1.0', 'min_extrude_temp': '170', 'pressure_advance': '0.05', 'pressure_advance_smooth_time': '0.040', 'control': 'pid', 'pid_kp': '26.572', 'pid_ki': '2.036', 'pid_kd': '86.691'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.5', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PA2', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF3', 'max_power': '1', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '55.196', 'pid_ki': '2.091', 'pid_kd': '364.295'}, 'probe': {'pin': 'PG15', 'x_offset': '0', 'y_offset': '25.0', 'z_offset': '0', 'speed': '10.0', 'samples': '5', 'samples_result': 'median', 'sample_retract_dist': '3.0', 'samples_tolerance': '0.006', 'samples_tolerance_retries': '6'}, 'fan': {'pin': 'PA8', 'kick_start_time': '0.5', 'off_below': '0.10'}, 'heater_fan hotend_fan': {'pin': 'PE5', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'controller_fan controller_fan': {'pin': 'PD12', 'kick_start_time': '0.5', 'heater': 'heater_bed'}, 'heater_fan exhaust_fan': {'pin': 'PD13', 'max_power': '1.0', 'shutdown_speed': '0.0', 'kick_start_time': '5.0', 'heater': 'heater_bed', 'heater_temp': '60', 'fan_speed': '1.0'}, 'output_pin caselight': {'pin': 'PD15', 'pwm': 'true', 'shutdown_value': '0', 'value': '1', 'cycle_time': '0.01'}, 'neopixel headlight': {'pin': 'PB0', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '0.0', 'initial_green': '0.2157', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'temperature_sensor chamber_temp': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF5', 'min_temp': '0', 'max_temp': '100', 'gcode_id': 'chamber_th'}, 'idle_timeout': {'timeout': '1800'}, 'z_tilt': {'z_positions': '\n-50, 18\n150, 348\n350, 18', 'points': '\n30, 5\n150, 245\n270, 5', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'gcode_macro _User_Variables': {'variable_verbose': 'True', 'variable_debug': 'False', 'variable_travel_speed': '200', 'variable_move_accel': '1000', 'variable_dock_speed': '50', 'variable_release_speed': '75', 'variable_z_drop_speed': '20', 'variable_safe_z': '25', 'variable_enable_z_hop': 'True', 'variable_max_bed_y': '300', 'variable_max_bed_x': '300', 'variable_z_endstop_x': '172', 'variable_z_endstop_y': '301', 'variable_docklocation_x': '42', 'variable_docklocation_y': '297', 'variable_docklocation_z': '-128', 'variable_enable_dock_servo': 'False', 'variable_servo_name': "'NAME'", 'variable_servo_deploy': '10', 'variable_servo_retract': '11', 'variable_servo_delay': '250', 'variable_dockmove_x': '40', 'variable_dockmove_y': '0', 'variable_dockmove_z': '0', 'variable_attachmove_x': '0', 'variable_attachmove_y': '30', 'variable_attachmove_z': '0', 'variable_umbilical': 'False', 'variable_umbilical_x': '15', 'variable_umbilical_y': '15', 'variable_park_toolhead': 'False', 'variable_parkposition_x': '125', 'variable_parkposition_y': '125', 'variable_parkposition_z': '30', 'variable_version': '1', 'variable_attachmove2_x': '0', 'variable_attachmove2_y': '0', 'variable_attachmove2_z': '0', 'variable_home_backoff_x': '10', 'variable_home_backoff_y': '10', 'variable_override_homing': "''", 'variable_dock_on_zhome': 'True', 'gcode': '\n{% set Mx = printer[\'configfile\'].config["stepper_x"]["position_max"]|float %}\n{% set My = printer[\'configfile\'].config["stepper_y"]["position_max"]|float %}\n{% set Ox = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set Oy = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set Oz = printer[\'configfile\'].config["probe"]["z_offset"]|float %}\n\n\n{% if z_endstop_x != 0 or z_endstop_y != 0 %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ z_endstop_x }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ z_endstop_y }\n\n\n{% else %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ (Mx * 0.5) - Ox }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ (My * 0.5) - Oy }\n{% endif %}'}, 'gcode_macro PRINT_START': {'gcode': '\nM117 Homing...\nG28\nATTACH_PROBE\nZ_TILT_ADJUST\nDOCK_PROBE\nG28\n\n\n\n\n\n\n\nG0 X150 Y150 Z30 F3600'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_28003C001150535556323420-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro _probe_variables': {'gcode': '', 'description': 'G-Code macro', 'variable_probe_attached': 'False', 'variable_probe_state': 'False', 'variable_probe_lock': 'False', 'variable_probe_z_homed': 'False', 'variable_z_endstop_x': '0', 'variable_z_endstop_y': '0'}, 'gcode_macro _klicky_check_variables_version': {'gcode': '\n{% set version = printer["gcode_macro _User_Variables"].version|default(0) %}\n\n{% if version != 1 %}\n{ action_raise_error("Please update your klicky variables, there are some functionality changes") }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klickydebug': {'gcode': '\n{% set message  = params.MSG %}\n{% set debug = printer["gcode_macro _User_Variables"].debug|default(False) %}\n\n{% if debug %}\n{ action_respond_info(message) }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _exit_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move  = params.MOVE|default(0) %}\n{% set speed = printer["gcode_macro _User_Variables"].travel_speed %}\n\n\nM400\nSET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\nRESTORE_GCODE_STATE NAME={function} MOVE={move} MOVE_SPEED={speed}', 'description': 'G-Code macro'}, 'gcode_macro _entry_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move_accel = printer["gcode_macro _User_Variables"].move_accel|default(1000) %}\n\nM400\nSAVE_GCODE_STATE NAME={function}\n\nSET_GCODE_OFFSET Z=0\n\nG90\n\nSET_VELOCITY_LIMIT ACCEL={move_accel}', 'description': 'G-Code macro'}, 'gcode_macro _homing_variables': {'gcode': '\n{% set reset  = params.RESET|default(0) %}\n{% if reset %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro attach_probe_lock': {'gcode': '\nAttach_Probe\n_Probe_Lock', 'description': 'Attaches Klicky Probe, can only be docked after unlocking'}, 'gcode_macro dock_probe_unlock': {'gcode': '\n_Probe_Unlock\nDock_Probe', 'description': 'Docks Klicky Probe even if it was locked'}, 'gcode_macro _probe_unlock': {'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to False"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }', 'description': 'Unlocks Klicky Probe state'}, 'gcode_macro _probe_lock': {'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to True"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ True }', 'description': 'Locks Klicky Probe state'}, 'gcode_macro _deployklickydock': {'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_deploy = printer["gcode_macro _User_Variables"].servo_deploy|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_DeployKlickyDock Klicky servo configuration enabled"\n{% if servo_deploy == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo deploy angle specified") }\n{% endif %}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _DeployDock"] is defined %}\n_KlickyDebug msg="_DeployKlickyDock calling _DeployDock"\n_DeployDock\n{% endif %}', 'description': 'Deploys Klicky servo-controlled dock'}, 'gcode_macro _retractklickydock': {'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_retract = printer["gcode_macro _User_Variables"].servo_retract|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_RetractKlickyDock Klicky servo configuration enabled"\n{% if servo_retract == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo retract angle specified") }\n{% endif %}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _RetractDock"] is defined %}\n_KlickyDebug msg="_RetractKlickyDock calling _RetractDock"\n_RetractDock\n{% endif %}', 'description': 'Retracts Klicky servo-controlled dock'}, 'gcode_macro attach_probe': {'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set attachmove2_x = printer["gcode_macro _User_Variables"].attachmove2_x|default(0) %}\n{% set attachmove2_y = printer["gcode_macro _User_Variables"].attachmove2_y|default(0) %}\n{% set attachmove2_z = printer["gcode_macro _User_Variables"].attachmove2_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n_entry_point function=Attach_Probe\n\n{% if bypass_probe_docking == False %}\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n_KlickyDebug msg="Attach_Probe Axis homed"\n\n\n{% elif not probe_attached and not probe_lock %}\n_KlickyDebug msg="Attach_Probe going to attach probe"\n{% if verbose %}\n{ action_respond_info("Attaching Probe") }\n{% endif %}\n_KLICKY_STATUS_BUSY\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% if not enable_z_hop %}\n_KlickyDebug msg="Attach_Probe z_hop disabled"\n{% set safe_z = 0 %}\n{% endif %}\n{% endif %}\n\n\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero, duplicate?") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Umbilical_Path\n\n_entry_point function=Attach_Probe_intern\n\n\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n_DeployKlickyDock\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}"\nG0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}\n\n_RetractKlickyDock\n\n{% if ((printer.gcode_move.gcode_position.z < safe_z) or (docklocation_z != -128 and docklocation_z < safe_z ))%}\n_KlickyDebug msg="Attach_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\n_CheckProbe action=attach\n\n_exit_point function=Attach_Probe_intern move={goback}\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe locked not attaching probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already attached!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe already attached, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Attach_Probe\n{% else %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}', 'description': 'Attaches Klicky Probe'}, 'gcode_macro dock_probe': {'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n{% if bypass_probe_docking == True %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}\n\n{% if bypass_probe_docking != True %}\n_entry_point function=Dock_Probe\n\n\n{% if probe_attached and not probe_lock %}\n_KLICKY_STATUS_BUSY\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Dock_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n_Umbilical_Path\n\n\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n\n_DeployKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\n\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}"\nG0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}\n{% endif %}\n\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}\n\n\n_RetractKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving away from the dock to G0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}\n\n\n{% if (printer.gcode_move.gcode_position.z < safe_z) %}\n_KlickyDebug msg="Dock_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\nG4 P1000\n_CheckProbe action=dock\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe locked not docking probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already docked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe already docked, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Dock_Probe move={goback}\n{% else %}\n_KlickyDebug msg="Dock_Probe probe docking bypassed, doing nothing"\n{% endif %}', 'description': 'Docks Klicky Probe'}, 'gcode_macro probe_calibrate': {'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_calibrate Axis homed"\n_KlickyDebug msg="probe_calibrate Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_CALIBRATE with the probe above the BED, check klicky_variables bed size!") }\n{% endif %}\n\n{% if bypass_probe_docking == False %}\n_CheckProbe action=query\nG90\nAttach_Probe back=1\n_KLICKY_STATUS_CALIBRATING_Z\n\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nM118 moving the toolhead 20 mm from the bed\n_KlickyDebug msg="probe_calibrate Moving Z up by 20mm"\nTESTZ Z=20\nM118 remove manually the probe and continue calibration\n_KLICKY_STATUS_READY\n{% else %}\n_KLICKY_STATUS_CALIBRATING_Z\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n_KLICKY_STATUS_READY\n{% endif %}', 'rename_existing': '_PROBE_CALIBRATE', 'description': 'Calibrate the probes z_offset with klicky automount'}, 'gcode_macro probe_accuracy': {'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_accuracy Axis homed"\n_KlickyDebug msg="probe_accuracy Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n_entry_point function=PROBE_ACCURACY\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_ACCURACY with the probe above the BED, check klicky_variables bed size!") }\n{% endif%}\n\n_CheckProbe action=query\nAttach_Probe back=1\n\n_KlickyDebug msg="probe_accuracy calling klipper probe accuracy"\n_PROBE_ACCURACY {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nDock_Probe back=1\n\n_exit_point function=PROBE_ACCURACY move=1', 'rename_existing': '_PROBE_ACCURACY', 'description': 'Probe Z-height accuracy at current XY position with klicky automount'}, 'force_move': {'enable_force_move': True}, 'homing_override': {'axes': 'xyz', 'gcode': '\n\n_User_Variables\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n{% set kinematic_z = 0 %}\n{% set dock_on_zhome = printer["gcode_macro _User_Variables"].dock_on_zhome|default(True) %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set home_backoff_x = printer["gcode_macro _User_Variables"].home_backoff_x|default(0) %}\n{% set home_backoff_y = printer["gcode_macro _User_Variables"].home_backoff_y|default(0) %}\n{% set override_homing = printer["gcode_macro _User_Variables"].override_homing|default(\'\') %}\n\n\n_klicky_check_variables_version\n\n_CheckProbe action=query\n\n\n{% set home_x, home_y, home_z, leave_probe_attached = False, False, False, False %}\n\n{% if \'PROBE_LOCK\' in params%}\n{% if verbose %}\n{ action_respond_info("PROBE_LOCK = True") }\n{% endif %}\n{% set leave_probe_attached = True %}\n{% endif %}\n\n\n{% if not \'X\' in params\nand not \'Y\' in params\nand not \'Z\' in params %}\n\n{% set home_x, home_y, home_z = True, True, True %}\n_KlickyDebug msg="homing_override goint to home all axes"\n\n{% else %}\n{% if \'X\' in params %}\n{% set home_x = True %}\n_KlickyDebug msg="homing_override goint to home X"\n\n{% endif %}\n\n{% if \'Y\' in params %}\n{% set home_y = True %}\n_KlickyDebug msg="homing_override goint to home Y"\n{% endif %}\n\n{% if \'Z\' in params %}\n{% set home_z = True %}\n_KlickyDebug msg="homing_override goint to home Z"\n{% endif %}\n\n{% if \'X\' in params\nand \'Y\' in params\nand \'Z\' in params %}\n\n\n_Homing_Variables reset=1\n_KlickyDebug msg="homing_override goint to home all axes"\n{% endif %}\n\n{% endif %}\n\n_entry_point function=homing_override\n_KLICKY_STATUS_HOMING\n\n\n{% if \'z\' not in printer.toolhead.homed_axes %}\n{% if enable_z_hop == False %}\n_KlickyDebug msg="homing_override z_hop disabled"\n\n{% set kinematic_z = safe_z %}\n{% set safe_z = safe_z %}\n{% endif %}\n{% endif %}\n\n\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes and \'z\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("No axis homed") }\n{% endif %}\n_KlickyDebug msg="homing_override no axis homed, setting position as X=Y=0 Z={kinematic_z}"\nSET_KINEMATIC_POSITION X=0 Y=0 Z={kinematic_z}\nM400\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% if home_z != True %}\n_KlickyDebug msg="homing_override clearing axis homed state if not already homing Z"\nM84\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("X or Y not homed, forcing full G28") }\n{% endif %}\n{% set home_x, home_y, home_z = True, True, True %}\n{% endif %}\n{% endif %}\n\n\n{% if ((attachmove_y == 0 and override_homing == \'\' ) or (override_homing == \'Y\'))%}\n\n{% if home_y %}\n{% if override_homing == \'Y\' %}\n_KlickyDebug msg="homing_override Y homing first override, due to override_homing = Y"\n{% else %}\n_KlickyDebug msg="homing_override Y homing first override, due to attachmove_y = 0"\n{% endif %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y G28 Y0"\nG28 Y0\n\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop-home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n{% set home_y = False %}\n{% endif %}\n\n\n\n{% if home_x %}\n{% if verbose %}\n{ action_respond_info("Homing X") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in X homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_X"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_X external script to handle the X homing"\n_HOME_X\n{% else %}\n_KlickyDebug msg="homing_override Homing X, G28 X0"\nG28 X0\n\n{% if home_backoff_x != 0 %}\n{% if (printer.configfile.settings.stepper_x.position_endstop > (printer.configfile.settings.stepper_x.position_min|default(0) + printer.configfile.settings.stepper_x.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n\n{% if home_y %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y, G28 Y0"\nG28 Y0\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if verbose %}\n{ action_respond_info("Homing Z") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe configured as a virtual Z endstop attaching probe"\nAttach_Probe\n\n{% if leave_probe_attached %}\n_Probe_Lock\n{% endif %}\n{% elif dock_on_zhome == True %}\nDock_Probe\n{% endif %}\n\n_Home_Z_\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe no longer required, docking probe"\nDock_Probe\n{% elif dock_on_zhome == False %}\nDock_Probe\n{% endif %}\n{% endif %}\n_CheckProbe action=query\n\n\n_Park_Toolhead\n\n_exit_point function=homing_override\n_KLICKY_STATUS_READY'}, 'gcode_macro _umbilical_path': {'gcode': '\n{% set umbilical = printer["gcode_macro _User_Variables"].umbilical %}\n{% set umbilical_x = printer["gcode_macro _User_Variables"].umbilical_x %}\n{% set umbilical_y = printer["gcode_macro _User_Variables"].umbilical_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n\n{% if umbilical %}\n\n_entry_point function=Umbilical_Path\n\n_KlickyDebug msg="_Umbilical_Path moving to G0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}"\nG0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}\n\n_exit_point function=Umbilical_Path\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _home_z_': {'gcode': '\n{% set z_endstop_x = printer["gcode_macro _Probe_Variables"].z_endstop_x %}\n{% set z_endstop_y = printer["gcode_macro _Probe_Variables"].z_endstop_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}    {% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Home_Z\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n{% else %}\n_KlickyDebug msg="_Home_Z_ XY Axis homed"\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="_Home_Z_ Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n\n\n_KlickyDebug msg="_Home_Z_ moving to Z endstop position G0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}"\nG0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}\n_KlickyDebug msg="_Home_Z_ Homing Z G28 Z"\nG28 Z0\n_KlickyDebug msg="_Home_Z_ toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_exit_point function=Home_Z', 'description': 'G-Code macro'}, 'gcode_macro _checkprobe': {'gcode': '\nQuery_Probe\n_SetProbeState action={ params.ACTION }', 'description': 'G-Code macro', 'variable_probe_state': '0'}, 'gcode_macro _setprobestate': {'gcode': '\n{% set query_probe_triggered = printer.probe.last_query %}\n{% set action  = params.ACTION|default(\'\') %}\n\n\n{% if query_probe_triggered %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ False }\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ True }\n{% endif %}\n\n{% if action == \'query\' %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_state VALUE={ query_probe_triggered }\n{% endif %}\n\n\n\n\n{% if not query_probe_triggered and action == \'dock\' %}\n{ action_raise_error("Probe dock failed!") }\n{% endif %}\n\n\n{% if query_probe_triggered and action == \'attach\' %}\n{ action_raise_error("Probe attach failed!") }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _park_toolhead': {'gcode': '\n{% set park_toolhead = printer["gcode_macro _User_Variables"].park_toolhead %}\n{% set parkposition_x = printer["gcode_macro _User_Variables"].parkposition_x %}\n{% set parkposition_y = printer["gcode_macro _User_Variables"].parkposition_y %}\n{% set parkposition_z = printer["gcode_macro _User_Variables"].parkposition_z %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Park_Toolhead\n\n{% if park_toolhead and \'xyz\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Parking Toolhead") }\n{% endif %}\n{% if parkposition_z == -128 %}\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}\n\n{% else %}\n\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}\n\n{% endif %}\n\n{% endif %}\n_exit_point function=Park_Toolhead', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_ready': {'gcode': '\n{% if printer[\'gcode_macro status_ready\'] is defined %}\n_KlickyDebug msg="_klicky_status_ready activating the LED STATUS_READY"\nSTATUS_READY\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_busy': {'gcode': '\n{% if printer[\'gcode_macro status_busy\'] is defined %}\n_KlickyDebug msg="_klicky_status_busy activating the LED STATUS_BUSY"\nSTATUS_BUSY\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_leveling': {'gcode': '\n{% if printer[\'gcode_macro status_leveling\'] is defined %}\n_KlickyDebug msg="_klicky_status_leveling activating the LED STATUS_LEVELING"\nSTATUS_LEVELING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_homing': {'gcode': '\n{% if printer[\'gcode_macro status_homing\'] is defined %}\n_KlickyDebug msg="_klicky_status_homing activating the LED STATUS_HOMING"\nSTATUS_HOMING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_cleaning': {'gcode': '\n{% if printer[\'gcode_macro status_cleaning\'] is defined %}\n_KlickyDebug msg="_klicky_status_cleaning activating the LED STATUS_CLEANING"\nSTATUS_CLEANING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_meshing': {'gcode': '\n{% if printer[\'gcode_macro status_meshing\'] is defined %}\n_KlickyDebug msg="_klicky_status_meshing activating the LED STATUS_MESHING"\nSTATUS_MESHING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_calibrating_z': {'gcode': '\n{% if printer[\'gcode_macro status_calibrating_z\'] is defined %}\n_KlickyDebug msg="_klicky_status_calibrating_z activating the LED STATUS_CALIBRATING_Z"\nSTATUS_CALIBRATING_Z\n{% endif %}', 'description': 'G-Code macro'}, 'z_calibration': {'switch_offset': 0.165, 'offset_margins': '-1.0,1.0', 'speed': 50.0, 'samples_result': 'none', 'probing_first_fast': False, 'nozzle_xy_position': '172, 301', 'switch_xy_position': '172, 275', 'bed_xy_position': '150, 150', 'start_gcode': 'Attach_Probe', 'before_switch_gcode': '', 'end_gcode': 'Dock_Probe'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': '^PG6', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'PG9', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 303.5, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PF11', 'dir_pin': '!PG3', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG5', 'endstop_pin': 'PG10', 'position_endstop': -0.855, 'position_min': -4.5, 'position_max': 290.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA0'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PF9', 'dir_pin': '!PF10', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG2'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF4', 'min_temp': 10.0, 'max_temp': 270.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 26.572, 'pid_ki': 2.036, 'pid_kd': 86.691, 'heater_pin': 'PA1', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PC13', 'pressure_advance': 0.05, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'PF0', 'rotation_distance': 21.9459674016, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 55.196, 'pid_ki': 2.091, 'pid_kd': 364.295, 'heater_pin': 'PA2', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'probe': {'z_offset': 0.0, 'deactivate_on_each_sample': True, 'activate_gcode': '', 'deactivate_gcode': '', 'pin': 'PG15', 'speed': 10.0, 'lift_speed': 10.0, 'x_offset': 0.0, 'y_offset': 25.0, 'samples': 5, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.006, 'samples_tolerance_retries': 6}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE5', 'fan_speed': 1.0}, 'controller_fan controller_fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD12', 'fan_speed': 1.0, 'idle_speed': 1.0, 'idle_timeout': 30, 'heater': ['heater_bed']}, 'heater_fan exhaust_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 5.0, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13', 'fan_speed': 1.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PD15', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 1.0, 'maximum_mcu_duration': 0.0, 'value': 1.0, 'shutdown_value': 0.0}, 'neopixel headlight': {'pin': 'PB0', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 0.0, 'initial_green': 0.2157, 'initial_blue': 1.0, 'initial_white': 0.0}, 'temperature_sensor chamber_temp': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF5', 'min_temp': 0.0, 'max_temp': 100.0, 'gcode_id': 'chamber_th'}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [150.0, 348.0], [350.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 5.0], [150.0, 245.0], [270.0, 5.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'gcode_macro _user_variables': {'gcode': '\n{% set Mx = printer[\'configfile\'].config["stepper_x"]["position_max"]|float %}\n{% set My = printer[\'configfile\'].config["stepper_y"]["position_max"]|float %}\n{% set Ox = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set Oy = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set Oz = printer[\'configfile\'].config["probe"]["z_offset"]|float %}\n\n\n{% if z_endstop_x != 0 or z_endstop_y != 0 %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ z_endstop_x }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ z_endstop_y }\n\n\n{% else %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ (Mx * 0.5) - Ox }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ (My * 0.5) - Oy }\n{% endif %}', 'description': 'G-Code macro', 'variable_verbose': 'True', 'variable_debug': 'False', 'variable_travel_speed': '200', 'variable_move_accel': '1000', 'variable_dock_speed': '50', 'variable_release_speed': '75', 'variable_z_drop_speed': '20', 'variable_safe_z': '25', 'variable_enable_z_hop': 'True', 'variable_max_bed_y': '300', 'variable_max_bed_x': '300', 'variable_z_endstop_x': '172', 'variable_z_endstop_y': '301', 'variable_docklocation_x': '42', 'variable_docklocation_y': '297', 'variable_docklocation_z': '-128', 'variable_enable_dock_servo': 'False', 'variable_servo_name': "'NAME'", 'variable_servo_deploy': '10', 'variable_servo_retract': '11', 'variable_servo_delay': '250', 'variable_dockmove_x': '40', 'variable_dockmove_y': '0', 'variable_dockmove_z': '0', 'variable_attachmove_x': '0', 'variable_attachmove_y': '30', 'variable_attachmove_z': '0', 'variable_umbilical': 'False', 'variable_umbilical_x': '15', 'variable_umbilical_y': '15', 'variable_park_toolhead': 'False', 'variable_parkposition_x': '125', 'variable_parkposition_y': '125', 'variable_parkposition_z': '30', 'variable_version': '1', 'variable_attachmove2_x': '0', 'variable_attachmove2_y': '0', 'variable_attachmove2_z': '0', 'variable_home_backoff_x': '10', 'variable_home_backoff_y': '10', 'variable_override_homing': "''", 'variable_dock_on_zhome': 'True'}, 'gcode_macro print_start': {'gcode': '\nM117 Homing...\nG28\nATTACH_PROBE\nZ_TILT_ADJUST\nDOCK_PROBE\nG28\n\n\n\n\n\n\n\nG0 X150 Y150 Z30 F3600', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1500.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-02-19 20:52:01,398 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-19 20:52:01,398 [printer.py:reinit()] - Klipper version: v0.12.0-103-g6ce6fbbc-dirty
2024-02-19 20:52:01,398 [printer.py:reinit()] - # Extruders: 1
2024-02-19 20:52:01,399 [printer.py:reinit()] - # Temperature devices: 2
2024-02-19 20:52:01,399 [printer.py:reinit()] - # Fans: 4
2024-02-19 20:52:01,399 [printer.py:reinit()] - # Output pins: 1
2024-02-19 20:52:01,399 [printer.py:reinit()] - # Leds: 1
2024-02-19 20:52:01,420 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2024-02-19 20:52:01,421 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-02-19 20:52:01,720 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor chamber_temp&fan&controller_fan controller_fan&heater_fan hotend_fan&heater_fan exhaust_fan&output_pin caselight&neopixel headlight
2024-02-19 20:52:01,723 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-02-19 20:52:01,723 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-02-19 20:52:01,724 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-02-19 20:52:01,724 [screen.py:init_klipper()] - Printer initialized
2024-02-19 20:52:01,724 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2024-02-19 20:52:01,724 [printer.py:change_state()] - Adding callback for state: ready
2024-02-19 20:52:01,728 [screen.py:show_panel()] - Reinitializing panel
2024-02-19 20:52:01,781 [main_menu.py:__init__()] - ### Making MainMenu
2024-02-19 20:52:01,786 [main_menu.py:add_device()] - Adding device: extruder
2024-02-19 20:52:01,791 [main_menu.py:add_device()] - Adding device: heater_bed
2024-02-19 20:52:01,796 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber_temp
2024-02-19 20:52:01,820 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-02-19 20:52:01,837 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-02-19 20:52:01,840 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'temperature_sensor chamber_temp', 'extruder']
2024-02-19 20:52:01,850 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2024-02-19 20:52:01,851 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-02-19 20:52:05,091 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_DEFINE"
2024-02-19 20:52:05,138 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2024-02-19 20:52:05,139 [printer.py:change_state()] - Adding callback for state: printing
2024-02-19 20:52:05,144 [screen.py:_load_panel()] - Loading panel: job_status
2024-02-19 20:52:05,261 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-02-19 20:52:05,266 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-02-19 20:52:05,275 [job_status.py:update_file_metadata()] - Update Metadata. File: Voron_Design_Cube_v7_PETG_35m47s.gcode Size: 2884279
2024-02-19 20:52:05,281 [job_status.py:show_file_thumbnail()] - Voron_Design_Cube_v7_PETG_35m47s.gcode
2024-02-19 21:03:20,836 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_START"
2024-02-19 21:03:25,796 [files.py:remove_file_callback()] - callback not found <bound method Panel._callback_metadata of <panels.job_status.Panel object at 0x7f58a7c580>>
2024-02-19 21:03:25,796 [screen.py:_load_panel()] - Loading panel: fine_tune
2024-02-19 21:03:25,888 [screen.py:attach_panel()] - Current panel hierarchy: job_status > fine_tune
2024-02-19 21:03:55,923 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=+0.05 MOVE=1'}
2024-02-19 21:04:00,355 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=+0.05 MOVE=1'}
2024-02-19 21:04:05,200 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-19 21:04:26,932 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-19 21:04:47,650 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-19 21:04:57,637 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-19 21:05:07,871 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-19 21:05:17,857 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-19 21:05:27,946 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-19 21:05:40,832 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-19 21:05:51,879 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-19 21:06:03,511 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-19 21:06:15,329 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-19 21:06:25,948 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-19 21:06:36,923 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-19 21:06:47,712 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-19 21:06:58,347 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-19 21:07:09,603 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-19 21:07:16,262 [screen.py:_menu_go_back()] - #### Menu go back
2024-02-19 21:07:16,295 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-02-19 21:07:16,308 [job_status.py:update_file_metadata()] - Update Metadata. File: Voron_Design_Cube_v7_PETG_35m47s.gcode Size: 2884279
2024-02-19 21:07:16,319 [job_status.py:show_file_thumbnail()] - Voron_Design_Cube_v7_PETG_35m47s.gcode
2024-02-19 21:07:20,794 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-19 21:07:33,062 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-19 21:07:35,379 [files.py:remove_file_callback()] - callback not found <bound method Panel._callback_metadata of <panels.job_status.Panel object at 0x7f58a7c580>>
2024-02-19 21:07:35,402 [screen.py:attach_panel()] - Current panel hierarchy: job_status > fine_tune
2024-02-19 21:07:37,850 [fine_tune.py:change_percent_delta()] - ### Delta 5
2024-02-19 21:07:38,431 [screen.py:_send_action()] - printer.gcode.script: {'script': 'M220 S95'}
2024-02-19 21:07:39,368 [screen.py:_send_action()] - printer.gcode.script: {'script': 'M220 S90'}
2024-02-19 21:07:45,313 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-19 21:07:57,690 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-19 21:08:10,574 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-19 21:08:22,628 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-19 21:08:34,539 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-19 21:08:47,044 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-19 21:08:58,854 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-19 21:09:10,282 [screen.py:_menu_go_back()] - #### Menu go back
2024-02-19 21:09:10,326 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-02-19 21:09:10,344 [job_status.py:update_file_metadata()] - Update Metadata. File: Voron_Design_Cube_v7_PETG_35m47s.gcode Size: 2884279
2024-02-19 21:09:10,356 [job_status.py:show_file_thumbnail()] - Voron_Design_Cube_v7_PETG_35m47s.gcode
2024-02-19 21:09:10,631 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-19 21:09:22,638 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-19 21:09:34,788 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-19 21:09:46,775 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-19 21:09:59,680 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-19 21:10:12,471 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-19 21:10:25,312 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-19 21:10:38,742 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-19 21:10:51,650 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-19 21:11:05,168 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-19 21:11:17,594 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-19 21:11:30,211 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-19 21:11:40,195 [KlippyGtk.py:Dialog()] - Showing dialog Cancel (width=800, height=480)
2024-02-19 21:11:41,230 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-02-19 21:11:41,230 [job_status.py:cancel_confirm()] - Canceling print
2024-02-19 21:11:41,232 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'cancelling'
2024-02-19 21:11:41,239 [KlippyWebsocket.py:print_cancel()] - Sending printer.print.cancel
2024-02-19 21:11:41,563 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2024-02-19 21:11:41,563 [printer.py:change_state()] - Adding callback for state: ready
2024-02-19 21:11:41,580 [job_status.py:set_state()] - Changing job_status state from 'cancelling' to 'cancelled'
2024-02-19 21:11:45,818 [job_status.py:close_panel()] - Closing job_status panel
2024-02-19 21:11:45,824 [files.py:remove_file_callback()] - callback not found <bound method Panel._callback_metadata of <panels.job_status.Panel object at 0x7f58a7c580>>
2024-02-19 21:11:45,825 [screen.py:show_panel()] - Reinitializing panel
2024-02-19 21:11:45,912 [main_menu.py:__init__()] - ### Making MainMenu
2024-02-19 21:11:45,917 [main_menu.py:add_device()] - Adding device: extruder
2024-02-19 21:11:45,922 [main_menu.py:add_device()] - Adding device: heater_bed
2024-02-19 21:11:45,927 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber_temp
2024-02-19 21:11:45,952 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-02-19 21:11:46,878 [screen.py:show_panel()] - Reinitializing panel
2024-02-19 21:11:46,936 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-02-19 21:11:47,167 [KlippyGtk.py:remove_dialog()] - Cannot remove dialog <Gtk.Dialog object at 0x7f580311c0 (GtkDialog at 0x16ff9680)>
2024-02-19 21:11:47,179 [KlippyGtk.py:Dialog()] - Showing dialog KlipperScreen (width=800, height=480)
2024-02-19 21:11:49,695 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-02-19 21:11:52,810 [KlippyGtk.py:remove_dialog()] - Cannot remove dialog <Gtk.Dialog object at 0x7f800e7b40 (GtkDialog at 0x16fd70c0)>
2024-02-19 21:11:52,834 [KlippyGtk.py:Dialog()] - Showing dialog KlipperScreen (width=800, height=480)
2024-02-19 21:11:53,469 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-02-19 21:11:53,469 [screen.py:_send_action()] - printer.gcode.script: {'script': 'M18'}
2024-02-19 21:13:46,634 [screen.py:_menu_go_back()] - #### Menu go back
2024-02-19 21:13:46,669 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-02-19 20:48:59,780 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-02-19 20:48:59,781 [functions.py:log_start()] - KlipperScreen Version: v0.3.8-89-g2a5e9b3
2024-02-19 20:48:59,781 [functions.py:log_start()] - Python version: 3.9
2024-02-19 20:48:59,931 [config.py:get_config_file_location()] - Passed config (-c): .
2024-02-19 20:48:59,931 [config.py:__init__()] - Config path location: /home/pi/printer_data/config/KlipperScreen.conf
2024-02-19 20:48:59,942 [config.py:log_config()] -  ===== Config File =====

=======================
2024-02-19 20:48:59,943 [config.py:__init__()] - ====== Saved Def ======

[graph Printer]
heater_bed = False
extruder = False

=======================
2024-02-19 20:48:59,944 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-02-19 20:49:00,046 [config.py:create_translations()] - Selected lang: None OS lang: en_GB
2024-02-19 20:49:00,047 [config.py:install_language()] - Using lang en
2024-02-19 20:49:00,066 [screen.py:__init__()] - Screen resolution: 800x480
2024-02-19 20:49:00,067 [KlippyGtk.py:__init__()] - Font size: 16.6 (medium)
2024-02-19 20:49:00,538 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2024-02-19 20:49:00,546 [screen.py:set_screenblanking_timeout()] - Using DPMS
2024-02-19 20:49:00,552 [screen.py:initial_connection()] - Default printer: None
2024-02-19 20:49:00,582 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-02-19 20:49:00,582 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-02-19 20:49:00,619 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-02-19 20:49:00,625 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-02-19 20:49:00,639 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-19 20:49:00,650 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/access/oneshot_token
2024-02-19 20:49:00,651 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-02-19 20:49:00,660 [_logging.py:info()] - Websocket connected
2024-02-19 20:49:00,660 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-02-19 20:49:00,690 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-19 20:49:00,698 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2024-02-19 20:49:00,699 [printer.py:configure_cameras()] - Cameras: []
2024-02-19 20:49:00,699 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'update_manager', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-310-g67c98f6', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-02-19 20:49:00,716 [KlippyRest.py:_do_request()] - 404 Client Error>>Not Found for url>>http://127.0.0.1:7125/printer/info
2024-02-19 20:49:03,710 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-19 20:49:03,717 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2024-02-19 20:49:03,718 [printer.py:configure_cameras()] - Cameras: []
2024-02-19 20:49:03,718 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'update_manager', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-310-g67c98f6', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-02-19 20:49:03,727 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2024-02-19 20:49:03,751 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2024-02-19 20:49:03,753 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro _Probe_Variables': {'variable_probe_attached': 'False', 'variable_probe_state': 'False', 'variable_probe_lock': 'False', 'variable_probe_z_homed': 'False', 'variable_z_endstop_x': '0', 'variable_z_endstop_y': '0', 'gcode': ''}, 'gcode_macro _klicky_check_variables_version': {'gcode': '\n{% set version = printer["gcode_macro _User_Variables"].version|default(0) %}\n\n{% if version != 1 %}\n{ action_raise_error("Please update your klicky variables, there are some functionality changes") }\n{% endif %}'}, 'gcode_macro _KlickyDebug': {'gcode': '\n{% set message  = params.MSG %}\n{% set debug = printer["gcode_macro _User_Variables"].debug|default(False) %}\n\n{% if debug %}\n{ action_respond_info(message) }\n{% endif %}'}, 'gcode_macro _exit_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move  = params.MOVE|default(0) %}\n{% set speed = printer["gcode_macro _User_Variables"].travel_speed %}\n\n\nM400\nSET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\nRESTORE_GCODE_STATE NAME={function} MOVE={move} MOVE_SPEED={speed}'}, 'gcode_macro _entry_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move_accel = printer["gcode_macro _User_Variables"].move_accel|default(1000) %}\n\nM400\nSAVE_GCODE_STATE NAME={function}\n\nSET_GCODE_OFFSET Z=0\n\nG90\n\nSET_VELOCITY_LIMIT ACCEL={move_accel}'}, 'gcode_macro _Homing_Variables': {'gcode': '\n{% set reset  = params.RESET|default(0) %}\n{% if reset %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }\n{% endif %}'}, 'gcode_macro Attach_Probe_Lock': {'description': 'Attaches Klicky Probe, can only be docked after unlocking', 'gcode': '\nAttach_Probe\n_Probe_Lock'}, 'gcode_macro Dock_Probe_Unlock': {'description': 'Docks Klicky Probe even if it was locked', 'gcode': '\n_Probe_Unlock\nDock_Probe'}, 'gcode_macro _Probe_Unlock': {'description': 'Unlocks Klicky Probe state', 'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to False"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }'}, 'gcode_macro _Probe_Lock': {'description': 'Locks Klicky Probe state', 'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to True"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ True }'}, 'gcode_macro _DeployKlickyDock': {'description': 'Deploys Klicky servo-controlled dock', 'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_deploy = printer["gcode_macro _User_Variables"].servo_deploy|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_DeployKlickyDock Klicky servo configuration enabled"\n{% if servo_deploy == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo deploy angle specified") }\n{% endif %}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _DeployDock"] is defined %}\n_KlickyDebug msg="_DeployKlickyDock calling _DeployDock"\n_DeployDock\n{% endif %}'}, 'gcode_macro _RetractKlickyDock': {'description': 'Retracts Klicky servo-controlled dock', 'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_retract = printer["gcode_macro _User_Variables"].servo_retract|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_RetractKlickyDock Klicky servo configuration enabled"\n{% if servo_retract == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo retract angle specified") }\n{% endif %}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _RetractDock"] is defined %}\n_KlickyDebug msg="_RetractKlickyDock calling _RetractDock"\n_RetractDock\n{% endif %}'}, 'gcode_macro Attach_Probe': {'description': 'Attaches Klicky Probe', 'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set attachmove2_x = printer["gcode_macro _User_Variables"].attachmove2_x|default(0) %}\n{% set attachmove2_y = printer["gcode_macro _User_Variables"].attachmove2_y|default(0) %}\n{% set attachmove2_z = printer["gcode_macro _User_Variables"].attachmove2_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n_entry_point function=Attach_Probe\n\n{% if bypass_probe_docking == False %}\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n_KlickyDebug msg="Attach_Probe Axis homed"\n\n\n{% elif not probe_attached and not probe_lock %}\n_KlickyDebug msg="Attach_Probe going to attach probe"\n{% if verbose %}\n{ action_respond_info("Attaching Probe") }\n{% endif %}\n_KLICKY_STATUS_BUSY\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% if not enable_z_hop %}\n_KlickyDebug msg="Attach_Probe z_hop disabled"\n{% set safe_z = 0 %}\n{% endif %}\n{% endif %}\n\n\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero, duplicate?") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Umbilical_Path\n\n_entry_point function=Attach_Probe_intern\n\n\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n_DeployKlickyDock\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}"\nG0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}\n\n_RetractKlickyDock\n\n{% if ((printer.gcode_move.gcode_position.z < safe_z) or (docklocation_z != -128 and docklocation_z < safe_z ))%}\n_KlickyDebug msg="Attach_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\n_CheckProbe action=attach\n\n_exit_point function=Attach_Probe_intern move={goback}\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe locked not attaching probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already attached!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe already attached, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Attach_Probe\n{% else %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}'}, 'gcode_macro Dock_Probe': {'description': 'Docks Klicky Probe', 'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n{% if bypass_probe_docking == True %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}\n\n{% if bypass_probe_docking != True %}\n_entry_point function=Dock_Probe\n\n\n{% if probe_attached and not probe_lock %}\n_KLICKY_STATUS_BUSY\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Dock_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n_Umbilical_Path\n\n\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n\n_DeployKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\n\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}"\nG0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}\n{% endif %}\n\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}\n\n\n_RetractKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving away from the dock to G0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}\n\n\n{% if (printer.gcode_move.gcode_position.z < safe_z) %}\n_KlickyDebug msg="Dock_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\nG4 P1000\n_CheckProbe action=dock\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe locked not docking probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already docked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe already docked, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Dock_Probe move={goback}\n{% else %}\n_KlickyDebug msg="Dock_Probe probe docking bypassed, doing nothing"\n{% endif %}'}, 'gcode_macro PROBE_CALIBRATE': {'rename_existing': '_PROBE_CALIBRATE', 'description': 'Calibrate the probes z_offset with klicky automount', 'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_calibrate Axis homed"\n_KlickyDebug msg="probe_calibrate Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_CALIBRATE with the probe above the BED, check klicky_variables bed size!") }\n{% endif %}\n\n{% if bypass_probe_docking == False %}\n_CheckProbe action=query\nG90\nAttach_Probe back=1\n_KLICKY_STATUS_CALIBRATING_Z\n\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nM118 moving the toolhead 20 mm from the bed\n_KlickyDebug msg="probe_calibrate Moving Z up by 20mm"\nTESTZ Z=20\nM118 remove manually the probe and continue calibration\n_KLICKY_STATUS_READY\n{% else %}\n_KLICKY_STATUS_CALIBRATING_Z\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n_KLICKY_STATUS_READY\n{% endif %}'}, 'gcode_macro PROBE_ACCURACY': {'rename_existing': '_PROBE_ACCURACY', 'description': 'Probe Z-height accuracy at current XY position with klicky automount', 'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_accuracy Axis homed"\n_KlickyDebug msg="probe_accuracy Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n_entry_point function=PROBE_ACCURACY\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_ACCURACY with the probe above the BED, check klicky_variables bed size!") }\n{% endif%}\n\n_CheckProbe action=query\nAttach_Probe back=1\n\n_KlickyDebug msg="probe_accuracy calling klipper probe accuracy"\n_PROBE_ACCURACY {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nDock_Probe back=1\n\n_exit_point function=PROBE_ACCURACY move=1'}, 'force_move': {'enable_force_move': 'True'}, 'homing_override': {'axes': 'xyz', 'gcode': '\n\n_User_Variables\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n{% set kinematic_z = 0 %}\n{% set dock_on_zhome = printer["gcode_macro _User_Variables"].dock_on_zhome|default(True) %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set home_backoff_x = printer["gcode_macro _User_Variables"].home_backoff_x|default(0) %}\n{% set home_backoff_y = printer["gcode_macro _User_Variables"].home_backoff_y|default(0) %}\n{% set override_homing = printer["gcode_macro _User_Variables"].override_homing|default(\'\') %}\n\n\n_klicky_check_variables_version\n\n_CheckProbe action=query\n\n\n{% set home_x, home_y, home_z, leave_probe_attached = False, False, False, False %}\n\n{% if \'PROBE_LOCK\' in params%}\n{% if verbose %}\n{ action_respond_info("PROBE_LOCK = True") }\n{% endif %}\n{% set leave_probe_attached = True %}\n{% endif %}\n\n\n{% if not \'X\' in params\nand not \'Y\' in params\nand not \'Z\' in params %}\n\n{% set home_x, home_y, home_z = True, True, True %}\n_KlickyDebug msg="homing_override goint to home all axes"\n\n{% else %}\n{% if \'X\' in params %}\n{% set home_x = True %}\n_KlickyDebug msg="homing_override goint to home X"\n\n{% endif %}\n\n{% if \'Y\' in params %}\n{% set home_y = True %}\n_KlickyDebug msg="homing_override goint to home Y"\n{% endif %}\n\n{% if \'Z\' in params %}\n{% set home_z = True %}\n_KlickyDebug msg="homing_override goint to home Z"\n{% endif %}\n\n{% if \'X\' in params\nand \'Y\' in params\nand \'Z\' in params %}\n\n\n_Homing_Variables reset=1\n_KlickyDebug msg="homing_override goint to home all axes"\n{% endif %}\n\n{% endif %}\n\n_entry_point function=homing_override\n_KLICKY_STATUS_HOMING\n\n\n{% if \'z\' not in printer.toolhead.homed_axes %}\n{% if enable_z_hop == False %}\n_KlickyDebug msg="homing_override z_hop disabled"\n\n{% set kinematic_z = safe_z %}\n{% set safe_z = safe_z %}\n{% endif %}\n{% endif %}\n\n\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes and \'z\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("No axis homed") }\n{% endif %}\n_KlickyDebug msg="homing_override no axis homed, setting position as X=Y=0 Z={kinematic_z}"\nSET_KINEMATIC_POSITION X=0 Y=0 Z={kinematic_z}\nM400\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% if home_z != True %}\n_KlickyDebug msg="homing_override clearing axis homed state if not already homing Z"\nM84\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("X or Y not homed, forcing full G28") }\n{% endif %}\n{% set home_x, home_y, home_z = True, True, True %}\n{% endif %}\n{% endif %}\n\n\n{% if ((attachmove_y == 0 and override_homing == \'\' ) or (override_homing == \'Y\'))%}\n\n{% if home_y %}\n{% if override_homing == \'Y\' %}\n_KlickyDebug msg="homing_override Y homing first override, due to override_homing = Y"\n{% else %}\n_KlickyDebug msg="homing_override Y homing first override, due to attachmove_y = 0"\n{% endif %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y G28 Y0"\nG28 Y0\n\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop-home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n{% set home_y = False %}\n{% endif %}\n\n\n\n{% if home_x %}\n{% if verbose %}\n{ action_respond_info("Homing X") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in X homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_X"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_X external script to handle the X homing"\n_HOME_X\n{% else %}\n_KlickyDebug msg="homing_override Homing X, G28 X0"\nG28 X0\n\n{% if home_backoff_x != 0 %}\n{% if (printer.configfile.settings.stepper_x.position_endstop > (printer.configfile.settings.stepper_x.position_min|default(0) + printer.configfile.settings.stepper_x.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n\n{% if home_y %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y, G28 Y0"\nG28 Y0\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if verbose %}\n{ action_respond_info("Homing Z") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe configured as a virtual Z endstop attaching probe"\nAttach_Probe\n\n{% if leave_probe_attached %}\n_Probe_Lock\n{% endif %}\n{% elif dock_on_zhome == True %}\nDock_Probe\n{% endif %}\n\n_Home_Z_\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe no longer required, docking probe"\nDock_Probe\n{% elif dock_on_zhome == False %}\nDock_Probe\n{% endif %}\n{% endif %}\n_CheckProbe action=query\n\n\n_Park_Toolhead\n\n_exit_point function=homing_override\n_KLICKY_STATUS_READY'}, 'gcode_macro _Umbilical_Path': {'gcode': '\n{% set umbilical = printer["gcode_macro _User_Variables"].umbilical %}\n{% set umbilical_x = printer["gcode_macro _User_Variables"].umbilical_x %}\n{% set umbilical_y = printer["gcode_macro _User_Variables"].umbilical_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n\n{% if umbilical %}\n\n_entry_point function=Umbilical_Path\n\n_KlickyDebug msg="_Umbilical_Path moving to G0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}"\nG0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}\n\n_exit_point function=Umbilical_Path\n{% endif %}'}, 'gcode_macro _Home_Z_': {'gcode': '\n{% set z_endstop_x = printer["gcode_macro _Probe_Variables"].z_endstop_x %}\n{% set z_endstop_y = printer["gcode_macro _Probe_Variables"].z_endstop_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}    {% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Home_Z\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n{% else %}\n_KlickyDebug msg="_Home_Z_ XY Axis homed"\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="_Home_Z_ Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n\n\n_KlickyDebug msg="_Home_Z_ moving to Z endstop position G0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}"\nG0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}\n_KlickyDebug msg="_Home_Z_ Homing Z G28 Z"\nG28 Z0\n_KlickyDebug msg="_Home_Z_ toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_exit_point function=Home_Z'}, 'gcode_macro _CheckProbe': {'variable_probe_state': '0', 'gcode': '\nQuery_Probe\n_SetProbeState action={ params.ACTION }'}, 'gcode_macro _SetProbeState': {'gcode': '\n{% set query_probe_triggered = printer.probe.last_query %}\n{% set action  = params.ACTION|default(\'\') %}\n\n\n{% if query_probe_triggered %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ False }\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ True }\n{% endif %}\n\n{% if action == \'query\' %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_state VALUE={ query_probe_triggered }\n{% endif %}\n\n\n\n\n{% if not query_probe_triggered and action == \'dock\' %}\n{ action_raise_error("Probe dock failed!") }\n{% endif %}\n\n\n{% if query_probe_triggered and action == \'attach\' %}\n{ action_raise_error("Probe attach failed!") }\n{% endif %}'}, 'gcode_macro _Park_Toolhead': {'gcode': '\n{% set park_toolhead = printer["gcode_macro _User_Variables"].park_toolhead %}\n{% set parkposition_x = printer["gcode_macro _User_Variables"].parkposition_x %}\n{% set parkposition_y = printer["gcode_macro _User_Variables"].parkposition_y %}\n{% set parkposition_z = printer["gcode_macro _User_Variables"].parkposition_z %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Park_Toolhead\n\n{% if park_toolhead and \'xyz\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Parking Toolhead") }\n{% endif %}\n{% if parkposition_z == -128 %}\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}\n\n{% else %}\n\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}\n\n{% endif %}\n\n{% endif %}\n_exit_point function=Park_Toolhead'}, 'gcode_macro _klicky_status_ready': {'gcode': '\n{% if printer[\'gcode_macro status_ready\'] is defined %}\n_KlickyDebug msg="_klicky_status_ready activating the LED STATUS_READY"\nSTATUS_READY\n{% endif %}'}, 'gcode_macro _klicky_status_busy': {'gcode': '\n{% if printer[\'gcode_macro status_busy\'] is defined %}\n_KlickyDebug msg="_klicky_status_busy activating the LED STATUS_BUSY"\nSTATUS_BUSY\n{% endif %}'}, 'gcode_macro _klicky_status_leveling': {'gcode': '\n{% if printer[\'gcode_macro status_leveling\'] is defined %}\n_KlickyDebug msg="_klicky_status_leveling activating the LED STATUS_LEVELING"\nSTATUS_LEVELING\n{% endif %}'}, 'gcode_macro _klicky_status_homing': {'gcode': '\n{% if printer[\'gcode_macro status_homing\'] is defined %}\n_KlickyDebug msg="_klicky_status_homing activating the LED STATUS_HOMING"\nSTATUS_HOMING\n{% endif %}'}, 'gcode_macro _klicky_status_cleaning': {'gcode': '\n{% if printer[\'gcode_macro status_cleaning\'] is defined %}\n_KlickyDebug msg="_klicky_status_cleaning activating the LED STATUS_CLEANING"\nSTATUS_CLEANING\n{% endif %}'}, 'gcode_macro _klicky_status_meshing': {'gcode': '\n{% if printer[\'gcode_macro status_meshing\'] is defined %}\n_KlickyDebug msg="_klicky_status_meshing activating the LED STATUS_MESHING"\nSTATUS_MESHING\n{% endif %}'}, 'gcode_macro _klicky_status_calibrating_z': {'gcode': '\n{% if printer[\'gcode_macro status_calibrating_z\'] is defined %}\n_KlickyDebug msg="_klicky_status_calibrating_z activating the LED STATUS_CALIBRATING_Z"\nSTATUS_CALIBRATING_Z\n{% endif %}'}, 'z_calibration': {'nozzle_xy_position': '172, 301', 'switch_xy_position': '172, 275', 'bed_xy_position': '150, 150', 'switch_offset': '0.065', 'offset_margins': '-1.0,1.0', 'speed': '50', 'probing_first_fast': 'false', 'start_gcode': 'Attach_Probe', 'end_gcode': 'Dock_Probe'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_28003C001150535556323420-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '^PG6', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '25', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'PG9', 'position_min': '0', 'position_endstop': '300', 'position_max': '303.5', 'homing_speed': '25', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': '!PG3', 'enable_pin': '!PG5', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'PG10', 'position_max': '290', 'position_min': '-4.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3', 'position_endstop': '-0.855'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA0', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': '!PF10', 'enable_pin': '!PG2', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PC13', 'dir_pin': 'PF0', 'enable_pin': '!PF1', 'rotation_distance': '21.9459674016', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.75', 'heater_pin': 'PA1', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF4', 'min_temp': '10', 'max_temp': '270', 'max_power': '1.0', 'min_extrude_temp': '170', 'pressure_advance': '0.05', 'pressure_advance_smooth_time': '0.040', 'control': 'pid', 'pid_kp': '26.572', 'pid_ki': '2.036', 'pid_kd': '86.691'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.5', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PA2', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF3', 'max_power': '1', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '55.196', 'pid_ki': '2.091', 'pid_kd': '364.295'}, 'probe': {'pin': 'PG15', 'x_offset': '0', 'y_offset': '25.0', 'z_offset': '0', 'speed': '10.0', 'samples': '5', 'samples_result': 'median', 'sample_retract_dist': '3.0', 'samples_tolerance': '0.006', 'samples_tolerance_retries': '6'}, 'fan': {'pin': 'PA8', 'kick_start_time': '0.5', 'off_below': '0.10'}, 'heater_fan hotend_fan': {'pin': 'PE5', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'controller_fan controller_fan': {'pin': 'PD12', 'kick_start_time': '0.5', 'heater': 'heater_bed'}, 'heater_fan exhaust_fan': {'pin': 'PD13', 'max_power': '1.0', 'shutdown_speed': '0.0', 'kick_start_time': '5.0', 'heater': 'heater_bed', 'heater_temp': '60', 'fan_speed': '1.0'}, 'output_pin caselight': {'pin': 'PD15', 'pwm': 'true', 'shutdown_value': '0', 'value': '1', 'cycle_time': '0.01'}, 'neopixel headlight': {'pin': 'PB0', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '0.0', 'initial_green': '0.2157', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'temperature_sensor chamber_temp': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF5', 'min_temp': '0', 'max_temp': '100', 'gcode_id': 'chamber_th'}, 'idle_timeout': {'timeout': '1800'}, 'z_tilt': {'z_positions': '\n-50, 18\n150, 348\n350, 18', 'points': '\n30, 5\n150, 245\n270, 5', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'gcode_macro _User_Variables': {'variable_verbose': 'True', 'variable_debug': 'False', 'variable_travel_speed': '200', 'variable_move_accel': '1000', 'variable_dock_speed': '50', 'variable_release_speed': '75', 'variable_z_drop_speed': '20', 'variable_safe_z': '25', 'variable_enable_z_hop': 'True', 'variable_max_bed_y': '300', 'variable_max_bed_x': '300', 'variable_z_endstop_x': '172', 'variable_z_endstop_y': '301', 'variable_docklocation_x': '42', 'variable_docklocation_y': '297', 'variable_docklocation_z': '-128', 'variable_enable_dock_servo': 'False', 'variable_servo_name': "'NAME'", 'variable_servo_deploy': '10', 'variable_servo_retract': '11', 'variable_servo_delay': '250', 'variable_dockmove_x': '40', 'variable_dockmove_y': '0', 'variable_dockmove_z': '0', 'variable_attachmove_x': '0', 'variable_attachmove_y': '30', 'variable_attachmove_z': '0', 'variable_umbilical': 'False', 'variable_umbilical_x': '15', 'variable_umbilical_y': '15', 'variable_park_toolhead': 'False', 'variable_parkposition_x': '125', 'variable_parkposition_y': '125', 'variable_parkposition_z': '30', 'variable_version': '1', 'variable_attachmove2_x': '0', 'variable_attachmove2_y': '0', 'variable_attachmove2_z': '0', 'variable_home_backoff_x': '10', 'variable_home_backoff_y': '10', 'variable_override_homing': "''", 'variable_dock_on_zhome': 'True', 'gcode': '\n{% set Mx = printer[\'configfile\'].config["stepper_x"]["position_max"]|float %}\n{% set My = printer[\'configfile\'].config["stepper_y"]["position_max"]|float %}\n{% set Ox = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set Oy = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set Oz = printer[\'configfile\'].config["probe"]["z_offset"]|float %}\n\n\n{% if z_endstop_x != 0 or z_endstop_y != 0 %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ z_endstop_x }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ z_endstop_y }\n\n\n{% else %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ (Mx * 0.5) - Ox }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ (My * 0.5) - Oy }\n{% endif %}'}, 'gcode_macro PRINT_START': {'gcode': '\nM117 Homing...\nG28\nATTACH_PROBE\nZ_TILT_ADJUST\nDOCK_PROBE\nG28\n\n\n\n\n\n\n\nG0 X150 Y150 Z30 F3600'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_28003C001150535556323420-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro _probe_variables': {'gcode': '', 'description': 'G-Code macro', 'variable_probe_attached': 'False', 'variable_probe_state': 'False', 'variable_probe_lock': 'False', 'variable_probe_z_homed': 'False', 'variable_z_endstop_x': '0', 'variable_z_endstop_y': '0'}, 'gcode_macro _klicky_check_variables_version': {'gcode': '\n{% set version = printer["gcode_macro _User_Variables"].version|default(0) %}\n\n{% if version != 1 %}\n{ action_raise_error("Please update your klicky variables, there are some functionality changes") }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klickydebug': {'gcode': '\n{% set message  = params.MSG %}\n{% set debug = printer["gcode_macro _User_Variables"].debug|default(False) %}\n\n{% if debug %}\n{ action_respond_info(message) }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _exit_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move  = params.MOVE|default(0) %}\n{% set speed = printer["gcode_macro _User_Variables"].travel_speed %}\n\n\nM400\nSET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\nRESTORE_GCODE_STATE NAME={function} MOVE={move} MOVE_SPEED={speed}', 'description': 'G-Code macro'}, 'gcode_macro _entry_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move_accel = printer["gcode_macro _User_Variables"].move_accel|default(1000) %}\n\nM400\nSAVE_GCODE_STATE NAME={function}\n\nSET_GCODE_OFFSET Z=0\n\nG90\n\nSET_VELOCITY_LIMIT ACCEL={move_accel}', 'description': 'G-Code macro'}, 'gcode_macro _homing_variables': {'gcode': '\n{% set reset  = params.RESET|default(0) %}\n{% if reset %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro attach_probe_lock': {'gcode': '\nAttach_Probe\n_Probe_Lock', 'description': 'Attaches Klicky Probe, can only be docked after unlocking'}, 'gcode_macro dock_probe_unlock': {'gcode': '\n_Probe_Unlock\nDock_Probe', 'description': 'Docks Klicky Probe even if it was locked'}, 'gcode_macro _probe_unlock': {'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to False"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }', 'description': 'Unlocks Klicky Probe state'}, 'gcode_macro _probe_lock': {'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to True"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ True }', 'description': 'Locks Klicky Probe state'}, 'gcode_macro _deployklickydock': {'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_deploy = printer["gcode_macro _User_Variables"].servo_deploy|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_DeployKlickyDock Klicky servo configuration enabled"\n{% if servo_deploy == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo deploy angle specified") }\n{% endif %}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _DeployDock"] is defined %}\n_KlickyDebug msg="_DeployKlickyDock calling _DeployDock"\n_DeployDock\n{% endif %}', 'description': 'Deploys Klicky servo-controlled dock'}, 'gcode_macro _retractklickydock': {'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_retract = printer["gcode_macro _User_Variables"].servo_retract|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_RetractKlickyDock Klicky servo configuration enabled"\n{% if servo_retract == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo retract angle specified") }\n{% endif %}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _RetractDock"] is defined %}\n_KlickyDebug msg="_RetractKlickyDock calling _RetractDock"\n_RetractDock\n{% endif %}', 'description': 'Retracts Klicky servo-controlled dock'}, 'gcode_macro attach_probe': {'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set attachmove2_x = printer["gcode_macro _User_Variables"].attachmove2_x|default(0) %}\n{% set attachmove2_y = printer["gcode_macro _User_Variables"].attachmove2_y|default(0) %}\n{% set attachmove2_z = printer["gcode_macro _User_Variables"].attachmove2_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n_entry_point function=Attach_Probe\n\n{% if bypass_probe_docking == False %}\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n_KlickyDebug msg="Attach_Probe Axis homed"\n\n\n{% elif not probe_attached and not probe_lock %}\n_KlickyDebug msg="Attach_Probe going to attach probe"\n{% if verbose %}\n{ action_respond_info("Attaching Probe") }\n{% endif %}\n_KLICKY_STATUS_BUSY\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% if not enable_z_hop %}\n_KlickyDebug msg="Attach_Probe z_hop disabled"\n{% set safe_z = 0 %}\n{% endif %}\n{% endif %}\n\n\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero, duplicate?") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Umbilical_Path\n\n_entry_point function=Attach_Probe_intern\n\n\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n_DeployKlickyDock\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}"\nG0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}\n\n_RetractKlickyDock\n\n{% if ((printer.gcode_move.gcode_position.z < safe_z) or (docklocation_z != -128 and docklocation_z < safe_z ))%}\n_KlickyDebug msg="Attach_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\n_CheckProbe action=attach\n\n_exit_point function=Attach_Probe_intern move={goback}\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe locked not attaching probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already attached!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe already attached, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Attach_Probe\n{% else %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}', 'description': 'Attaches Klicky Probe'}, 'gcode_macro dock_probe': {'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n{% if bypass_probe_docking == True %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}\n\n{% if bypass_probe_docking != True %}\n_entry_point function=Dock_Probe\n\n\n{% if probe_attached and not probe_lock %}\n_KLICKY_STATUS_BUSY\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Dock_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n_Umbilical_Path\n\n\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n\n_DeployKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\n\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}"\nG0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}\n{% endif %}\n\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}\n\n\n_RetractKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving away from the dock to G0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}\n\n\n{% if (printer.gcode_move.gcode_position.z < safe_z) %}\n_KlickyDebug msg="Dock_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\nG4 P1000\n_CheckProbe action=dock\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe locked not docking probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already docked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe already docked, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Dock_Probe move={goback}\n{% else %}\n_KlickyDebug msg="Dock_Probe probe docking bypassed, doing nothing"\n{% endif %}', 'description': 'Docks Klicky Probe'}, 'gcode_macro probe_calibrate': {'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_calibrate Axis homed"\n_KlickyDebug msg="probe_calibrate Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_CALIBRATE with the probe above the BED, check klicky_variables bed size!") }\n{% endif %}\n\n{% if bypass_probe_docking == False %}\n_CheckProbe action=query\nG90\nAttach_Probe back=1\n_KLICKY_STATUS_CALIBRATING_Z\n\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nM118 moving the toolhead 20 mm from the bed\n_KlickyDebug msg="probe_calibrate Moving Z up by 20mm"\nTESTZ Z=20\nM118 remove manually the probe and continue calibration\n_KLICKY_STATUS_READY\n{% else %}\n_KLICKY_STATUS_CALIBRATING_Z\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n_KLICKY_STATUS_READY\n{% endif %}', 'rename_existing': '_PROBE_CALIBRATE', 'description': 'Calibrate the probes z_offset with klicky automount'}, 'gcode_macro probe_accuracy': {'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_accuracy Axis homed"\n_KlickyDebug msg="probe_accuracy Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n_entry_point function=PROBE_ACCURACY\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_ACCURACY with the probe above the BED, check klicky_variables bed size!") }\n{% endif%}\n\n_CheckProbe action=query\nAttach_Probe back=1\n\n_KlickyDebug msg="probe_accuracy calling klipper probe accuracy"\n_PROBE_ACCURACY {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nDock_Probe back=1\n\n_exit_point function=PROBE_ACCURACY move=1', 'rename_existing': '_PROBE_ACCURACY', 'description': 'Probe Z-height accuracy at current XY position with klicky automount'}, 'force_move': {'enable_force_move': True}, 'homing_override': {'axes': 'xyz', 'gcode': '\n\n_User_Variables\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n{% set kinematic_z = 0 %}\n{% set dock_on_zhome = printer["gcode_macro _User_Variables"].dock_on_zhome|default(True) %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set home_backoff_x = printer["gcode_macro _User_Variables"].home_backoff_x|default(0) %}\n{% set home_backoff_y = printer["gcode_macro _User_Variables"].home_backoff_y|default(0) %}\n{% set override_homing = printer["gcode_macro _User_Variables"].override_homing|default(\'\') %}\n\n\n_klicky_check_variables_version\n\n_CheckProbe action=query\n\n\n{% set home_x, home_y, home_z, leave_probe_attached = False, False, False, False %}\n\n{% if \'PROBE_LOCK\' in params%}\n{% if verbose %}\n{ action_respond_info("PROBE_LOCK = True") }\n{% endif %}\n{% set leave_probe_attached = True %}\n{% endif %}\n\n\n{% if not \'X\' in params\nand not \'Y\' in params\nand not \'Z\' in params %}\n\n{% set home_x, home_y, home_z = True, True, True %}\n_KlickyDebug msg="homing_override goint to home all axes"\n\n{% else %}\n{% if \'X\' in params %}\n{% set home_x = True %}\n_KlickyDebug msg="homing_override goint to home X"\n\n{% endif %}\n\n{% if \'Y\' in params %}\n{% set home_y = True %}\n_KlickyDebug msg="homing_override goint to home Y"\n{% endif %}\n\n{% if \'Z\' in params %}\n{% set home_z = True %}\n_KlickyDebug msg="homing_override goint to home Z"\n{% endif %}\n\n{% if \'X\' in params\nand \'Y\' in params\nand \'Z\' in params %}\n\n\n_Homing_Variables reset=1\n_KlickyDebug msg="homing_override goint to home all axes"\n{% endif %}\n\n{% endif %}\n\n_entry_point function=homing_override\n_KLICKY_STATUS_HOMING\n\n\n{% if \'z\' not in printer.toolhead.homed_axes %}\n{% if enable_z_hop == False %}\n_KlickyDebug msg="homing_override z_hop disabled"\n\n{% set kinematic_z = safe_z %}\n{% set safe_z = safe_z %}\n{% endif %}\n{% endif %}\n\n\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes and \'z\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("No axis homed") }\n{% endif %}\n_KlickyDebug msg="homing_override no axis homed, setting position as X=Y=0 Z={kinematic_z}"\nSET_KINEMATIC_POSITION X=0 Y=0 Z={kinematic_z}\nM400\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% if home_z != True %}\n_KlickyDebug msg="homing_override clearing axis homed state if not already homing Z"\nM84\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("X or Y not homed, forcing full G28") }\n{% endif %}\n{% set home_x, home_y, home_z = True, True, True %}\n{% endif %}\n{% endif %}\n\n\n{% if ((attachmove_y == 0 and override_homing == \'\' ) or (override_homing == \'Y\'))%}\n\n{% if home_y %}\n{% if override_homing == \'Y\' %}\n_KlickyDebug msg="homing_override Y homing first override, due to override_homing = Y"\n{% else %}\n_KlickyDebug msg="homing_override Y homing first override, due to attachmove_y = 0"\n{% endif %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y G28 Y0"\nG28 Y0\n\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop-home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n{% set home_y = False %}\n{% endif %}\n\n\n\n{% if home_x %}\n{% if verbose %}\n{ action_respond_info("Homing X") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in X homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_X"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_X external script to handle the X homing"\n_HOME_X\n{% else %}\n_KlickyDebug msg="homing_override Homing X, G28 X0"\nG28 X0\n\n{% if home_backoff_x != 0 %}\n{% if (printer.configfile.settings.stepper_x.position_endstop > (printer.configfile.settings.stepper_x.position_min|default(0) + printer.configfile.settings.stepper_x.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n\n{% if home_y %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y, G28 Y0"\nG28 Y0\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if verbose %}\n{ action_respond_info("Homing Z") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe configured as a virtual Z endstop attaching probe"\nAttach_Probe\n\n{% if leave_probe_attached %}\n_Probe_Lock\n{% endif %}\n{% elif dock_on_zhome == True %}\nDock_Probe\n{% endif %}\n\n_Home_Z_\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe no longer required, docking probe"\nDock_Probe\n{% elif dock_on_zhome == False %}\nDock_Probe\n{% endif %}\n{% endif %}\n_CheckProbe action=query\n\n\n_Park_Toolhead\n\n_exit_point function=homing_override\n_KLICKY_STATUS_READY'}, 'gcode_macro _umbilical_path': {'gcode': '\n{% set umbilical = printer["gcode_macro _User_Variables"].umbilical %}\n{% set umbilical_x = printer["gcode_macro _User_Variables"].umbilical_x %}\n{% set umbilical_y = printer["gcode_macro _User_Variables"].umbilical_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n\n{% if umbilical %}\n\n_entry_point function=Umbilical_Path\n\n_KlickyDebug msg="_Umbilical_Path moving to G0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}"\nG0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}\n\n_exit_point function=Umbilical_Path\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _home_z_': {'gcode': '\n{% set z_endstop_x = printer["gcode_macro _Probe_Variables"].z_endstop_x %}\n{% set z_endstop_y = printer["gcode_macro _Probe_Variables"].z_endstop_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}    {% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Home_Z\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n{% else %}\n_KlickyDebug msg="_Home_Z_ XY Axis homed"\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="_Home_Z_ Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n\n\n_KlickyDebug msg="_Home_Z_ moving to Z endstop position G0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}"\nG0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}\n_KlickyDebug msg="_Home_Z_ Homing Z G28 Z"\nG28 Z0\n_KlickyDebug msg="_Home_Z_ toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_exit_point function=Home_Z', 'description': 'G-Code macro'}, 'gcode_macro _checkprobe': {'gcode': '\nQuery_Probe\n_SetProbeState action={ params.ACTION }', 'description': 'G-Code macro', 'variable_probe_state': '0'}, 'gcode_macro _setprobestate': {'gcode': '\n{% set query_probe_triggered = printer.probe.last_query %}\n{% set action  = params.ACTION|default(\'\') %}\n\n\n{% if query_probe_triggered %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ False }\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ True }\n{% endif %}\n\n{% if action == \'query\' %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_state VALUE={ query_probe_triggered }\n{% endif %}\n\n\n\n\n{% if not query_probe_triggered and action == \'dock\' %}\n{ action_raise_error("Probe dock failed!") }\n{% endif %}\n\n\n{% if query_probe_triggered and action == \'attach\' %}\n{ action_raise_error("Probe attach failed!") }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _park_toolhead': {'gcode': '\n{% set park_toolhead = printer["gcode_macro _User_Variables"].park_toolhead %}\n{% set parkposition_x = printer["gcode_macro _User_Variables"].parkposition_x %}\n{% set parkposition_y = printer["gcode_macro _User_Variables"].parkposition_y %}\n{% set parkposition_z = printer["gcode_macro _User_Variables"].parkposition_z %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Park_Toolhead\n\n{% if park_toolhead and \'xyz\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Parking Toolhead") }\n{% endif %}\n{% if parkposition_z == -128 %}\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}\n\n{% else %}\n\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}\n\n{% endif %}\n\n{% endif %}\n_exit_point function=Park_Toolhead', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_ready': {'gcode': '\n{% if printer[\'gcode_macro status_ready\'] is defined %}\n_KlickyDebug msg="_klicky_status_ready activating the LED STATUS_READY"\nSTATUS_READY\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_busy': {'gcode': '\n{% if printer[\'gcode_macro status_busy\'] is defined %}\n_KlickyDebug msg="_klicky_status_busy activating the LED STATUS_BUSY"\nSTATUS_BUSY\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_leveling': {'gcode': '\n{% if printer[\'gcode_macro status_leveling\'] is defined %}\n_KlickyDebug msg="_klicky_status_leveling activating the LED STATUS_LEVELING"\nSTATUS_LEVELING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_homing': {'gcode': '\n{% if printer[\'gcode_macro status_homing\'] is defined %}\n_KlickyDebug msg="_klicky_status_homing activating the LED STATUS_HOMING"\nSTATUS_HOMING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_cleaning': {'gcode': '\n{% if printer[\'gcode_macro status_cleaning\'] is defined %}\n_KlickyDebug msg="_klicky_status_cleaning activating the LED STATUS_CLEANING"\nSTATUS_CLEANING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_meshing': {'gcode': '\n{% if printer[\'gcode_macro status_meshing\'] is defined %}\n_KlickyDebug msg="_klicky_status_meshing activating the LED STATUS_MESHING"\nSTATUS_MESHING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_calibrating_z': {'gcode': '\n{% if printer[\'gcode_macro status_calibrating_z\'] is defined %}\n_KlickyDebug msg="_klicky_status_calibrating_z activating the LED STATUS_CALIBRATING_Z"\nSTATUS_CALIBRATING_Z\n{% endif %}', 'description': 'G-Code macro'}, 'z_calibration': {'switch_offset': 0.065, 'offset_margins': '-1.0,1.0', 'speed': 50.0, 'samples_result': 'none', 'probing_first_fast': False, 'nozzle_xy_position': '172, 301', 'switch_xy_position': '172, 275', 'bed_xy_position': '150, 150', 'start_gcode': 'Attach_Probe', 'before_switch_gcode': '', 'end_gcode': 'Dock_Probe'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': '^PG6', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'PG9', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 303.5, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PF11', 'dir_pin': '!PG3', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG5', 'endstop_pin': 'PG10', 'position_endstop': -0.855, 'position_min': -4.5, 'position_max': 290.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA0'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PF9', 'dir_pin': '!PF10', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG2'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF4', 'min_temp': 10.0, 'max_temp': 270.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 26.572, 'pid_ki': 2.036, 'pid_kd': 86.691, 'heater_pin': 'PA1', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PC13', 'pressure_advance': 0.05, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'PF0', 'rotation_distance': 21.9459674016, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 55.196, 'pid_ki': 2.091, 'pid_kd': 364.295, 'heater_pin': 'PA2', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'probe': {'z_offset': 0.0, 'deactivate_on_each_sample': True, 'activate_gcode': '', 'deactivate_gcode': '', 'pin': 'PG15', 'speed': 10.0, 'lift_speed': 10.0, 'x_offset': 0.0, 'y_offset': 25.0, 'samples': 5, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.006, 'samples_tolerance_retries': 6}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE5', 'fan_speed': 1.0}, 'controller_fan controller_fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD12', 'fan_speed': 1.0, 'idle_speed': 1.0, 'idle_timeout': 30, 'heater': ['heater_bed']}, 'heater_fan exhaust_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 5.0, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13', 'fan_speed': 1.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PD15', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 1.0, 'maximum_mcu_duration': 0.0, 'value': 1.0, 'shutdown_value': 0.0}, 'neopixel headlight': {'pin': 'PB0', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 0.0, 'initial_green': 0.2157, 'initial_blue': 1.0, 'initial_white': 0.0}, 'temperature_sensor chamber_temp': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF5', 'min_temp': 0.0, 'max_temp': 100.0, 'gcode_id': 'chamber_th'}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [150.0, 348.0], [350.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 5.0], [150.0, 245.0], [270.0, 5.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'gcode_macro _user_variables': {'gcode': '\n{% set Mx = printer[\'configfile\'].config["stepper_x"]["position_max"]|float %}\n{% set My = printer[\'configfile\'].config["stepper_y"]["position_max"]|float %}\n{% set Ox = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set Oy = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set Oz = printer[\'configfile\'].config["probe"]["z_offset"]|float %}\n\n\n{% if z_endstop_x != 0 or z_endstop_y != 0 %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ z_endstop_x }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ z_endstop_y }\n\n\n{% else %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ (Mx * 0.5) - Ox }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ (My * 0.5) - Oy }\n{% endif %}', 'description': 'G-Code macro', 'variable_verbose': 'True', 'variable_debug': 'False', 'variable_travel_speed': '200', 'variable_move_accel': '1000', 'variable_dock_speed': '50', 'variable_release_speed': '75', 'variable_z_drop_speed': '20', 'variable_safe_z': '25', 'variable_enable_z_hop': 'True', 'variable_max_bed_y': '300', 'variable_max_bed_x': '300', 'variable_z_endstop_x': '172', 'variable_z_endstop_y': '301', 'variable_docklocation_x': '42', 'variable_docklocation_y': '297', 'variable_docklocation_z': '-128', 'variable_enable_dock_servo': 'False', 'variable_servo_name': "'NAME'", 'variable_servo_deploy': '10', 'variable_servo_retract': '11', 'variable_servo_delay': '250', 'variable_dockmove_x': '40', 'variable_dockmove_y': '0', 'variable_dockmove_z': '0', 'variable_attachmove_x': '0', 'variable_attachmove_y': '30', 'variable_attachmove_z': '0', 'variable_umbilical': 'False', 'variable_umbilical_x': '15', 'variable_umbilical_y': '15', 'variable_park_toolhead': 'False', 'variable_parkposition_x': '125', 'variable_parkposition_y': '125', 'variable_parkposition_z': '30', 'variable_version': '1', 'variable_attachmove2_x': '0', 'variable_attachmove2_y': '0', 'variable_attachmove2_z': '0', 'variable_home_backoff_x': '10', 'variable_home_backoff_y': '10', 'variable_override_homing': "''", 'variable_dock_on_zhome': 'True'}, 'gcode_macro print_start': {'gcode': '\nM117 Homing...\nG28\nATTACH_PROBE\nZ_TILT_ADJUST\nDOCK_PROBE\nG28\n\n\n\n\n\n\n\nG0 X150 Y150 Z30 F3600', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1500.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-02-19 20:49:03,756 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-19 20:49:03,756 [printer.py:reinit()] - Klipper version: v0.12.0-103-g6ce6fbbc-dirty
2024-02-19 20:49:03,756 [printer.py:reinit()] - # Extruders: 1
2024-02-19 20:49:03,757 [printer.py:reinit()] - # Temperature devices: 2
2024-02-19 20:49:03,757 [printer.py:reinit()] - # Fans: 4
2024-02-19 20:49:03,757 [printer.py:reinit()] - # Output pins: 1
2024-02-19 20:49:03,757 [printer.py:reinit()] - # Leds: 1
2024-02-19 20:49:03,768 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2024-02-19 20:49:03,769 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-02-19 20:49:04,065 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor chamber_temp&fan&controller_fan controller_fan&heater_fan hotend_fan&heater_fan exhaust_fan&output_pin caselight&neopixel headlight
2024-02-19 20:49:04,070 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-02-19 20:49:04,070 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-02-19 20:49:04,073 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-02-19 20:49:04,084 [screen.py:init_klipper()] - Printer initialized
2024-02-19 20:49:04,084 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2024-02-19 20:49:04,084 [printer.py:change_state()] - Adding callback for state: ready
2024-02-19 20:49:04,088 [screen.py:_load_panel()] - Loading panel: main_menu
2024-02-19 20:49:04,171 [main_menu.py:__init__()] - ### Making MainMenu
2024-02-19 20:49:04,177 [main_menu.py:add_device()] - Adding device: extruder
2024-02-19 20:49:04,184 [main_menu.py:add_device()] - Adding device: heater_bed
2024-02-19 20:49:04,190 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber_temp
2024-02-19 20:49:04,220 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-02-19 20:49:04,231 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-02-19 20:49:04,242 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'temperature_sensor chamber_temp', 'extruder']
2024-02-19 20:49:04,256 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2024-02-19 20:49:04,257 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-02-19 20:49:04,710 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-19 20:49:04,711 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'octoprint_compat', 'update_manager', 'history'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-310-g67c98f6', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-02-19 20:49:04,722 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2024-02-19 20:49:04,757 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2024-02-19 20:49:04,760 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro _Probe_Variables': {'variable_probe_attached': 'False', 'variable_probe_state': 'False', 'variable_probe_lock': 'False', 'variable_probe_z_homed': 'False', 'variable_z_endstop_x': '0', 'variable_z_endstop_y': '0', 'gcode': ''}, 'gcode_macro _klicky_check_variables_version': {'gcode': '\n{% set version = printer["gcode_macro _User_Variables"].version|default(0) %}\n\n{% if version != 1 %}\n{ action_raise_error("Please update your klicky variables, there are some functionality changes") }\n{% endif %}'}, 'gcode_macro _KlickyDebug': {'gcode': '\n{% set message  = params.MSG %}\n{% set debug = printer["gcode_macro _User_Variables"].debug|default(False) %}\n\n{% if debug %}\n{ action_respond_info(message) }\n{% endif %}'}, 'gcode_macro _exit_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move  = params.MOVE|default(0) %}\n{% set speed = printer["gcode_macro _User_Variables"].travel_speed %}\n\n\nM400\nSET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\nRESTORE_GCODE_STATE NAME={function} MOVE={move} MOVE_SPEED={speed}'}, 'gcode_macro _entry_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move_accel = printer["gcode_macro _User_Variables"].move_accel|default(1000) %}\n\nM400\nSAVE_GCODE_STATE NAME={function}\n\nSET_GCODE_OFFSET Z=0\n\nG90\n\nSET_VELOCITY_LIMIT ACCEL={move_accel}'}, 'gcode_macro _Homing_Variables': {'gcode': '\n{% set reset  = params.RESET|default(0) %}\n{% if reset %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }\n{% endif %}'}, 'gcode_macro Attach_Probe_Lock': {'description': 'Attaches Klicky Probe, can only be docked after unlocking', 'gcode': '\nAttach_Probe\n_Probe_Lock'}, 'gcode_macro Dock_Probe_Unlock': {'description': 'Docks Klicky Probe even if it was locked', 'gcode': '\n_Probe_Unlock\nDock_Probe'}, 'gcode_macro _Probe_Unlock': {'description': 'Unlocks Klicky Probe state', 'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to False"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }'}, 'gcode_macro _Probe_Lock': {'description': 'Locks Klicky Probe state', 'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to True"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ True }'}, 'gcode_macro _DeployKlickyDock': {'description': 'Deploys Klicky servo-controlled dock', 'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_deploy = printer["gcode_macro _User_Variables"].servo_deploy|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_DeployKlickyDock Klicky servo configuration enabled"\n{% if servo_deploy == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo deploy angle specified") }\n{% endif %}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _DeployDock"] is defined %}\n_KlickyDebug msg="_DeployKlickyDock calling _DeployDock"\n_DeployDock\n{% endif %}'}, 'gcode_macro _RetractKlickyDock': {'description': 'Retracts Klicky servo-controlled dock', 'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_retract = printer["gcode_macro _User_Variables"].servo_retract|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_RetractKlickyDock Klicky servo configuration enabled"\n{% if servo_retract == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo retract angle specified") }\n{% endif %}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _RetractDock"] is defined %}\n_KlickyDebug msg="_RetractKlickyDock calling _RetractDock"\n_RetractDock\n{% endif %}'}, 'gcode_macro Attach_Probe': {'description': 'Attaches Klicky Probe', 'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set attachmove2_x = printer["gcode_macro _User_Variables"].attachmove2_x|default(0) %}\n{% set attachmove2_y = printer["gcode_macro _User_Variables"].attachmove2_y|default(0) %}\n{% set attachmove2_z = printer["gcode_macro _User_Variables"].attachmove2_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n_entry_point function=Attach_Probe\n\n{% if bypass_probe_docking == False %}\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n_KlickyDebug msg="Attach_Probe Axis homed"\n\n\n{% elif not probe_attached and not probe_lock %}\n_KlickyDebug msg="Attach_Probe going to attach probe"\n{% if verbose %}\n{ action_respond_info("Attaching Probe") }\n{% endif %}\n_KLICKY_STATUS_BUSY\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% if not enable_z_hop %}\n_KlickyDebug msg="Attach_Probe z_hop disabled"\n{% set safe_z = 0 %}\n{% endif %}\n{% endif %}\n\n\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero, duplicate?") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Umbilical_Path\n\n_entry_point function=Attach_Probe_intern\n\n\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n_DeployKlickyDock\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}"\nG0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}\n\n_RetractKlickyDock\n\n{% if ((printer.gcode_move.gcode_position.z < safe_z) or (docklocation_z != -128 and docklocation_z < safe_z ))%}\n_KlickyDebug msg="Attach_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\n_CheckProbe action=attach\n\n_exit_point function=Attach_Probe_intern move={goback}\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe locked not attaching probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already attached!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe already attached, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Attach_Probe\n{% else %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}'}, 'gcode_macro Dock_Probe': {'description': 'Docks Klicky Probe', 'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n{% if bypass_probe_docking == True %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}\n\n{% if bypass_probe_docking != True %}\n_entry_point function=Dock_Probe\n\n\n{% if probe_attached and not probe_lock %}\n_KLICKY_STATUS_BUSY\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Dock_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n_Umbilical_Path\n\n\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n\n_DeployKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\n\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}"\nG0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}\n{% endif %}\n\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}\n\n\n_RetractKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving away from the dock to G0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}\n\n\n{% if (printer.gcode_move.gcode_position.z < safe_z) %}\n_KlickyDebug msg="Dock_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\nG4 P1000\n_CheckProbe action=dock\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe locked not docking probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already docked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe already docked, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Dock_Probe move={goback}\n{% else %}\n_KlickyDebug msg="Dock_Probe probe docking bypassed, doing nothing"\n{% endif %}'}, 'gcode_macro PROBE_CALIBRATE': {'rename_existing': '_PROBE_CALIBRATE', 'description': 'Calibrate the probes z_offset with klicky automount', 'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_calibrate Axis homed"\n_KlickyDebug msg="probe_calibrate Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_CALIBRATE with the probe above the BED, check klicky_variables bed size!") }\n{% endif %}\n\n{% if bypass_probe_docking == False %}\n_CheckProbe action=query\nG90\nAttach_Probe back=1\n_KLICKY_STATUS_CALIBRATING_Z\n\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nM118 moving the toolhead 20 mm from the bed\n_KlickyDebug msg="probe_calibrate Moving Z up by 20mm"\nTESTZ Z=20\nM118 remove manually the probe and continue calibration\n_KLICKY_STATUS_READY\n{% else %}\n_KLICKY_STATUS_CALIBRATING_Z\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n_KLICKY_STATUS_READY\n{% endif %}'}, 'gcode_macro PROBE_ACCURACY': {'rename_existing': '_PROBE_ACCURACY', 'description': 'Probe Z-height accuracy at current XY position with klicky automount', 'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_accuracy Axis homed"\n_KlickyDebug msg="probe_accuracy Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n_entry_point function=PROBE_ACCURACY\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_ACCURACY with the probe above the BED, check klicky_variables bed size!") }\n{% endif%}\n\n_CheckProbe action=query\nAttach_Probe back=1\n\n_KlickyDebug msg="probe_accuracy calling klipper probe accuracy"\n_PROBE_ACCURACY {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nDock_Probe back=1\n\n_exit_point function=PROBE_ACCURACY move=1'}, 'force_move': {'enable_force_move': 'True'}, 'homing_override': {'axes': 'xyz', 'gcode': '\n\n_User_Variables\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n{% set kinematic_z = 0 %}\n{% set dock_on_zhome = printer["gcode_macro _User_Variables"].dock_on_zhome|default(True) %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set home_backoff_x = printer["gcode_macro _User_Variables"].home_backoff_x|default(0) %}\n{% set home_backoff_y = printer["gcode_macro _User_Variables"].home_backoff_y|default(0) %}\n{% set override_homing = printer["gcode_macro _User_Variables"].override_homing|default(\'\') %}\n\n\n_klicky_check_variables_version\n\n_CheckProbe action=query\n\n\n{% set home_x, home_y, home_z, leave_probe_attached = False, False, False, False %}\n\n{% if \'PROBE_LOCK\' in params%}\n{% if verbose %}\n{ action_respond_info("PROBE_LOCK = True") }\n{% endif %}\n{% set leave_probe_attached = True %}\n{% endif %}\n\n\n{% if not \'X\' in params\nand not \'Y\' in params\nand not \'Z\' in params %}\n\n{% set home_x, home_y, home_z = True, True, True %}\n_KlickyDebug msg="homing_override goint to home all axes"\n\n{% else %}\n{% if \'X\' in params %}\n{% set home_x = True %}\n_KlickyDebug msg="homing_override goint to home X"\n\n{% endif %}\n\n{% if \'Y\' in params %}\n{% set home_y = True %}\n_KlickyDebug msg="homing_override goint to home Y"\n{% endif %}\n\n{% if \'Z\' in params %}\n{% set home_z = True %}\n_KlickyDebug msg="homing_override goint to home Z"\n{% endif %}\n\n{% if \'X\' in params\nand \'Y\' in params\nand \'Z\' in params %}\n\n\n_Homing_Variables reset=1\n_KlickyDebug msg="homing_override goint to home all axes"\n{% endif %}\n\n{% endif %}\n\n_entry_point function=homing_override\n_KLICKY_STATUS_HOMING\n\n\n{% if \'z\' not in printer.toolhead.homed_axes %}\n{% if enable_z_hop == False %}\n_KlickyDebug msg="homing_override z_hop disabled"\n\n{% set kinematic_z = safe_z %}\n{% set safe_z = safe_z %}\n{% endif %}\n{% endif %}\n\n\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes and \'z\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("No axis homed") }\n{% endif %}\n_KlickyDebug msg="homing_override no axis homed, setting position as X=Y=0 Z={kinematic_z}"\nSET_KINEMATIC_POSITION X=0 Y=0 Z={kinematic_z}\nM400\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% if home_z != True %}\n_KlickyDebug msg="homing_override clearing axis homed state if not already homing Z"\nM84\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("X or Y not homed, forcing full G28") }\n{% endif %}\n{% set home_x, home_y, home_z = True, True, True %}\n{% endif %}\n{% endif %}\n\n\n{% if ((attachmove_y == 0 and override_homing == \'\' ) or (override_homing == \'Y\'))%}\n\n{% if home_y %}\n{% if override_homing == \'Y\' %}\n_KlickyDebug msg="homing_override Y homing first override, due to override_homing = Y"\n{% else %}\n_KlickyDebug msg="homing_override Y homing first override, due to attachmove_y = 0"\n{% endif %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y G28 Y0"\nG28 Y0\n\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop-home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n{% set home_y = False %}\n{% endif %}\n\n\n\n{% if home_x %}\n{% if verbose %}\n{ action_respond_info("Homing X") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in X homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_X"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_X external script to handle the X homing"\n_HOME_X\n{% else %}\n_KlickyDebug msg="homing_override Homing X, G28 X0"\nG28 X0\n\n{% if home_backoff_x != 0 %}\n{% if (printer.configfile.settings.stepper_x.position_endstop > (printer.configfile.settings.stepper_x.position_min|default(0) + printer.configfile.settings.stepper_x.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n\n{% if home_y %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y, G28 Y0"\nG28 Y0\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if verbose %}\n{ action_respond_info("Homing Z") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe configured as a virtual Z endstop attaching probe"\nAttach_Probe\n\n{% if leave_probe_attached %}\n_Probe_Lock\n{% endif %}\n{% elif dock_on_zhome == True %}\nDock_Probe\n{% endif %}\n\n_Home_Z_\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe no longer required, docking probe"\nDock_Probe\n{% elif dock_on_zhome == False %}\nDock_Probe\n{% endif %}\n{% endif %}\n_CheckProbe action=query\n\n\n_Park_Toolhead\n\n_exit_point function=homing_override\n_KLICKY_STATUS_READY'}, 'gcode_macro _Umbilical_Path': {'gcode': '\n{% set umbilical = printer["gcode_macro _User_Variables"].umbilical %}\n{% set umbilical_x = printer["gcode_macro _User_Variables"].umbilical_x %}\n{% set umbilical_y = printer["gcode_macro _User_Variables"].umbilical_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n\n{% if umbilical %}\n\n_entry_point function=Umbilical_Path\n\n_KlickyDebug msg="_Umbilical_Path moving to G0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}"\nG0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}\n\n_exit_point function=Umbilical_Path\n{% endif %}'}, 'gcode_macro _Home_Z_': {'gcode': '\n{% set z_endstop_x = printer["gcode_macro _Probe_Variables"].z_endstop_x %}\n{% set z_endstop_y = printer["gcode_macro _Probe_Variables"].z_endstop_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}    {% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Home_Z\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n{% else %}\n_KlickyDebug msg="_Home_Z_ XY Axis homed"\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="_Home_Z_ Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n\n\n_KlickyDebug msg="_Home_Z_ moving to Z endstop position G0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}"\nG0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}\n_KlickyDebug msg="_Home_Z_ Homing Z G28 Z"\nG28 Z0\n_KlickyDebug msg="_Home_Z_ toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_exit_point function=Home_Z'}, 'gcode_macro _CheckProbe': {'variable_probe_state': '0', 'gcode': '\nQuery_Probe\n_SetProbeState action={ params.ACTION }'}, 'gcode_macro _SetProbeState': {'gcode': '\n{% set query_probe_triggered = printer.probe.last_query %}\n{% set action  = params.ACTION|default(\'\') %}\n\n\n{% if query_probe_triggered %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ False }\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ True }\n{% endif %}\n\n{% if action == \'query\' %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_state VALUE={ query_probe_triggered }\n{% endif %}\n\n\n\n\n{% if not query_probe_triggered and action == \'dock\' %}\n{ action_raise_error("Probe dock failed!") }\n{% endif %}\n\n\n{% if query_probe_triggered and action == \'attach\' %}\n{ action_raise_error("Probe attach failed!") }\n{% endif %}'}, 'gcode_macro _Park_Toolhead': {'gcode': '\n{% set park_toolhead = printer["gcode_macro _User_Variables"].park_toolhead %}\n{% set parkposition_x = printer["gcode_macro _User_Variables"].parkposition_x %}\n{% set parkposition_y = printer["gcode_macro _User_Variables"].parkposition_y %}\n{% set parkposition_z = printer["gcode_macro _User_Variables"].parkposition_z %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Park_Toolhead\n\n{% if park_toolhead and \'xyz\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Parking Toolhead") }\n{% endif %}\n{% if parkposition_z == -128 %}\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}\n\n{% else %}\n\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}\n\n{% endif %}\n\n{% endif %}\n_exit_point function=Park_Toolhead'}, 'gcode_macro _klicky_status_ready': {'gcode': '\n{% if printer[\'gcode_macro status_ready\'] is defined %}\n_KlickyDebug msg="_klicky_status_ready activating the LED STATUS_READY"\nSTATUS_READY\n{% endif %}'}, 'gcode_macro _klicky_status_busy': {'gcode': '\n{% if printer[\'gcode_macro status_busy\'] is defined %}\n_KlickyDebug msg="_klicky_status_busy activating the LED STATUS_BUSY"\nSTATUS_BUSY\n{% endif %}'}, 'gcode_macro _klicky_status_leveling': {'gcode': '\n{% if printer[\'gcode_macro status_leveling\'] is defined %}\n_KlickyDebug msg="_klicky_status_leveling activating the LED STATUS_LEVELING"\nSTATUS_LEVELING\n{% endif %}'}, 'gcode_macro _klicky_status_homing': {'gcode': '\n{% if printer[\'gcode_macro status_homing\'] is defined %}\n_KlickyDebug msg="_klicky_status_homing activating the LED STATUS_HOMING"\nSTATUS_HOMING\n{% endif %}'}, 'gcode_macro _klicky_status_cleaning': {'gcode': '\n{% if printer[\'gcode_macro status_cleaning\'] is defined %}\n_KlickyDebug msg="_klicky_status_cleaning activating the LED STATUS_CLEANING"\nSTATUS_CLEANING\n{% endif %}'}, 'gcode_macro _klicky_status_meshing': {'gcode': '\n{% if printer[\'gcode_macro status_meshing\'] is defined %}\n_KlickyDebug msg="_klicky_status_meshing activating the LED STATUS_MESHING"\nSTATUS_MESHING\n{% endif %}'}, 'gcode_macro _klicky_status_calibrating_z': {'gcode': '\n{% if printer[\'gcode_macro status_calibrating_z\'] is defined %}\n_KlickyDebug msg="_klicky_status_calibrating_z activating the LED STATUS_CALIBRATING_Z"\nSTATUS_CALIBRATING_Z\n{% endif %}'}, 'z_calibration': {'nozzle_xy_position': '172, 301', 'switch_xy_position': '172, 275', 'bed_xy_position': '150, 150', 'switch_offset': '0.065', 'offset_margins': '-1.0,1.0', 'speed': '50', 'probing_first_fast': 'false', 'start_gcode': 'Attach_Probe', 'end_gcode': 'Dock_Probe'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_28003C001150535556323420-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '^PG6', 'position_min': '0', 'position_endstop': '300', 'position_max': '300', 'homing_speed': '25', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'PG9', 'position_min': '0', 'position_endstop': '300', 'position_max': '303.5', 'homing_speed': '25', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': '!PG3', 'enable_pin': '!PG5', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'PG10', 'position_max': '290', 'position_min': '-4.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3', 'position_endstop': '-0.855'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA0', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': '!PF10', 'enable_pin': '!PG2', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PC13', 'dir_pin': 'PF0', 'enable_pin': '!PF1', 'rotation_distance': '21.9459674016', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.75', 'heater_pin': 'PA1', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF4', 'min_temp': '10', 'max_temp': '270', 'max_power': '1.0', 'min_extrude_temp': '170', 'pressure_advance': '0.05', 'pressure_advance_smooth_time': '0.040', 'control': 'pid', 'pid_kp': '26.572', 'pid_ki': '2.036', 'pid_kd': '86.691'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.5', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PA2', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF3', 'max_power': '1', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '55.196', 'pid_ki': '2.091', 'pid_kd': '364.295'}, 'probe': {'pin': 'PG15', 'x_offset': '0', 'y_offset': '25.0', 'z_offset': '0', 'speed': '10.0', 'samples': '5', 'samples_result': 'median', 'sample_retract_dist': '3.0', 'samples_tolerance': '0.006', 'samples_tolerance_retries': '6'}, 'fan': {'pin': 'PA8', 'kick_start_time': '0.5', 'off_below': '0.10'}, 'heater_fan hotend_fan': {'pin': 'PE5', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'controller_fan controller_fan': {'pin': 'PD12', 'kick_start_time': '0.5', 'heater': 'heater_bed'}, 'heater_fan exhaust_fan': {'pin': 'PD13', 'max_power': '1.0', 'shutdown_speed': '0.0', 'kick_start_time': '5.0', 'heater': 'heater_bed', 'heater_temp': '60', 'fan_speed': '1.0'}, 'output_pin caselight': {'pin': 'PD15', 'pwm': 'true', 'shutdown_value': '0', 'value': '1', 'cycle_time': '0.01'}, 'neopixel headlight': {'pin': 'PB0', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '0.0', 'initial_green': '0.2157', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'temperature_sensor chamber_temp': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF5', 'min_temp': '0', 'max_temp': '100', 'gcode_id': 'chamber_th'}, 'idle_timeout': {'timeout': '1800'}, 'z_tilt': {'z_positions': '\n-50, 18\n150, 348\n350, 18', 'points': '\n30, 5\n150, 245\n270, 5', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'gcode_macro _User_Variables': {'variable_verbose': 'True', 'variable_debug': 'False', 'variable_travel_speed': '200', 'variable_move_accel': '1000', 'variable_dock_speed': '50', 'variable_release_speed': '75', 'variable_z_drop_speed': '20', 'variable_safe_z': '25', 'variable_enable_z_hop': 'True', 'variable_max_bed_y': '300', 'variable_max_bed_x': '300', 'variable_z_endstop_x': '172', 'variable_z_endstop_y': '301', 'variable_docklocation_x': '42', 'variable_docklocation_y': '297', 'variable_docklocation_z': '-128', 'variable_enable_dock_servo': 'False', 'variable_servo_name': "'NAME'", 'variable_servo_deploy': '10', 'variable_servo_retract': '11', 'variable_servo_delay': '250', 'variable_dockmove_x': '40', 'variable_dockmove_y': '0', 'variable_dockmove_z': '0', 'variable_attachmove_x': '0', 'variable_attachmove_y': '30', 'variable_attachmove_z': '0', 'variable_umbilical': 'False', 'variable_umbilical_x': '15', 'variable_umbilical_y': '15', 'variable_park_toolhead': 'False', 'variable_parkposition_x': '125', 'variable_parkposition_y': '125', 'variable_parkposition_z': '30', 'variable_version': '1', 'variable_attachmove2_x': '0', 'variable_attachmove2_y': '0', 'variable_attachmove2_z': '0', 'variable_home_backoff_x': '10', 'variable_home_backoff_y': '10', 'variable_override_homing': "''", 'variable_dock_on_zhome': 'True', 'gcode': '\n{% set Mx = printer[\'configfile\'].config["stepper_x"]["position_max"]|float %}\n{% set My = printer[\'configfile\'].config["stepper_y"]["position_max"]|float %}\n{% set Ox = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set Oy = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set Oz = printer[\'configfile\'].config["probe"]["z_offset"]|float %}\n\n\n{% if z_endstop_x != 0 or z_endstop_y != 0 %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ z_endstop_x }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ z_endstop_y }\n\n\n{% else %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ (Mx * 0.5) - Ox }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ (My * 0.5) - Oy }\n{% endif %}'}, 'gcode_macro PRINT_START': {'gcode': '\nM117 Homing...\nG28\nATTACH_PROBE\nZ_TILT_ADJUST\nDOCK_PROBE\nG28\n\n\n\n\n\n\n\nG0 X150 Y150 Z30 F3600'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_28003C001150535556323420-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro _probe_variables': {'gcode': '', 'description': 'G-Code macro', 'variable_probe_attached': 'False', 'variable_probe_state': 'False', 'variable_probe_lock': 'False', 'variable_probe_z_homed': 'False', 'variable_z_endstop_x': '0', 'variable_z_endstop_y': '0'}, 'gcode_macro _klicky_check_variables_version': {'gcode': '\n{% set version = printer["gcode_macro _User_Variables"].version|default(0) %}\n\n{% if version != 1 %}\n{ action_raise_error("Please update your klicky variables, there are some functionality changes") }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klickydebug': {'gcode': '\n{% set message  = params.MSG %}\n{% set debug = printer["gcode_macro _User_Variables"].debug|default(False) %}\n\n{% if debug %}\n{ action_respond_info(message) }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _exit_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move  = params.MOVE|default(0) %}\n{% set speed = printer["gcode_macro _User_Variables"].travel_speed %}\n\n\nM400\nSET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\nRESTORE_GCODE_STATE NAME={function} MOVE={move} MOVE_SPEED={speed}', 'description': 'G-Code macro'}, 'gcode_macro _entry_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move_accel = printer["gcode_macro _User_Variables"].move_accel|default(1000) %}\n\nM400\nSAVE_GCODE_STATE NAME={function}\n\nSET_GCODE_OFFSET Z=0\n\nG90\n\nSET_VELOCITY_LIMIT ACCEL={move_accel}', 'description': 'G-Code macro'}, 'gcode_macro _homing_variables': {'gcode': '\n{% set reset  = params.RESET|default(0) %}\n{% if reset %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro attach_probe_lock': {'gcode': '\nAttach_Probe\n_Probe_Lock', 'description': 'Attaches Klicky Probe, can only be docked after unlocking'}, 'gcode_macro dock_probe_unlock': {'gcode': '\n_Probe_Unlock\nDock_Probe', 'description': 'Docks Klicky Probe even if it was locked'}, 'gcode_macro _probe_unlock': {'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to False"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }', 'description': 'Unlocks Klicky Probe state'}, 'gcode_macro _probe_lock': {'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to True"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ True }', 'description': 'Locks Klicky Probe state'}, 'gcode_macro _deployklickydock': {'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_deploy = printer["gcode_macro _User_Variables"].servo_deploy|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_DeployKlickyDock Klicky servo configuration enabled"\n{% if servo_deploy == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo deploy angle specified") }\n{% endif %}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _DeployDock"] is defined %}\n_KlickyDebug msg="_DeployKlickyDock calling _DeployDock"\n_DeployDock\n{% endif %}', 'description': 'Deploys Klicky servo-controlled dock'}, 'gcode_macro _retractklickydock': {'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_retract = printer["gcode_macro _User_Variables"].servo_retract|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_RetractKlickyDock Klicky servo configuration enabled"\n{% if servo_retract == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo retract angle specified") }\n{% endif %}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _RetractDock"] is defined %}\n_KlickyDebug msg="_RetractKlickyDock calling _RetractDock"\n_RetractDock\n{% endif %}', 'description': 'Retracts Klicky servo-controlled dock'}, 'gcode_macro attach_probe': {'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set attachmove2_x = printer["gcode_macro _User_Variables"].attachmove2_x|default(0) %}\n{% set attachmove2_y = printer["gcode_macro _User_Variables"].attachmove2_y|default(0) %}\n{% set attachmove2_z = printer["gcode_macro _User_Variables"].attachmove2_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n_entry_point function=Attach_Probe\n\n{% if bypass_probe_docking == False %}\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n_KlickyDebug msg="Attach_Probe Axis homed"\n\n\n{% elif not probe_attached and not probe_lock %}\n_KlickyDebug msg="Attach_Probe going to attach probe"\n{% if verbose %}\n{ action_respond_info("Attaching Probe") }\n{% endif %}\n_KLICKY_STATUS_BUSY\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% if not enable_z_hop %}\n_KlickyDebug msg="Attach_Probe z_hop disabled"\n{% set safe_z = 0 %}\n{% endif %}\n{% endif %}\n\n\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero, duplicate?") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Umbilical_Path\n\n_entry_point function=Attach_Probe_intern\n\n\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n_DeployKlickyDock\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}"\nG0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}\n\n_RetractKlickyDock\n\n{% if ((printer.gcode_move.gcode_position.z < safe_z) or (docklocation_z != -128 and docklocation_z < safe_z ))%}\n_KlickyDebug msg="Attach_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\n_CheckProbe action=attach\n\n_exit_point function=Attach_Probe_intern move={goback}\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe locked not attaching probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already attached!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe already attached, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Attach_Probe\n{% else %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}', 'description': 'Attaches Klicky Probe'}, 'gcode_macro dock_probe': {'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n{% if bypass_probe_docking == True %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}\n\n{% if bypass_probe_docking != True %}\n_entry_point function=Dock_Probe\n\n\n{% if probe_attached and not probe_lock %}\n_KLICKY_STATUS_BUSY\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Dock_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n_Umbilical_Path\n\n\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n\n_DeployKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\n\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}"\nG0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}\n{% endif %}\n\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}\n\n\n_RetractKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving away from the dock to G0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}\n\n\n{% if (printer.gcode_move.gcode_position.z < safe_z) %}\n_KlickyDebug msg="Dock_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\nG4 P1000\n_CheckProbe action=dock\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe locked not docking probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already docked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe already docked, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Dock_Probe move={goback}\n{% else %}\n_KlickyDebug msg="Dock_Probe probe docking bypassed, doing nothing"\n{% endif %}', 'description': 'Docks Klicky Probe'}, 'gcode_macro probe_calibrate': {'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_calibrate Axis homed"\n_KlickyDebug msg="probe_calibrate Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_CALIBRATE with the probe above the BED, check klicky_variables bed size!") }\n{% endif %}\n\n{% if bypass_probe_docking == False %}\n_CheckProbe action=query\nG90\nAttach_Probe back=1\n_KLICKY_STATUS_CALIBRATING_Z\n\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nM118 moving the toolhead 20 mm from the bed\n_KlickyDebug msg="probe_calibrate Moving Z up by 20mm"\nTESTZ Z=20\nM118 remove manually the probe and continue calibration\n_KLICKY_STATUS_READY\n{% else %}\n_KLICKY_STATUS_CALIBRATING_Z\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n_KLICKY_STATUS_READY\n{% endif %}', 'rename_existing': '_PROBE_CALIBRATE', 'description': 'Calibrate the probes z_offset with klicky automount'}, 'gcode_macro probe_accuracy': {'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_accuracy Axis homed"\n_KlickyDebug msg="probe_accuracy Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n_entry_point function=PROBE_ACCURACY\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_ACCURACY with the probe above the BED, check klicky_variables bed size!") }\n{% endif%}\n\n_CheckProbe action=query\nAttach_Probe back=1\n\n_KlickyDebug msg="probe_accuracy calling klipper probe accuracy"\n_PROBE_ACCURACY {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nDock_Probe back=1\n\n_exit_point function=PROBE_ACCURACY move=1', 'rename_existing': '_PROBE_ACCURACY', 'description': 'Probe Z-height accuracy at current XY position with klicky automount'}, 'force_move': {'enable_force_move': True}, 'homing_override': {'axes': 'xyz', 'gcode': '\n\n_User_Variables\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n{% set kinematic_z = 0 %}\n{% set dock_on_zhome = printer["gcode_macro _User_Variables"].dock_on_zhome|default(True) %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set home_backoff_x = printer["gcode_macro _User_Variables"].home_backoff_x|default(0) %}\n{% set home_backoff_y = printer["gcode_macro _User_Variables"].home_backoff_y|default(0) %}\n{% set override_homing = printer["gcode_macro _User_Variables"].override_homing|default(\'\') %}\n\n\n_klicky_check_variables_version\n\n_CheckProbe action=query\n\n\n{% set home_x, home_y, home_z, leave_probe_attached = False, False, False, False %}\n\n{% if \'PROBE_LOCK\' in params%}\n{% if verbose %}\n{ action_respond_info("PROBE_LOCK = True") }\n{% endif %}\n{% set leave_probe_attached = True %}\n{% endif %}\n\n\n{% if not \'X\' in params\nand not \'Y\' in params\nand not \'Z\' in params %}\n\n{% set home_x, home_y, home_z = True, True, True %}\n_KlickyDebug msg="homing_override goint to home all axes"\n\n{% else %}\n{% if \'X\' in params %}\n{% set home_x = True %}\n_KlickyDebug msg="homing_override goint to home X"\n\n{% endif %}\n\n{% if \'Y\' in params %}\n{% set home_y = True %}\n_KlickyDebug msg="homing_override goint to home Y"\n{% endif %}\n\n{% if \'Z\' in params %}\n{% set home_z = True %}\n_KlickyDebug msg="homing_override goint to home Z"\n{% endif %}\n\n{% if \'X\' in params\nand \'Y\' in params\nand \'Z\' in params %}\n\n\n_Homing_Variables reset=1\n_KlickyDebug msg="homing_override goint to home all axes"\n{% endif %}\n\n{% endif %}\n\n_entry_point function=homing_override\n_KLICKY_STATUS_HOMING\n\n\n{% if \'z\' not in printer.toolhead.homed_axes %}\n{% if enable_z_hop == False %}\n_KlickyDebug msg="homing_override z_hop disabled"\n\n{% set kinematic_z = safe_z %}\n{% set safe_z = safe_z %}\n{% endif %}\n{% endif %}\n\n\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes and \'z\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("No axis homed") }\n{% endif %}\n_KlickyDebug msg="homing_override no axis homed, setting position as X=Y=0 Z={kinematic_z}"\nSET_KINEMATIC_POSITION X=0 Y=0 Z={kinematic_z}\nM400\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% if home_z != True %}\n_KlickyDebug msg="homing_override clearing axis homed state if not already homing Z"\nM84\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("X or Y not homed, forcing full G28") }\n{% endif %}\n{% set home_x, home_y, home_z = True, True, True %}\n{% endif %}\n{% endif %}\n\n\n{% if ((attachmove_y == 0 and override_homing == \'\' ) or (override_homing == \'Y\'))%}\n\n{% if home_y %}\n{% if override_homing == \'Y\' %}\n_KlickyDebug msg="homing_override Y homing first override, due to override_homing = Y"\n{% else %}\n_KlickyDebug msg="homing_override Y homing first override, due to attachmove_y = 0"\n{% endif %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y G28 Y0"\nG28 Y0\n\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop-home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n{% set home_y = False %}\n{% endif %}\n\n\n\n{% if home_x %}\n{% if verbose %}\n{ action_respond_info("Homing X") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in X homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_X"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_X external script to handle the X homing"\n_HOME_X\n{% else %}\n_KlickyDebug msg="homing_override Homing X, G28 X0"\nG28 X0\n\n{% if home_backoff_x != 0 %}\n{% if (printer.configfile.settings.stepper_x.position_endstop > (printer.configfile.settings.stepper_x.position_min|default(0) + printer.configfile.settings.stepper_x.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n\n{% if home_y %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y, G28 Y0"\nG28 Y0\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if verbose %}\n{ action_respond_info("Homing Z") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe configured as a virtual Z endstop attaching probe"\nAttach_Probe\n\n{% if leave_probe_attached %}\n_Probe_Lock\n{% endif %}\n{% elif dock_on_zhome == True %}\nDock_Probe\n{% endif %}\n\n_Home_Z_\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe no longer required, docking probe"\nDock_Probe\n{% elif dock_on_zhome == False %}\nDock_Probe\n{% endif %}\n{% endif %}\n_CheckProbe action=query\n\n\n_Park_Toolhead\n\n_exit_point function=homing_override\n_KLICKY_STATUS_READY'}, 'gcode_macro _umbilical_path': {'gcode': '\n{% set umbilical = printer["gcode_macro _User_Variables"].umbilical %}\n{% set umbilical_x = printer["gcode_macro _User_Variables"].umbilical_x %}\n{% set umbilical_y = printer["gcode_macro _User_Variables"].umbilical_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n\n{% if umbilical %}\n\n_entry_point function=Umbilical_Path\n\n_KlickyDebug msg="_Umbilical_Path moving to G0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}"\nG0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}\n\n_exit_point function=Umbilical_Path\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _home_z_': {'gcode': '\n{% set z_endstop_x = printer["gcode_macro _Probe_Variables"].z_endstop_x %}\n{% set z_endstop_y = printer["gcode_macro _Probe_Variables"].z_endstop_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}    {% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Home_Z\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n{% else %}\n_KlickyDebug msg="_Home_Z_ XY Axis homed"\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="_Home_Z_ Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n\n\n_KlickyDebug msg="_Home_Z_ moving to Z endstop position G0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}"\nG0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}\n_KlickyDebug msg="_Home_Z_ Homing Z G28 Z"\nG28 Z0\n_KlickyDebug msg="_Home_Z_ toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_exit_point function=Home_Z', 'description': 'G-Code macro'}, 'gcode_macro _checkprobe': {'gcode': '\nQuery_Probe\n_SetProbeState action={ params.ACTION }', 'description': 'G-Code macro', 'variable_probe_state': '0'}, 'gcode_macro _setprobestate': {'gcode': '\n{% set query_probe_triggered = printer.probe.last_query %}\n{% set action  = params.ACTION|default(\'\') %}\n\n\n{% if query_probe_triggered %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ False }\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ True }\n{% endif %}\n\n{% if action == \'query\' %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_state VALUE={ query_probe_triggered }\n{% endif %}\n\n\n\n\n{% if not query_probe_triggered and action == \'dock\' %}\n{ action_raise_error("Probe dock failed!") }\n{% endif %}\n\n\n{% if query_probe_triggered and action == \'attach\' %}\n{ action_raise_error("Probe attach failed!") }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _park_toolhead': {'gcode': '\n{% set park_toolhead = printer["gcode_macro _User_Variables"].park_toolhead %}\n{% set parkposition_x = printer["gcode_macro _User_Variables"].parkposition_x %}\n{% set parkposition_y = printer["gcode_macro _User_Variables"].parkposition_y %}\n{% set parkposition_z = printer["gcode_macro _User_Variables"].parkposition_z %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Park_Toolhead\n\n{% if park_toolhead and \'xyz\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Parking Toolhead") }\n{% endif %}\n{% if parkposition_z == -128 %}\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}\n\n{% else %}\n\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}\n\n{% endif %}\n\n{% endif %}\n_exit_point function=Park_Toolhead', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_ready': {'gcode': '\n{% if printer[\'gcode_macro status_ready\'] is defined %}\n_KlickyDebug msg="_klicky_status_ready activating the LED STATUS_READY"\nSTATUS_READY\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_busy': {'gcode': '\n{% if printer[\'gcode_macro status_busy\'] is defined %}\n_KlickyDebug msg="_klicky_status_busy activating the LED STATUS_BUSY"\nSTATUS_BUSY\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_leveling': {'gcode': '\n{% if printer[\'gcode_macro status_leveling\'] is defined %}\n_KlickyDebug msg="_klicky_status_leveling activating the LED STATUS_LEVELING"\nSTATUS_LEVELING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_homing': {'gcode': '\n{% if printer[\'gcode_macro status_homing\'] is defined %}\n_KlickyDebug msg="_klicky_status_homing activating the LED STATUS_HOMING"\nSTATUS_HOMING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_cleaning': {'gcode': '\n{% if printer[\'gcode_macro status_cleaning\'] is defined %}\n_KlickyDebug msg="_klicky_status_cleaning activating the LED STATUS_CLEANING"\nSTATUS_CLEANING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_meshing': {'gcode': '\n{% if printer[\'gcode_macro status_meshing\'] is defined %}\n_KlickyDebug msg="_klicky_status_meshing activating the LED STATUS_MESHING"\nSTATUS_MESHING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_calibrating_z': {'gcode': '\n{% if printer[\'gcode_macro status_calibrating_z\'] is defined %}\n_KlickyDebug msg="_klicky_status_calibrating_z activating the LED STATUS_CALIBRATING_Z"\nSTATUS_CALIBRATING_Z\n{% endif %}', 'description': 'G-Code macro'}, 'z_calibration': {'switch_offset': 0.065, 'offset_margins': '-1.0,1.0', 'speed': 50.0, 'samples_result': 'none', 'probing_first_fast': False, 'nozzle_xy_position': '172, 301', 'switch_xy_position': '172, 275', 'bed_xy_position': '150, 150', 'start_gcode': 'Attach_Probe', 'before_switch_gcode': '', 'end_gcode': 'Dock_Probe'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': '^PG6', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 300.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'PG9', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 303.5, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PF11', 'dir_pin': '!PG3', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG5', 'endstop_pin': 'PG10', 'position_endstop': -0.855, 'position_min': -4.5, 'position_max': 290.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA0'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PF9', 'dir_pin': '!PF10', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG2'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF4', 'min_temp': 10.0, 'max_temp': 270.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 26.572, 'pid_ki': 2.036, 'pid_kd': 86.691, 'heater_pin': 'PA1', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PC13', 'pressure_advance': 0.05, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'PF0', 'rotation_distance': 21.9459674016, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 55.196, 'pid_ki': 2.091, 'pid_kd': 364.295, 'heater_pin': 'PA2', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'probe': {'z_offset': 0.0, 'deactivate_on_each_sample': True, 'activate_gcode': '', 'deactivate_gcode': '', 'pin': 'PG15', 'speed': 10.0, 'lift_speed': 10.0, 'x_offset': 0.0, 'y_offset': 25.0, 'samples': 5, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.006, 'samples_tolerance_retries': 6}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE5', 'fan_speed': 1.0}, 'controller_fan controller_fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD12', 'fan_speed': 1.0, 'idle_speed': 1.0, 'idle_timeout': 30, 'heater': ['heater_bed']}, 'heater_fan exhaust_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 5.0, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13', 'fan_speed': 1.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PD15', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 1.0, 'maximum_mcu_duration': 0.0, 'value': 1.0, 'shutdown_value': 0.0}, 'neopixel headlight': {'pin': 'PB0', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 0.0, 'initial_green': 0.2157, 'initial_blue': 1.0, 'initial_white': 0.0}, 'temperature_sensor chamber_temp': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF5', 'min_temp': 0.0, 'max_temp': 100.0, 'gcode_id': 'chamber_th'}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [150.0, 348.0], [350.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 5.0], [150.0, 245.0], [270.0, 5.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'gcode_macro _user_variables': {'gcode': '\n{% set Mx = printer[\'configfile\'].config["stepper_x"]["position_max"]|float %}\n{% set My = printer[\'configfile\'].config["stepper_y"]["position_max"]|float %}\n{% set Ox = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set Oy = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set Oz = printer[\'configfile\'].config["probe"]["z_offset"]|float %}\n\n\n{% if z_endstop_x != 0 or z_endstop_y != 0 %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ z_endstop_x }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ z_endstop_y }\n\n\n{% else %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ (Mx * 0.5) - Ox }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ (My * 0.5) - Oy }\n{% endif %}', 'description': 'G-Code macro', 'variable_verbose': 'True', 'variable_debug': 'False', 'variable_travel_speed': '200', 'variable_move_accel': '1000', 'variable_dock_speed': '50', 'variable_release_speed': '75', 'variable_z_drop_speed': '20', 'variable_safe_z': '25', 'variable_enable_z_hop': 'True', 'variable_max_bed_y': '300', 'variable_max_bed_x': '300', 'variable_z_endstop_x': '172', 'variable_z_endstop_y': '301', 'variable_docklocation_x': '42', 'variable_docklocation_y': '297', 'variable_docklocation_z': '-128', 'variable_enable_dock_servo': 'False', 'variable_servo_name': "'NAME'", 'variable_servo_deploy': '10', 'variable_servo_retract': '11', 'variable_servo_delay': '250', 'variable_dockmove_x': '40', 'variable_dockmove_y': '0', 'variable_dockmove_z': '0', 'variable_attachmove_x': '0', 'variable_attachmove_y': '30', 'variable_attachmove_z': '0', 'variable_umbilical': 'False', 'variable_umbilical_x': '15', 'variable_umbilical_y': '15', 'variable_park_toolhead': 'False', 'variable_parkposition_x': '125', 'variable_parkposition_y': '125', 'variable_parkposition_z': '30', 'variable_version': '1', 'variable_attachmove2_x': '0', 'variable_attachmove2_y': '0', 'variable_attachmove2_z': '0', 'variable_home_backoff_x': '10', 'variable_home_backoff_y': '10', 'variable_override_homing': "''", 'variable_dock_on_zhome': 'True'}, 'gcode_macro print_start': {'gcode': '\nM117 Homing...\nG28\nATTACH_PROBE\nZ_TILT_ADJUST\nDOCK_PROBE\nG28\n\n\n\n\n\n\n\nG0 X150 Y150 Z30 F3600', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1500.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-02-19 20:49:04,763 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-19 20:49:04,764 [printer.py:reinit()] - Klipper version: v0.12.0-103-g6ce6fbbc-dirty
2024-02-19 20:49:04,764 [printer.py:reinit()] - # Extruders: 1
2024-02-19 20:49:04,764 [printer.py:reinit()] - # Temperature devices: 2
2024-02-19 20:49:04,764 [printer.py:reinit()] - # Fans: 4
2024-02-19 20:49:04,764 [printer.py:reinit()] - # Output pins: 1
2024-02-19 20:49:04,764 [printer.py:reinit()] - # Leds: 1
2024-02-19 20:49:04,777 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2024-02-19 20:49:04,778 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-02-19 20:49:05,059 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor chamber_temp&fan&controller_fan controller_fan&heater_fan hotend_fan&heater_fan exhaust_fan&output_pin caselight&neopixel headlight
2024-02-19 20:49:05,073 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-02-19 20:49:05,073 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-02-19 20:49:05,074 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-02-19 20:49:05,074 [screen.py:init_klipper()] - Printer initialized
2024-02-19 20:49:09,709 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-23 17:44:58,143 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-23 17:45:03,143 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-23 17:45:08,143 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-23 17:45:13,143 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-23 17:45:18,146 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-23 17:45:23,144 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-23 17:45:28,143 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-23 17:45:33,143 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-23 17:45:38,143 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-23 17:45:43,151 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: argument of type 'NoneType' is not iterable
  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 90, in draw_graph
    self.max_length = self.get_max_length()

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 46, in get_max_length
    return min(len(self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/widgets/heatergraph.py", line 48, in <genexpr>
    and self.printer.get_temp_store(name, "temperatures"))

  File "/home/pi/KlipperScreen/ks_includes/printer.py", line 350, in get_temp_store
    if device not in self.tempstore:
NoneType: None
2024-02-23 17:45:47,971 [screen.py:_load_panel()] - Loading panel: move
2024-02-23 17:45:48,066 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-02-23 17:45:48,627 [screen.py:_load_panel()] - Loading panel: menu
2024-02-23 17:45:48,706 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move > menu
2024-02-23 17:45:48,716 [menu.py:arrangeMenuItems()] - X > homing quad_gantry_level
2024-02-23 17:45:49,597 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G28'}
2024-02-23 17:46:15,809 [screen.py:_menu_go_back()] - #### Menu go back
2024-02-23 17:46:15,841 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-02-23 17:46:20,305 [move.py:change_distance()] - ### Distance 50
2024-02-23 17:46:20,910 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 X+50 F3000'}
2024-02-23 17:46:20,915 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-23 17:46:22,211 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 X+50 F3000'}
2024-02-23 17:46:22,213 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-23 17:46:23,150 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 X+50 F3000'}
2024-02-23 17:46:23,153 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-23 17:46:23,163 [screen.py:show_popup_message()] - error: Move out of range: 322.000 301.000 25.000 [0.000]
2024-02-23 17:46:24,353 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 X+50 F3000'}
2024-02-23 17:46:24,354 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-23 17:46:24,361 [screen.py:show_popup_message()] - error: Move out of range: 322.000 301.000 25.000 [0.000]
2024-02-23 17:46:25,457 [move.py:change_distance()] - ### Distance 25
2024-02-23 17:46:25,841 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 X+25 F3000'}
2024-02-23 17:46:25,842 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-23 17:46:27,849 [move.py:change_distance()] - ### Distance 1
2024-02-23 17:46:28,263 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 X+1 F3000'}
2024-02-23 17:46:28,266 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-23 17:46:28,742 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 X+1 F3000'}
2024-02-23 17:46:28,744 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-23 17:46:29,254 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 X+1 F3000'}
2024-02-23 17:46:29,256 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-23 17:46:29,878 [move.py:change_distance()] - ### Distance 50
2024-02-23 17:46:30,582 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 X-50 F3000'}
2024-02-23 17:46:30,585 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-23 17:46:31,354 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 X-50 F3000'}
2024-02-23 17:46:31,357 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-23 17:46:32,531 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 X-50 F3000'}
2024-02-23 17:46:32,534 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-23 17:46:33,610 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 X-50 F3000'}
2024-02-23 17:46:33,612 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-23 17:46:34,834 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 X-50 F3000'}
2024-02-23 17:46:34,837 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-23 17:46:36,154 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 X-50 F3000'}
2024-02-23 17:46:36,157 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-23 17:46:40,992 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move > menu
2024-02-23 17:46:41,009 [menu.py:arrangeMenuItems()] - X > homing quad_gantry_level
2024-02-23 17:46:42,041 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G28'}
2024-02-23 17:47:16,514 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G28 Z'}
2024-02-23 17:47:25,013 [screen.py:_menu_go_back()] - #### Menu go back
2024-02-23 17:47:25,039 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-02-23 17:47:27,157 [move.py:change_distance()] - ### Distance 5
2024-02-23 17:47:27,949 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 X-5 F3000'}
2024-02-23 17:47:27,951 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-23 17:47:28,962 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 X-5 F3000'}
2024-02-23 17:47:28,963 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-23 17:47:29,589 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 X-5 F3000'}
2024-02-23 17:47:29,592 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-23 17:47:30,218 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 X-5 F3000'}
2024-02-23 17:47:30,222 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-23 17:47:30,938 [move.py:change_distance()] - ### Distance 1
2024-02-23 17:47:31,310 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 X-1 F3000'}
2024-02-23 17:47:31,312 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-23 17:47:31,791 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 X-1 F3000'}
2024-02-23 17:47:31,794 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-23 17:47:33,571 [move.py:change_distance()] - ### Distance 50
2024-02-23 17:47:34,078 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y-50 F3000'}
2024-02-23 17:47:34,081 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-23 17:47:34,606 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y-50 F3000'}
2024-02-23 17:47:34,608 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-23 17:47:35,236 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y-50 F3000'}
2024-02-23 17:47:35,239 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-23 17:47:35,834 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y-50 F3000'}
2024-02-23 17:47:35,839 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-23 17:47:36,555 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y-50 F3000'}
2024-02-23 17:47:36,558 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-23 17:47:37,663 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y-50 F3000'}
2024-02-23 17:47:37,665 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-23 17:47:42,158 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+50 F3000'}
2024-02-23 17:47:42,162 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-23 17:47:42,687 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+50 F3000'}
2024-02-23 17:47:42,689 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-23 17:47:43,358 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G91\nG0 Y+50 F3000'}
2024-02-23 17:47:43,360 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: G90
2024-02-23 18:05:26,377 [screen.py:_menu_go_back()] - #### Menu go back
2024-02-23 18:05:26,407 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-02-23 18:05:26,440 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-02-23 18:05:26,447 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'temperature_sensor chamber_temp', 'extruder']
2024-02-23 18:05:26,460 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2024-02-23 18:05:26,461 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-02-23 18:08:00,528 [screen.py:_load_panel()] - Loading panel: extrude
2024-02-23 18:08:00,618 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > extrude
2024-02-23 18:08:08,102 [extrude.py:change_speed()] - ### Speed 5
2024-02-23 18:08:08,729 [extrude.py:change_distance()] - ### Distance 15
2024-02-23 18:08:09,254 [extrude.py:change_distance()] - ### Distance 25
2024-02-23 18:08:09,782 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: M83
2024-02-23 18:08:09,783 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G1 E+25 F300'}
2024-02-23 18:08:26,954 [screen.py:_menu_go_back()] - #### Menu go back
2024-02-23 18:08:26,993 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-02-23 18:15:38,205 [screen.py:show_popup_message()] - error: // Unknown command:"CENTER"
2024-02-23 18:20:50,589 [files.py:_callback()] - Error in getting metadata for .thumbs/Voron_Design_Cube_v7_ASA_34m47s-300x300.png. Retrying in 6 seconds
2024-02-23 18:20:50,591 [files.py:_callback()] - Error in getting metadata for .thumbs/Voron_Design_Cube_v7_ASA_34m47s-32x32.png. Retrying in 6 seconds
2024-02-23 18:20:58,008 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_DEFINE"
2024-02-23 18:20:58,147 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2024-02-23 18:20:58,147 [printer.py:change_state()] - Adding callback for state: printing
2024-02-23 18:20:58,150 [screen.py:_load_panel()] - Loading panel: job_status
2024-02-23 18:20:58,256 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-02-23 18:20:58,260 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-02-23 18:20:58,269 [job_status.py:update_file_metadata()] - Update Metadata. File: Voron_Design_Cube_v7_ASA_34m47s.gcode Size: 2898590
2024-02-23 18:20:58,276 [job_status.py:show_file_thumbnail()] - Voron_Design_Cube_v7_ASA_34m47s.gcode
2024-02-23 18:23:00,884 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_START"
2024-02-23 18:23:21,891 [files.py:remove_file_callback()] - callback not found <bound method Panel._callback_metadata of <panels.job_status.Panel object at 0x7f582dc220>>
2024-02-23 18:23:21,891 [screen.py:_load_panel()] - Loading panel: fine_tune
2024-02-23 18:23:21,969 [screen.py:attach_panel()] - Current panel hierarchy: job_status > fine_tune
2024-02-23 18:23:24,830 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=+0.05 MOVE=1'}
2024-02-23 18:23:26,158 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=+0.05 MOVE=1'}
2024-02-23 18:23:43,486 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-23 18:23:44,426 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SET_GCODE_OFFSET Z_ADJUST=+0.05 MOVE=1'}
2024-02-23 18:23:57,346 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_START"
2024-02-23 18:24:18,162 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-23 18:24:38,258 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-23 18:24:46,804 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-23 18:24:55,575 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-23 18:25:04,037 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-23 18:25:12,650 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-23 18:25:25,285 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-23 18:25:35,578 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-23 18:25:46,787 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-23 18:25:57,529 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-23 18:26:07,153 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-23 18:26:16,911 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-23 18:26:26,750 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-23 18:26:35,880 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-23 18:26:46,347 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-23 18:26:55,988 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-23 18:27:07,907 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-23 18:27:18,763 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-23 18:27:29,982 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-23 18:27:41,000 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-23 18:27:51,596 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-23 18:28:02,631 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-23 18:28:12,854 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-23 18:28:23,333 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-23 18:28:33,686 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-23 18:28:43,828 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-23 18:28:54,298 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-23 18:29:05,511 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-23 18:29:12,138 [screen.py:_menu_go_back()] - #### Menu go back
2024-02-23 18:29:12,173 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-02-23 18:29:12,187 [job_status.py:update_file_metadata()] - Update Metadata. File: Voron_Design_Cube_v7_ASA_34m47s.gcode Size: 2898590
2024-02-23 18:29:12,196 [job_status.py:show_file_thumbnail()] - Voron_Design_Cube_v7_ASA_34m47s.gcode
2024-02-23 18:29:17,204 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-23 18:29:28,620 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-23 18:29:40,325 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-23 18:29:52,317 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-23 18:30:03,726 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-23 18:30:15,439 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-23 18:30:26,281 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-23 18:30:37,471 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-23 18:30:47,964 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-23 18:30:58,803 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-23 18:31:12,661 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-23 18:31:22,693 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-23 18:31:33,475 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-23 18:31:45,193 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-23 18:31:57,421 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-23 18:32:10,500 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-23 18:32:25,602 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-23 18:32:39,208 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-23 18:32:54,963 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-23 18:33:09,743 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-23 18:33:24,987 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-23 18:33:40,140 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-23 18:33:56,082 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-23 18:34:12,767 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-23 18:34:27,984 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-23 18:34:43,050 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-23 18:34:58,190 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-23 18:35:15,359 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-23 18:35:32,705 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-23 18:35:48,752 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-23 18:36:03,345 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-23 18:36:18,623 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-23 18:36:33,357 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-23 18:36:47,949 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-23 18:37:03,229 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-23 18:37:17,421 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-23 18:37:32,094 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-23 18:37:46,533 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-23 18:38:00,949 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-23 18:38:14,787 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-23 18:38:28,496 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-23 18:38:42,103 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-23 18:38:56,991 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-23 18:39:12,181 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-23 18:39:41,661 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-23 18:40:01,676 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-23 18:40:19,901 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-23 18:40:39,466 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-23 18:40:54,805 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-23 18:41:09,466 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-23 18:41:24,113 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-23 18:41:37,997 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-23 18:41:52,736 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-23 18:42:06,618 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-23 18:42:21,175 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-23 18:42:35,610 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-23 18:42:50,425 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-23 18:43:04,485 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-23 18:43:18,647 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-23 18:43:33,797 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-23 18:43:49,135 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-23 18:44:06,111 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-23 18:44:24,465 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-23 18:44:41,008 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-23 18:44:57,455 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-23 18:45:12,204 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-23 18:45:27,775 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-23 18:45:44,107 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-23 18:46:00,409 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-23 18:46:15,737 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-23 18:46:30,872 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-23 18:46:45,877 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-23 18:47:00,774 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-23 18:47:16,411 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-23 18:47:30,122 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-23 18:47:44,836 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-23 18:47:57,070 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-23 18:48:07,993 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-23 18:48:18,911 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-23 18:48:30,521 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-23 18:48:40,979 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-23 18:48:50,672 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-23 18:49:00,257 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-23 18:49:09,852 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-23 18:49:19,447 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-23 18:49:29,067 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-23 18:49:38,544 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-23 18:49:48,400 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-23 18:49:58,121 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-23 18:50:08,646 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-23 18:50:19,224 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-23 18:50:30,098 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-23 18:50:51,098 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-23 18:51:04,419 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-23 18:51:20,948 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-23 18:51:31,540 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-23 18:51:41,303 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-23 18:51:51,968 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-23 18:52:02,097 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-23 18:52:12,775 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-23 18:52:23,210 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-23 18:52:33,481 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-23 18:52:43,676 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-23 18:52:52,549 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-23 18:53:01,904 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-23 18:53:10,199 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-23 18:53:19,021 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-23 18:53:27,614 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-23 18:53:36,340 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-23 18:53:44,918 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-23 18:53:53,501 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-23 18:54:03,043 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-23 18:54:11,723 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-23 18:54:21,060 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-23 18:54:29,838 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-23 18:54:38,549 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-23 18:54:47,743 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-23 18:55:14,302 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-23 18:55:34,232 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-23 18:55:53,996 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-23 18:56:18,496 [screen.py:show_popup_message()] - error: // Unknown command:"EXCLUDE_OBJECT_END"
2024-02-23 18:56:20,727 [screen.py:show_popup_message()] - error: // Unknown command:"BED_MESH_CLEAR"
2024-02-23 18:56:20,788 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2024-02-23 18:56:20,788 [printer.py:change_state()] - Adding callback for state: ready
2024-02-23 18:56:20,810 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'complete'
2024-02-23 19:17:21,859 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-02-23 19:17:21,859 [functions.py:log_start()] - KlipperScreen Version: v0.3.8-89-g2a5e9b3
2024-02-23 19:17:21,860 [functions.py:log_start()] - Python version: 3.9
2024-02-23 19:17:22,016 [config.py:get_config_file_location()] - Passed config (-c): .
2024-02-23 19:17:22,018 [config.py:__init__()] - Config path location: /home/pi/printer_data/config/KlipperScreen.conf
2024-02-23 19:17:22,029 [config.py:log_config()] -  ===== Config File =====

=======================
2024-02-23 19:17:22,031 [config.py:__init__()] - ====== Saved Def ======

[graph Printer]
heater_bed = False
extruder = False

=======================
2024-02-23 19:17:22,031 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-02-23 19:17:22,135 [config.py:create_translations()] - Selected lang: None OS lang: en_GB
2024-02-23 19:17:22,135 [config.py:install_language()] - Using lang en
2024-02-23 19:17:22,153 [screen.py:__init__()] - Screen resolution: 800x480
2024-02-23 19:17:22,154 [KlippyGtk.py:__init__()] - Font size: 16.6 (medium)
2024-02-23 19:17:22,739 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2024-02-23 19:17:22,748 [screen.py:set_screenblanking_timeout()] - Using DPMS
2024-02-23 19:17:22,755 [screen.py:initial_connection()] - Default printer: None
2024-02-23 19:17:22,789 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-02-23 19:17:22,790 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-02-23 19:17:22,834 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-02-23 19:17:22,841 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-02-23 19:17:22,860 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-23 19:17:22,873 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/access/oneshot_token
2024-02-23 19:17:22,875 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-02-23 19:17:22,885 [_logging.py:info()] - Websocket connected
2024-02-23 19:17:22,886 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-02-23 19:17:22,916 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-23 19:17:22,924 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2024-02-23 19:17:22,925 [printer.py:configure_cameras()] - Cameras: []
2024-02-23 19:17:22,926 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'history', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-310-g67c98f6', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-02-23 19:17:22,934 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2024-02-23 19:17:23,066 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2024-02-23 19:17:23,069 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro _Probe_Variables': {'variable_probe_attached': 'False', 'variable_probe_state': 'False', 'variable_probe_lock': 'False', 'variable_probe_z_homed': 'False', 'variable_z_endstop_x': '0', 'variable_z_endstop_y': '0', 'gcode': ''}, 'gcode_macro _klicky_check_variables_version': {'gcode': '\n{% set version = printer["gcode_macro _User_Variables"].version|default(0) %}\n\n{% if version != 1 %}\n{ action_raise_error("Please update your klicky variables, there are some functionality changes") }\n{% endif %}'}, 'gcode_macro _KlickyDebug': {'gcode': '\n{% set message  = params.MSG %}\n{% set debug = printer["gcode_macro _User_Variables"].debug|default(False) %}\n\n{% if debug %}\n{ action_respond_info(message) }\n{% endif %}'}, 'gcode_macro _exit_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move  = params.MOVE|default(0) %}\n{% set speed = printer["gcode_macro _User_Variables"].travel_speed %}\n\n\nM400\nSET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\nRESTORE_GCODE_STATE NAME={function} MOVE={move} MOVE_SPEED={speed}'}, 'gcode_macro _entry_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move_accel = printer["gcode_macro _User_Variables"].move_accel|default(1000) %}\n\nM400\nSAVE_GCODE_STATE NAME={function}\n\nSET_GCODE_OFFSET Z=0\n\nG90\n\nSET_VELOCITY_LIMIT ACCEL={move_accel}'}, 'gcode_macro _Homing_Variables': {'gcode': '\n{% set reset  = params.RESET|default(0) %}\n{% if reset %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }\n{% endif %}'}, 'gcode_macro Attach_Probe_Lock': {'description': 'Attaches Klicky Probe, can only be docked after unlocking', 'gcode': '\nAttach_Probe\n_Probe_Lock'}, 'gcode_macro Dock_Probe_Unlock': {'description': 'Docks Klicky Probe even if it was locked', 'gcode': '\n_Probe_Unlock\nDock_Probe'}, 'gcode_macro _Probe_Unlock': {'description': 'Unlocks Klicky Probe state', 'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to False"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }'}, 'gcode_macro _Probe_Lock': {'description': 'Locks Klicky Probe state', 'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to True"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ True }'}, 'gcode_macro _DeployKlickyDock': {'description': 'Deploys Klicky servo-controlled dock', 'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_deploy = printer["gcode_macro _User_Variables"].servo_deploy|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_DeployKlickyDock Klicky servo configuration enabled"\n{% if servo_deploy == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo deploy angle specified") }\n{% endif %}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _DeployDock"] is defined %}\n_KlickyDebug msg="_DeployKlickyDock calling _DeployDock"\n_DeployDock\n{% endif %}'}, 'gcode_macro _RetractKlickyDock': {'description': 'Retracts Klicky servo-controlled dock', 'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_retract = printer["gcode_macro _User_Variables"].servo_retract|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_RetractKlickyDock Klicky servo configuration enabled"\n{% if servo_retract == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo retract angle specified") }\n{% endif %}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _RetractDock"] is defined %}\n_KlickyDebug msg="_RetractKlickyDock calling _RetractDock"\n_RetractDock\n{% endif %}'}, 'gcode_macro Attach_Probe': {'description': 'Attaches Klicky Probe', 'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set attachmove2_x = printer["gcode_macro _User_Variables"].attachmove2_x|default(0) %}\n{% set attachmove2_y = printer["gcode_macro _User_Variables"].attachmove2_y|default(0) %}\n{% set attachmove2_z = printer["gcode_macro _User_Variables"].attachmove2_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n_entry_point function=Attach_Probe\n\n{% if bypass_probe_docking == False %}\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n_KlickyDebug msg="Attach_Probe Axis homed"\n\n\n{% elif not probe_attached and not probe_lock %}\n_KlickyDebug msg="Attach_Probe going to attach probe"\n{% if verbose %}\n{ action_respond_info("Attaching Probe") }\n{% endif %}\n_KLICKY_STATUS_BUSY\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% if not enable_z_hop %}\n_KlickyDebug msg="Attach_Probe z_hop disabled"\n{% set safe_z = 0 %}\n{% endif %}\n{% endif %}\n\n\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero, duplicate?") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Umbilical_Path\n\n_entry_point function=Attach_Probe_intern\n\n\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n_DeployKlickyDock\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}"\nG0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}\n\n_RetractKlickyDock\n\n{% if ((printer.gcode_move.gcode_position.z < safe_z) or (docklocation_z != -128 and docklocation_z < safe_z ))%}\n_KlickyDebug msg="Attach_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\n_CheckProbe action=attach\n\n_exit_point function=Attach_Probe_intern move={goback}\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe locked not attaching probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already attached!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe already attached, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Attach_Probe\n{% else %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}'}, 'gcode_macro Dock_Probe': {'description': 'Docks Klicky Probe', 'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n{% if bypass_probe_docking == True %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}\n\n{% if bypass_probe_docking != True %}\n_entry_point function=Dock_Probe\n\n\n{% if probe_attached and not probe_lock %}\n_KLICKY_STATUS_BUSY\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Dock_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n_Umbilical_Path\n\n\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n\n_DeployKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\n\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}"\nG0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}\n{% endif %}\n\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}\n\n\n_RetractKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving away from the dock to G0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}\n\n\n{% if (printer.gcode_move.gcode_position.z < safe_z) %}\n_KlickyDebug msg="Dock_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\nG4 P1000\n_CheckProbe action=dock\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe locked not docking probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already docked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe already docked, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Dock_Probe move={goback}\n{% else %}\n_KlickyDebug msg="Dock_Probe probe docking bypassed, doing nothing"\n{% endif %}'}, 'gcode_macro PROBE_CALIBRATE': {'rename_existing': '_PROBE_CALIBRATE', 'description': 'Calibrate the probes z_offset with klicky automount', 'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_calibrate Axis homed"\n_KlickyDebug msg="probe_calibrate Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_CALIBRATE with the probe above the BED, check klicky_variables bed size!") }\n{% endif %}\n\n{% if bypass_probe_docking == False %}\n_CheckProbe action=query\nG90\nAttach_Probe back=1\n_KLICKY_STATUS_CALIBRATING_Z\n\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nM118 moving the toolhead 20 mm from the bed\n_KlickyDebug msg="probe_calibrate Moving Z up by 20mm"\nTESTZ Z=20\nM118 remove manually the probe and continue calibration\n_KLICKY_STATUS_READY\n{% else %}\n_KLICKY_STATUS_CALIBRATING_Z\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n_KLICKY_STATUS_READY\n{% endif %}'}, 'gcode_macro PROBE_ACCURACY': {'rename_existing': '_PROBE_ACCURACY', 'description': 'Probe Z-height accuracy at current XY position with klicky automount', 'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_accuracy Axis homed"\n_KlickyDebug msg="probe_accuracy Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n_entry_point function=PROBE_ACCURACY\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_ACCURACY with the probe above the BED, check klicky_variables bed size!") }\n{% endif%}\n\n_CheckProbe action=query\nAttach_Probe back=1\n\n_KlickyDebug msg="probe_accuracy calling klipper probe accuracy"\n_PROBE_ACCURACY {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nDock_Probe back=1\n\n_exit_point function=PROBE_ACCURACY move=1'}, 'force_move': {'enable_force_move': 'True'}, 'homing_override': {'axes': 'xyz', 'gcode': '\n\n_User_Variables\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n{% set kinematic_z = 0 %}\n{% set dock_on_zhome = printer["gcode_macro _User_Variables"].dock_on_zhome|default(True) %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set home_backoff_x = printer["gcode_macro _User_Variables"].home_backoff_x|default(0) %}\n{% set home_backoff_y = printer["gcode_macro _User_Variables"].home_backoff_y|default(0) %}\n{% set override_homing = printer["gcode_macro _User_Variables"].override_homing|default(\'\') %}\n\n\n_klicky_check_variables_version\n\n_CheckProbe action=query\n\n\n{% set home_x, home_y, home_z, leave_probe_attached = False, False, False, False %}\n\n{% if \'PROBE_LOCK\' in params%}\n{% if verbose %}\n{ action_respond_info("PROBE_LOCK = True") }\n{% endif %}\n{% set leave_probe_attached = True %}\n{% endif %}\n\n\n{% if not \'X\' in params\nand not \'Y\' in params\nand not \'Z\' in params %}\n\n{% set home_x, home_y, home_z = True, True, True %}\n_KlickyDebug msg="homing_override goint to home all axes"\n\n{% else %}\n{% if \'X\' in params %}\n{% set home_x = True %}\n_KlickyDebug msg="homing_override goint to home X"\n\n{% endif %}\n\n{% if \'Y\' in params %}\n{% set home_y = True %}\n_KlickyDebug msg="homing_override goint to home Y"\n{% endif %}\n\n{% if \'Z\' in params %}\n{% set home_z = True %}\n_KlickyDebug msg="homing_override goint to home Z"\n{% endif %}\n\n{% if \'X\' in params\nand \'Y\' in params\nand \'Z\' in params %}\n\n\n_Homing_Variables reset=1\n_KlickyDebug msg="homing_override goint to home all axes"\n{% endif %}\n\n{% endif %}\n\n_entry_point function=homing_override\n_KLICKY_STATUS_HOMING\n\n\n{% if \'z\' not in printer.toolhead.homed_axes %}\n{% if enable_z_hop == False %}\n_KlickyDebug msg="homing_override z_hop disabled"\n\n{% set kinematic_z = safe_z %}\n{% set safe_z = safe_z %}\n{% endif %}\n{% endif %}\n\n\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes and \'z\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("No axis homed") }\n{% endif %}\n_KlickyDebug msg="homing_override no axis homed, setting position as X=Y=0 Z={kinematic_z}"\nSET_KINEMATIC_POSITION X=0 Y=0 Z={kinematic_z}\nM400\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% if home_z != True %}\n_KlickyDebug msg="homing_override clearing axis homed state if not already homing Z"\nM84\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("X or Y not homed, forcing full G28") }\n{% endif %}\n{% set home_x, home_y, home_z = True, True, True %}\n{% endif %}\n{% endif %}\n\n\n{% if ((attachmove_y == 0 and override_homing == \'\' ) or (override_homing == \'Y\'))%}\n\n{% if home_y %}\n{% if override_homing == \'Y\' %}\n_KlickyDebug msg="homing_override Y homing first override, due to override_homing = Y"\n{% else %}\n_KlickyDebug msg="homing_override Y homing first override, due to attachmove_y = 0"\n{% endif %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y G28 Y0"\nG28 Y0\n\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop-home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n{% set home_y = False %}\n{% endif %}\n\n\n\n{% if home_x %}\n{% if verbose %}\n{ action_respond_info("Homing X") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in X homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_X"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_X external script to handle the X homing"\n_HOME_X\n{% else %}\n_KlickyDebug msg="homing_override Homing X, G28 X0"\nG28 X0\n\n{% if home_backoff_x != 0 %}\n{% if (printer.configfile.settings.stepper_x.position_endstop > (printer.configfile.settings.stepper_x.position_min|default(0) + printer.configfile.settings.stepper_x.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n\n{% if home_y %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y, G28 Y0"\nG28 Y0\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if verbose %}\n{ action_respond_info("Homing Z") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe configured as a virtual Z endstop attaching probe"\nAttach_Probe\n\n{% if leave_probe_attached %}\n_Probe_Lock\n{% endif %}\n{% elif dock_on_zhome == True %}\nDock_Probe\n{% endif %}\n\n_Home_Z_\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe no longer required, docking probe"\nDock_Probe\n{% elif dock_on_zhome == False %}\nDock_Probe\n{% endif %}\n{% endif %}\n_CheckProbe action=query\n\n\n_Park_Toolhead\n\n_exit_point function=homing_override\n_KLICKY_STATUS_READY'}, 'gcode_macro _Umbilical_Path': {'gcode': '\n{% set umbilical = printer["gcode_macro _User_Variables"].umbilical %}\n{% set umbilical_x = printer["gcode_macro _User_Variables"].umbilical_x %}\n{% set umbilical_y = printer["gcode_macro _User_Variables"].umbilical_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n\n{% if umbilical %}\n\n_entry_point function=Umbilical_Path\n\n_KlickyDebug msg="_Umbilical_Path moving to G0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}"\nG0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}\n\n_exit_point function=Umbilical_Path\n{% endif %}'}, 'gcode_macro _Home_Z_': {'gcode': '\n{% set z_endstop_x = printer["gcode_macro _Probe_Variables"].z_endstop_x %}\n{% set z_endstop_y = printer["gcode_macro _Probe_Variables"].z_endstop_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}    {% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Home_Z\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n{% else %}\n_KlickyDebug msg="_Home_Z_ XY Axis homed"\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="_Home_Z_ Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n\n\n_KlickyDebug msg="_Home_Z_ moving to Z endstop position G0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}"\nG0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}\n_KlickyDebug msg="_Home_Z_ Homing Z G28 Z"\nG28 Z0\n_KlickyDebug msg="_Home_Z_ toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_exit_point function=Home_Z'}, 'gcode_macro _CheckProbe': {'variable_probe_state': '0', 'gcode': '\nQuery_Probe\n_SetProbeState action={ params.ACTION }'}, 'gcode_macro _SetProbeState': {'gcode': '\n{% set query_probe_triggered = printer.probe.last_query %}\n{% set action  = params.ACTION|default(\'\') %}\n\n\n{% if query_probe_triggered %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ False }\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ True }\n{% endif %}\n\n{% if action == \'query\' %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_state VALUE={ query_probe_triggered }\n{% endif %}\n\n\n\n\n{% if not query_probe_triggered and action == \'dock\' %}\n{ action_raise_error("Probe dock failed!") }\n{% endif %}\n\n\n{% if query_probe_triggered and action == \'attach\' %}\n{ action_raise_error("Probe attach failed!") }\n{% endif %}'}, 'gcode_macro _Park_Toolhead': {'gcode': '\n{% set park_toolhead = printer["gcode_macro _User_Variables"].park_toolhead %}\n{% set parkposition_x = printer["gcode_macro _User_Variables"].parkposition_x %}\n{% set parkposition_y = printer["gcode_macro _User_Variables"].parkposition_y %}\n{% set parkposition_z = printer["gcode_macro _User_Variables"].parkposition_z %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Park_Toolhead\n\n{% if park_toolhead and \'xyz\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Parking Toolhead") }\n{% endif %}\n{% if parkposition_z == -128 %}\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}\n\n{% else %}\n\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}\n\n{% endif %}\n\n{% endif %}\n_exit_point function=Park_Toolhead'}, 'gcode_macro _klicky_status_ready': {'gcode': '\n{% if printer[\'gcode_macro status_ready\'] is defined %}\n_KlickyDebug msg="_klicky_status_ready activating the LED STATUS_READY"\nSTATUS_READY\n{% endif %}'}, 'gcode_macro _klicky_status_busy': {'gcode': '\n{% if printer[\'gcode_macro status_busy\'] is defined %}\n_KlickyDebug msg="_klicky_status_busy activating the LED STATUS_BUSY"\nSTATUS_BUSY\n{% endif %}'}, 'gcode_macro _klicky_status_leveling': {'gcode': '\n{% if printer[\'gcode_macro status_leveling\'] is defined %}\n_KlickyDebug msg="_klicky_status_leveling activating the LED STATUS_LEVELING"\nSTATUS_LEVELING\n{% endif %}'}, 'gcode_macro _klicky_status_homing': {'gcode': '\n{% if printer[\'gcode_macro status_homing\'] is defined %}\n_KlickyDebug msg="_klicky_status_homing activating the LED STATUS_HOMING"\nSTATUS_HOMING\n{% endif %}'}, 'gcode_macro _klicky_status_cleaning': {'gcode': '\n{% if printer[\'gcode_macro status_cleaning\'] is defined %}\n_KlickyDebug msg="_klicky_status_cleaning activating the LED STATUS_CLEANING"\nSTATUS_CLEANING\n{% endif %}'}, 'gcode_macro _klicky_status_meshing': {'gcode': '\n{% if printer[\'gcode_macro status_meshing\'] is defined %}\n_KlickyDebug msg="_klicky_status_meshing activating the LED STATUS_MESHING"\nSTATUS_MESHING\n{% endif %}'}, 'gcode_macro _klicky_status_calibrating_z': {'gcode': '\n{% if printer[\'gcode_macro status_calibrating_z\'] is defined %}\n_KlickyDebug msg="_klicky_status_calibrating_z activating the LED STATUS_CALIBRATING_Z"\nSTATUS_CALIBRATING_Z\n{% endif %}'}, 'z_calibration': {'nozzle_xy_position': '172, 301', 'switch_xy_position': '172, 275', 'bed_xy_position': '150, 150', 'switch_offset': '0.065', 'offset_margins': '-1.0,1.0', 'speed': '50', 'probing_first_fast': 'false', 'start_gcode': 'Attach_Probe', 'end_gcode': 'Dock_Probe'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_28003C001150535556323420-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '^PG6', 'position_min': '0', 'position_endstop': '299', 'position_max': '299', 'homing_speed': '25', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'PG9', 'position_min': '0', 'position_endstop': '300', 'position_max': '303.5', 'homing_speed': '25', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': '!PG3', 'enable_pin': '!PG5', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'PG10', 'position_max': '290', 'position_min': '-4.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3', 'position_endstop': '-0.855'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA0', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': '!PF10', 'enable_pin': '!PG2', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PC13', 'dir_pin': 'PF0', 'enable_pin': '!PF1', 'rotation_distance': '21.9459674016', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.75', 'heater_pin': 'PA1', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF4', 'min_temp': '10', 'max_temp': '270', 'max_power': '1.0', 'min_extrude_temp': '170', 'pressure_advance': '0.05', 'pressure_advance_smooth_time': '0.040', 'control': 'pid', 'pid_kp': '26.572', 'pid_ki': '2.036', 'pid_kd': '86.691'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.5', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PA2', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF3', 'max_power': '1', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '55.196', 'pid_ki': '2.091', 'pid_kd': '364.295'}, 'probe': {'pin': 'PG15', 'x_offset': '0', 'y_offset': '25.0', 'z_offset': '0', 'speed': '10.0', 'samples': '5', 'samples_result': 'median', 'sample_retract_dist': '3.0', 'samples_tolerance': '0.006', 'samples_tolerance_retries': '6'}, 'fan': {'pin': 'PA8', 'kick_start_time': '0.5', 'off_below': '0.10'}, 'heater_fan hotend_fan': {'pin': 'PE5', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'controller_fan controller_fan': {'pin': 'PD12', 'kick_start_time': '0.5', 'heater': 'heater_bed'}, 'heater_fan exhaust_fan': {'pin': 'PD13', 'max_power': '1.0', 'shutdown_speed': '0.0', 'kick_start_time': '5.0', 'heater': 'heater_bed', 'heater_temp': '60', 'fan_speed': '1.0'}, 'output_pin caselight': {'pin': 'PD15', 'pwm': 'true', 'shutdown_value': '0', 'value': '1', 'cycle_time': '0.01'}, 'neopixel headlight': {'pin': 'PB0', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '0.0', 'initial_green': '0.2157', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'temperature_sensor chamber_temp': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF5', 'min_temp': '0', 'max_temp': '100', 'gcode_id': 'chamber_th'}, 'idle_timeout': {'timeout': '1800'}, 'z_tilt': {'z_positions': '\n-50, 18\n150, 348\n350, 18', 'points': '\n30, 5\n150, 245\n270, 5', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'gcode_macro _User_Variables': {'variable_verbose': 'True', 'variable_debug': 'False', 'variable_travel_speed': '200', 'variable_move_accel': '1000', 'variable_dock_speed': '50', 'variable_release_speed': '75', 'variable_z_drop_speed': '20', 'variable_safe_z': '25', 'variable_enable_z_hop': 'True', 'variable_max_bed_y': '300', 'variable_max_bed_x': '300', 'variable_z_endstop_x': '172', 'variable_z_endstop_y': '301', 'variable_docklocation_x': '42', 'variable_docklocation_y': '297', 'variable_docklocation_z': '-128', 'variable_enable_dock_servo': 'False', 'variable_servo_name': "'NAME'", 'variable_servo_deploy': '10', 'variable_servo_retract': '11', 'variable_servo_delay': '250', 'variable_dockmove_x': '40', 'variable_dockmove_y': '0', 'variable_dockmove_z': '0', 'variable_attachmove_x': '0', 'variable_attachmove_y': '30', 'variable_attachmove_z': '0', 'variable_umbilical': 'False', 'variable_umbilical_x': '15', 'variable_umbilical_y': '15', 'variable_park_toolhead': 'False', 'variable_parkposition_x': '125', 'variable_parkposition_y': '125', 'variable_parkposition_z': '30', 'variable_version': '1', 'variable_attachmove2_x': '0', 'variable_attachmove2_y': '0', 'variable_attachmove2_z': '0', 'variable_home_backoff_x': '10', 'variable_home_backoff_y': '10', 'variable_override_homing': "''", 'variable_dock_on_zhome': 'True', 'gcode': '\n{% set Mx = printer[\'configfile\'].config["stepper_x"]["position_max"]|float %}\n{% set My = printer[\'configfile\'].config["stepper_y"]["position_max"]|float %}\n{% set Ox = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set Oy = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set Oz = printer[\'configfile\'].config["probe"]["z_offset"]|float %}\n\n\n{% if z_endstop_x != 0 or z_endstop_y != 0 %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ z_endstop_x }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ z_endstop_y }\n\n\n{% else %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ (Mx * 0.5) - Ox }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ (My * 0.5) - Oy }\n{% endif %}'}, 'gcode_macro PRINT_START': {'gcode': '\nM117 Homing...\nG28\nATTACH_PROBE\nZ_TILT_ADJUST\nDOCK_PROBE\nG28\nM117 Printing...\n\n\n\n\n\n\n\nG0 X150 Y150 Z30 F3600'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_28003C001150535556323420-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro _probe_variables': {'gcode': '', 'description': 'G-Code macro', 'variable_probe_attached': 'False', 'variable_probe_state': 'False', 'variable_probe_lock': 'False', 'variable_probe_z_homed': 'False', 'variable_z_endstop_x': '0', 'variable_z_endstop_y': '0'}, 'gcode_macro _klicky_check_variables_version': {'gcode': '\n{% set version = printer["gcode_macro _User_Variables"].version|default(0) %}\n\n{% if version != 1 %}\n{ action_raise_error("Please update your klicky variables, there are some functionality changes") }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klickydebug': {'gcode': '\n{% set message  = params.MSG %}\n{% set debug = printer["gcode_macro _User_Variables"].debug|default(False) %}\n\n{% if debug %}\n{ action_respond_info(message) }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _exit_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move  = params.MOVE|default(0) %}\n{% set speed = printer["gcode_macro _User_Variables"].travel_speed %}\n\n\nM400\nSET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\nRESTORE_GCODE_STATE NAME={function} MOVE={move} MOVE_SPEED={speed}', 'description': 'G-Code macro'}, 'gcode_macro _entry_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move_accel = printer["gcode_macro _User_Variables"].move_accel|default(1000) %}\n\nM400\nSAVE_GCODE_STATE NAME={function}\n\nSET_GCODE_OFFSET Z=0\n\nG90\n\nSET_VELOCITY_LIMIT ACCEL={move_accel}', 'description': 'G-Code macro'}, 'gcode_macro _homing_variables': {'gcode': '\n{% set reset  = params.RESET|default(0) %}\n{% if reset %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro attach_probe_lock': {'gcode': '\nAttach_Probe\n_Probe_Lock', 'description': 'Attaches Klicky Probe, can only be docked after unlocking'}, 'gcode_macro dock_probe_unlock': {'gcode': '\n_Probe_Unlock\nDock_Probe', 'description': 'Docks Klicky Probe even if it was locked'}, 'gcode_macro _probe_unlock': {'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to False"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }', 'description': 'Unlocks Klicky Probe state'}, 'gcode_macro _probe_lock': {'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to True"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ True }', 'description': 'Locks Klicky Probe state'}, 'gcode_macro _deployklickydock': {'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_deploy = printer["gcode_macro _User_Variables"].servo_deploy|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_DeployKlickyDock Klicky servo configuration enabled"\n{% if servo_deploy == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo deploy angle specified") }\n{% endif %}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _DeployDock"] is defined %}\n_KlickyDebug msg="_DeployKlickyDock calling _DeployDock"\n_DeployDock\n{% endif %}', 'description': 'Deploys Klicky servo-controlled dock'}, 'gcode_macro _retractklickydock': {'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_retract = printer["gcode_macro _User_Variables"].servo_retract|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_RetractKlickyDock Klicky servo configuration enabled"\n{% if servo_retract == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo retract angle specified") }\n{% endif %}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _RetractDock"] is defined %}\n_KlickyDebug msg="_RetractKlickyDock calling _RetractDock"\n_RetractDock\n{% endif %}', 'description': 'Retracts Klicky servo-controlled dock'}, 'gcode_macro attach_probe': {'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set attachmove2_x = printer["gcode_macro _User_Variables"].attachmove2_x|default(0) %}\n{% set attachmove2_y = printer["gcode_macro _User_Variables"].attachmove2_y|default(0) %}\n{% set attachmove2_z = printer["gcode_macro _User_Variables"].attachmove2_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n_entry_point function=Attach_Probe\n\n{% if bypass_probe_docking == False %}\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n_KlickyDebug msg="Attach_Probe Axis homed"\n\n\n{% elif not probe_attached and not probe_lock %}\n_KlickyDebug msg="Attach_Probe going to attach probe"\n{% if verbose %}\n{ action_respond_info("Attaching Probe") }\n{% endif %}\n_KLICKY_STATUS_BUSY\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% if not enable_z_hop %}\n_KlickyDebug msg="Attach_Probe z_hop disabled"\n{% set safe_z = 0 %}\n{% endif %}\n{% endif %}\n\n\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero, duplicate?") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Umbilical_Path\n\n_entry_point function=Attach_Probe_intern\n\n\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n_DeployKlickyDock\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}"\nG0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}\n\n_RetractKlickyDock\n\n{% if ((printer.gcode_move.gcode_position.z < safe_z) or (docklocation_z != -128 and docklocation_z < safe_z ))%}\n_KlickyDebug msg="Attach_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\n_CheckProbe action=attach\n\n_exit_point function=Attach_Probe_intern move={goback}\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe locked not attaching probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already attached!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe already attached, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Attach_Probe\n{% else %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}', 'description': 'Attaches Klicky Probe'}, 'gcode_macro dock_probe': {'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n{% if bypass_probe_docking == True %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}\n\n{% if bypass_probe_docking != True %}\n_entry_point function=Dock_Probe\n\n\n{% if probe_attached and not probe_lock %}\n_KLICKY_STATUS_BUSY\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Dock_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n_Umbilical_Path\n\n\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n\n_DeployKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\n\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}"\nG0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}\n{% endif %}\n\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}\n\n\n_RetractKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving away from the dock to G0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}\n\n\n{% if (printer.gcode_move.gcode_position.z < safe_z) %}\n_KlickyDebug msg="Dock_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\nG4 P1000\n_CheckProbe action=dock\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe locked not docking probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already docked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe already docked, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Dock_Probe move={goback}\n{% else %}\n_KlickyDebug msg="Dock_Probe probe docking bypassed, doing nothing"\n{% endif %}', 'description': 'Docks Klicky Probe'}, 'gcode_macro probe_calibrate': {'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_calibrate Axis homed"\n_KlickyDebug msg="probe_calibrate Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_CALIBRATE with the probe above the BED, check klicky_variables bed size!") }\n{% endif %}\n\n{% if bypass_probe_docking == False %}\n_CheckProbe action=query\nG90\nAttach_Probe back=1\n_KLICKY_STATUS_CALIBRATING_Z\n\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nM118 moving the toolhead 20 mm from the bed\n_KlickyDebug msg="probe_calibrate Moving Z up by 20mm"\nTESTZ Z=20\nM118 remove manually the probe and continue calibration\n_KLICKY_STATUS_READY\n{% else %}\n_KLICKY_STATUS_CALIBRATING_Z\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n_KLICKY_STATUS_READY\n{% endif %}', 'rename_existing': '_PROBE_CALIBRATE', 'description': 'Calibrate the probes z_offset with klicky automount'}, 'gcode_macro probe_accuracy': {'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_accuracy Axis homed"\n_KlickyDebug msg="probe_accuracy Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n_entry_point function=PROBE_ACCURACY\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_ACCURACY with the probe above the BED, check klicky_variables bed size!") }\n{% endif%}\n\n_CheckProbe action=query\nAttach_Probe back=1\n\n_KlickyDebug msg="probe_accuracy calling klipper probe accuracy"\n_PROBE_ACCURACY {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nDock_Probe back=1\n\n_exit_point function=PROBE_ACCURACY move=1', 'rename_existing': '_PROBE_ACCURACY', 'description': 'Probe Z-height accuracy at current XY position with klicky automount'}, 'force_move': {'enable_force_move': True}, 'homing_override': {'axes': 'xyz', 'gcode': '\n\n_User_Variables\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n{% set kinematic_z = 0 %}\n{% set dock_on_zhome = printer["gcode_macro _User_Variables"].dock_on_zhome|default(True) %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set home_backoff_x = printer["gcode_macro _User_Variables"].home_backoff_x|default(0) %}\n{% set home_backoff_y = printer["gcode_macro _User_Variables"].home_backoff_y|default(0) %}\n{% set override_homing = printer["gcode_macro _User_Variables"].override_homing|default(\'\') %}\n\n\n_klicky_check_variables_version\n\n_CheckProbe action=query\n\n\n{% set home_x, home_y, home_z, leave_probe_attached = False, False, False, False %}\n\n{% if \'PROBE_LOCK\' in params%}\n{% if verbose %}\n{ action_respond_info("PROBE_LOCK = True") }\n{% endif %}\n{% set leave_probe_attached = True %}\n{% endif %}\n\n\n{% if not \'X\' in params\nand not \'Y\' in params\nand not \'Z\' in params %}\n\n{% set home_x, home_y, home_z = True, True, True %}\n_KlickyDebug msg="homing_override goint to home all axes"\n\n{% else %}\n{% if \'X\' in params %}\n{% set home_x = True %}\n_KlickyDebug msg="homing_override goint to home X"\n\n{% endif %}\n\n{% if \'Y\' in params %}\n{% set home_y = True %}\n_KlickyDebug msg="homing_override goint to home Y"\n{% endif %}\n\n{% if \'Z\' in params %}\n{% set home_z = True %}\n_KlickyDebug msg="homing_override goint to home Z"\n{% endif %}\n\n{% if \'X\' in params\nand \'Y\' in params\nand \'Z\' in params %}\n\n\n_Homing_Variables reset=1\n_KlickyDebug msg="homing_override goint to home all axes"\n{% endif %}\n\n{% endif %}\n\n_entry_point function=homing_override\n_KLICKY_STATUS_HOMING\n\n\n{% if \'z\' not in printer.toolhead.homed_axes %}\n{% if enable_z_hop == False %}\n_KlickyDebug msg="homing_override z_hop disabled"\n\n{% set kinematic_z = safe_z %}\n{% set safe_z = safe_z %}\n{% endif %}\n{% endif %}\n\n\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes and \'z\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("No axis homed") }\n{% endif %}\n_KlickyDebug msg="homing_override no axis homed, setting position as X=Y=0 Z={kinematic_z}"\nSET_KINEMATIC_POSITION X=0 Y=0 Z={kinematic_z}\nM400\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% if home_z != True %}\n_KlickyDebug msg="homing_override clearing axis homed state if not already homing Z"\nM84\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("X or Y not homed, forcing full G28") }\n{% endif %}\n{% set home_x, home_y, home_z = True, True, True %}\n{% endif %}\n{% endif %}\n\n\n{% if ((attachmove_y == 0 and override_homing == \'\' ) or (override_homing == \'Y\'))%}\n\n{% if home_y %}\n{% if override_homing == \'Y\' %}\n_KlickyDebug msg="homing_override Y homing first override, due to override_homing = Y"\n{% else %}\n_KlickyDebug msg="homing_override Y homing first override, due to attachmove_y = 0"\n{% endif %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y G28 Y0"\nG28 Y0\n\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop-home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n{% set home_y = False %}\n{% endif %}\n\n\n\n{% if home_x %}\n{% if verbose %}\n{ action_respond_info("Homing X") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in X homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_X"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_X external script to handle the X homing"\n_HOME_X\n{% else %}\n_KlickyDebug msg="homing_override Homing X, G28 X0"\nG28 X0\n\n{% if home_backoff_x != 0 %}\n{% if (printer.configfile.settings.stepper_x.position_endstop > (printer.configfile.settings.stepper_x.position_min|default(0) + printer.configfile.settings.stepper_x.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n\n{% if home_y %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y, G28 Y0"\nG28 Y0\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if verbose %}\n{ action_respond_info("Homing Z") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe configured as a virtual Z endstop attaching probe"\nAttach_Probe\n\n{% if leave_probe_attached %}\n_Probe_Lock\n{% endif %}\n{% elif dock_on_zhome == True %}\nDock_Probe\n{% endif %}\n\n_Home_Z_\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe no longer required, docking probe"\nDock_Probe\n{% elif dock_on_zhome == False %}\nDock_Probe\n{% endif %}\n{% endif %}\n_CheckProbe action=query\n\n\n_Park_Toolhead\n\n_exit_point function=homing_override\n_KLICKY_STATUS_READY'}, 'gcode_macro _umbilical_path': {'gcode': '\n{% set umbilical = printer["gcode_macro _User_Variables"].umbilical %}\n{% set umbilical_x = printer["gcode_macro _User_Variables"].umbilical_x %}\n{% set umbilical_y = printer["gcode_macro _User_Variables"].umbilical_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n\n{% if umbilical %}\n\n_entry_point function=Umbilical_Path\n\n_KlickyDebug msg="_Umbilical_Path moving to G0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}"\nG0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}\n\n_exit_point function=Umbilical_Path\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _home_z_': {'gcode': '\n{% set z_endstop_x = printer["gcode_macro _Probe_Variables"].z_endstop_x %}\n{% set z_endstop_y = printer["gcode_macro _Probe_Variables"].z_endstop_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}    {% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Home_Z\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n{% else %}\n_KlickyDebug msg="_Home_Z_ XY Axis homed"\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="_Home_Z_ Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n\n\n_KlickyDebug msg="_Home_Z_ moving to Z endstop position G0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}"\nG0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}\n_KlickyDebug msg="_Home_Z_ Homing Z G28 Z"\nG28 Z0\n_KlickyDebug msg="_Home_Z_ toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_exit_point function=Home_Z', 'description': 'G-Code macro'}, 'gcode_macro _checkprobe': {'gcode': '\nQuery_Probe\n_SetProbeState action={ params.ACTION }', 'description': 'G-Code macro', 'variable_probe_state': '0'}, 'gcode_macro _setprobestate': {'gcode': '\n{% set query_probe_triggered = printer.probe.last_query %}\n{% set action  = params.ACTION|default(\'\') %}\n\n\n{% if query_probe_triggered %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ False }\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ True }\n{% endif %}\n\n{% if action == \'query\' %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_state VALUE={ query_probe_triggered }\n{% endif %}\n\n\n\n\n{% if not query_probe_triggered and action == \'dock\' %}\n{ action_raise_error("Probe dock failed!") }\n{% endif %}\n\n\n{% if query_probe_triggered and action == \'attach\' %}\n{ action_raise_error("Probe attach failed!") }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _park_toolhead': {'gcode': '\n{% set park_toolhead = printer["gcode_macro _User_Variables"].park_toolhead %}\n{% set parkposition_x = printer["gcode_macro _User_Variables"].parkposition_x %}\n{% set parkposition_y = printer["gcode_macro _User_Variables"].parkposition_y %}\n{% set parkposition_z = printer["gcode_macro _User_Variables"].parkposition_z %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Park_Toolhead\n\n{% if park_toolhead and \'xyz\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Parking Toolhead") }\n{% endif %}\n{% if parkposition_z == -128 %}\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}\n\n{% else %}\n\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}\n\n{% endif %}\n\n{% endif %}\n_exit_point function=Park_Toolhead', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_ready': {'gcode': '\n{% if printer[\'gcode_macro status_ready\'] is defined %}\n_KlickyDebug msg="_klicky_status_ready activating the LED STATUS_READY"\nSTATUS_READY\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_busy': {'gcode': '\n{% if printer[\'gcode_macro status_busy\'] is defined %}\n_KlickyDebug msg="_klicky_status_busy activating the LED STATUS_BUSY"\nSTATUS_BUSY\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_leveling': {'gcode': '\n{% if printer[\'gcode_macro status_leveling\'] is defined %}\n_KlickyDebug msg="_klicky_status_leveling activating the LED STATUS_LEVELING"\nSTATUS_LEVELING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_homing': {'gcode': '\n{% if printer[\'gcode_macro status_homing\'] is defined %}\n_KlickyDebug msg="_klicky_status_homing activating the LED STATUS_HOMING"\nSTATUS_HOMING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_cleaning': {'gcode': '\n{% if printer[\'gcode_macro status_cleaning\'] is defined %}\n_KlickyDebug msg="_klicky_status_cleaning activating the LED STATUS_CLEANING"\nSTATUS_CLEANING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_meshing': {'gcode': '\n{% if printer[\'gcode_macro status_meshing\'] is defined %}\n_KlickyDebug msg="_klicky_status_meshing activating the LED STATUS_MESHING"\nSTATUS_MESHING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_calibrating_z': {'gcode': '\n{% if printer[\'gcode_macro status_calibrating_z\'] is defined %}\n_KlickyDebug msg="_klicky_status_calibrating_z activating the LED STATUS_CALIBRATING_Z"\nSTATUS_CALIBRATING_Z\n{% endif %}', 'description': 'G-Code macro'}, 'z_calibration': {'switch_offset': 0.065, 'offset_margins': '-1.0,1.0', 'speed': 50.0, 'samples_result': 'none', 'probing_first_fast': False, 'nozzle_xy_position': '172, 301', 'switch_xy_position': '172, 275', 'bed_xy_position': '150, 150', 'start_gcode': 'Attach_Probe', 'before_switch_gcode': '', 'end_gcode': 'Dock_Probe'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': '^PG6', 'position_endstop': 299.0, 'position_min': 0.0, 'position_max': 299.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'PG9', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 303.5, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PF11', 'dir_pin': '!PG3', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG5', 'endstop_pin': 'PG10', 'position_endstop': -0.855, 'position_min': -4.5, 'position_max': 290.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA0'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PF9', 'dir_pin': '!PF10', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG2'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF4', 'min_temp': 10.0, 'max_temp': 270.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 26.572, 'pid_ki': 2.036, 'pid_kd': 86.691, 'heater_pin': 'PA1', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PC13', 'pressure_advance': 0.05, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'PF0', 'rotation_distance': 21.9459674016, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 55.196, 'pid_ki': 2.091, 'pid_kd': 364.295, 'heater_pin': 'PA2', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'probe': {'z_offset': 0.0, 'deactivate_on_each_sample': True, 'activate_gcode': '', 'deactivate_gcode': '', 'pin': 'PG15', 'speed': 10.0, 'lift_speed': 10.0, 'x_offset': 0.0, 'y_offset': 25.0, 'samples': 5, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.006, 'samples_tolerance_retries': 6}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE5', 'fan_speed': 1.0}, 'controller_fan controller_fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD12', 'fan_speed': 1.0, 'idle_speed': 1.0, 'idle_timeout': 30, 'heater': ['heater_bed']}, 'heater_fan exhaust_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 5.0, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13', 'fan_speed': 1.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PD15', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 1.0, 'maximum_mcu_duration': 0.0, 'value': 1.0, 'shutdown_value': 0.0}, 'neopixel headlight': {'pin': 'PB0', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 0.0, 'initial_green': 0.2157, 'initial_blue': 1.0, 'initial_white': 0.0}, 'temperature_sensor chamber_temp': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF5', 'min_temp': 0.0, 'max_temp': 100.0, 'gcode_id': 'chamber_th'}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [150.0, 348.0], [350.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 5.0], [150.0, 245.0], [270.0, 5.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'gcode_macro _user_variables': {'gcode': '\n{% set Mx = printer[\'configfile\'].config["stepper_x"]["position_max"]|float %}\n{% set My = printer[\'configfile\'].config["stepper_y"]["position_max"]|float %}\n{% set Ox = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set Oy = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set Oz = printer[\'configfile\'].config["probe"]["z_offset"]|float %}\n\n\n{% if z_endstop_x != 0 or z_endstop_y != 0 %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ z_endstop_x }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ z_endstop_y }\n\n\n{% else %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ (Mx * 0.5) - Ox }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ (My * 0.5) - Oy }\n{% endif %}', 'description': 'G-Code macro', 'variable_verbose': 'True', 'variable_debug': 'False', 'variable_travel_speed': '200', 'variable_move_accel': '1000', 'variable_dock_speed': '50', 'variable_release_speed': '75', 'variable_z_drop_speed': '20', 'variable_safe_z': '25', 'variable_enable_z_hop': 'True', 'variable_max_bed_y': '300', 'variable_max_bed_x': '300', 'variable_z_endstop_x': '172', 'variable_z_endstop_y': '301', 'variable_docklocation_x': '42', 'variable_docklocation_y': '297', 'variable_docklocation_z': '-128', 'variable_enable_dock_servo': 'False', 'variable_servo_name': "'NAME'", 'variable_servo_deploy': '10', 'variable_servo_retract': '11', 'variable_servo_delay': '250', 'variable_dockmove_x': '40', 'variable_dockmove_y': '0', 'variable_dockmove_z': '0', 'variable_attachmove_x': '0', 'variable_attachmove_y': '30', 'variable_attachmove_z': '0', 'variable_umbilical': 'False', 'variable_umbilical_x': '15', 'variable_umbilical_y': '15', 'variable_park_toolhead': 'False', 'variable_parkposition_x': '125', 'variable_parkposition_y': '125', 'variable_parkposition_z': '30', 'variable_version': '1', 'variable_attachmove2_x': '0', 'variable_attachmove2_y': '0', 'variable_attachmove2_z': '0', 'variable_home_backoff_x': '10', 'variable_home_backoff_y': '10', 'variable_override_homing': "''", 'variable_dock_on_zhome': 'True'}, 'gcode_macro print_start': {'gcode': '\nM117 Homing...\nG28\nATTACH_PROBE\nZ_TILT_ADJUST\nDOCK_PROBE\nG28\nM117 Printing...\n\n\n\n\n\n\n\nG0 X150 Y150 Z30 F3600', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1500.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-02-23 19:17:23,072 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-23 19:17:23,073 [printer.py:reinit()] - Klipper version: v0.12.0-103-g6ce6fbbc-dirty
2024-02-23 19:17:23,073 [printer.py:reinit()] - # Extruders: 1
2024-02-23 19:17:23,073 [printer.py:reinit()] - # Temperature devices: 2
2024-02-23 19:17:23,073 [printer.py:reinit()] - # Fans: 4
2024-02-23 19:17:23,073 [printer.py:reinit()] - # Output pins: 1
2024-02-23 19:17:23,073 [printer.py:reinit()] - # Leds: 1
2024-02-23 19:17:23,085 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2024-02-23 19:17:23,087 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-02-23 19:17:23,379 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor chamber_temp&fan&controller_fan controller_fan&heater_fan hotend_fan&heater_fan exhaust_fan&output_pin caselight&neopixel headlight
2024-02-23 19:17:23,382 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-02-23 19:17:23,383 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-02-23 19:17:23,384 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-02-23 19:17:23,385 [screen.py:init_klipper()] - Printer initialized
2024-02-23 19:17:23,386 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2024-02-23 19:17:23,386 [printer.py:change_state()] - Adding callback for state: ready
2024-02-23 19:17:23,389 [screen.py:_load_panel()] - Loading panel: main_menu
2024-02-23 19:17:23,450 [main_menu.py:__init__()] - ### Making MainMenu
2024-02-23 19:17:23,456 [main_menu.py:add_device()] - Adding device: extruder
2024-02-23 19:17:23,462 [main_menu.py:add_device()] - Adding device: heater_bed
2024-02-23 19:17:23,468 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber_temp
2024-02-23 19:17:23,492 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-02-23 19:17:23,501 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-02-23 19:17:23,502 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-02-23 19:17:23,502 [main_menu.py:update_graph_visibility()] - Could not create graph tempstore: None
2024-02-23 19:17:28,450 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-02-23 19:17:28,460 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'temperature_sensor chamber_temp', 'extruder']
2024-02-23 19:17:28,469 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2024-02-23 19:17:28,470 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-02-23 22:07:35,437 [screen.py:_load_panel()] - Loading panel: print
2024-02-23 22:07:35,443 [print.py:__init__()] - 24h time is True
2024-02-23 22:07:35,474 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > print
2024-02-23 22:07:35,476 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-02-23 22:07:35,478 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-02-23 22:18:02,538 [screen.py:_menu_go_back()] - #### Menu go back
2024-02-23 22:18:02,576 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-02-23 22:19:20,062 [KlippyGtk.py:Dialog()] - Showing dialog KlipperScreen (width=800, height=480)
2024-02-23 22:19:22,448 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-02-23 22:19:22,449 [printer.py:change_state()] - Adding callback for state: disconnected
2024-02-23 22:19:22,449 [screen.py:state_disconnected()] - ### Going to disconnected
2024-02-23 22:19:22,450 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-23 22:19:22,453 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-02-23 22:19:22,453 [screen.py:show_panel()] - Reinitializing panel
2024-02-23 22:19:22,484 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-02-23 22:19:26,019 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-23 22:19:26,028 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2024-02-23 22:19:26,029 [printer.py:configure_cameras()] - Cameras: []
2024-02-23 22:19:26,029 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'history', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-310-g67c98f6', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-02-23 22:19:26,038 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2024-02-23 22:19:26,185 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2024-02-23 22:19:26,188 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro _Probe_Variables': {'variable_probe_attached': 'False', 'variable_probe_state': 'False', 'variable_probe_lock': 'False', 'variable_probe_z_homed': 'False', 'variable_z_endstop_x': '0', 'variable_z_endstop_y': '0', 'gcode': ''}, 'gcode_macro _klicky_check_variables_version': {'gcode': '\n{% set version = printer["gcode_macro _User_Variables"].version|default(0) %}\n\n{% if version != 1 %}\n{ action_raise_error("Please update your klicky variables, there are some functionality changes") }\n{% endif %}'}, 'gcode_macro _KlickyDebug': {'gcode': '\n{% set message  = params.MSG %}\n{% set debug = printer["gcode_macro _User_Variables"].debug|default(False) %}\n\n{% if debug %}\n{ action_respond_info(message) }\n{% endif %}'}, 'gcode_macro _exit_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move  = params.MOVE|default(0) %}\n{% set speed = printer["gcode_macro _User_Variables"].travel_speed %}\n\n\nM400\nSET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\nRESTORE_GCODE_STATE NAME={function} MOVE={move} MOVE_SPEED={speed}'}, 'gcode_macro _entry_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move_accel = printer["gcode_macro _User_Variables"].move_accel|default(1000) %}\n\nM400\nSAVE_GCODE_STATE NAME={function}\n\nSET_GCODE_OFFSET Z=0\n\nG90\n\nSET_VELOCITY_LIMIT ACCEL={move_accel}'}, 'gcode_macro _Homing_Variables': {'gcode': '\n{% set reset  = params.RESET|default(0) %}\n{% if reset %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }\n{% endif %}'}, 'gcode_macro Attach_Probe_Lock': {'description': 'Attaches Klicky Probe, can only be docked after unlocking', 'gcode': '\nAttach_Probe\n_Probe_Lock'}, 'gcode_macro Dock_Probe_Unlock': {'description': 'Docks Klicky Probe even if it was locked', 'gcode': '\n_Probe_Unlock\nDock_Probe'}, 'gcode_macro _Probe_Unlock': {'description': 'Unlocks Klicky Probe state', 'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to False"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }'}, 'gcode_macro _Probe_Lock': {'description': 'Locks Klicky Probe state', 'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to True"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ True }'}, 'gcode_macro _DeployKlickyDock': {'description': 'Deploys Klicky servo-controlled dock', 'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_deploy = printer["gcode_macro _User_Variables"].servo_deploy|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_DeployKlickyDock Klicky servo configuration enabled"\n{% if servo_deploy == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo deploy angle specified") }\n{% endif %}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _DeployDock"] is defined %}\n_KlickyDebug msg="_DeployKlickyDock calling _DeployDock"\n_DeployDock\n{% endif %}'}, 'gcode_macro _RetractKlickyDock': {'description': 'Retracts Klicky servo-controlled dock', 'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_retract = printer["gcode_macro _User_Variables"].servo_retract|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_RetractKlickyDock Klicky servo configuration enabled"\n{% if servo_retract == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo retract angle specified") }\n{% endif %}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _RetractDock"] is defined %}\n_KlickyDebug msg="_RetractKlickyDock calling _RetractDock"\n_RetractDock\n{% endif %}'}, 'gcode_macro Attach_Probe': {'description': 'Attaches Klicky Probe', 'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set attachmove2_x = printer["gcode_macro _User_Variables"].attachmove2_x|default(0) %}\n{% set attachmove2_y = printer["gcode_macro _User_Variables"].attachmove2_y|default(0) %}\n{% set attachmove2_z = printer["gcode_macro _User_Variables"].attachmove2_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n_entry_point function=Attach_Probe\n\n{% if bypass_probe_docking == False %}\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n_KlickyDebug msg="Attach_Probe Axis homed"\n\n\n{% elif not probe_attached and not probe_lock %}\n_KlickyDebug msg="Attach_Probe going to attach probe"\n{% if verbose %}\n{ action_respond_info("Attaching Probe") }\n{% endif %}\n_KLICKY_STATUS_BUSY\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% if not enable_z_hop %}\n_KlickyDebug msg="Attach_Probe z_hop disabled"\n{% set safe_z = 0 %}\n{% endif %}\n{% endif %}\n\n\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero, duplicate?") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Umbilical_Path\n\n_entry_point function=Attach_Probe_intern\n\n\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n_DeployKlickyDock\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}"\nG0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}\n\n_RetractKlickyDock\n\n{% if ((printer.gcode_move.gcode_position.z < safe_z) or (docklocation_z != -128 and docklocation_z < safe_z ))%}\n_KlickyDebug msg="Attach_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\n_CheckProbe action=attach\n\n_exit_point function=Attach_Probe_intern move={goback}\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe locked not attaching probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already attached!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe already attached, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Attach_Probe\n{% else %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}'}, 'gcode_macro Dock_Probe': {'description': 'Docks Klicky Probe', 'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n{% if bypass_probe_docking == True %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}\n\n{% if bypass_probe_docking != True %}\n_entry_point function=Dock_Probe\n\n\n{% if probe_attached and not probe_lock %}\n_KLICKY_STATUS_BUSY\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Dock_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n_Umbilical_Path\n\n\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n\n_DeployKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\n\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}"\nG0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}\n{% endif %}\n\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}\n\n\n_RetractKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving away from the dock to G0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}\n\n\n{% if (printer.gcode_move.gcode_position.z < safe_z) %}\n_KlickyDebug msg="Dock_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\nG4 P1000\n_CheckProbe action=dock\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe locked not docking probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already docked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe already docked, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Dock_Probe move={goback}\n{% else %}\n_KlickyDebug msg="Dock_Probe probe docking bypassed, doing nothing"\n{% endif %}'}, 'gcode_macro PROBE_CALIBRATE': {'rename_existing': '_PROBE_CALIBRATE', 'description': 'Calibrate the probes z_offset with klicky automount', 'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_calibrate Axis homed"\n_KlickyDebug msg="probe_calibrate Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_CALIBRATE with the probe above the BED, check klicky_variables bed size!") }\n{% endif %}\n\n{% if bypass_probe_docking == False %}\n_CheckProbe action=query\nG90\nAttach_Probe back=1\n_KLICKY_STATUS_CALIBRATING_Z\n\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nM118 moving the toolhead 20 mm from the bed\n_KlickyDebug msg="probe_calibrate Moving Z up by 20mm"\nTESTZ Z=20\nM118 remove manually the probe and continue calibration\n_KLICKY_STATUS_READY\n{% else %}\n_KLICKY_STATUS_CALIBRATING_Z\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n_KLICKY_STATUS_READY\n{% endif %}'}, 'gcode_macro PROBE_ACCURACY': {'rename_existing': '_PROBE_ACCURACY', 'description': 'Probe Z-height accuracy at current XY position with klicky automount', 'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_accuracy Axis homed"\n_KlickyDebug msg="probe_accuracy Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n_entry_point function=PROBE_ACCURACY\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_ACCURACY with the probe above the BED, check klicky_variables bed size!") }\n{% endif%}\n\n_CheckProbe action=query\nAttach_Probe back=1\n\n_KlickyDebug msg="probe_accuracy calling klipper probe accuracy"\n_PROBE_ACCURACY {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nDock_Probe back=1\n\n_exit_point function=PROBE_ACCURACY move=1'}, 'force_move': {'enable_force_move': 'True'}, 'homing_override': {'axes': 'xyz', 'gcode': '\n\n_User_Variables\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n{% set kinematic_z = 0 %}\n{% set dock_on_zhome = printer["gcode_macro _User_Variables"].dock_on_zhome|default(True) %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set home_backoff_x = printer["gcode_macro _User_Variables"].home_backoff_x|default(0) %}\n{% set home_backoff_y = printer["gcode_macro _User_Variables"].home_backoff_y|default(0) %}\n{% set override_homing = printer["gcode_macro _User_Variables"].override_homing|default(\'\') %}\n\n\n_klicky_check_variables_version\n\n_CheckProbe action=query\n\n\n{% set home_x, home_y, home_z, leave_probe_attached = False, False, False, False %}\n\n{% if \'PROBE_LOCK\' in params%}\n{% if verbose %}\n{ action_respond_info("PROBE_LOCK = True") }\n{% endif %}\n{% set leave_probe_attached = True %}\n{% endif %}\n\n\n{% if not \'X\' in params\nand not \'Y\' in params\nand not \'Z\' in params %}\n\n{% set home_x, home_y, home_z = True, True, True %}\n_KlickyDebug msg="homing_override goint to home all axes"\n\n{% else %}\n{% if \'X\' in params %}\n{% set home_x = True %}\n_KlickyDebug msg="homing_override goint to home X"\n\n{% endif %}\n\n{% if \'Y\' in params %}\n{% set home_y = True %}\n_KlickyDebug msg="homing_override goint to home Y"\n{% endif %}\n\n{% if \'Z\' in params %}\n{% set home_z = True %}\n_KlickyDebug msg="homing_override goint to home Z"\n{% endif %}\n\n{% if \'X\' in params\nand \'Y\' in params\nand \'Z\' in params %}\n\n\n_Homing_Variables reset=1\n_KlickyDebug msg="homing_override goint to home all axes"\n{% endif %}\n\n{% endif %}\n\n_entry_point function=homing_override\n_KLICKY_STATUS_HOMING\n\n\n{% if \'z\' not in printer.toolhead.homed_axes %}\n{% if enable_z_hop == False %}\n_KlickyDebug msg="homing_override z_hop disabled"\n\n{% set kinematic_z = safe_z %}\n{% set safe_z = safe_z %}\n{% endif %}\n{% endif %}\n\n\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes and \'z\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("No axis homed") }\n{% endif %}\n_KlickyDebug msg="homing_override no axis homed, setting position as X=Y=0 Z={kinematic_z}"\nSET_KINEMATIC_POSITION X=0 Y=0 Z={kinematic_z}\nM400\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% if home_z != True %}\n_KlickyDebug msg="homing_override clearing axis homed state if not already homing Z"\nM84\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("X or Y not homed, forcing full G28") }\n{% endif %}\n{% set home_x, home_y, home_z = True, True, True %}\n{% endif %}\n{% endif %}\n\n\n{% if ((attachmove_y == 0 and override_homing == \'\' ) or (override_homing == \'Y\'))%}\n\n{% if home_y %}\n{% if override_homing == \'Y\' %}\n_KlickyDebug msg="homing_override Y homing first override, due to override_homing = Y"\n{% else %}\n_KlickyDebug msg="homing_override Y homing first override, due to attachmove_y = 0"\n{% endif %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y G28 Y0"\nG28 Y0\n\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop-home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n{% set home_y = False %}\n{% endif %}\n\n\n\n{% if home_x %}\n{% if verbose %}\n{ action_respond_info("Homing X") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in X homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_X"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_X external script to handle the X homing"\n_HOME_X\n{% else %}\n_KlickyDebug msg="homing_override Homing X, G28 X0"\nG28 X0\n\n{% if home_backoff_x != 0 %}\n{% if (printer.configfile.settings.stepper_x.position_endstop > (printer.configfile.settings.stepper_x.position_min|default(0) + printer.configfile.settings.stepper_x.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n\n{% if home_y %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y, G28 Y0"\nG28 Y0\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if verbose %}\n{ action_respond_info("Homing Z") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe configured as a virtual Z endstop attaching probe"\nAttach_Probe\n\n{% if leave_probe_attached %}\n_Probe_Lock\n{% endif %}\n{% elif dock_on_zhome == True %}\nDock_Probe\n{% endif %}\n\n_Home_Z_\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe no longer required, docking probe"\nDock_Probe\n{% elif dock_on_zhome == False %}\nDock_Probe\n{% endif %}\n{% endif %}\n_CheckProbe action=query\n\n\n_Park_Toolhead\n\n_exit_point function=homing_override\n_KLICKY_STATUS_READY'}, 'gcode_macro _Umbilical_Path': {'gcode': '\n{% set umbilical = printer["gcode_macro _User_Variables"].umbilical %}\n{% set umbilical_x = printer["gcode_macro _User_Variables"].umbilical_x %}\n{% set umbilical_y = printer["gcode_macro _User_Variables"].umbilical_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n\n{% if umbilical %}\n\n_entry_point function=Umbilical_Path\n\n_KlickyDebug msg="_Umbilical_Path moving to G0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}"\nG0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}\n\n_exit_point function=Umbilical_Path\n{% endif %}'}, 'gcode_macro _Home_Z_': {'gcode': '\n{% set z_endstop_x = printer["gcode_macro _Probe_Variables"].z_endstop_x %}\n{% set z_endstop_y = printer["gcode_macro _Probe_Variables"].z_endstop_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}    {% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Home_Z\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n{% else %}\n_KlickyDebug msg="_Home_Z_ XY Axis homed"\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="_Home_Z_ Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n\n\n_KlickyDebug msg="_Home_Z_ moving to Z endstop position G0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}"\nG0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}\n_KlickyDebug msg="_Home_Z_ Homing Z G28 Z"\nG28 Z0\n_KlickyDebug msg="_Home_Z_ toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_exit_point function=Home_Z'}, 'gcode_macro _CheckProbe': {'variable_probe_state': '0', 'gcode': '\nQuery_Probe\n_SetProbeState action={ params.ACTION }'}, 'gcode_macro _SetProbeState': {'gcode': '\n{% set query_probe_triggered = printer.probe.last_query %}\n{% set action  = params.ACTION|default(\'\') %}\n\n\n{% if query_probe_triggered %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ False }\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ True }\n{% endif %}\n\n{% if action == \'query\' %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_state VALUE={ query_probe_triggered }\n{% endif %}\n\n\n\n\n{% if not query_probe_triggered and action == \'dock\' %}\n{ action_raise_error("Probe dock failed!") }\n{% endif %}\n\n\n{% if query_probe_triggered and action == \'attach\' %}\n{ action_raise_error("Probe attach failed!") }\n{% endif %}'}, 'gcode_macro _Park_Toolhead': {'gcode': '\n{% set park_toolhead = printer["gcode_macro _User_Variables"].park_toolhead %}\n{% set parkposition_x = printer["gcode_macro _User_Variables"].parkposition_x %}\n{% set parkposition_y = printer["gcode_macro _User_Variables"].parkposition_y %}\n{% set parkposition_z = printer["gcode_macro _User_Variables"].parkposition_z %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Park_Toolhead\n\n{% if park_toolhead and \'xyz\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Parking Toolhead") }\n{% endif %}\n{% if parkposition_z == -128 %}\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}\n\n{% else %}\n\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}\n\n{% endif %}\n\n{% endif %}\n_exit_point function=Park_Toolhead'}, 'gcode_macro _klicky_status_ready': {'gcode': '\n{% if printer[\'gcode_macro status_ready\'] is defined %}\n_KlickyDebug msg="_klicky_status_ready activating the LED STATUS_READY"\nSTATUS_READY\n{% endif %}'}, 'gcode_macro _klicky_status_busy': {'gcode': '\n{% if printer[\'gcode_macro status_busy\'] is defined %}\n_KlickyDebug msg="_klicky_status_busy activating the LED STATUS_BUSY"\nSTATUS_BUSY\n{% endif %}'}, 'gcode_macro _klicky_status_leveling': {'gcode': '\n{% if printer[\'gcode_macro status_leveling\'] is defined %}\n_KlickyDebug msg="_klicky_status_leveling activating the LED STATUS_LEVELING"\nSTATUS_LEVELING\n{% endif %}'}, 'gcode_macro _klicky_status_homing': {'gcode': '\n{% if printer[\'gcode_macro status_homing\'] is defined %}\n_KlickyDebug msg="_klicky_status_homing activating the LED STATUS_HOMING"\nSTATUS_HOMING\n{% endif %}'}, 'gcode_macro _klicky_status_cleaning': {'gcode': '\n{% if printer[\'gcode_macro status_cleaning\'] is defined %}\n_KlickyDebug msg="_klicky_status_cleaning activating the LED STATUS_CLEANING"\nSTATUS_CLEANING\n{% endif %}'}, 'gcode_macro _klicky_status_meshing': {'gcode': '\n{% if printer[\'gcode_macro status_meshing\'] is defined %}\n_KlickyDebug msg="_klicky_status_meshing activating the LED STATUS_MESHING"\nSTATUS_MESHING\n{% endif %}'}, 'gcode_macro _klicky_status_calibrating_z': {'gcode': '\n{% if printer[\'gcode_macro status_calibrating_z\'] is defined %}\n_KlickyDebug msg="_klicky_status_calibrating_z activating the LED STATUS_CALIBRATING_Z"\nSTATUS_CALIBRATING_Z\n{% endif %}'}, 'z_calibration': {'nozzle_xy_position': '172, 301', 'switch_xy_position': '172, 275', 'bed_xy_position': '150, 150', 'switch_offset': '0.065', 'offset_margins': '-1.0,1.0', 'speed': '50', 'probing_first_fast': 'false', 'start_gcode': 'Attach_Probe', 'end_gcode': 'Dock_Probe'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_28003C001150535556323420-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '^PG6', 'position_min': '0', 'position_endstop': '299', 'position_max': '299', 'homing_speed': '25', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'PG9', 'position_min': '0', 'position_endstop': '300', 'position_max': '303.5', 'homing_speed': '25', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': '!PG3', 'enable_pin': '!PG5', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'PG10', 'position_max': '290', 'position_min': '-4.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3', 'position_endstop': '-0.955'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA0', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': '!PF10', 'enable_pin': '!PG2', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PC13', 'dir_pin': 'PF0', 'enable_pin': '!PF1', 'rotation_distance': '21.9459674016', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.75', 'heater_pin': 'PA1', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF4', 'min_temp': '10', 'max_temp': '270', 'max_power': '1.0', 'min_extrude_temp': '170', 'pressure_advance': '0.05', 'pressure_advance_smooth_time': '0.040', 'control': 'pid', 'pid_kp': '26.572', 'pid_ki': '2.036', 'pid_kd': '86.691'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.5', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PA2', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF3', 'max_power': '1', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '55.196', 'pid_ki': '2.091', 'pid_kd': '364.295'}, 'probe': {'pin': 'PG15', 'x_offset': '0', 'y_offset': '25.0', 'z_offset': '0', 'speed': '10.0', 'samples': '5', 'samples_result': 'median', 'sample_retract_dist': '3.0', 'samples_tolerance': '0.006', 'samples_tolerance_retries': '6'}, 'fan': {'pin': 'PA8', 'kick_start_time': '0.5', 'off_below': '0.10'}, 'heater_fan hotend_fan': {'pin': 'PE5', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'controller_fan controller_fan': {'pin': 'PD12', 'kick_start_time': '0.5', 'heater': 'heater_bed'}, 'heater_fan exhaust_fan': {'pin': 'PD13', 'max_power': '1.0', 'shutdown_speed': '0.0', 'kick_start_time': '5.0', 'heater': 'heater_bed', 'heater_temp': '60', 'fan_speed': '1.0'}, 'output_pin caselight': {'pin': 'PD15', 'pwm': 'true', 'shutdown_value': '0', 'value': '1', 'cycle_time': '0.01'}, 'neopixel headlight': {'pin': 'PB0', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '0.0', 'initial_green': '0.2157', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'temperature_sensor chamber_temp': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF5', 'min_temp': '0', 'max_temp': '100', 'gcode_id': 'chamber_th'}, 'idle_timeout': {'timeout': '1800'}, 'z_tilt': {'z_positions': '\n-50, 18\n150, 348\n350, 18', 'points': '\n30, 5\n150, 245\n270, 5', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'gcode_macro _User_Variables': {'variable_verbose': 'True', 'variable_debug': 'False', 'variable_travel_speed': '200', 'variable_move_accel': '1000', 'variable_dock_speed': '50', 'variable_release_speed': '75', 'variable_z_drop_speed': '20', 'variable_safe_z': '25', 'variable_enable_z_hop': 'True', 'variable_max_bed_y': '300', 'variable_max_bed_x': '300', 'variable_z_endstop_x': '172', 'variable_z_endstop_y': '301', 'variable_docklocation_x': '42', 'variable_docklocation_y': '297', 'variable_docklocation_z': '-128', 'variable_enable_dock_servo': 'False', 'variable_servo_name': "'NAME'", 'variable_servo_deploy': '10', 'variable_servo_retract': '11', 'variable_servo_delay': '250', 'variable_dockmove_x': '40', 'variable_dockmove_y': '0', 'variable_dockmove_z': '0', 'variable_attachmove_x': '0', 'variable_attachmove_y': '30', 'variable_attachmove_z': '0', 'variable_umbilical': 'False', 'variable_umbilical_x': '15', 'variable_umbilical_y': '15', 'variable_park_toolhead': 'False', 'variable_parkposition_x': '125', 'variable_parkposition_y': '125', 'variable_parkposition_z': '30', 'variable_version': '1', 'variable_attachmove2_x': '0', 'variable_attachmove2_y': '0', 'variable_attachmove2_z': '0', 'variable_home_backoff_x': '10', 'variable_home_backoff_y': '10', 'variable_override_homing': "''", 'variable_dock_on_zhome': 'True', 'gcode': '\n{% set Mx = printer[\'configfile\'].config["stepper_x"]["position_max"]|float %}\n{% set My = printer[\'configfile\'].config["stepper_y"]["position_max"]|float %}\n{% set Ox = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set Oy = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set Oz = printer[\'configfile\'].config["probe"]["z_offset"]|float %}\n\n\n{% if z_endstop_x != 0 or z_endstop_y != 0 %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ z_endstop_x }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ z_endstop_y }\n\n\n{% else %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ (Mx * 0.5) - Ox }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ (My * 0.5) - Oy }\n{% endif %}'}, 'gcode_macro PRINT_START': {'gcode': '\nM117 Homing...\nG28\nATTACH_PROBE\nZ_TILT_ADJUST\nDOCK_PROBE\nG28\nM117 Printing...\n\n\n\n\n\n\n\nG0 X150 Y150 Z30 F3600'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_28003C001150535556323420-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro _probe_variables': {'gcode': '', 'description': 'G-Code macro', 'variable_probe_attached': 'False', 'variable_probe_state': 'False', 'variable_probe_lock': 'False', 'variable_probe_z_homed': 'False', 'variable_z_endstop_x': '0', 'variable_z_endstop_y': '0'}, 'gcode_macro _klicky_check_variables_version': {'gcode': '\n{% set version = printer["gcode_macro _User_Variables"].version|default(0) %}\n\n{% if version != 1 %}\n{ action_raise_error("Please update your klicky variables, there are some functionality changes") }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klickydebug': {'gcode': '\n{% set message  = params.MSG %}\n{% set debug = printer["gcode_macro _User_Variables"].debug|default(False) %}\n\n{% if debug %}\n{ action_respond_info(message) }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _exit_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move  = params.MOVE|default(0) %}\n{% set speed = printer["gcode_macro _User_Variables"].travel_speed %}\n\n\nM400\nSET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\nRESTORE_GCODE_STATE NAME={function} MOVE={move} MOVE_SPEED={speed}', 'description': 'G-Code macro'}, 'gcode_macro _entry_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move_accel = printer["gcode_macro _User_Variables"].move_accel|default(1000) %}\n\nM400\nSAVE_GCODE_STATE NAME={function}\n\nSET_GCODE_OFFSET Z=0\n\nG90\n\nSET_VELOCITY_LIMIT ACCEL={move_accel}', 'description': 'G-Code macro'}, 'gcode_macro _homing_variables': {'gcode': '\n{% set reset  = params.RESET|default(0) %}\n{% if reset %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro attach_probe_lock': {'gcode': '\nAttach_Probe\n_Probe_Lock', 'description': 'Attaches Klicky Probe, can only be docked after unlocking'}, 'gcode_macro dock_probe_unlock': {'gcode': '\n_Probe_Unlock\nDock_Probe', 'description': 'Docks Klicky Probe even if it was locked'}, 'gcode_macro _probe_unlock': {'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to False"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }', 'description': 'Unlocks Klicky Probe state'}, 'gcode_macro _probe_lock': {'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to True"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ True }', 'description': 'Locks Klicky Probe state'}, 'gcode_macro _deployklickydock': {'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_deploy = printer["gcode_macro _User_Variables"].servo_deploy|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_DeployKlickyDock Klicky servo configuration enabled"\n{% if servo_deploy == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo deploy angle specified") }\n{% endif %}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _DeployDock"] is defined %}\n_KlickyDebug msg="_DeployKlickyDock calling _DeployDock"\n_DeployDock\n{% endif %}', 'description': 'Deploys Klicky servo-controlled dock'}, 'gcode_macro _retractklickydock': {'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_retract = printer["gcode_macro _User_Variables"].servo_retract|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_RetractKlickyDock Klicky servo configuration enabled"\n{% if servo_retract == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo retract angle specified") }\n{% endif %}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _RetractDock"] is defined %}\n_KlickyDebug msg="_RetractKlickyDock calling _RetractDock"\n_RetractDock\n{% endif %}', 'description': 'Retracts Klicky servo-controlled dock'}, 'gcode_macro attach_probe': {'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set attachmove2_x = printer["gcode_macro _User_Variables"].attachmove2_x|default(0) %}\n{% set attachmove2_y = printer["gcode_macro _User_Variables"].attachmove2_y|default(0) %}\n{% set attachmove2_z = printer["gcode_macro _User_Variables"].attachmove2_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n_entry_point function=Attach_Probe\n\n{% if bypass_probe_docking == False %}\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n_KlickyDebug msg="Attach_Probe Axis homed"\n\n\n{% elif not probe_attached and not probe_lock %}\n_KlickyDebug msg="Attach_Probe going to attach probe"\n{% if verbose %}\n{ action_respond_info("Attaching Probe") }\n{% endif %}\n_KLICKY_STATUS_BUSY\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% if not enable_z_hop %}\n_KlickyDebug msg="Attach_Probe z_hop disabled"\n{% set safe_z = 0 %}\n{% endif %}\n{% endif %}\n\n\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero, duplicate?") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Umbilical_Path\n\n_entry_point function=Attach_Probe_intern\n\n\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n_DeployKlickyDock\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}"\nG0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}\n\n_RetractKlickyDock\n\n{% if ((printer.gcode_move.gcode_position.z < safe_z) or (docklocation_z != -128 and docklocation_z < safe_z ))%}\n_KlickyDebug msg="Attach_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\n_CheckProbe action=attach\n\n_exit_point function=Attach_Probe_intern move={goback}\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe locked not attaching probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already attached!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe already attached, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Attach_Probe\n{% else %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}', 'description': 'Attaches Klicky Probe'}, 'gcode_macro dock_probe': {'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n{% if bypass_probe_docking == True %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}\n\n{% if bypass_probe_docking != True %}\n_entry_point function=Dock_Probe\n\n\n{% if probe_attached and not probe_lock %}\n_KLICKY_STATUS_BUSY\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Dock_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n_Umbilical_Path\n\n\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n\n_DeployKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\n\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}"\nG0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}\n{% endif %}\n\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}\n\n\n_RetractKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving away from the dock to G0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}\n\n\n{% if (printer.gcode_move.gcode_position.z < safe_z) %}\n_KlickyDebug msg="Dock_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\nG4 P1000\n_CheckProbe action=dock\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe locked not docking probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already docked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe already docked, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Dock_Probe move={goback}\n{% else %}\n_KlickyDebug msg="Dock_Probe probe docking bypassed, doing nothing"\n{% endif %}', 'description': 'Docks Klicky Probe'}, 'gcode_macro probe_calibrate': {'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_calibrate Axis homed"\n_KlickyDebug msg="probe_calibrate Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_CALIBRATE with the probe above the BED, check klicky_variables bed size!") }\n{% endif %}\n\n{% if bypass_probe_docking == False %}\n_CheckProbe action=query\nG90\nAttach_Probe back=1\n_KLICKY_STATUS_CALIBRATING_Z\n\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nM118 moving the toolhead 20 mm from the bed\n_KlickyDebug msg="probe_calibrate Moving Z up by 20mm"\nTESTZ Z=20\nM118 remove manually the probe and continue calibration\n_KLICKY_STATUS_READY\n{% else %}\n_KLICKY_STATUS_CALIBRATING_Z\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n_KLICKY_STATUS_READY\n{% endif %}', 'rename_existing': '_PROBE_CALIBRATE', 'description': 'Calibrate the probes z_offset with klicky automount'}, 'gcode_macro probe_accuracy': {'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_accuracy Axis homed"\n_KlickyDebug msg="probe_accuracy Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n_entry_point function=PROBE_ACCURACY\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_ACCURACY with the probe above the BED, check klicky_variables bed size!") }\n{% endif%}\n\n_CheckProbe action=query\nAttach_Probe back=1\n\n_KlickyDebug msg="probe_accuracy calling klipper probe accuracy"\n_PROBE_ACCURACY {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nDock_Probe back=1\n\n_exit_point function=PROBE_ACCURACY move=1', 'rename_existing': '_PROBE_ACCURACY', 'description': 'Probe Z-height accuracy at current XY position with klicky automount'}, 'force_move': {'enable_force_move': True}, 'homing_override': {'axes': 'xyz', 'gcode': '\n\n_User_Variables\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n{% set kinematic_z = 0 %}\n{% set dock_on_zhome = printer["gcode_macro _User_Variables"].dock_on_zhome|default(True) %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set home_backoff_x = printer["gcode_macro _User_Variables"].home_backoff_x|default(0) %}\n{% set home_backoff_y = printer["gcode_macro _User_Variables"].home_backoff_y|default(0) %}\n{% set override_homing = printer["gcode_macro _User_Variables"].override_homing|default(\'\') %}\n\n\n_klicky_check_variables_version\n\n_CheckProbe action=query\n\n\n{% set home_x, home_y, home_z, leave_probe_attached = False, False, False, False %}\n\n{% if \'PROBE_LOCK\' in params%}\n{% if verbose %}\n{ action_respond_info("PROBE_LOCK = True") }\n{% endif %}\n{% set leave_probe_attached = True %}\n{% endif %}\n\n\n{% if not \'X\' in params\nand not \'Y\' in params\nand not \'Z\' in params %}\n\n{% set home_x, home_y, home_z = True, True, True %}\n_KlickyDebug msg="homing_override goint to home all axes"\n\n{% else %}\n{% if \'X\' in params %}\n{% set home_x = True %}\n_KlickyDebug msg="homing_override goint to home X"\n\n{% endif %}\n\n{% if \'Y\' in params %}\n{% set home_y = True %}\n_KlickyDebug msg="homing_override goint to home Y"\n{% endif %}\n\n{% if \'Z\' in params %}\n{% set home_z = True %}\n_KlickyDebug msg="homing_override goint to home Z"\n{% endif %}\n\n{% if \'X\' in params\nand \'Y\' in params\nand \'Z\' in params %}\n\n\n_Homing_Variables reset=1\n_KlickyDebug msg="homing_override goint to home all axes"\n{% endif %}\n\n{% endif %}\n\n_entry_point function=homing_override\n_KLICKY_STATUS_HOMING\n\n\n{% if \'z\' not in printer.toolhead.homed_axes %}\n{% if enable_z_hop == False %}\n_KlickyDebug msg="homing_override z_hop disabled"\n\n{% set kinematic_z = safe_z %}\n{% set safe_z = safe_z %}\n{% endif %}\n{% endif %}\n\n\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes and \'z\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("No axis homed") }\n{% endif %}\n_KlickyDebug msg="homing_override no axis homed, setting position as X=Y=0 Z={kinematic_z}"\nSET_KINEMATIC_POSITION X=0 Y=0 Z={kinematic_z}\nM400\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% if home_z != True %}\n_KlickyDebug msg="homing_override clearing axis homed state if not already homing Z"\nM84\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("X or Y not homed, forcing full G28") }\n{% endif %}\n{% set home_x, home_y, home_z = True, True, True %}\n{% endif %}\n{% endif %}\n\n\n{% if ((attachmove_y == 0 and override_homing == \'\' ) or (override_homing == \'Y\'))%}\n\n{% if home_y %}\n{% if override_homing == \'Y\' %}\n_KlickyDebug msg="homing_override Y homing first override, due to override_homing = Y"\n{% else %}\n_KlickyDebug msg="homing_override Y homing first override, due to attachmove_y = 0"\n{% endif %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y G28 Y0"\nG28 Y0\n\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop-home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n{% set home_y = False %}\n{% endif %}\n\n\n\n{% if home_x %}\n{% if verbose %}\n{ action_respond_info("Homing X") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in X homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_X"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_X external script to handle the X homing"\n_HOME_X\n{% else %}\n_KlickyDebug msg="homing_override Homing X, G28 X0"\nG28 X0\n\n{% if home_backoff_x != 0 %}\n{% if (printer.configfile.settings.stepper_x.position_endstop > (printer.configfile.settings.stepper_x.position_min|default(0) + printer.configfile.settings.stepper_x.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n\n{% if home_y %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y, G28 Y0"\nG28 Y0\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if verbose %}\n{ action_respond_info("Homing Z") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe configured as a virtual Z endstop attaching probe"\nAttach_Probe\n\n{% if leave_probe_attached %}\n_Probe_Lock\n{% endif %}\n{% elif dock_on_zhome == True %}\nDock_Probe\n{% endif %}\n\n_Home_Z_\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe no longer required, docking probe"\nDock_Probe\n{% elif dock_on_zhome == False %}\nDock_Probe\n{% endif %}\n{% endif %}\n_CheckProbe action=query\n\n\n_Park_Toolhead\n\n_exit_point function=homing_override\n_KLICKY_STATUS_READY'}, 'gcode_macro _umbilical_path': {'gcode': '\n{% set umbilical = printer["gcode_macro _User_Variables"].umbilical %}\n{% set umbilical_x = printer["gcode_macro _User_Variables"].umbilical_x %}\n{% set umbilical_y = printer["gcode_macro _User_Variables"].umbilical_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n\n{% if umbilical %}\n\n_entry_point function=Umbilical_Path\n\n_KlickyDebug msg="_Umbilical_Path moving to G0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}"\nG0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}\n\n_exit_point function=Umbilical_Path\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _home_z_': {'gcode': '\n{% set z_endstop_x = printer["gcode_macro _Probe_Variables"].z_endstop_x %}\n{% set z_endstop_y = printer["gcode_macro _Probe_Variables"].z_endstop_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}    {% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Home_Z\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n{% else %}\n_KlickyDebug msg="_Home_Z_ XY Axis homed"\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="_Home_Z_ Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n\n\n_KlickyDebug msg="_Home_Z_ moving to Z endstop position G0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}"\nG0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}\n_KlickyDebug msg="_Home_Z_ Homing Z G28 Z"\nG28 Z0\n_KlickyDebug msg="_Home_Z_ toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_exit_point function=Home_Z', 'description': 'G-Code macro'}, 'gcode_macro _checkprobe': {'gcode': '\nQuery_Probe\n_SetProbeState action={ params.ACTION }', 'description': 'G-Code macro', 'variable_probe_state': '0'}, 'gcode_macro _setprobestate': {'gcode': '\n{% set query_probe_triggered = printer.probe.last_query %}\n{% set action  = params.ACTION|default(\'\') %}\n\n\n{% if query_probe_triggered %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ False }\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ True }\n{% endif %}\n\n{% if action == \'query\' %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_state VALUE={ query_probe_triggered }\n{% endif %}\n\n\n\n\n{% if not query_probe_triggered and action == \'dock\' %}\n{ action_raise_error("Probe dock failed!") }\n{% endif %}\n\n\n{% if query_probe_triggered and action == \'attach\' %}\n{ action_raise_error("Probe attach failed!") }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _park_toolhead': {'gcode': '\n{% set park_toolhead = printer["gcode_macro _User_Variables"].park_toolhead %}\n{% set parkposition_x = printer["gcode_macro _User_Variables"].parkposition_x %}\n{% set parkposition_y = printer["gcode_macro _User_Variables"].parkposition_y %}\n{% set parkposition_z = printer["gcode_macro _User_Variables"].parkposition_z %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Park_Toolhead\n\n{% if park_toolhead and \'xyz\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Parking Toolhead") }\n{% endif %}\n{% if parkposition_z == -128 %}\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}\n\n{% else %}\n\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}\n\n{% endif %}\n\n{% endif %}\n_exit_point function=Park_Toolhead', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_ready': {'gcode': '\n{% if printer[\'gcode_macro status_ready\'] is defined %}\n_KlickyDebug msg="_klicky_status_ready activating the LED STATUS_READY"\nSTATUS_READY\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_busy': {'gcode': '\n{% if printer[\'gcode_macro status_busy\'] is defined %}\n_KlickyDebug msg="_klicky_status_busy activating the LED STATUS_BUSY"\nSTATUS_BUSY\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_leveling': {'gcode': '\n{% if printer[\'gcode_macro status_leveling\'] is defined %}\n_KlickyDebug msg="_klicky_status_leveling activating the LED STATUS_LEVELING"\nSTATUS_LEVELING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_homing': {'gcode': '\n{% if printer[\'gcode_macro status_homing\'] is defined %}\n_KlickyDebug msg="_klicky_status_homing activating the LED STATUS_HOMING"\nSTATUS_HOMING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_cleaning': {'gcode': '\n{% if printer[\'gcode_macro status_cleaning\'] is defined %}\n_KlickyDebug msg="_klicky_status_cleaning activating the LED STATUS_CLEANING"\nSTATUS_CLEANING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_meshing': {'gcode': '\n{% if printer[\'gcode_macro status_meshing\'] is defined %}\n_KlickyDebug msg="_klicky_status_meshing activating the LED STATUS_MESHING"\nSTATUS_MESHING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_calibrating_z': {'gcode': '\n{% if printer[\'gcode_macro status_calibrating_z\'] is defined %}\n_KlickyDebug msg="_klicky_status_calibrating_z activating the LED STATUS_CALIBRATING_Z"\nSTATUS_CALIBRATING_Z\n{% endif %}', 'description': 'G-Code macro'}, 'z_calibration': {'switch_offset': 0.065, 'offset_margins': '-1.0,1.0', 'speed': 50.0, 'samples_result': 'none', 'probing_first_fast': False, 'nozzle_xy_position': '172, 301', 'switch_xy_position': '172, 275', 'bed_xy_position': '150, 150', 'start_gcode': 'Attach_Probe', 'before_switch_gcode': '', 'end_gcode': 'Dock_Probe'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': '^PG6', 'position_endstop': 299.0, 'position_min': 0.0, 'position_max': 299.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'PG9', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 303.5, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PF11', 'dir_pin': '!PG3', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG5', 'endstop_pin': 'PG10', 'position_endstop': -0.955, 'position_min': -4.5, 'position_max': 290.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA0'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PF9', 'dir_pin': '!PF10', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG2'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF4', 'min_temp': 10.0, 'max_temp': 270.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 26.572, 'pid_ki': 2.036, 'pid_kd': 86.691, 'heater_pin': 'PA1', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PC13', 'pressure_advance': 0.05, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'PF0', 'rotation_distance': 21.9459674016, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 55.196, 'pid_ki': 2.091, 'pid_kd': 364.295, 'heater_pin': 'PA2', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'probe': {'z_offset': 0.0, 'deactivate_on_each_sample': True, 'activate_gcode': '', 'deactivate_gcode': '', 'pin': 'PG15', 'speed': 10.0, 'lift_speed': 10.0, 'x_offset': 0.0, 'y_offset': 25.0, 'samples': 5, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.006, 'samples_tolerance_retries': 6}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE5', 'fan_speed': 1.0}, 'controller_fan controller_fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD12', 'fan_speed': 1.0, 'idle_speed': 1.0, 'idle_timeout': 30, 'heater': ['heater_bed']}, 'heater_fan exhaust_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 5.0, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13', 'fan_speed': 1.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PD15', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 1.0, 'maximum_mcu_duration': 0.0, 'value': 1.0, 'shutdown_value': 0.0}, 'neopixel headlight': {'pin': 'PB0', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 0.0, 'initial_green': 0.2157, 'initial_blue': 1.0, 'initial_white': 0.0}, 'temperature_sensor chamber_temp': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF5', 'min_temp': 0.0, 'max_temp': 100.0, 'gcode_id': 'chamber_th'}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [150.0, 348.0], [350.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 5.0], [150.0, 245.0], [270.0, 5.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'gcode_macro _user_variables': {'gcode': '\n{% set Mx = printer[\'configfile\'].config["stepper_x"]["position_max"]|float %}\n{% set My = printer[\'configfile\'].config["stepper_y"]["position_max"]|float %}\n{% set Ox = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set Oy = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set Oz = printer[\'configfile\'].config["probe"]["z_offset"]|float %}\n\n\n{% if z_endstop_x != 0 or z_endstop_y != 0 %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ z_endstop_x }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ z_endstop_y }\n\n\n{% else %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ (Mx * 0.5) - Ox }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ (My * 0.5) - Oy }\n{% endif %}', 'description': 'G-Code macro', 'variable_verbose': 'True', 'variable_debug': 'False', 'variable_travel_speed': '200', 'variable_move_accel': '1000', 'variable_dock_speed': '50', 'variable_release_speed': '75', 'variable_z_drop_speed': '20', 'variable_safe_z': '25', 'variable_enable_z_hop': 'True', 'variable_max_bed_y': '300', 'variable_max_bed_x': '300', 'variable_z_endstop_x': '172', 'variable_z_endstop_y': '301', 'variable_docklocation_x': '42', 'variable_docklocation_y': '297', 'variable_docklocation_z': '-128', 'variable_enable_dock_servo': 'False', 'variable_servo_name': "'NAME'", 'variable_servo_deploy': '10', 'variable_servo_retract': '11', 'variable_servo_delay': '250', 'variable_dockmove_x': '40', 'variable_dockmove_y': '0', 'variable_dockmove_z': '0', 'variable_attachmove_x': '0', 'variable_attachmove_y': '30', 'variable_attachmove_z': '0', 'variable_umbilical': 'False', 'variable_umbilical_x': '15', 'variable_umbilical_y': '15', 'variable_park_toolhead': 'False', 'variable_parkposition_x': '125', 'variable_parkposition_y': '125', 'variable_parkposition_z': '30', 'variable_version': '1', 'variable_attachmove2_x': '0', 'variable_attachmove2_y': '0', 'variable_attachmove2_z': '0', 'variable_home_backoff_x': '10', 'variable_home_backoff_y': '10', 'variable_override_homing': "''", 'variable_dock_on_zhome': 'True'}, 'gcode_macro print_start': {'gcode': '\nM117 Homing...\nG28\nATTACH_PROBE\nZ_TILT_ADJUST\nDOCK_PROBE\nG28\nM117 Printing...\n\n\n\n\n\n\n\nG0 X150 Y150 Z30 F3600', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1500.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-02-23 22:19:26,191 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-23 22:19:26,192 [printer.py:reinit()] - Klipper version: v0.12.0-103-g6ce6fbbc-dirty
2024-02-23 22:19:26,192 [printer.py:reinit()] - # Extruders: 1
2024-02-23 22:19:26,192 [printer.py:reinit()] - # Temperature devices: 2
2024-02-23 22:19:26,192 [printer.py:reinit()] - # Fans: 4
2024-02-23 22:19:26,192 [printer.py:reinit()] - # Output pins: 1
2024-02-23 22:19:26,193 [printer.py:reinit()] - # Leds: 1
2024-02-23 22:19:26,208 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2024-02-23 22:19:26,210 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-02-23 22:19:26,456 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor chamber_temp&fan&controller_fan controller_fan&heater_fan hotend_fan&heater_fan exhaust_fan&output_pin caselight&neopixel headlight
2024-02-23 22:19:26,461 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-02-23 22:19:26,461 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-02-23 22:19:26,462 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-02-23 22:19:26,463 [screen.py:init_klipper()] - Printer initialized
2024-02-23 22:19:26,463 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2024-02-23 22:19:26,463 [printer.py:change_state()] - Adding callback for state: ready
2024-02-23 22:19:26,467 [screen.py:show_panel()] - Reinitializing panel
2024-02-23 22:19:26,546 [main_menu.py:__init__()] - ### Making MainMenu
2024-02-23 22:19:26,551 [main_menu.py:add_device()] - Adding device: extruder
2024-02-23 22:19:26,555 [main_menu.py:add_device()] - Adding device: heater_bed
2024-02-23 22:19:26,560 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber_temp
2024-02-23 22:19:26,584 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-02-23 22:19:26,596 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-02-23 22:19:26,603 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'temperature_sensor chamber_temp', 'extruder']
2024-02-23 22:19:26,612 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2024-02-23 22:19:26,613 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-02-23 22:20:23,825 [print.py:_callback()] - adding MGN9_Assembly_Tool_ASA_4m12s.gcode
2024-02-23 22:20:23,846 [print.py:_callback()] - adding .thumbs/MGN9_Assembly_Tool_ASA_4m12s-300x300.png
2024-02-23 22:20:23,865 [print.py:_callback()] - adding .thumbs/MGN9_Assembly_Tool_ASA_4m12s-32x32.png
2024-02-23 22:20:23,873 [print.py:_callback()] - updating MGN9_Assembly_Tool_ASA_4m12s.gcode
2024-02-23 22:20:23,875 [files.py:_callback()] - Error in getting metadata for .thumbs/MGN9_Assembly_Tool_ASA_4m12s-300x300.png. Retrying in 6 seconds
2024-02-23 22:20:23,875 [files.py:_callback()] - Error in getting metadata for .thumbs/MGN9_Assembly_Tool_ASA_4m12s-32x32.png. Retrying in 6 seconds
2024-02-23 22:22:21,674 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2024-02-23 22:22:21,675 [printer.py:change_state()] - Adding callback for state: printing
2024-02-23 22:22:21,691 [screen.py:_load_panel()] - Loading panel: job_status
2024-02-23 22:22:21,835 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-02-23 22:22:21,840 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-02-23 22:22:21,849 [job_status.py:update_file_metadata()] - Update Metadata. File: MGN9_Assembly_Tool_ASA_4m12s.gcode Size: 269217
2024-02-23 22:22:21,855 [job_status.py:show_file_thumbnail()] - MGN9_Assembly_Tool_ASA_4m12s.gcode
2024-02-23 22:22:53,982 [screen.py:_go_to_submenu()] - #### Go to submenu 
2024-02-23 22:22:53,982 [screen.py:_go_to_submenu()] - #### Menu __print
2024-02-23 22:22:53,990 [files.py:remove_file_callback()] - callback not found <bound method Panel._callback_metadata of <panels.job_status.Panel object at 0x7f4d30bac0>>
2024-02-23 22:22:53,991 [screen.py:_load_panel()] - Loading panel: menu
2024-02-23 22:22:54,190 [screen.py:attach_panel()] - Current panel hierarchy: job_status > 
2024-02-23 22:22:54,202 [menu.py:arrangeMenuItems()] - X > move
2024-02-23 22:22:54,206 [menu.py:arrangeMenuItems()] - X > power
2024-02-23 22:22:54,214 [menu.py:arrangeMenuItems()] - X > camera
2024-02-23 22:22:54,219 [menu.py:arrangeMenuItems()] - X > retraction
2024-02-23 22:22:54,222 [menu.py:arrangeMenuItems()] - X > spoolman
2024-02-23 22:22:55,269 [screen.py:_load_panel()] - Loading panel: temperature
2024-02-23 22:22:55,284 [temperature.py:add_device()] - Adding device: extruder
2024-02-23 22:22:55,289 [temperature.py:add_device()] - Adding device: heater_bed
2024-02-23 22:22:55,295 [temperature.py:add_device()] - Adding device: temperature_sensor chamber_temp
2024-02-23 22:22:55,326 [screen.py:attach_panel()] - Current panel hierarchy: job_status >  > temperature
2024-02-23 22:22:59,914 [temperature.py:verify_max_temp()] - 110/120
2024-02-23 22:22:59,914 [KlippyWebsocket.py:set_bed_temp()] - Sending set_bed_temp: M140 S110
2024-02-23 22:23:03,442 [temperature.py:select_heater()] - Selecting extruder
2024-02-23 22:23:03,754 [temperature.py:select_heater()] - Selecting heater_bed
2024-02-23 22:23:04,906 [temperature.py:select_heater()] - Deselecting heater_bed
2024-02-23 22:23:05,442 [temperature.py:select_heater()] - Deselecting extruder
2024-02-23 22:23:05,827 [temperature.py:select_heater()] - Selecting heater_bed
2024-02-23 22:23:06,141 [temperature.py:toggle_visibility()] - Graph show False: temperature_sensor chamber_temp
2024-02-23 22:23:07,114 [temperature.py:select_heater()] - Selecting extruder
2024-02-23 22:23:07,454 [temperature.py:select_heater()] - Deselecting heater_bed
2024-02-23 22:23:07,742 [temperature.py:toggle_visibility()] - Graph show True: temperature_sensor chamber_temp
2024-02-23 22:23:08,919 [temperature.py:select_heater()] - Selecting heater_bed
2024-02-23 22:23:09,062 [temperature.py:select_heater()] - Deselecting heater_bed
2024-02-23 22:23:09,957 [temperature.py:toggle_visibility()] - Graph show False: temperature_sensor chamber_temp
2024-02-23 22:23:11,610 [screen.py:_menu_go_back()] - #### Menu go back
2024-02-23 22:23:11,646 [screen.py:attach_panel()] - Current panel hierarchy: job_status > 
2024-02-23 22:23:11,665 [menu.py:arrangeMenuItems()] - X > move
2024-02-23 22:23:11,672 [menu.py:arrangeMenuItems()] - X > power
2024-02-23 22:23:11,684 [menu.py:arrangeMenuItems()] - X > camera
2024-02-23 22:23:11,693 [menu.py:arrangeMenuItems()] - X > retraction
2024-02-23 22:23:11,697 [menu.py:arrangeMenuItems()] - X > spoolman
2024-02-23 22:23:12,621 [screen.py:_menu_go_back()] - #### Menu go back
2024-02-23 22:23:12,639 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-02-23 22:23:12,646 [job_status.py:update_file_metadata()] - Update Metadata. File: MGN9_Assembly_Tool_ASA_4m12s.gcode Size: 269217
2024-02-23 22:23:12,651 [job_status.py:show_file_thumbnail()] - MGN9_Assembly_Tool_ASA_4m12s.gcode
2024-02-23 22:29:23,069 [screen.py:show_popup_message()] - error: // Unknown command:"BED_MESH_CLEAR"
2024-02-23 22:29:23,267 [printer.py:change_state()] - Changing state from 'printing' to 'ready'
2024-02-23 22:29:23,268 [printer.py:change_state()] - Adding callback for state: ready
2024-02-23 22:29:23,276 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'complete'
2024-02-23 22:29:31,714 [job_status.py:close_panel()] - Closing job_status panel
2024-02-23 22:29:31,717 [files.py:remove_file_callback()] - callback not found <bound method Panel._callback_metadata of <panels.job_status.Panel object at 0x7f4d30bac0>>
2024-02-23 22:29:31,717 [screen.py:show_panel()] - Reinitializing panel
2024-02-23 22:29:31,802 [main_menu.py:__init__()] - ### Making MainMenu
2024-02-23 22:29:31,812 [main_menu.py:add_device()] - Adding device: extruder
2024-02-23 22:29:31,819 [main_menu.py:add_device()] - Adding device: heater_bed
2024-02-23 22:29:31,827 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber_temp
2024-02-23 22:29:31,863 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-02-23 22:29:38,601 [main_menu.py:verify_max_temp()] - 110/120
2024-02-23 22:29:38,601 [KlippyWebsocket.py:set_bed_temp()] - Sending set_bed_temp: M140 S110
2024-02-23 22:24:16,347 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-02-23 22:24:16,347 [functions.py:log_start()] - KlipperScreen Version: v0.3.8-89-g2a5e9b3
2024-02-23 22:24:16,347 [functions.py:log_start()] - Python version: 3.9
2024-02-23 22:24:16,518 [config.py:get_config_file_location()] - Passed config (-c): .
2024-02-23 22:24:16,519 [config.py:__init__()] - Config path location: /home/pi/printer_data/config/KlipperScreen.conf
2024-02-23 22:24:16,530 [config.py:log_config()] -  ===== Config File =====

=======================
2024-02-23 22:24:16,532 [config.py:__init__()] - ====== Saved Def ======

[graph Printer]
heater_bed = False
extruder = False
temperature_sensor chamber_temp = False

=======================
2024-02-23 22:24:16,532 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-02-23 22:24:16,640 [config.py:create_translations()] - Selected lang: None OS lang: en_GB
2024-02-23 22:24:16,640 [config.py:install_language()] - Using lang en
2024-02-23 22:24:16,656 [screen.py:__init__()] - Screen resolution: 800x480
2024-02-23 22:24:16,658 [KlippyGtk.py:__init__()] - Font size: 16.6 (medium)
2024-02-23 22:24:17,120 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2024-02-23 22:24:17,128 [screen.py:set_screenblanking_timeout()] - Using DPMS
2024-02-23 22:24:17,134 [screen.py:initial_connection()] - Default printer: None
2024-02-23 22:24:17,164 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-02-23 22:24:17,164 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-02-23 22:24:17,200 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-02-23 22:24:17,206 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-02-23 22:24:17,219 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-23 22:24:17,228 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/access/oneshot_token
2024-02-23 22:24:17,229 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-02-23 22:24:17,239 [_logging.py:info()] - Websocket connected
2024-02-23 22:24:17,239 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-02-23 22:24:17,268 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-23 22:24:17,276 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2024-02-23 22:24:17,277 [printer.py:configure_cameras()] - Cameras: []
2024-02-23 22:24:17,278 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'octoprint_compat', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-310-g67c98f6', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-02-23 22:24:17,294 [KlippyRest.py:_do_request()] - 404 Client Error>>Not Found for url>>http://127.0.0.1:7125/printer/info
2024-02-23 22:24:20,354 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-23 22:24:20,362 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2024-02-23 22:24:20,363 [printer.py:configure_cameras()] - Cameras: []
2024-02-23 22:24:20,363 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'octoprint_compat', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-310-g67c98f6', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-02-23 22:24:20,372 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2024-02-23 22:24:20,584 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2024-02-23 22:24:20,587 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro _Probe_Variables': {'variable_probe_attached': 'False', 'variable_probe_state': 'False', 'variable_probe_lock': 'False', 'variable_probe_z_homed': 'False', 'variable_z_endstop_x': '0', 'variable_z_endstop_y': '0', 'gcode': ''}, 'gcode_macro _klicky_check_variables_version': {'gcode': '\n{% set version = printer["gcode_macro _User_Variables"].version|default(0) %}\n\n{% if version != 1 %}\n{ action_raise_error("Please update your klicky variables, there are some functionality changes") }\n{% endif %}'}, 'gcode_macro _KlickyDebug': {'gcode': '\n{% set message  = params.MSG %}\n{% set debug = printer["gcode_macro _User_Variables"].debug|default(False) %}\n\n{% if debug %}\n{ action_respond_info(message) }\n{% endif %}'}, 'gcode_macro _exit_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move  = params.MOVE|default(0) %}\n{% set speed = printer["gcode_macro _User_Variables"].travel_speed %}\n\n\nM400\nSET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\nRESTORE_GCODE_STATE NAME={function} MOVE={move} MOVE_SPEED={speed}'}, 'gcode_macro _entry_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move_accel = printer["gcode_macro _User_Variables"].move_accel|default(1000) %}\n\nM400\nSAVE_GCODE_STATE NAME={function}\n\nSET_GCODE_OFFSET Z=0\n\nG90\n\nSET_VELOCITY_LIMIT ACCEL={move_accel}'}, 'gcode_macro _Homing_Variables': {'gcode': '\n{% set reset  = params.RESET|default(0) %}\n{% if reset %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }\n{% endif %}'}, 'gcode_macro Attach_Probe_Lock': {'description': 'Attaches Klicky Probe, can only be docked after unlocking', 'gcode': '\nAttach_Probe\n_Probe_Lock'}, 'gcode_macro Dock_Probe_Unlock': {'description': 'Docks Klicky Probe even if it was locked', 'gcode': '\n_Probe_Unlock\nDock_Probe'}, 'gcode_macro _Probe_Unlock': {'description': 'Unlocks Klicky Probe state', 'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to False"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }'}, 'gcode_macro _Probe_Lock': {'description': 'Locks Klicky Probe state', 'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to True"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ True }'}, 'gcode_macro _DeployKlickyDock': {'description': 'Deploys Klicky servo-controlled dock', 'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_deploy = printer["gcode_macro _User_Variables"].servo_deploy|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_DeployKlickyDock Klicky servo configuration enabled"\n{% if servo_deploy == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo deploy angle specified") }\n{% endif %}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _DeployDock"] is defined %}\n_KlickyDebug msg="_DeployKlickyDock calling _DeployDock"\n_DeployDock\n{% endif %}'}, 'gcode_macro _RetractKlickyDock': {'description': 'Retracts Klicky servo-controlled dock', 'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_retract = printer["gcode_macro _User_Variables"].servo_retract|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_RetractKlickyDock Klicky servo configuration enabled"\n{% if servo_retract == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo retract angle specified") }\n{% endif %}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _RetractDock"] is defined %}\n_KlickyDebug msg="_RetractKlickyDock calling _RetractDock"\n_RetractDock\n{% endif %}'}, 'gcode_macro Attach_Probe': {'description': 'Attaches Klicky Probe', 'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set attachmove2_x = printer["gcode_macro _User_Variables"].attachmove2_x|default(0) %}\n{% set attachmove2_y = printer["gcode_macro _User_Variables"].attachmove2_y|default(0) %}\n{% set attachmove2_z = printer["gcode_macro _User_Variables"].attachmove2_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n_entry_point function=Attach_Probe\n\n{% if bypass_probe_docking == False %}\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n_KlickyDebug msg="Attach_Probe Axis homed"\n\n\n{% elif not probe_attached and not probe_lock %}\n_KlickyDebug msg="Attach_Probe going to attach probe"\n{% if verbose %}\n{ action_respond_info("Attaching Probe") }\n{% endif %}\n_KLICKY_STATUS_BUSY\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% if not enable_z_hop %}\n_KlickyDebug msg="Attach_Probe z_hop disabled"\n{% set safe_z = 0 %}\n{% endif %}\n{% endif %}\n\n\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero, duplicate?") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Umbilical_Path\n\n_entry_point function=Attach_Probe_intern\n\n\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n_DeployKlickyDock\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}"\nG0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}\n\n_RetractKlickyDock\n\n{% if ((printer.gcode_move.gcode_position.z < safe_z) or (docklocation_z != -128 and docklocation_z < safe_z ))%}\n_KlickyDebug msg="Attach_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\n_CheckProbe action=attach\n\n_exit_point function=Attach_Probe_intern move={goback}\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe locked not attaching probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already attached!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe already attached, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Attach_Probe\n{% else %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}'}, 'gcode_macro Dock_Probe': {'description': 'Docks Klicky Probe', 'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n{% if bypass_probe_docking == True %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}\n\n{% if bypass_probe_docking != True %}\n_entry_point function=Dock_Probe\n\n\n{% if probe_attached and not probe_lock %}\n_KLICKY_STATUS_BUSY\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Dock_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n_Umbilical_Path\n\n\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n\n_DeployKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\n\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}"\nG0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}\n{% endif %}\n\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}\n\n\n_RetractKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving away from the dock to G0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}\n\n\n{% if (printer.gcode_move.gcode_position.z < safe_z) %}\n_KlickyDebug msg="Dock_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\nG4 P1000\n_CheckProbe action=dock\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe locked not docking probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already docked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe already docked, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Dock_Probe move={goback}\n{% else %}\n_KlickyDebug msg="Dock_Probe probe docking bypassed, doing nothing"\n{% endif %}'}, 'gcode_macro PROBE_CALIBRATE': {'rename_existing': '_PROBE_CALIBRATE', 'description': 'Calibrate the probes z_offset with klicky automount', 'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_calibrate Axis homed"\n_KlickyDebug msg="probe_calibrate Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_CALIBRATE with the probe above the BED, check klicky_variables bed size!") }\n{% endif %}\n\n{% if bypass_probe_docking == False %}\n_CheckProbe action=query\nG90\nAttach_Probe back=1\n_KLICKY_STATUS_CALIBRATING_Z\n\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nM118 moving the toolhead 20 mm from the bed\n_KlickyDebug msg="probe_calibrate Moving Z up by 20mm"\nTESTZ Z=20\nM118 remove manually the probe and continue calibration\n_KLICKY_STATUS_READY\n{% else %}\n_KLICKY_STATUS_CALIBRATING_Z\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n_KLICKY_STATUS_READY\n{% endif %}'}, 'gcode_macro PROBE_ACCURACY': {'rename_existing': '_PROBE_ACCURACY', 'description': 'Probe Z-height accuracy at current XY position with klicky automount', 'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_accuracy Axis homed"\n_KlickyDebug msg="probe_accuracy Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n_entry_point function=PROBE_ACCURACY\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_ACCURACY with the probe above the BED, check klicky_variables bed size!") }\n{% endif%}\n\n_CheckProbe action=query\nAttach_Probe back=1\n\n_KlickyDebug msg="probe_accuracy calling klipper probe accuracy"\n_PROBE_ACCURACY {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nDock_Probe back=1\n\n_exit_point function=PROBE_ACCURACY move=1'}, 'force_move': {'enable_force_move': 'True'}, 'homing_override': {'axes': 'xyz', 'gcode': '\n\n_User_Variables\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n{% set kinematic_z = 0 %}\n{% set dock_on_zhome = printer["gcode_macro _User_Variables"].dock_on_zhome|default(True) %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set home_backoff_x = printer["gcode_macro _User_Variables"].home_backoff_x|default(0) %}\n{% set home_backoff_y = printer["gcode_macro _User_Variables"].home_backoff_y|default(0) %}\n{% set override_homing = printer["gcode_macro _User_Variables"].override_homing|default(\'\') %}\n\n\n_klicky_check_variables_version\n\n_CheckProbe action=query\n\n\n{% set home_x, home_y, home_z, leave_probe_attached = False, False, False, False %}\n\n{% if \'PROBE_LOCK\' in params%}\n{% if verbose %}\n{ action_respond_info("PROBE_LOCK = True") }\n{% endif %}\n{% set leave_probe_attached = True %}\n{% endif %}\n\n\n{% if not \'X\' in params\nand not \'Y\' in params\nand not \'Z\' in params %}\n\n{% set home_x, home_y, home_z = True, True, True %}\n_KlickyDebug msg="homing_override goint to home all axes"\n\n{% else %}\n{% if \'X\' in params %}\n{% set home_x = True %}\n_KlickyDebug msg="homing_override goint to home X"\n\n{% endif %}\n\n{% if \'Y\' in params %}\n{% set home_y = True %}\n_KlickyDebug msg="homing_override goint to home Y"\n{% endif %}\n\n{% if \'Z\' in params %}\n{% set home_z = True %}\n_KlickyDebug msg="homing_override goint to home Z"\n{% endif %}\n\n{% if \'X\' in params\nand \'Y\' in params\nand \'Z\' in params %}\n\n\n_Homing_Variables reset=1\n_KlickyDebug msg="homing_override goint to home all axes"\n{% endif %}\n\n{% endif %}\n\n_entry_point function=homing_override\n_KLICKY_STATUS_HOMING\n\n\n{% if \'z\' not in printer.toolhead.homed_axes %}\n{% if enable_z_hop == False %}\n_KlickyDebug msg="homing_override z_hop disabled"\n\n{% set kinematic_z = safe_z %}\n{% set safe_z = safe_z %}\n{% endif %}\n{% endif %}\n\n\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes and \'z\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("No axis homed") }\n{% endif %}\n_KlickyDebug msg="homing_override no axis homed, setting position as X=Y=0 Z={kinematic_z}"\nSET_KINEMATIC_POSITION X=0 Y=0 Z={kinematic_z}\nM400\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% if home_z != True %}\n_KlickyDebug msg="homing_override clearing axis homed state if not already homing Z"\nM84\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("X or Y not homed, forcing full G28") }\n{% endif %}\n{% set home_x, home_y, home_z = True, True, True %}\n{% endif %}\n{% endif %}\n\n\n{% if ((attachmove_y == 0 and override_homing == \'\' ) or (override_homing == \'Y\'))%}\n\n{% if home_y %}\n{% if override_homing == \'Y\' %}\n_KlickyDebug msg="homing_override Y homing first override, due to override_homing = Y"\n{% else %}\n_KlickyDebug msg="homing_override Y homing first override, due to attachmove_y = 0"\n{% endif %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y G28 Y0"\nG28 Y0\n\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop-home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n{% set home_y = False %}\n{% endif %}\n\n\n\n{% if home_x %}\n{% if verbose %}\n{ action_respond_info("Homing X") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in X homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_X"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_X external script to handle the X homing"\n_HOME_X\n{% else %}\n_KlickyDebug msg="homing_override Homing X, G28 X0"\nG28 X0\n\n{% if home_backoff_x != 0 %}\n{% if (printer.configfile.settings.stepper_x.position_endstop > (printer.configfile.settings.stepper_x.position_min|default(0) + printer.configfile.settings.stepper_x.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n\n{% if home_y %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y, G28 Y0"\nG28 Y0\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if verbose %}\n{ action_respond_info("Homing Z") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe configured as a virtual Z endstop attaching probe"\nAttach_Probe\n\n{% if leave_probe_attached %}\n_Probe_Lock\n{% endif %}\n{% elif dock_on_zhome == True %}\nDock_Probe\n{% endif %}\n\n_Home_Z_\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe no longer required, docking probe"\nDock_Probe\n{% elif dock_on_zhome == False %}\nDock_Probe\n{% endif %}\n{% endif %}\n_CheckProbe action=query\n\n\n_Park_Toolhead\n\n_exit_point function=homing_override\n_KLICKY_STATUS_READY'}, 'gcode_macro _Umbilical_Path': {'gcode': '\n{% set umbilical = printer["gcode_macro _User_Variables"].umbilical %}\n{% set umbilical_x = printer["gcode_macro _User_Variables"].umbilical_x %}\n{% set umbilical_y = printer["gcode_macro _User_Variables"].umbilical_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n\n{% if umbilical %}\n\n_entry_point function=Umbilical_Path\n\n_KlickyDebug msg="_Umbilical_Path moving to G0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}"\nG0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}\n\n_exit_point function=Umbilical_Path\n{% endif %}'}, 'gcode_macro _Home_Z_': {'gcode': '\n{% set z_endstop_x = printer["gcode_macro _Probe_Variables"].z_endstop_x %}\n{% set z_endstop_y = printer["gcode_macro _Probe_Variables"].z_endstop_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}    {% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Home_Z\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n{% else %}\n_KlickyDebug msg="_Home_Z_ XY Axis homed"\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="_Home_Z_ Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n\n\n_KlickyDebug msg="_Home_Z_ moving to Z endstop position G0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}"\nG0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}\n_KlickyDebug msg="_Home_Z_ Homing Z G28 Z"\nG28 Z0\n_KlickyDebug msg="_Home_Z_ toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_exit_point function=Home_Z'}, 'gcode_macro _CheckProbe': {'variable_probe_state': '0', 'gcode': '\nQuery_Probe\n_SetProbeState action={ params.ACTION }'}, 'gcode_macro _SetProbeState': {'gcode': '\n{% set query_probe_triggered = printer.probe.last_query %}\n{% set action  = params.ACTION|default(\'\') %}\n\n\n{% if query_probe_triggered %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ False }\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ True }\n{% endif %}\n\n{% if action == \'query\' %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_state VALUE={ query_probe_triggered }\n{% endif %}\n\n\n\n\n{% if not query_probe_triggered and action == \'dock\' %}\n{ action_raise_error("Probe dock failed!") }\n{% endif %}\n\n\n{% if query_probe_triggered and action == \'attach\' %}\n{ action_raise_error("Probe attach failed!") }\n{% endif %}'}, 'gcode_macro _Park_Toolhead': {'gcode': '\n{% set park_toolhead = printer["gcode_macro _User_Variables"].park_toolhead %}\n{% set parkposition_x = printer["gcode_macro _User_Variables"].parkposition_x %}\n{% set parkposition_y = printer["gcode_macro _User_Variables"].parkposition_y %}\n{% set parkposition_z = printer["gcode_macro _User_Variables"].parkposition_z %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Park_Toolhead\n\n{% if park_toolhead and \'xyz\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Parking Toolhead") }\n{% endif %}\n{% if parkposition_z == -128 %}\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}\n\n{% else %}\n\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}\n\n{% endif %}\n\n{% endif %}\n_exit_point function=Park_Toolhead'}, 'gcode_macro _klicky_status_ready': {'gcode': '\n{% if printer[\'gcode_macro status_ready\'] is defined %}\n_KlickyDebug msg="_klicky_status_ready activating the LED STATUS_READY"\nSTATUS_READY\n{% endif %}'}, 'gcode_macro _klicky_status_busy': {'gcode': '\n{% if printer[\'gcode_macro status_busy\'] is defined %}\n_KlickyDebug msg="_klicky_status_busy activating the LED STATUS_BUSY"\nSTATUS_BUSY\n{% endif %}'}, 'gcode_macro _klicky_status_leveling': {'gcode': '\n{% if printer[\'gcode_macro status_leveling\'] is defined %}\n_KlickyDebug msg="_klicky_status_leveling activating the LED STATUS_LEVELING"\nSTATUS_LEVELING\n{% endif %}'}, 'gcode_macro _klicky_status_homing': {'gcode': '\n{% if printer[\'gcode_macro status_homing\'] is defined %}\n_KlickyDebug msg="_klicky_status_homing activating the LED STATUS_HOMING"\nSTATUS_HOMING\n{% endif %}'}, 'gcode_macro _klicky_status_cleaning': {'gcode': '\n{% if printer[\'gcode_macro status_cleaning\'] is defined %}\n_KlickyDebug msg="_klicky_status_cleaning activating the LED STATUS_CLEANING"\nSTATUS_CLEANING\n{% endif %}'}, 'gcode_macro _klicky_status_meshing': {'gcode': '\n{% if printer[\'gcode_macro status_meshing\'] is defined %}\n_KlickyDebug msg="_klicky_status_meshing activating the LED STATUS_MESHING"\nSTATUS_MESHING\n{% endif %}'}, 'gcode_macro _klicky_status_calibrating_z': {'gcode': '\n{% if printer[\'gcode_macro status_calibrating_z\'] is defined %}\n_KlickyDebug msg="_klicky_status_calibrating_z activating the LED STATUS_CALIBRATING_Z"\nSTATUS_CALIBRATING_Z\n{% endif %}'}, 'z_calibration': {'nozzle_xy_position': '172, 301', 'switch_xy_position': '172, 275', 'bed_xy_position': '150, 150', 'switch_offset': '0.065', 'offset_margins': '-1.0,1.0', 'speed': '50', 'probing_first_fast': 'false', 'start_gcode': 'Attach_Probe', 'end_gcode': 'Dock_Probe'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_28003C001150535556323420-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '^PG6', 'position_min': '0', 'position_endstop': '299', 'position_max': '299', 'homing_speed': '25', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'PG9', 'position_min': '0', 'position_endstop': '300', 'position_max': '303.5', 'homing_speed': '25', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': '!PG3', 'enable_pin': '!PG5', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'PG10', 'position_max': '290', 'position_min': '-4.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3', 'position_endstop': '-0.955'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA0', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': '!PF10', 'enable_pin': '!PG2', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PC13', 'dir_pin': 'PF0', 'enable_pin': '!PF1', 'rotation_distance': '21.9459674016', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.75', 'heater_pin': 'PA1', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF4', 'min_temp': '10', 'max_temp': '270', 'max_power': '1.0', 'min_extrude_temp': '170', 'pressure_advance': '0.05', 'pressure_advance_smooth_time': '0.040', 'control': 'pid', 'pid_kp': '26.572', 'pid_ki': '2.036', 'pid_kd': '86.691'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.5', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PA2', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF3', 'max_power': '1', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '55.196', 'pid_ki': '2.091', 'pid_kd': '364.295'}, 'probe': {'pin': 'PG15', 'x_offset': '0', 'y_offset': '25.0', 'z_offset': '0', 'speed': '10.0', 'samples': '5', 'samples_result': 'median', 'sample_retract_dist': '3.0', 'samples_tolerance': '0.006', 'samples_tolerance_retries': '6'}, 'fan': {'pin': 'PA8', 'kick_start_time': '0.5', 'off_below': '0.10'}, 'heater_fan hotend_fan': {'pin': 'PE5', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'controller_fan controller_fan': {'pin': 'PD12', 'kick_start_time': '0.5', 'heater': 'heater_bed'}, 'heater_fan exhaust_fan': {'pin': 'PD13', 'max_power': '1.0', 'shutdown_speed': '0.0', 'kick_start_time': '5.0', 'heater': 'heater_bed', 'heater_temp': '60', 'fan_speed': '1.0'}, 'output_pin caselight': {'pin': 'PD15', 'pwm': 'true', 'shutdown_value': '0', 'value': '1', 'cycle_time': '0.01'}, 'neopixel headlight': {'pin': 'PB0', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '0.0', 'initial_green': '0.2157', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'temperature_sensor chamber_temp': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF5', 'min_temp': '0', 'max_temp': '100', 'gcode_id': 'chamber_th'}, 'idle_timeout': {'timeout': '1800'}, 'z_tilt': {'z_positions': '\n-50, 18\n150, 348\n350, 18', 'points': '\n30, 5\n150, 245\n270, 5', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'gcode_macro _User_Variables': {'variable_verbose': 'True', 'variable_debug': 'False', 'variable_travel_speed': '200', 'variable_move_accel': '1000', 'variable_dock_speed': '50', 'variable_release_speed': '75', 'variable_z_drop_speed': '20', 'variable_safe_z': '25', 'variable_enable_z_hop': 'True', 'variable_max_bed_y': '300', 'variable_max_bed_x': '300', 'variable_z_endstop_x': '172', 'variable_z_endstop_y': '301', 'variable_docklocation_x': '42', 'variable_docklocation_y': '297', 'variable_docklocation_z': '-128', 'variable_enable_dock_servo': 'False', 'variable_servo_name': "'NAME'", 'variable_servo_deploy': '10', 'variable_servo_retract': '11', 'variable_servo_delay': '250', 'variable_dockmove_x': '40', 'variable_dockmove_y': '0', 'variable_dockmove_z': '0', 'variable_attachmove_x': '0', 'variable_attachmove_y': '30', 'variable_attachmove_z': '0', 'variable_umbilical': 'False', 'variable_umbilical_x': '15', 'variable_umbilical_y': '15', 'variable_park_toolhead': 'False', 'variable_parkposition_x': '125', 'variable_parkposition_y': '125', 'variable_parkposition_z': '30', 'variable_version': '1', 'variable_attachmove2_x': '0', 'variable_attachmove2_y': '0', 'variable_attachmove2_z': '0', 'variable_home_backoff_x': '10', 'variable_home_backoff_y': '10', 'variable_override_homing': "''", 'variable_dock_on_zhome': 'True', 'gcode': '\n{% set Mx = printer[\'configfile\'].config["stepper_x"]["position_max"]|float %}\n{% set My = printer[\'configfile\'].config["stepper_y"]["position_max"]|float %}\n{% set Ox = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set Oy = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set Oz = printer[\'configfile\'].config["probe"]["z_offset"]|float %}\n\n\n{% if z_endstop_x != 0 or z_endstop_y != 0 %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ z_endstop_x }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ z_endstop_y }\n\n\n{% else %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ (Mx * 0.5) - Ox }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ (My * 0.5) - Oy }\n{% endif %}'}, 'gcode_macro PRINT_START': {'gcode': '\nM117 Homing...\nG28\nATTACH_PROBE\nZ_TILT_ADJUST\nDOCK_PROBE\nG28\nM117 Printing...\n\n\n\n\n\n\n\nG0 X150 Y150 Z30 F3600'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_28003C001150535556323420-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro _probe_variables': {'gcode': '', 'description': 'G-Code macro', 'variable_probe_attached': 'False', 'variable_probe_state': 'False', 'variable_probe_lock': 'False', 'variable_probe_z_homed': 'False', 'variable_z_endstop_x': '0', 'variable_z_endstop_y': '0'}, 'gcode_macro _klicky_check_variables_version': {'gcode': '\n{% set version = printer["gcode_macro _User_Variables"].version|default(0) %}\n\n{% if version != 1 %}\n{ action_raise_error("Please update your klicky variables, there are some functionality changes") }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klickydebug': {'gcode': '\n{% set message  = params.MSG %}\n{% set debug = printer["gcode_macro _User_Variables"].debug|default(False) %}\n\n{% if debug %}\n{ action_respond_info(message) }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _exit_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move  = params.MOVE|default(0) %}\n{% set speed = printer["gcode_macro _User_Variables"].travel_speed %}\n\n\nM400\nSET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\nRESTORE_GCODE_STATE NAME={function} MOVE={move} MOVE_SPEED={speed}', 'description': 'G-Code macro'}, 'gcode_macro _entry_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move_accel = printer["gcode_macro _User_Variables"].move_accel|default(1000) %}\n\nM400\nSAVE_GCODE_STATE NAME={function}\n\nSET_GCODE_OFFSET Z=0\n\nG90\n\nSET_VELOCITY_LIMIT ACCEL={move_accel}', 'description': 'G-Code macro'}, 'gcode_macro _homing_variables': {'gcode': '\n{% set reset  = params.RESET|default(0) %}\n{% if reset %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro attach_probe_lock': {'gcode': '\nAttach_Probe\n_Probe_Lock', 'description': 'Attaches Klicky Probe, can only be docked after unlocking'}, 'gcode_macro dock_probe_unlock': {'gcode': '\n_Probe_Unlock\nDock_Probe', 'description': 'Docks Klicky Probe even if it was locked'}, 'gcode_macro _probe_unlock': {'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to False"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }', 'description': 'Unlocks Klicky Probe state'}, 'gcode_macro _probe_lock': {'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to True"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ True }', 'description': 'Locks Klicky Probe state'}, 'gcode_macro _deployklickydock': {'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_deploy = printer["gcode_macro _User_Variables"].servo_deploy|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_DeployKlickyDock Klicky servo configuration enabled"\n{% if servo_deploy == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo deploy angle specified") }\n{% endif %}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _DeployDock"] is defined %}\n_KlickyDebug msg="_DeployKlickyDock calling _DeployDock"\n_DeployDock\n{% endif %}', 'description': 'Deploys Klicky servo-controlled dock'}, 'gcode_macro _retractklickydock': {'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_retract = printer["gcode_macro _User_Variables"].servo_retract|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_RetractKlickyDock Klicky servo configuration enabled"\n{% if servo_retract == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo retract angle specified") }\n{% endif %}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _RetractDock"] is defined %}\n_KlickyDebug msg="_RetractKlickyDock calling _RetractDock"\n_RetractDock\n{% endif %}', 'description': 'Retracts Klicky servo-controlled dock'}, 'gcode_macro attach_probe': {'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set attachmove2_x = printer["gcode_macro _User_Variables"].attachmove2_x|default(0) %}\n{% set attachmove2_y = printer["gcode_macro _User_Variables"].attachmove2_y|default(0) %}\n{% set attachmove2_z = printer["gcode_macro _User_Variables"].attachmove2_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n_entry_point function=Attach_Probe\n\n{% if bypass_probe_docking == False %}\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n_KlickyDebug msg="Attach_Probe Axis homed"\n\n\n{% elif not probe_attached and not probe_lock %}\n_KlickyDebug msg="Attach_Probe going to attach probe"\n{% if verbose %}\n{ action_respond_info("Attaching Probe") }\n{% endif %}\n_KLICKY_STATUS_BUSY\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% if not enable_z_hop %}\n_KlickyDebug msg="Attach_Probe z_hop disabled"\n{% set safe_z = 0 %}\n{% endif %}\n{% endif %}\n\n\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero, duplicate?") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Umbilical_Path\n\n_entry_point function=Attach_Probe_intern\n\n\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n_DeployKlickyDock\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}"\nG0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}\n\n_RetractKlickyDock\n\n{% if ((printer.gcode_move.gcode_position.z < safe_z) or (docklocation_z != -128 and docklocation_z < safe_z ))%}\n_KlickyDebug msg="Attach_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\n_CheckProbe action=attach\n\n_exit_point function=Attach_Probe_intern move={goback}\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe locked not attaching probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already attached!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe already attached, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Attach_Probe\n{% else %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}', 'description': 'Attaches Klicky Probe'}, 'gcode_macro dock_probe': {'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n{% if bypass_probe_docking == True %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}\n\n{% if bypass_probe_docking != True %}\n_entry_point function=Dock_Probe\n\n\n{% if probe_attached and not probe_lock %}\n_KLICKY_STATUS_BUSY\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Dock_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n_Umbilical_Path\n\n\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n\n_DeployKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\n\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}"\nG0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}\n{% endif %}\n\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}\n\n\n_RetractKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving away from the dock to G0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}\n\n\n{% if (printer.gcode_move.gcode_position.z < safe_z) %}\n_KlickyDebug msg="Dock_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\nG4 P1000\n_CheckProbe action=dock\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe locked not docking probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already docked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe already docked, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Dock_Probe move={goback}\n{% else %}\n_KlickyDebug msg="Dock_Probe probe docking bypassed, doing nothing"\n{% endif %}', 'description': 'Docks Klicky Probe'}, 'gcode_macro probe_calibrate': {'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_calibrate Axis homed"\n_KlickyDebug msg="probe_calibrate Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_CALIBRATE with the probe above the BED, check klicky_variables bed size!") }\n{% endif %}\n\n{% if bypass_probe_docking == False %}\n_CheckProbe action=query\nG90\nAttach_Probe back=1\n_KLICKY_STATUS_CALIBRATING_Z\n\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nM118 moving the toolhead 20 mm from the bed\n_KlickyDebug msg="probe_calibrate Moving Z up by 20mm"\nTESTZ Z=20\nM118 remove manually the probe and continue calibration\n_KLICKY_STATUS_READY\n{% else %}\n_KLICKY_STATUS_CALIBRATING_Z\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n_KLICKY_STATUS_READY\n{% endif %}', 'rename_existing': '_PROBE_CALIBRATE', 'description': 'Calibrate the probes z_offset with klicky automount'}, 'gcode_macro probe_accuracy': {'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_accuracy Axis homed"\n_KlickyDebug msg="probe_accuracy Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n_entry_point function=PROBE_ACCURACY\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_ACCURACY with the probe above the BED, check klicky_variables bed size!") }\n{% endif%}\n\n_CheckProbe action=query\nAttach_Probe back=1\n\n_KlickyDebug msg="probe_accuracy calling klipper probe accuracy"\n_PROBE_ACCURACY {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nDock_Probe back=1\n\n_exit_point function=PROBE_ACCURACY move=1', 'rename_existing': '_PROBE_ACCURACY', 'description': 'Probe Z-height accuracy at current XY position with klicky automount'}, 'force_move': {'enable_force_move': True}, 'homing_override': {'axes': 'xyz', 'gcode': '\n\n_User_Variables\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n{% set kinematic_z = 0 %}\n{% set dock_on_zhome = printer["gcode_macro _User_Variables"].dock_on_zhome|default(True) %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set home_backoff_x = printer["gcode_macro _User_Variables"].home_backoff_x|default(0) %}\n{% set home_backoff_y = printer["gcode_macro _User_Variables"].home_backoff_y|default(0) %}\n{% set override_homing = printer["gcode_macro _User_Variables"].override_homing|default(\'\') %}\n\n\n_klicky_check_variables_version\n\n_CheckProbe action=query\n\n\n{% set home_x, home_y, home_z, leave_probe_attached = False, False, False, False %}\n\n{% if \'PROBE_LOCK\' in params%}\n{% if verbose %}\n{ action_respond_info("PROBE_LOCK = True") }\n{% endif %}\n{% set leave_probe_attached = True %}\n{% endif %}\n\n\n{% if not \'X\' in params\nand not \'Y\' in params\nand not \'Z\' in params %}\n\n{% set home_x, home_y, home_z = True, True, True %}\n_KlickyDebug msg="homing_override goint to home all axes"\n\n{% else %}\n{% if \'X\' in params %}\n{% set home_x = True %}\n_KlickyDebug msg="homing_override goint to home X"\n\n{% endif %}\n\n{% if \'Y\' in params %}\n{% set home_y = True %}\n_KlickyDebug msg="homing_override goint to home Y"\n{% endif %}\n\n{% if \'Z\' in params %}\n{% set home_z = True %}\n_KlickyDebug msg="homing_override goint to home Z"\n{% endif %}\n\n{% if \'X\' in params\nand \'Y\' in params\nand \'Z\' in params %}\n\n\n_Homing_Variables reset=1\n_KlickyDebug msg="homing_override goint to home all axes"\n{% endif %}\n\n{% endif %}\n\n_entry_point function=homing_override\n_KLICKY_STATUS_HOMING\n\n\n{% if \'z\' not in printer.toolhead.homed_axes %}\n{% if enable_z_hop == False %}\n_KlickyDebug msg="homing_override z_hop disabled"\n\n{% set kinematic_z = safe_z %}\n{% set safe_z = safe_z %}\n{% endif %}\n{% endif %}\n\n\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes and \'z\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("No axis homed") }\n{% endif %}\n_KlickyDebug msg="homing_override no axis homed, setting position as X=Y=0 Z={kinematic_z}"\nSET_KINEMATIC_POSITION X=0 Y=0 Z={kinematic_z}\nM400\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% if home_z != True %}\n_KlickyDebug msg="homing_override clearing axis homed state if not already homing Z"\nM84\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("X or Y not homed, forcing full G28") }\n{% endif %}\n{% set home_x, home_y, home_z = True, True, True %}\n{% endif %}\n{% endif %}\n\n\n{% if ((attachmove_y == 0 and override_homing == \'\' ) or (override_homing == \'Y\'))%}\n\n{% if home_y %}\n{% if override_homing == \'Y\' %}\n_KlickyDebug msg="homing_override Y homing first override, due to override_homing = Y"\n{% else %}\n_KlickyDebug msg="homing_override Y homing first override, due to attachmove_y = 0"\n{% endif %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y G28 Y0"\nG28 Y0\n\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop-home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n{% set home_y = False %}\n{% endif %}\n\n\n\n{% if home_x %}\n{% if verbose %}\n{ action_respond_info("Homing X") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in X homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_X"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_X external script to handle the X homing"\n_HOME_X\n{% else %}\n_KlickyDebug msg="homing_override Homing X, G28 X0"\nG28 X0\n\n{% if home_backoff_x != 0 %}\n{% if (printer.configfile.settings.stepper_x.position_endstop > (printer.configfile.settings.stepper_x.position_min|default(0) + printer.configfile.settings.stepper_x.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n\n{% if home_y %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y, G28 Y0"\nG28 Y0\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if verbose %}\n{ action_respond_info("Homing Z") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe configured as a virtual Z endstop attaching probe"\nAttach_Probe\n\n{% if leave_probe_attached %}\n_Probe_Lock\n{% endif %}\n{% elif dock_on_zhome == True %}\nDock_Probe\n{% endif %}\n\n_Home_Z_\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe no longer required, docking probe"\nDock_Probe\n{% elif dock_on_zhome == False %}\nDock_Probe\n{% endif %}\n{% endif %}\n_CheckProbe action=query\n\n\n_Park_Toolhead\n\n_exit_point function=homing_override\n_KLICKY_STATUS_READY'}, 'gcode_macro _umbilical_path': {'gcode': '\n{% set umbilical = printer["gcode_macro _User_Variables"].umbilical %}\n{% set umbilical_x = printer["gcode_macro _User_Variables"].umbilical_x %}\n{% set umbilical_y = printer["gcode_macro _User_Variables"].umbilical_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n\n{% if umbilical %}\n\n_entry_point function=Umbilical_Path\n\n_KlickyDebug msg="_Umbilical_Path moving to G0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}"\nG0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}\n\n_exit_point function=Umbilical_Path\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _home_z_': {'gcode': '\n{% set z_endstop_x = printer["gcode_macro _Probe_Variables"].z_endstop_x %}\n{% set z_endstop_y = printer["gcode_macro _Probe_Variables"].z_endstop_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}    {% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Home_Z\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n{% else %}\n_KlickyDebug msg="_Home_Z_ XY Axis homed"\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="_Home_Z_ Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n\n\n_KlickyDebug msg="_Home_Z_ moving to Z endstop position G0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}"\nG0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}\n_KlickyDebug msg="_Home_Z_ Homing Z G28 Z"\nG28 Z0\n_KlickyDebug msg="_Home_Z_ toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_exit_point function=Home_Z', 'description': 'G-Code macro'}, 'gcode_macro _checkprobe': {'gcode': '\nQuery_Probe\n_SetProbeState action={ params.ACTION }', 'description': 'G-Code macro', 'variable_probe_state': '0'}, 'gcode_macro _setprobestate': {'gcode': '\n{% set query_probe_triggered = printer.probe.last_query %}\n{% set action  = params.ACTION|default(\'\') %}\n\n\n{% if query_probe_triggered %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ False }\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ True }\n{% endif %}\n\n{% if action == \'query\' %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_state VALUE={ query_probe_triggered }\n{% endif %}\n\n\n\n\n{% if not query_probe_triggered and action == \'dock\' %}\n{ action_raise_error("Probe dock failed!") }\n{% endif %}\n\n\n{% if query_probe_triggered and action == \'attach\' %}\n{ action_raise_error("Probe attach failed!") }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _park_toolhead': {'gcode': '\n{% set park_toolhead = printer["gcode_macro _User_Variables"].park_toolhead %}\n{% set parkposition_x = printer["gcode_macro _User_Variables"].parkposition_x %}\n{% set parkposition_y = printer["gcode_macro _User_Variables"].parkposition_y %}\n{% set parkposition_z = printer["gcode_macro _User_Variables"].parkposition_z %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Park_Toolhead\n\n{% if park_toolhead and \'xyz\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Parking Toolhead") }\n{% endif %}\n{% if parkposition_z == -128 %}\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}\n\n{% else %}\n\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}\n\n{% endif %}\n\n{% endif %}\n_exit_point function=Park_Toolhead', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_ready': {'gcode': '\n{% if printer[\'gcode_macro status_ready\'] is defined %}\n_KlickyDebug msg="_klicky_status_ready activating the LED STATUS_READY"\nSTATUS_READY\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_busy': {'gcode': '\n{% if printer[\'gcode_macro status_busy\'] is defined %}\n_KlickyDebug msg="_klicky_status_busy activating the LED STATUS_BUSY"\nSTATUS_BUSY\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_leveling': {'gcode': '\n{% if printer[\'gcode_macro status_leveling\'] is defined %}\n_KlickyDebug msg="_klicky_status_leveling activating the LED STATUS_LEVELING"\nSTATUS_LEVELING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_homing': {'gcode': '\n{% if printer[\'gcode_macro status_homing\'] is defined %}\n_KlickyDebug msg="_klicky_status_homing activating the LED STATUS_HOMING"\nSTATUS_HOMING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_cleaning': {'gcode': '\n{% if printer[\'gcode_macro status_cleaning\'] is defined %}\n_KlickyDebug msg="_klicky_status_cleaning activating the LED STATUS_CLEANING"\nSTATUS_CLEANING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_meshing': {'gcode': '\n{% if printer[\'gcode_macro status_meshing\'] is defined %}\n_KlickyDebug msg="_klicky_status_meshing activating the LED STATUS_MESHING"\nSTATUS_MESHING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_calibrating_z': {'gcode': '\n{% if printer[\'gcode_macro status_calibrating_z\'] is defined %}\n_KlickyDebug msg="_klicky_status_calibrating_z activating the LED STATUS_CALIBRATING_Z"\nSTATUS_CALIBRATING_Z\n{% endif %}', 'description': 'G-Code macro'}, 'z_calibration': {'switch_offset': 0.065, 'offset_margins': '-1.0,1.0', 'speed': 50.0, 'samples_result': 'none', 'probing_first_fast': False, 'nozzle_xy_position': '172, 301', 'switch_xy_position': '172, 275', 'bed_xy_position': '150, 150', 'start_gcode': 'Attach_Probe', 'before_switch_gcode': '', 'end_gcode': 'Dock_Probe'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': '^PG6', 'position_endstop': 299.0, 'position_min': 0.0, 'position_max': 299.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'PG9', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 303.5, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PF11', 'dir_pin': '!PG3', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG5', 'endstop_pin': 'PG10', 'position_endstop': -0.955, 'position_min': -4.5, 'position_max': 290.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA0'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PF9', 'dir_pin': '!PF10', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG2'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF4', 'min_temp': 10.0, 'max_temp': 270.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 26.572, 'pid_ki': 2.036, 'pid_kd': 86.691, 'heater_pin': 'PA1', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PC13', 'pressure_advance': 0.05, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'PF0', 'rotation_distance': 21.9459674016, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 55.196, 'pid_ki': 2.091, 'pid_kd': 364.295, 'heater_pin': 'PA2', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'probe': {'z_offset': 0.0, 'deactivate_on_each_sample': True, 'activate_gcode': '', 'deactivate_gcode': '', 'pin': 'PG15', 'speed': 10.0, 'lift_speed': 10.0, 'x_offset': 0.0, 'y_offset': 25.0, 'samples': 5, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.006, 'samples_tolerance_retries': 6}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE5', 'fan_speed': 1.0}, 'controller_fan controller_fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD12', 'fan_speed': 1.0, 'idle_speed': 1.0, 'idle_timeout': 30, 'heater': ['heater_bed']}, 'heater_fan exhaust_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 5.0, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13', 'fan_speed': 1.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PD15', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 1.0, 'maximum_mcu_duration': 0.0, 'value': 1.0, 'shutdown_value': 0.0}, 'neopixel headlight': {'pin': 'PB0', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 0.0, 'initial_green': 0.2157, 'initial_blue': 1.0, 'initial_white': 0.0}, 'temperature_sensor chamber_temp': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF5', 'min_temp': 0.0, 'max_temp': 100.0, 'gcode_id': 'chamber_th'}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [150.0, 348.0], [350.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 5.0], [150.0, 245.0], [270.0, 5.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'gcode_macro _user_variables': {'gcode': '\n{% set Mx = printer[\'configfile\'].config["stepper_x"]["position_max"]|float %}\n{% set My = printer[\'configfile\'].config["stepper_y"]["position_max"]|float %}\n{% set Ox = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set Oy = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set Oz = printer[\'configfile\'].config["probe"]["z_offset"]|float %}\n\n\n{% if z_endstop_x != 0 or z_endstop_y != 0 %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ z_endstop_x }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ z_endstop_y }\n\n\n{% else %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ (Mx * 0.5) - Ox }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ (My * 0.5) - Oy }\n{% endif %}', 'description': 'G-Code macro', 'variable_verbose': 'True', 'variable_debug': 'False', 'variable_travel_speed': '200', 'variable_move_accel': '1000', 'variable_dock_speed': '50', 'variable_release_speed': '75', 'variable_z_drop_speed': '20', 'variable_safe_z': '25', 'variable_enable_z_hop': 'True', 'variable_max_bed_y': '300', 'variable_max_bed_x': '300', 'variable_z_endstop_x': '172', 'variable_z_endstop_y': '301', 'variable_docklocation_x': '42', 'variable_docklocation_y': '297', 'variable_docklocation_z': '-128', 'variable_enable_dock_servo': 'False', 'variable_servo_name': "'NAME'", 'variable_servo_deploy': '10', 'variable_servo_retract': '11', 'variable_servo_delay': '250', 'variable_dockmove_x': '40', 'variable_dockmove_y': '0', 'variable_dockmove_z': '0', 'variable_attachmove_x': '0', 'variable_attachmove_y': '30', 'variable_attachmove_z': '0', 'variable_umbilical': 'False', 'variable_umbilical_x': '15', 'variable_umbilical_y': '15', 'variable_park_toolhead': 'False', 'variable_parkposition_x': '125', 'variable_parkposition_y': '125', 'variable_parkposition_z': '30', 'variable_version': '1', 'variable_attachmove2_x': '0', 'variable_attachmove2_y': '0', 'variable_attachmove2_z': '0', 'variable_home_backoff_x': '10', 'variable_home_backoff_y': '10', 'variable_override_homing': "''", 'variable_dock_on_zhome': 'True'}, 'gcode_macro print_start': {'gcode': '\nM117 Homing...\nG28\nATTACH_PROBE\nZ_TILT_ADJUST\nDOCK_PROBE\nG28\nM117 Printing...\n\n\n\n\n\n\n\nG0 X150 Y150 Z30 F3600', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1500.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-02-23 22:24:20,589 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-23 22:24:20,590 [printer.py:reinit()] - Klipper version: v0.12.0-103-g6ce6fbbc-dirty
2024-02-23 22:24:20,590 [printer.py:reinit()] - # Extruders: 1
2024-02-23 22:24:20,590 [printer.py:reinit()] - # Temperature devices: 2
2024-02-23 22:24:20,590 [printer.py:reinit()] - # Fans: 4
2024-02-23 22:24:20,590 [printer.py:reinit()] - # Output pins: 1
2024-02-23 22:24:20,590 [printer.py:reinit()] - # Leds: 1
2024-02-23 22:24:20,624 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2024-02-23 22:24:20,625 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-02-23 22:24:20,897 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor chamber_temp&fan&controller_fan controller_fan&heater_fan hotend_fan&heater_fan exhaust_fan&output_pin caselight&neopixel headlight
2024-02-23 22:24:20,899 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-02-23 22:24:20,899 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-02-23 22:24:20,900 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-02-23 22:24:20,901 [screen.py:init_klipper()] - Printer initialized
2024-02-23 22:24:20,901 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2024-02-23 22:24:20,901 [printer.py:change_state()] - Adding callback for state: ready
2024-02-23 22:24:20,904 [screen.py:_load_panel()] - Loading panel: main_menu
2024-02-23 22:24:20,986 [main_menu.py:__init__()] - ### Making MainMenu
2024-02-23 22:24:20,992 [main_menu.py:add_device()] - Adding device: extruder
2024-02-23 22:24:20,998 [main_menu.py:add_device()] - Adding device: heater_bed
2024-02-23 22:24:21,004 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber_temp
2024-02-23 22:24:21,034 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-02-23 22:24:21,042 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-02-23 22:24:21,053 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'temperature_sensor chamber_temp', 'extruder']
2024-02-23 22:24:21,064 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2024-02-23 22:24:21,065 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-02-23 22:24:21,356 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-23 22:24:21,357 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'octoprint_compat', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.8.0-310-g67c98f6', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-02-23 22:24:21,368 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2024-02-23 22:24:21,585 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2024-02-23 22:24:21,589 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro _Probe_Variables': {'variable_probe_attached': 'False', 'variable_probe_state': 'False', 'variable_probe_lock': 'False', 'variable_probe_z_homed': 'False', 'variable_z_endstop_x': '0', 'variable_z_endstop_y': '0', 'gcode': ''}, 'gcode_macro _klicky_check_variables_version': {'gcode': '\n{% set version = printer["gcode_macro _User_Variables"].version|default(0) %}\n\n{% if version != 1 %}\n{ action_raise_error("Please update your klicky variables, there are some functionality changes") }\n{% endif %}'}, 'gcode_macro _KlickyDebug': {'gcode': '\n{% set message  = params.MSG %}\n{% set debug = printer["gcode_macro _User_Variables"].debug|default(False) %}\n\n{% if debug %}\n{ action_respond_info(message) }\n{% endif %}'}, 'gcode_macro _exit_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move  = params.MOVE|default(0) %}\n{% set speed = printer["gcode_macro _User_Variables"].travel_speed %}\n\n\nM400\nSET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\nRESTORE_GCODE_STATE NAME={function} MOVE={move} MOVE_SPEED={speed}'}, 'gcode_macro _entry_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move_accel = printer["gcode_macro _User_Variables"].move_accel|default(1000) %}\n\nM400\nSAVE_GCODE_STATE NAME={function}\n\nSET_GCODE_OFFSET Z=0\n\nG90\n\nSET_VELOCITY_LIMIT ACCEL={move_accel}'}, 'gcode_macro _Homing_Variables': {'gcode': '\n{% set reset  = params.RESET|default(0) %}\n{% if reset %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }\n{% endif %}'}, 'gcode_macro Attach_Probe_Lock': {'description': 'Attaches Klicky Probe, can only be docked after unlocking', 'gcode': '\nAttach_Probe\n_Probe_Lock'}, 'gcode_macro Dock_Probe_Unlock': {'description': 'Docks Klicky Probe even if it was locked', 'gcode': '\n_Probe_Unlock\nDock_Probe'}, 'gcode_macro _Probe_Unlock': {'description': 'Unlocks Klicky Probe state', 'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to False"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }'}, 'gcode_macro _Probe_Lock': {'description': 'Locks Klicky Probe state', 'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to True"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ True }'}, 'gcode_macro _DeployKlickyDock': {'description': 'Deploys Klicky servo-controlled dock', 'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_deploy = printer["gcode_macro _User_Variables"].servo_deploy|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_DeployKlickyDock Klicky servo configuration enabled"\n{% if servo_deploy == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo deploy angle specified") }\n{% endif %}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _DeployDock"] is defined %}\n_KlickyDebug msg="_DeployKlickyDock calling _DeployDock"\n_DeployDock\n{% endif %}'}, 'gcode_macro _RetractKlickyDock': {'description': 'Retracts Klicky servo-controlled dock', 'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_retract = printer["gcode_macro _User_Variables"].servo_retract|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_RetractKlickyDock Klicky servo configuration enabled"\n{% if servo_retract == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo retract angle specified") }\n{% endif %}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _RetractDock"] is defined %}\n_KlickyDebug msg="_RetractKlickyDock calling _RetractDock"\n_RetractDock\n{% endif %}'}, 'gcode_macro Attach_Probe': {'description': 'Attaches Klicky Probe', 'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set attachmove2_x = printer["gcode_macro _User_Variables"].attachmove2_x|default(0) %}\n{% set attachmove2_y = printer["gcode_macro _User_Variables"].attachmove2_y|default(0) %}\n{% set attachmove2_z = printer["gcode_macro _User_Variables"].attachmove2_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n_entry_point function=Attach_Probe\n\n{% if bypass_probe_docking == False %}\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n_KlickyDebug msg="Attach_Probe Axis homed"\n\n\n{% elif not probe_attached and not probe_lock %}\n_KlickyDebug msg="Attach_Probe going to attach probe"\n{% if verbose %}\n{ action_respond_info("Attaching Probe") }\n{% endif %}\n_KLICKY_STATUS_BUSY\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% if not enable_z_hop %}\n_KlickyDebug msg="Attach_Probe z_hop disabled"\n{% set safe_z = 0 %}\n{% endif %}\n{% endif %}\n\n\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero, duplicate?") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Umbilical_Path\n\n_entry_point function=Attach_Probe_intern\n\n\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n_DeployKlickyDock\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}"\nG0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}\n\n_RetractKlickyDock\n\n{% if ((printer.gcode_move.gcode_position.z < safe_z) or (docklocation_z != -128 and docklocation_z < safe_z ))%}\n_KlickyDebug msg="Attach_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\n_CheckProbe action=attach\n\n_exit_point function=Attach_Probe_intern move={goback}\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe locked not attaching probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already attached!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe already attached, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Attach_Probe\n{% else %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}'}, 'gcode_macro Dock_Probe': {'description': 'Docks Klicky Probe', 'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n{% if bypass_probe_docking == True %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}\n\n{% if bypass_probe_docking != True %}\n_entry_point function=Dock_Probe\n\n\n{% if probe_attached and not probe_lock %}\n_KLICKY_STATUS_BUSY\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Dock_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n_Umbilical_Path\n\n\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n\n_DeployKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\n\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}"\nG0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}\n{% endif %}\n\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}\n\n\n_RetractKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving away from the dock to G0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}\n\n\n{% if (printer.gcode_move.gcode_position.z < safe_z) %}\n_KlickyDebug msg="Dock_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\nG4 P1000\n_CheckProbe action=dock\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe locked not docking probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already docked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe already docked, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Dock_Probe move={goback}\n{% else %}\n_KlickyDebug msg="Dock_Probe probe docking bypassed, doing nothing"\n{% endif %}'}, 'gcode_macro PROBE_CALIBRATE': {'rename_existing': '_PROBE_CALIBRATE', 'description': 'Calibrate the probes z_offset with klicky automount', 'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_calibrate Axis homed"\n_KlickyDebug msg="probe_calibrate Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_CALIBRATE with the probe above the BED, check klicky_variables bed size!") }\n{% endif %}\n\n{% if bypass_probe_docking == False %}\n_CheckProbe action=query\nG90\nAttach_Probe back=1\n_KLICKY_STATUS_CALIBRATING_Z\n\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nM118 moving the toolhead 20 mm from the bed\n_KlickyDebug msg="probe_calibrate Moving Z up by 20mm"\nTESTZ Z=20\nM118 remove manually the probe and continue calibration\n_KLICKY_STATUS_READY\n{% else %}\n_KLICKY_STATUS_CALIBRATING_Z\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n_KLICKY_STATUS_READY\n{% endif %}'}, 'gcode_macro PROBE_ACCURACY': {'rename_existing': '_PROBE_ACCURACY', 'description': 'Probe Z-height accuracy at current XY position with klicky automount', 'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_accuracy Axis homed"\n_KlickyDebug msg="probe_accuracy Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n_entry_point function=PROBE_ACCURACY\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_ACCURACY with the probe above the BED, check klicky_variables bed size!") }\n{% endif%}\n\n_CheckProbe action=query\nAttach_Probe back=1\n\n_KlickyDebug msg="probe_accuracy calling klipper probe accuracy"\n_PROBE_ACCURACY {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nDock_Probe back=1\n\n_exit_point function=PROBE_ACCURACY move=1'}, 'force_move': {'enable_force_move': 'True'}, 'homing_override': {'axes': 'xyz', 'gcode': '\n\n_User_Variables\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n{% set kinematic_z = 0 %}\n{% set dock_on_zhome = printer["gcode_macro _User_Variables"].dock_on_zhome|default(True) %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set home_backoff_x = printer["gcode_macro _User_Variables"].home_backoff_x|default(0) %}\n{% set home_backoff_y = printer["gcode_macro _User_Variables"].home_backoff_y|default(0) %}\n{% set override_homing = printer["gcode_macro _User_Variables"].override_homing|default(\'\') %}\n\n\n_klicky_check_variables_version\n\n_CheckProbe action=query\n\n\n{% set home_x, home_y, home_z, leave_probe_attached = False, False, False, False %}\n\n{% if \'PROBE_LOCK\' in params%}\n{% if verbose %}\n{ action_respond_info("PROBE_LOCK = True") }\n{% endif %}\n{% set leave_probe_attached = True %}\n{% endif %}\n\n\n{% if not \'X\' in params\nand not \'Y\' in params\nand not \'Z\' in params %}\n\n{% set home_x, home_y, home_z = True, True, True %}\n_KlickyDebug msg="homing_override goint to home all axes"\n\n{% else %}\n{% if \'X\' in params %}\n{% set home_x = True %}\n_KlickyDebug msg="homing_override goint to home X"\n\n{% endif %}\n\n{% if \'Y\' in params %}\n{% set home_y = True %}\n_KlickyDebug msg="homing_override goint to home Y"\n{% endif %}\n\n{% if \'Z\' in params %}\n{% set home_z = True %}\n_KlickyDebug msg="homing_override goint to home Z"\n{% endif %}\n\n{% if \'X\' in params\nand \'Y\' in params\nand \'Z\' in params %}\n\n\n_Homing_Variables reset=1\n_KlickyDebug msg="homing_override goint to home all axes"\n{% endif %}\n\n{% endif %}\n\n_entry_point function=homing_override\n_KLICKY_STATUS_HOMING\n\n\n{% if \'z\' not in printer.toolhead.homed_axes %}\n{% if enable_z_hop == False %}\n_KlickyDebug msg="homing_override z_hop disabled"\n\n{% set kinematic_z = safe_z %}\n{% set safe_z = safe_z %}\n{% endif %}\n{% endif %}\n\n\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes and \'z\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("No axis homed") }\n{% endif %}\n_KlickyDebug msg="homing_override no axis homed, setting position as X=Y=0 Z={kinematic_z}"\nSET_KINEMATIC_POSITION X=0 Y=0 Z={kinematic_z}\nM400\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% if home_z != True %}\n_KlickyDebug msg="homing_override clearing axis homed state if not already homing Z"\nM84\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("X or Y not homed, forcing full G28") }\n{% endif %}\n{% set home_x, home_y, home_z = True, True, True %}\n{% endif %}\n{% endif %}\n\n\n{% if ((attachmove_y == 0 and override_homing == \'\' ) or (override_homing == \'Y\'))%}\n\n{% if home_y %}\n{% if override_homing == \'Y\' %}\n_KlickyDebug msg="homing_override Y homing first override, due to override_homing = Y"\n{% else %}\n_KlickyDebug msg="homing_override Y homing first override, due to attachmove_y = 0"\n{% endif %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y G28 Y0"\nG28 Y0\n\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop-home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n{% set home_y = False %}\n{% endif %}\n\n\n\n{% if home_x %}\n{% if verbose %}\n{ action_respond_info("Homing X") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in X homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_X"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_X external script to handle the X homing"\n_HOME_X\n{% else %}\n_KlickyDebug msg="homing_override Homing X, G28 X0"\nG28 X0\n\n{% if home_backoff_x != 0 %}\n{% if (printer.configfile.settings.stepper_x.position_endstop > (printer.configfile.settings.stepper_x.position_min|default(0) + printer.configfile.settings.stepper_x.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n\n{% if home_y %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y, G28 Y0"\nG28 Y0\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if verbose %}\n{ action_respond_info("Homing Z") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe configured as a virtual Z endstop attaching probe"\nAttach_Probe\n\n{% if leave_probe_attached %}\n_Probe_Lock\n{% endif %}\n{% elif dock_on_zhome == True %}\nDock_Probe\n{% endif %}\n\n_Home_Z_\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe no longer required, docking probe"\nDock_Probe\n{% elif dock_on_zhome == False %}\nDock_Probe\n{% endif %}\n{% endif %}\n_CheckProbe action=query\n\n\n_Park_Toolhead\n\n_exit_point function=homing_override\n_KLICKY_STATUS_READY'}, 'gcode_macro _Umbilical_Path': {'gcode': '\n{% set umbilical = printer["gcode_macro _User_Variables"].umbilical %}\n{% set umbilical_x = printer["gcode_macro _User_Variables"].umbilical_x %}\n{% set umbilical_y = printer["gcode_macro _User_Variables"].umbilical_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n\n{% if umbilical %}\n\n_entry_point function=Umbilical_Path\n\n_KlickyDebug msg="_Umbilical_Path moving to G0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}"\nG0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}\n\n_exit_point function=Umbilical_Path\n{% endif %}'}, 'gcode_macro _Home_Z_': {'gcode': '\n{% set z_endstop_x = printer["gcode_macro _Probe_Variables"].z_endstop_x %}\n{% set z_endstop_y = printer["gcode_macro _Probe_Variables"].z_endstop_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}    {% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Home_Z\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n{% else %}\n_KlickyDebug msg="_Home_Z_ XY Axis homed"\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="_Home_Z_ Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n\n\n_KlickyDebug msg="_Home_Z_ moving to Z endstop position G0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}"\nG0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}\n_KlickyDebug msg="_Home_Z_ Homing Z G28 Z"\nG28 Z0\n_KlickyDebug msg="_Home_Z_ toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_exit_point function=Home_Z'}, 'gcode_macro _CheckProbe': {'variable_probe_state': '0', 'gcode': '\nQuery_Probe\n_SetProbeState action={ params.ACTION }'}, 'gcode_macro _SetProbeState': {'gcode': '\n{% set query_probe_triggered = printer.probe.last_query %}\n{% set action  = params.ACTION|default(\'\') %}\n\n\n{% if query_probe_triggered %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ False }\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ True }\n{% endif %}\n\n{% if action == \'query\' %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_state VALUE={ query_probe_triggered }\n{% endif %}\n\n\n\n\n{% if not query_probe_triggered and action == \'dock\' %}\n{ action_raise_error("Probe dock failed!") }\n{% endif %}\n\n\n{% if query_probe_triggered and action == \'attach\' %}\n{ action_raise_error("Probe attach failed!") }\n{% endif %}'}, 'gcode_macro _Park_Toolhead': {'gcode': '\n{% set park_toolhead = printer["gcode_macro _User_Variables"].park_toolhead %}\n{% set parkposition_x = printer["gcode_macro _User_Variables"].parkposition_x %}\n{% set parkposition_y = printer["gcode_macro _User_Variables"].parkposition_y %}\n{% set parkposition_z = printer["gcode_macro _User_Variables"].parkposition_z %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Park_Toolhead\n\n{% if park_toolhead and \'xyz\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Parking Toolhead") }\n{% endif %}\n{% if parkposition_z == -128 %}\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}\n\n{% else %}\n\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}\n\n{% endif %}\n\n{% endif %}\n_exit_point function=Park_Toolhead'}, 'gcode_macro _klicky_status_ready': {'gcode': '\n{% if printer[\'gcode_macro status_ready\'] is defined %}\n_KlickyDebug msg="_klicky_status_ready activating the LED STATUS_READY"\nSTATUS_READY\n{% endif %}'}, 'gcode_macro _klicky_status_busy': {'gcode': '\n{% if printer[\'gcode_macro status_busy\'] is defined %}\n_KlickyDebug msg="_klicky_status_busy activating the LED STATUS_BUSY"\nSTATUS_BUSY\n{% endif %}'}, 'gcode_macro _klicky_status_leveling': {'gcode': '\n{% if printer[\'gcode_macro status_leveling\'] is defined %}\n_KlickyDebug msg="_klicky_status_leveling activating the LED STATUS_LEVELING"\nSTATUS_LEVELING\n{% endif %}'}, 'gcode_macro _klicky_status_homing': {'gcode': '\n{% if printer[\'gcode_macro status_homing\'] is defined %}\n_KlickyDebug msg="_klicky_status_homing activating the LED STATUS_HOMING"\nSTATUS_HOMING\n{% endif %}'}, 'gcode_macro _klicky_status_cleaning': {'gcode': '\n{% if printer[\'gcode_macro status_cleaning\'] is defined %}\n_KlickyDebug msg="_klicky_status_cleaning activating the LED STATUS_CLEANING"\nSTATUS_CLEANING\n{% endif %}'}, 'gcode_macro _klicky_status_meshing': {'gcode': '\n{% if printer[\'gcode_macro status_meshing\'] is defined %}\n_KlickyDebug msg="_klicky_status_meshing activating the LED STATUS_MESHING"\nSTATUS_MESHING\n{% endif %}'}, 'gcode_macro _klicky_status_calibrating_z': {'gcode': '\n{% if printer[\'gcode_macro status_calibrating_z\'] is defined %}\n_KlickyDebug msg="_klicky_status_calibrating_z activating the LED STATUS_CALIBRATING_Z"\nSTATUS_CALIBRATING_Z\n{% endif %}'}, 'z_calibration': {'nozzle_xy_position': '172, 301', 'switch_xy_position': '172, 275', 'bed_xy_position': '150, 150', 'switch_offset': '0.065', 'offset_margins': '-1.0,1.0', 'speed': '50', 'probing_first_fast': 'false', 'start_gcode': 'Attach_Probe', 'end_gcode': 'Dock_Probe'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_28003C001150535556323420-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '^PG6', 'position_min': '0', 'position_endstop': '299', 'position_max': '299', 'homing_speed': '25', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'PG9', 'position_min': '0', 'position_endstop': '300', 'position_max': '303.5', 'homing_speed': '25', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': '!PG3', 'enable_pin': '!PG5', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'PG10', 'position_max': '290', 'position_min': '-4.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3', 'position_endstop': '-0.955'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA0', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': '!PF10', 'enable_pin': '!PG2', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PC13', 'dir_pin': 'PF0', 'enable_pin': '!PF1', 'rotation_distance': '21.9459674016', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.75', 'heater_pin': 'PA1', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF4', 'min_temp': '10', 'max_temp': '270', 'max_power': '1.0', 'min_extrude_temp': '170', 'pressure_advance': '0.05', 'pressure_advance_smooth_time': '0.040', 'control': 'pid', 'pid_kp': '26.572', 'pid_ki': '2.036', 'pid_kd': '86.691'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.5', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PA2', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF3', 'max_power': '1', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '55.196', 'pid_ki': '2.091', 'pid_kd': '364.295'}, 'probe': {'pin': 'PG15', 'x_offset': '0', 'y_offset': '25.0', 'z_offset': '0', 'speed': '10.0', 'samples': '5', 'samples_result': 'median', 'sample_retract_dist': '3.0', 'samples_tolerance': '0.006', 'samples_tolerance_retries': '6'}, 'fan': {'pin': 'PA8', 'kick_start_time': '0.5', 'off_below': '0.10'}, 'heater_fan hotend_fan': {'pin': 'PE5', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'controller_fan controller_fan': {'pin': 'PD12', 'kick_start_time': '0.5', 'heater': 'heater_bed'}, 'heater_fan exhaust_fan': {'pin': 'PD13', 'max_power': '1.0', 'shutdown_speed': '0.0', 'kick_start_time': '5.0', 'heater': 'heater_bed', 'heater_temp': '60', 'fan_speed': '1.0'}, 'output_pin caselight': {'pin': 'PD15', 'pwm': 'true', 'shutdown_value': '0', 'value': '1', 'cycle_time': '0.01'}, 'neopixel headlight': {'pin': 'PB0', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '0.0', 'initial_green': '0.2157', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'temperature_sensor chamber_temp': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF5', 'min_temp': '0', 'max_temp': '100', 'gcode_id': 'chamber_th'}, 'idle_timeout': {'timeout': '1800'}, 'z_tilt': {'z_positions': '\n-50, 18\n150, 348\n350, 18', 'points': '\n30, 5\n150, 245\n270, 5', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'gcode_macro _User_Variables': {'variable_verbose': 'True', 'variable_debug': 'False', 'variable_travel_speed': '200', 'variable_move_accel': '1000', 'variable_dock_speed': '50', 'variable_release_speed': '75', 'variable_z_drop_speed': '20', 'variable_safe_z': '25', 'variable_enable_z_hop': 'True', 'variable_max_bed_y': '300', 'variable_max_bed_x': '300', 'variable_z_endstop_x': '172', 'variable_z_endstop_y': '301', 'variable_docklocation_x': '42', 'variable_docklocation_y': '297', 'variable_docklocation_z': '-128', 'variable_enable_dock_servo': 'False', 'variable_servo_name': "'NAME'", 'variable_servo_deploy': '10', 'variable_servo_retract': '11', 'variable_servo_delay': '250', 'variable_dockmove_x': '40', 'variable_dockmove_y': '0', 'variable_dockmove_z': '0', 'variable_attachmove_x': '0', 'variable_attachmove_y': '30', 'variable_attachmove_z': '0', 'variable_umbilical': 'False', 'variable_umbilical_x': '15', 'variable_umbilical_y': '15', 'variable_park_toolhead': 'False', 'variable_parkposition_x': '125', 'variable_parkposition_y': '125', 'variable_parkposition_z': '30', 'variable_version': '1', 'variable_attachmove2_x': '0', 'variable_attachmove2_y': '0', 'variable_attachmove2_z': '0', 'variable_home_backoff_x': '10', 'variable_home_backoff_y': '10', 'variable_override_homing': "''", 'variable_dock_on_zhome': 'True', 'gcode': '\n{% set Mx = printer[\'configfile\'].config["stepper_x"]["position_max"]|float %}\n{% set My = printer[\'configfile\'].config["stepper_y"]["position_max"]|float %}\n{% set Ox = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set Oy = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set Oz = printer[\'configfile\'].config["probe"]["z_offset"]|float %}\n\n\n{% if z_endstop_x != 0 or z_endstop_y != 0 %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ z_endstop_x }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ z_endstop_y }\n\n\n{% else %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ (Mx * 0.5) - Ox }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ (My * 0.5) - Oy }\n{% endif %}'}, 'gcode_macro PRINT_START': {'gcode': '\nM117 Homing...\nG28\nATTACH_PROBE\nZ_TILT_ADJUST\nDOCK_PROBE\nG28\nM117 Printing...\n\n\n\n\n\n\n\nG0 X150 Y150 Z30 F3600'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_28003C001150535556323420-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro _probe_variables': {'gcode': '', 'description': 'G-Code macro', 'variable_probe_attached': 'False', 'variable_probe_state': 'False', 'variable_probe_lock': 'False', 'variable_probe_z_homed': 'False', 'variable_z_endstop_x': '0', 'variable_z_endstop_y': '0'}, 'gcode_macro _klicky_check_variables_version': {'gcode': '\n{% set version = printer["gcode_macro _User_Variables"].version|default(0) %}\n\n{% if version != 1 %}\n{ action_raise_error("Please update your klicky variables, there are some functionality changes") }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klickydebug': {'gcode': '\n{% set message  = params.MSG %}\n{% set debug = printer["gcode_macro _User_Variables"].debug|default(False) %}\n\n{% if debug %}\n{ action_respond_info(message) }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _exit_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move  = params.MOVE|default(0) %}\n{% set speed = printer["gcode_macro _User_Variables"].travel_speed %}\n\n\nM400\nSET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\nRESTORE_GCODE_STATE NAME={function} MOVE={move} MOVE_SPEED={speed}', 'description': 'G-Code macro'}, 'gcode_macro _entry_point': {'gcode': '\n{% set function  = \'pre_\' ~ params.FUNCTION %}\n{% set move_accel = printer["gcode_macro _User_Variables"].move_accel|default(1000) %}\n\nM400\nSAVE_GCODE_STATE NAME={function}\n\nSET_GCODE_OFFSET Z=0\n\nG90\n\nSET_VELOCITY_LIMIT ACCEL={move_accel}', 'description': 'G-Code macro'}, 'gcode_macro _homing_variables': {'gcode': '\n{% set reset  = params.RESET|default(0) %}\n{% if reset %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro attach_probe_lock': {'gcode': '\nAttach_Probe\n_Probe_Lock', 'description': 'Attaches Klicky Probe, can only be docked after unlocking'}, 'gcode_macro dock_probe_unlock': {'gcode': '\n_Probe_Unlock\nDock_Probe', 'description': 'Docks Klicky Probe even if it was locked'}, 'gcode_macro _probe_unlock': {'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to False"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }', 'description': 'Unlocks Klicky Probe state'}, 'gcode_macro _probe_lock': {'gcode': '\n_KlickyDebug msg="_Probe_Lock setting probe_lock variable to True"\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ True }', 'description': 'Locks Klicky Probe state'}, 'gcode_macro _deployklickydock': {'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_deploy = printer["gcode_macro _User_Variables"].servo_deploy|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_DeployKlickyDock Klicky servo configuration enabled"\n{% if servo_deploy == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo deploy angle specified") }\n{% endif %}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_deploy|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_DeployKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _DeployDock"] is defined %}\n_KlickyDebug msg="_DeployKlickyDock calling _DeployDock"\n_DeployDock\n{% endif %}', 'description': 'Deploys Klicky servo-controlled dock'}, 'gcode_macro _retractklickydock': {'gcode': '\n{% set enable_dock_servo = printer["gcode_macro _User_Variables"].enable_dock_servo|default(False) %}\n{% set servo_delay = printer["gcode_macro _User_Variables"].servo_delay|default(1000) %}\n{% set servo_name = printer["gcode_macro _User_Variables"].servo_name %}\n{% set servo_retract = printer["gcode_macro _User_Variables"].servo_retract|default(360) %}\n\n\nM400\n{% if enable_dock_servo != False %}\n_KlickyDebug msg="_RetractKlickyDock Klicky servo configuration enabled"\n{% if servo_retract == 360 %}\n{ action_raise_error("Klicky: servo active on klicky-variables, but no servo retract angle specified") }\n{% endif %}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}"\nSET_SERVO SERVO={servo_name|string} ANGLE={servo_retract|int}\nM400\nG4 P{servo_delay|int}\n_KlickyDebug msg="_RetractKlickyDock SET_SERVO SERVO={servo_name|string} WIDTH=0"\nSET_SERVO SERVO={servo_name|string} WIDTH=0\n{% elif printer["gcode_macro _RetractDock"] is defined %}\n_KlickyDebug msg="_RetractKlickyDock calling _RetractDock"\n_RetractDock\n{% endif %}', 'description': 'Retracts Klicky servo-controlled dock'}, 'gcode_macro attach_probe': {'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set attachmove2_x = printer["gcode_macro _User_Variables"].attachmove2_x|default(0) %}\n{% set attachmove2_y = printer["gcode_macro _User_Variables"].attachmove2_y|default(0) %}\n{% set attachmove2_z = printer["gcode_macro _User_Variables"].attachmove2_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n_entry_point function=Attach_Probe\n\n{% if bypass_probe_docking == False %}\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n_KlickyDebug msg="Attach_Probe Axis homed"\n\n\n{% elif not probe_attached and not probe_lock %}\n_KlickyDebug msg="Attach_Probe going to attach probe"\n{% if verbose %}\n{ action_respond_info("Attaching Probe") }\n{% endif %}\n_KLICKY_STATUS_BUSY\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% if not enable_z_hop %}\n_KlickyDebug msg="Attach_Probe z_hop disabled"\n{% set safe_z = 0 %}\n{% endif %}\n{% endif %}\n\n\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero, duplicate?") }\n{% endif %}\n_KlickyDebug msg="Attach_Probe Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Attach_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Umbilical_Path\n\n_entry_point function=Attach_Probe_intern\n\n\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove_y|int - attachmove2_y} F{travel_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int - attachmove2_z|int} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n_DeployKlickyDock\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}"\nG0 X{docklocation_x|int - attachmove2_x|int} Y{docklocation_y|int - attachmove2_y} F{dock_feedrate}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{z_drop_feedrate}\n{% endif %}\n_KlickyDebug msg="Attach_Probe moving from the dock to G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{release_feedrate}\n\n_RetractKlickyDock\n\n{% if ((printer.gcode_move.gcode_position.z < safe_z) or (docklocation_z != -128 and docklocation_z < safe_z ))%}\n_KlickyDebug msg="Attach_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\n_CheckProbe action=attach\n\n_exit_point function=Attach_Probe_intern move={goback}\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe locked not attaching probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already attached!") }\n{% endif %}\n\n\n_KlickyDebug msg="Attach_Probe probe already attached, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Attach_Probe\n{% else %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}', 'description': 'Attaches Klicky Probe'}, 'gcode_macro dock_probe': {'gcode': '\n\n{% set goback  = params.BACK|default(0) %}\n\n{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}\n{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}\n{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}\n{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}\n{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}\n{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}\n{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}\n{% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n{% if bypass_probe_docking == True %}\n_KlickyDebug msg="Attach_Probe probe docking bypassed, doing nothing"\n{% endif %}\n\n{% if bypass_probe_docking != True %}\n_entry_point function=Dock_Probe\n\n\n{% if probe_attached and not probe_lock %}\n_KLICKY_STATUS_BUSY\n{% if printer.gcode_move.gcode_position.z < safe_z %}\n_KlickyDebug msg="Dock_Probe toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n_Umbilical_Path\n\n\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}"\nG0 X{docklocation_x|int - attachmove_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving near the dock with G0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}"\nG0 Z{docklocation_z|int - attachmove_z|int} F{dock_feedrate}\n{% endif %}\n\n\n_DeployKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving to the dock with G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}"\n\nG0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Attach_Probe moving to the dock with G0 Z{docklocation_z} F{dock_feedrate}"\nG0 Z{docklocation_z} F{dock_feedrate}\n{% endif %}\n\n\n{% if docklocation_z != -128 %}\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}"\nG0 Z{docklocation_z|int + dockmove_z|int} F{release_feedrate}\n{% endif %}\n\n_KlickyDebug msg="Dock_Probe moving from the dock to G0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int} Y{docklocation_y|int + dockmove_y|int} F{release_feedrate}\n\n\n_RetractKlickyDock\n\n\n_KlickyDebug msg="Dock_Probe moving away from the dock to G0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}"\nG0 X{docklocation_x|int + dockmove_x|int - attachmove_x|int} Y{docklocation_y|int + dockmove_y|int - attachmove_y|int} F{release_feedrate}\n\n\n{% if (printer.gcode_move.gcode_position.z < safe_z) %}\n_KlickyDebug msg="Dock_Probe moving to a safe Z position: G0 Z{safe_z} F{z_drop_feedrate} from {printer.gcode_move.gcode_position.z}"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_Park_Toolhead\n\nG4 P1000\n_CheckProbe action=dock\n_KLICKY_STATUS_READY\n\n{% elif probe_lock %}\n{% if verbose %}\n{ action_respond_info("Probe locked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe locked not docking probe"\n_CheckProbe action=query\n\n{% else %}\n{% if verbose %}\n{ action_respond_info("Probe already docked") }\n{% endif %}\n\n\n_KlickyDebug msg="Dock_Probe probe already docked, doing nothing"\n_CheckProbe action=query\n\n{% endif %}\n\n_exit_point function=Dock_Probe move={goback}\n{% else %}\n_KlickyDebug msg="Dock_Probe probe docking bypassed, doing nothing"\n{% endif %}', 'description': 'Docks Klicky Probe'}, 'gcode_macro probe_calibrate': {'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set bypass_probe_docking = printer["gcode_macro _User_Variables"].bypass_probe_docking|default(False) %}\n\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_calibrate Axis homed"\n_KlickyDebug msg="probe_calibrate Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_CALIBRATE with the probe above the BED, check klicky_variables bed size!") }\n{% endif %}\n\n{% if bypass_probe_docking == False %}\n_CheckProbe action=query\nG90\nAttach_Probe back=1\n_KLICKY_STATUS_CALIBRATING_Z\n\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nM118 moving the toolhead 20 mm from the bed\n_KlickyDebug msg="probe_calibrate Moving Z up by 20mm"\nTESTZ Z=20\nM118 remove manually the probe and continue calibration\n_KLICKY_STATUS_READY\n{% else %}\n_KLICKY_STATUS_CALIBRATING_Z\n_KlickyDebug msg="probe_calibrate calling klipper probe_calibrate"\n_PROBE_CALIBRATE {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n_KLICKY_STATUS_READY\n{% endif %}', 'rename_existing': '_PROBE_CALIBRATE', 'description': 'Calibrate the probes z_offset with klicky automount'}, 'gcode_macro probe_accuracy': {'gcode': '\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x|float %}\n{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y|float %}\n{% set probe_offset_x = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set probe_offset_y = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n\n{% if not \'xyz\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X, Y and Z Axis First!") }\n{% endif %}\n_KlickyDebug msg="probe_accuracy Axis homed"\n_KlickyDebug msg="probe_accuracy Variables max_x={max_x},max_y={max_y},probe_offset_x={probe_offset_x},probe_offset_y={probe_offset_y}"\n\n_entry_point function=PROBE_ACCURACY\n\n\n{% if printer[\'gcode_move\'].position.y > (max_y - probe_offset_y)\nor printer[\'gcode_move\'].position.y < - probe_offset_y\nor printer[\'gcode_move\'].position.x > (max_x - probe_offset_x)\nor printer[\'gcode_move\'].position.x < - probe_offset_x %}\n{ action_raise_error("Must perform PROBE_ACCURACY with the probe above the BED, check klicky_variables bed size!") }\n{% endif%}\n\n_CheckProbe action=query\nAttach_Probe back=1\n\n_KlickyDebug msg="probe_accuracy calling klipper probe accuracy"\n_PROBE_ACCURACY {% for p in params\n%}{\'%s=%s \' % (p, params[p])}{%\nendfor %}\n\nDock_Probe back=1\n\n_exit_point function=PROBE_ACCURACY move=1', 'rename_existing': '_PROBE_ACCURACY', 'description': 'Probe Z-height accuracy at current XY position with klicky automount'}, 'force_move': {'enable_force_move': True}, 'homing_override': {'axes': 'xyz', 'gcode': '\n\n_User_Variables\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}\n{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}\n{% set kinematic_z = 0 %}\n{% set dock_on_zhome = printer["gcode_macro _User_Variables"].dock_on_zhome|default(True) %}\n{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}\n{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}\n{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}\n{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set home_backoff_x = printer["gcode_macro _User_Variables"].home_backoff_x|default(0) %}\n{% set home_backoff_y = printer["gcode_macro _User_Variables"].home_backoff_y|default(0) %}\n{% set override_homing = printer["gcode_macro _User_Variables"].override_homing|default(\'\') %}\n\n\n_klicky_check_variables_version\n\n_CheckProbe action=query\n\n\n{% set home_x, home_y, home_z, leave_probe_attached = False, False, False, False %}\n\n{% if \'PROBE_LOCK\' in params%}\n{% if verbose %}\n{ action_respond_info("PROBE_LOCK = True") }\n{% endif %}\n{% set leave_probe_attached = True %}\n{% endif %}\n\n\n{% if not \'X\' in params\nand not \'Y\' in params\nand not \'Z\' in params %}\n\n{% set home_x, home_y, home_z = True, True, True %}\n_KlickyDebug msg="homing_override goint to home all axes"\n\n{% else %}\n{% if \'X\' in params %}\n{% set home_x = True %}\n_KlickyDebug msg="homing_override goint to home X"\n\n{% endif %}\n\n{% if \'Y\' in params %}\n{% set home_y = True %}\n_KlickyDebug msg="homing_override goint to home Y"\n{% endif %}\n\n{% if \'Z\' in params %}\n{% set home_z = True %}\n_KlickyDebug msg="homing_override goint to home Z"\n{% endif %}\n\n{% if \'X\' in params\nand \'Y\' in params\nand \'Z\' in params %}\n\n\n_Homing_Variables reset=1\n_KlickyDebug msg="homing_override goint to home all axes"\n{% endif %}\n\n{% endif %}\n\n_entry_point function=homing_override\n_KLICKY_STATUS_HOMING\n\n\n{% if \'z\' not in printer.toolhead.homed_axes %}\n{% if enable_z_hop == False %}\n_KlickyDebug msg="homing_override z_hop disabled"\n\n{% set kinematic_z = safe_z %}\n{% set safe_z = safe_z %}\n{% endif %}\n{% endif %}\n\n\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes and \'z\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("No axis homed") }\n{% endif %}\n_KlickyDebug msg="homing_override no axis homed, setting position as X=Y=0 Z={kinematic_z}"\nSET_KINEMATIC_POSITION X=0 Y=0 Z={kinematic_z}\nM400\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% if home_z != True %}\n_KlickyDebug msg="homing_override clearing axis homed state if not already homing Z"\nM84\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if \'x\' not in printer.toolhead.homed_axes and \'y\' not in printer.toolhead.homed_axes%}\n{% if verbose %}\n{ action_respond_info("X or Y not homed, forcing full G28") }\n{% endif %}\n{% set home_x, home_y, home_z = True, True, True %}\n{% endif %}\n{% endif %}\n\n\n{% if ((attachmove_y == 0 and override_homing == \'\' ) or (override_homing == \'Y\'))%}\n\n{% if home_y %}\n{% if override_homing == \'Y\' %}\n_KlickyDebug msg="homing_override Y homing first override, due to override_homing = Y"\n{% else %}\n_KlickyDebug msg="homing_override Y homing first override, due to attachmove_y = 0"\n{% endif %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y G28 Y0"\nG28 Y0\n\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop-home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n{% set home_y = False %}\n{% endif %}\n\n\n\n{% if home_x %}\n{% if verbose %}\n{ action_respond_info("Homing X") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in X homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_X"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_X external script to handle the X homing"\n_HOME_X\n{% else %}\n_KlickyDebug msg="homing_override Homing X, G28 X0"\nG28 X0\n\n{% if home_backoff_x != 0 %}\n{% if (printer.configfile.settings.stepper_x.position_endstop > (printer.configfile.settings.stepper_x.position_min|default(0) + printer.configfile.settings.stepper_x.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop - home_backoff_x|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off X endstop, G0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}"\nG0 X{printer.configfile.settings.stepper_x.position_endstop + home_backoff_x|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n\n{% if home_y %}\n{% if verbose %}\n{ action_respond_info("Homing Y") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n{% if printer["gcode_macro _HOME_Y"] is defined %}\n_KlickyDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"\n_HOME_Y\n{% else %}\n_KlickyDebug msg="homing_override Homing Y, G28 Y0"\nG28 Y0\n{% if home_backoff_y != 0 %}\n{% if (printer.configfile.settings.stepper_y.position_endstop > (printer.configfile.settings.stepper_y.position_min|default(0) + printer.configfile.settings.stepper_y.position_max)/2) %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop - home_backoff_y|int} F{travel_feedrate}\n{% else %}\n_KlickyDebug msg="homing_override backing off Y endstop, G0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}"\nG0 Y{printer.configfile.settings.stepper_y.position_endstop + home_backoff_y|int} F{travel_feedrate}\n{%endif %}\n{%endif %}\n{% endif %}\n{% endif %}\n\n{% if home_z %}\n{% if verbose %}\n{ action_respond_info("Homing Z") }\n{% endif %}\n{% if \'z\' in printer.toolhead.homed_axes %}\n_KlickyDebug msg="homing_override moving toolhead to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm in Y homing seq"\n{% if verbose %}\n{ action_respond_info("moving to a safe Z distance") }\n{% endif %}\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe configured as a virtual Z endstop attaching probe"\nAttach_Probe\n\n{% if leave_probe_attached %}\n_Probe_Lock\n{% endif %}\n{% elif dock_on_zhome == True %}\nDock_Probe\n{% endif %}\n\n_Home_Z_\n\n\n{% if \'z_virtual_endstop\' in printer[\'configfile\'].config["stepper_z"]["endstop_pin"] %}\n_KlickyDebug msg="homing_override probe no longer required, docking probe"\nDock_Probe\n{% elif dock_on_zhome == False %}\nDock_Probe\n{% endif %}\n{% endif %}\n_CheckProbe action=query\n\n\n_Park_Toolhead\n\n_exit_point function=homing_override\n_KLICKY_STATUS_READY'}, 'gcode_macro _umbilical_path': {'gcode': '\n{% set umbilical = printer["gcode_macro _User_Variables"].umbilical %}\n{% set umbilical_x = printer["gcode_macro _User_Variables"].umbilical_x %}\n{% set umbilical_y = printer["gcode_macro _User_Variables"].umbilical_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n\n{% if umbilical %}\n\n_entry_point function=Umbilical_Path\n\n_KlickyDebug msg="_Umbilical_Path moving to G0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}"\nG0 X{umbilical_x} Y{umbilical_y} Z{safe_z} F{travel_feedrate}\n\n_exit_point function=Umbilical_Path\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _home_z_': {'gcode': '\n{% set z_endstop_x = printer["gcode_macro _Probe_Variables"].z_endstop_x %}\n{% set z_endstop_y = printer["gcode_macro _Probe_Variables"].z_endstop_y %}\n{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}    {% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Home_Z\n\n\n{% if not \'xy\' in printer.toolhead.homed_axes %}\n{ action_raise_error("Must Home X and Y Axis First!") }\n{% else %}\n_KlickyDebug msg="_Home_Z_ XY Axis homed"\n{% if not \'z\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Resetting Z position to zero") }\n{% endif %}\n_KlickyDebug msg="_Home_Z_ Z not homed, setting position as X=Y=Z=0"\nSET_KINEMATIC_POSITION Z=0\n{% endif %}\n\n\n\n_KlickyDebug msg="_Home_Z_ moving to Z endstop position G0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}"\nG0 X{z_endstop_x} Y{z_endstop_y} F{travel_feedrate}\n_KlickyDebug msg="_Home_Z_ Homing Z G28 Z"\nG28 Z0\n_KlickyDebug msg="_Home_Z_ toolhead too low, raising it to {safe_z}mm from {printer.gcode_move.gcode_position.z}mm"\nG0 Z{safe_z} F{z_drop_feedrate}\n{% endif %}\n\n_exit_point function=Home_Z', 'description': 'G-Code macro'}, 'gcode_macro _checkprobe': {'gcode': '\nQuery_Probe\n_SetProbeState action={ params.ACTION }', 'description': 'G-Code macro', 'variable_probe_state': '0'}, 'gcode_macro _setprobestate': {'gcode': '\n{% set query_probe_triggered = printer.probe.last_query %}\n{% set action  = params.ACTION|default(\'\') %}\n\n\n{% if query_probe_triggered %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ False }\n{% else %}\n\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ True }\n{% endif %}\n\n{% if action == \'query\' %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_state VALUE={ query_probe_triggered }\n{% endif %}\n\n\n\n\n{% if not query_probe_triggered and action == \'dock\' %}\n{ action_raise_error("Probe dock failed!") }\n{% endif %}\n\n\n{% if query_probe_triggered and action == \'attach\' %}\n{ action_raise_error("Probe attach failed!") }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _park_toolhead': {'gcode': '\n{% set park_toolhead = printer["gcode_macro _User_Variables"].park_toolhead %}\n{% set parkposition_x = printer["gcode_macro _User_Variables"].parkposition_x %}\n{% set parkposition_y = printer["gcode_macro _User_Variables"].parkposition_y %}\n{% set parkposition_z = printer["gcode_macro _User_Variables"].parkposition_z %}\n{% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}\n{% set verbose = printer["gcode_macro _User_Variables"].verbose %}\n\n_entry_point function=Park_Toolhead\n\n{% if park_toolhead and \'xyz\' in printer.toolhead.homed_axes %}\n{% if verbose %}\n{ action_respond_info("Parking Toolhead") }\n{% endif %}\n{% if parkposition_z == -128 %}\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} F{travel_feedrate}\n\n{% else %}\n\n_KlickyDebug msg="_Park_Toolhead moving to G0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}"\nG0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F{travel_feedrate}\n\n{% endif %}\n\n{% endif %}\n_exit_point function=Park_Toolhead', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_ready': {'gcode': '\n{% if printer[\'gcode_macro status_ready\'] is defined %}\n_KlickyDebug msg="_klicky_status_ready activating the LED STATUS_READY"\nSTATUS_READY\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_busy': {'gcode': '\n{% if printer[\'gcode_macro status_busy\'] is defined %}\n_KlickyDebug msg="_klicky_status_busy activating the LED STATUS_BUSY"\nSTATUS_BUSY\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_leveling': {'gcode': '\n{% if printer[\'gcode_macro status_leveling\'] is defined %}\n_KlickyDebug msg="_klicky_status_leveling activating the LED STATUS_LEVELING"\nSTATUS_LEVELING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_homing': {'gcode': '\n{% if printer[\'gcode_macro status_homing\'] is defined %}\n_KlickyDebug msg="_klicky_status_homing activating the LED STATUS_HOMING"\nSTATUS_HOMING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_cleaning': {'gcode': '\n{% if printer[\'gcode_macro status_cleaning\'] is defined %}\n_KlickyDebug msg="_klicky_status_cleaning activating the LED STATUS_CLEANING"\nSTATUS_CLEANING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_meshing': {'gcode': '\n{% if printer[\'gcode_macro status_meshing\'] is defined %}\n_KlickyDebug msg="_klicky_status_meshing activating the LED STATUS_MESHING"\nSTATUS_MESHING\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _klicky_status_calibrating_z': {'gcode': '\n{% if printer[\'gcode_macro status_calibrating_z\'] is defined %}\n_KlickyDebug msg="_klicky_status_calibrating_z activating the LED STATUS_CALIBRATING_Z"\nSTATUS_CALIBRATING_Z\n{% endif %}', 'description': 'G-Code macro'}, 'z_calibration': {'switch_offset': 0.065, 'offset_margins': '-1.0,1.0', 'speed': 50.0, 'samples_result': 'none', 'probing_first_fast': False, 'nozzle_xy_position': '172, 301', 'switch_xy_position': '172, 275', 'bed_xy_position': '150, 150', 'start_gcode': 'Attach_Probe', 'before_switch_gcode': '', 'end_gcode': 'Dock_Probe'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': '^PG6', 'position_endstop': 299.0, 'position_min': 0.0, 'position_max': 299.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'PG9', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 303.5, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PF11', 'dir_pin': '!PG3', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG5', 'endstop_pin': 'PG10', 'position_endstop': -0.955, 'position_min': -4.5, 'position_max': 290.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA0'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PF9', 'dir_pin': '!PF10', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG2'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF4', 'min_temp': 10.0, 'max_temp': 270.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 26.572, 'pid_ki': 2.036, 'pid_kd': 86.691, 'heater_pin': 'PA1', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PC13', 'pressure_advance': 0.05, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'PF0', 'rotation_distance': 21.9459674016, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 55.196, 'pid_ki': 2.091, 'pid_kd': 364.295, 'heater_pin': 'PA2', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'probe': {'z_offset': 0.0, 'deactivate_on_each_sample': True, 'activate_gcode': '', 'deactivate_gcode': '', 'pin': 'PG15', 'speed': 10.0, 'lift_speed': 10.0, 'x_offset': 0.0, 'y_offset': 25.0, 'samples': 5, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.006, 'samples_tolerance_retries': 6}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE5', 'fan_speed': 1.0}, 'controller_fan controller_fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD12', 'fan_speed': 1.0, 'idle_speed': 1.0, 'idle_timeout': 30, 'heater': ['heater_bed']}, 'heater_fan exhaust_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 5.0, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13', 'fan_speed': 1.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PD15', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 1.0, 'maximum_mcu_duration': 0.0, 'value': 1.0, 'shutdown_value': 0.0}, 'neopixel headlight': {'pin': 'PB0', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 0.0, 'initial_green': 0.2157, 'initial_blue': 1.0, 'initial_white': 0.0}, 'temperature_sensor chamber_temp': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF5', 'min_temp': 0.0, 'max_temp': 100.0, 'gcode_id': 'chamber_th'}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [150.0, 348.0], [350.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 5.0], [150.0, 245.0], [270.0, 5.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'gcode_macro _user_variables': {'gcode': '\n{% set Mx = printer[\'configfile\'].config["stepper_x"]["position_max"]|float %}\n{% set My = printer[\'configfile\'].config["stepper_y"]["position_max"]|float %}\n{% set Ox = printer[\'configfile\'].config["probe"]["x_offset"]|float %}\n{% set Oy = printer[\'configfile\'].config["probe"]["y_offset"]|float %}\n{% set Oz = printer[\'configfile\'].config["probe"]["z_offset"]|float %}\n\n\n{% if z_endstop_x != 0 or z_endstop_y != 0 %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ z_endstop_x }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ z_endstop_y }\n\n\n{% else %}\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ (Mx * 0.5) - Ox }\nSET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ (My * 0.5) - Oy }\n{% endif %}', 'description': 'G-Code macro', 'variable_verbose': 'True', 'variable_debug': 'False', 'variable_travel_speed': '200', 'variable_move_accel': '1000', 'variable_dock_speed': '50', 'variable_release_speed': '75', 'variable_z_drop_speed': '20', 'variable_safe_z': '25', 'variable_enable_z_hop': 'True', 'variable_max_bed_y': '300', 'variable_max_bed_x': '300', 'variable_z_endstop_x': '172', 'variable_z_endstop_y': '301', 'variable_docklocation_x': '42', 'variable_docklocation_y': '297', 'variable_docklocation_z': '-128', 'variable_enable_dock_servo': 'False', 'variable_servo_name': "'NAME'", 'variable_servo_deploy': '10', 'variable_servo_retract': '11', 'variable_servo_delay': '250', 'variable_dockmove_x': '40', 'variable_dockmove_y': '0', 'variable_dockmove_z': '0', 'variable_attachmove_x': '0', 'variable_attachmove_y': '30', 'variable_attachmove_z': '0', 'variable_umbilical': 'False', 'variable_umbilical_x': '15', 'variable_umbilical_y': '15', 'variable_park_toolhead': 'False', 'variable_parkposition_x': '125', 'variable_parkposition_y': '125', 'variable_parkposition_z': '30', 'variable_version': '1', 'variable_attachmove2_x': '0', 'variable_attachmove2_y': '0', 'variable_attachmove2_z': '0', 'variable_home_backoff_x': '10', 'variable_home_backoff_y': '10', 'variable_override_homing': "''", 'variable_dock_on_zhome': 'True'}, 'gcode_macro print_start': {'gcode': '\nM117 Homing...\nG28\nATTACH_PROBE\nZ_TILT_ADJUST\nDOCK_PROBE\nG28\nM117 Printing...\n\n\n\n\n\n\n\nG0 X150 Y150 Z30 F3600', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1500.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-02-23 22:24:21,592 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-23 22:24:21,595 [printer.py:reinit()] - Klipper version: v0.12.0-103-g6ce6fbbc-dirty
2024-02-23 22:24:21,595 [printer.py:reinit()] - # Extruders: 1
2024-02-23 22:24:21,595 [printer.py:reinit()] - # Temperature devices: 2
2024-02-23 22:24:21,595 [printer.py:reinit()] - # Fans: 4
2024-02-23 22:24:21,595 [printer.py:reinit()] - # Output pins: 1
2024-02-23 22:24:21,595 [printer.py:reinit()] - # Leds: 1
2024-02-23 22:24:21,607 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2024-02-23 22:24:21,609 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-02-23 22:24:21,896 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor chamber_temp&fan&controller_fan controller_fan&heater_fan hotend_fan&heater_fan exhaust_fan&output_pin caselight&neopixel headlight
2024-02-23 22:24:21,899 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-02-23 22:24:21,899 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-02-23 22:24:21,901 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-02-23 22:24:21,903 [screen.py:init_klipper()] - Printer initialized
2024-02-24 17:38:08,315 [screen.py:_go_to_submenu()] - #### Go to submenu more
2024-02-24 17:38:08,316 [screen.py:_go_to_submenu()] - #### Menu __main
2024-02-24 17:38:08,320 [screen.py:_load_panel()] - Loading panel: menu
2024-02-24 17:38:08,493 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > more
2024-02-24 17:38:08,496 [menu.py:arrangeMenuItems()] - X > more bedlevel
2024-02-24 17:38:08,498 [menu.py:arrangeMenuItems()] - X > more bedmesh
2024-02-24 17:38:08,503 [menu.py:arrangeMenuItems()] - X > more retraction
2024-02-24 17:38:08,515 [menu.py:arrangeMenuItems()] - X > more power
2024-02-24 17:38:08,517 [menu.py:arrangeMenuItems()] - X > more camera
2024-02-24 17:38:08,522 [menu.py:arrangeMenuItems()] - X > more input_shaper
2024-02-24 17:38:08,528 [menu.py:arrangeMenuItems()] - X > more spoolman
2024-02-24 17:44:12,278 [screen.py:show_popup_message()] - error: Error evaluating 'gcode_macro _SetProbeState:gcode': gcode.CommandError: Probe dock failed!
2024-02-24 17:44:24,606 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-02-24 17:44:24,607 [printer.py:change_state()] - Adding callback for state: disconnected
2024-02-24 17:44:24,608 [screen.py:state_disconnected()] - ### Going to disconnected
2024-02-24 17:44:24,608 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-24 17:44:24,611 [screen.py:show_panel()] - Reinitializing panel
2024-02-24 17:44:24,685 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-02-24 17:44:28,096 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-24 17:44:28,104 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2024-02-24 17:44:28,105 [printer.py:configure_cameras()] - Cameras: []
2024-02-24 17:44:28,105 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'octoprint_compat', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-310-g67c98f6', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-02-24 17:44:28,116 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2024-02-24 17:44:28,132 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2024-02-24 17:44:28,134 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_28003C001150535556323420-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '^PG6', 'position_min': '0', 'position_endstop': '299', 'position_max': '299', 'homing_speed': '25', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'PG9', 'position_min': '0', 'position_endstop': '300', 'position_max': '303.5', 'homing_speed': '25', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': '!PG3', 'enable_pin': '!PG5', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '290', 'position_min': '-4.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA0', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': '!PF10', 'enable_pin': '!PG2', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PC13', 'dir_pin': 'PF0', 'enable_pin': '!PF1', 'rotation_distance': '21.9459674016', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.75', 'heater_pin': 'PA1', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF4', 'min_temp': '10', 'max_temp': '270', 'max_power': '1.0', 'min_extrude_temp': '170', 'pressure_advance': '0.05', 'pressure_advance_smooth_time': '0.040', 'control': 'pid', 'pid_kp': '26.572', 'pid_ki': '2.036', 'pid_kd': '86.691'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.5', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PA2', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF3', 'max_power': '1', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '55.196', 'pid_ki': '2.091', 'pid_kd': '364.295'}, 'probe': {'pin': 'PG15', 'x_offset': '0', 'y_offset': '0', 'z_offset': '0', 'speed': '10.0', 'samples': '5', 'samples_result': 'median', 'sample_retract_dist': '3.0', 'samples_tolerance': '0.006', 'samples_tolerance_retries': '6', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}"}, 'fan': {'pin': 'PA8', 'kick_start_time': '0.5', 'off_below': '0.10'}, 'heater_fan hotend_fan': {'pin': 'PE5', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'controller_fan controller_fan': {'pin': 'PD12', 'kick_start_time': '0.5', 'heater': 'heater_bed'}, 'heater_fan exhaust_fan': {'pin': 'PD13', 'max_power': '1.0', 'shutdown_speed': '0.0', 'kick_start_time': '5.0', 'heater': 'heater_bed', 'heater_temp': '60', 'fan_speed': '1.0'}, 'output_pin caselight': {'pin': 'PD15', 'pwm': 'true', 'shutdown_value': '0', 'value': '1', 'cycle_time': '0.01'}, 'neopixel headlight': {'pin': 'PB0', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '0.0', 'initial_green': '0.2157', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'temperature_sensor chamber_temp': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF5', 'min_temp': '0', 'max_temp': '100', 'gcode_id': 'chamber_th'}, 'idle_timeout': {'timeout': '1800'}, 'safe_z_home': {'home_xy_position': '150,150', 'speed': '100', 'z_hop': '10'}, 'z_tilt': {'z_positions': '\n-50, 18\n150, 348\n350, 18', 'points': '\n30, 5\n150, 245\n270, 5', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'gcode_macro PRINT_START': {'gcode': '\nM117 Homing...\nG28\nATTACH_PROBE\nZ_TILT_ADJUST\nDOCK_PROBE\nG28\nM117 Printing...\n\n\n\n\n\n\n\nG0 X150 Y150 Z30 F3600'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_28003C001150535556323420-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': '^PG6', 'position_endstop': 299.0, 'position_min': 0.0, 'position_max': 299.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'PG9', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 303.5, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PF11', 'dir_pin': '!PG3', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG5', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -4.5, 'position_max': 290.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA0'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PF9', 'dir_pin': '!PF10', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG2'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF4', 'min_temp': 10.0, 'max_temp': 270.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 26.572, 'pid_ki': 2.036, 'pid_kd': 86.691, 'heater_pin': 'PA1', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PC13', 'pressure_advance': 0.05, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'PF0', 'rotation_distance': 21.9459674016, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 55.196, 'pid_ki': 2.091, 'pid_kd': 364.295, 'heater_pin': 'PA2', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'probe': {'z_offset': 0.0, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': 'PG15', 'speed': 10.0, 'lift_speed': 10.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 5, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.006, 'samples_tolerance_retries': 6}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE5', 'fan_speed': 1.0}, 'controller_fan controller_fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD12', 'fan_speed': 1.0, 'idle_speed': 1.0, 'idle_timeout': 30, 'heater': ['heater_bed']}, 'heater_fan exhaust_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 5.0, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13', 'fan_speed': 1.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PD15', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 1.0, 'maximum_mcu_duration': 0.0, 'value': 1.0, 'shutdown_value': 0.0}, 'neopixel headlight': {'pin': 'PB0', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 0.0, 'initial_green': 0.2157, 'initial_blue': 1.0, 'initial_white': 0.0}, 'temperature_sensor chamber_temp': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF5', 'min_temp': 0.0, 'max_temp': 100.0, 'gcode_id': 'chamber_th'}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'safe_z_home': {'home_xy_position': [150.0, 150.0], 'z_hop': 10.0, 'z_hop_speed': 15.0, 'speed': 100.0, 'move_to_previous': False}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [150.0, 348.0], [350.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 5.0], [150.0, 245.0], [270.0, 5.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'gcode_macro print_start': {'gcode': '\nM117 Homing...\nG28\nATTACH_PROBE\nZ_TILT_ADJUST\nDOCK_PROBE\nG28\nM117 Printing...\n\n\n\n\n\n\n\nG0 X150 Y150 Z30 F3600', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1500.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-02-24 17:44:28,136 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-24 17:44:28,136 [printer.py:reinit()] - Klipper version: v0.12.0-103-g6ce6fbbc-dirty
2024-02-24 17:44:28,136 [printer.py:reinit()] - # Extruders: 1
2024-02-24 17:44:28,136 [printer.py:reinit()] - # Temperature devices: 2
2024-02-24 17:44:28,137 [printer.py:reinit()] - # Fans: 4
2024-02-24 17:44:28,137 [printer.py:reinit()] - # Output pins: 1
2024-02-24 17:44:28,137 [printer.py:reinit()] - # Leds: 1
2024-02-24 17:44:28,148 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/gcode/help
2024-02-24 17:44:28,150 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-02-24 17:44:28,398 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor chamber_temp&fan&controller_fan controller_fan&heater_fan hotend_fan&heater_fan exhaust_fan&output_pin caselight&neopixel headlight
2024-02-24 17:44:28,400 [files.py:set_gcodes_path()] - Gcodes path: /home/pi/printer_data/gcodes
2024-02-24 17:44:28,400 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-02-24 17:44:28,401 [KlippyWebsocket.py:get_dir_info()] - Sending server.files.get_directory  gcodes
2024-02-24 17:44:28,401 [screen.py:init_klipper()] - Printer initialized
2024-02-24 17:44:28,401 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-02-24 17:44:28,401 [printer.py:change_state()] - Adding callback for state: startup
2024-02-24 17:44:32,139 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-02-24 17:44:32,139 [printer.py:change_state()] - Adding callback for state: ready
2024-02-24 17:44:32,141 [screen.py:show_panel()] - Reinitializing panel
2024-02-24 17:44:32,190 [main_menu.py:__init__()] - ### Making MainMenu
2024-02-24 17:44:32,194 [main_menu.py:add_device()] - Adding device: extruder
2024-02-24 17:44:32,199 [main_menu.py:add_device()] - Adding device: heater_bed
2024-02-24 17:44:32,205 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber_temp
2024-02-24 17:44:32,231 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-02-24 17:44:32,243 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/temperature_store
2024-02-24 17:44:32,252 [printer.py:init_temp_store()] - Temp store: ['heater_bed', 'temperature_sensor chamber_temp', 'extruder']
2024-02-24 17:44:32,261 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/config
2024-02-24 17:44:32,262 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-02-24 17:44:55,206 [screen.py:_load_panel()] - Loading panel: move
2024-02-24 17:44:55,290 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-02-24 17:44:56,621 [screen.py:_load_panel()] - Loading panel: menu
2024-02-24 17:44:56,698 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move > menu
2024-02-24 17:44:56,707 [menu.py:arrangeMenuItems()] - X > homing quad_gantry_level
2024-02-24 17:44:58,564 [screen.py:_send_action()] - printer.gcode.script: {'script': 'G28 Z'}
2024-02-24 17:45:14,316 [screen.py:_menu_go_back()] - #### Menu go back
2024-02-24 17:45:14,350 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move
2024-02-24 17:45:38,336 [screen.py:_load_panel()] - Loading panel: zcalibrate
2024-02-24 17:45:38,341 [printer.py:get_probe()] - Probe type: probe
2024-02-24 17:45:38,342 [zcalibrate.py:__init__()] - Z offset: 0.0
2024-02-24 17:45:38,378 [zcalibrate.py:__init__()] - Available functions for calibration: ['probe']
2024-02-24 17:45:38,405 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > move > zcalibrate
2024-02-24 17:46:10,221 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: TESTZ Z=-1
2024-02-24 17:46:11,060 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: TESTZ Z=-1
2024-02-24 17:46:11,781 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: TESTZ Z=-1
2024-02-24 17:46:13,932 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: TESTZ Z=-1
2024-02-24 17:46:14,796 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: TESTZ Z=-1
2024-02-24 17:46:16,145 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: TESTZ Z=-1
2024-02-24 17:46:18,937 [zcalibrate.py:change_distance()] - ### Distance .1
2024-02-24 17:46:19,416 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: TESTZ Z=+.1
2024-02-24 17:46:20,932 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: TESTZ Z=+.1
2024-02-24 17:46:22,757 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: TESTZ Z=+.1
2024-02-24 17:46:24,004 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: TESTZ Z=+.1
2024-02-24 17:46:24,606 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: TESTZ Z=+.1
2024-02-24 17:46:27,173 [zcalibrate.py:change_distance()] - ### Distance .05
2024-02-24 17:46:27,772 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: TESTZ Z=+.05
2024-02-24 17:46:29,860 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: TESTZ Z=-.05
2024-02-24 17:47:12,040 [zcalibrate.py:accept()] - Accepting Z position
2024-02-24 17:47:12,041 [KlippyWebsocket.py:gcode_script()] - Sending printer.gcode.script: ACCEPT
2024-02-24 17:47:12,077 [KlippyGtk.py:Dialog()] - Showing dialog KlipperScreen (width=800, height=480)
2024-02-24 17:47:13,321 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-02-24 17:47:13,321 [screen.py:_send_action()] - printer.gcode.script: {'script': 'SAVE_CONFIG'}
2024-02-24 17:47:14,364 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-02-24 17:47:14,364 [printer.py:change_state()] - Adding callback for state: disconnected
2024-02-24 17:47:14,365 [screen.py:state_disconnected()] - ### Going to disconnected
2024-02-24 17:47:14,365 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-02-24 17:47:14,367 [screen.py:show_panel()] - Reinitializing panel
2024-02-24 17:47:14,398 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-02-24 17:47:18,106 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/info
2024-02-24 17:47:18,122 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/server/webcams/list
2024-02-24 17:47:18,124 [printer.py:configure_cameras()] - Cameras: []
2024-02-24 17:47:18,125 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'dbus_manager', 'database', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'http_client', 'announcements', 'webcam', 'extensions', 'history', 'octoprint_compat', 'update_manager'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.8.0-310-g67c98f6', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-02-24 17:47:18,142 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/info
2024-02-24 17:47:18,220 [KlippyRest.py:_do_request()] - Sending request to http://127.0.0.1:7125/printer/objects/query?configfile
2024-02-24 17:47:18,223 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'CANCEL_PRINT_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_28003C001150535556323420-if00', 'restart_method': 'command'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '300', 'max_accel': '3000', 'max_z_velocity': '15', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'stepper_x': {'step_pin': 'PF13', 'dir_pin': 'PF12', 'enable_pin': '!PF14', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': '^PG6', 'position_min': '0', 'position_endstop': '299', 'position_max': '299', 'homing_speed': '25', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PG0', 'dir_pin': 'PG1', 'enable_pin': '!PF15', 'rotation_distance': '40', 'microsteps': '32', 'full_steps_per_rotation': '400', 'endstop_pin': 'PG9', 'position_min': '0', 'position_endstop': '300', 'position_max': '303.5', 'homing_speed': '25', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PF11', 'dir_pin': '!PG3', 'enable_pin': '!PG5', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '290', 'position_min': '-4.5', 'homing_speed': '8.0', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z1': {'step_pin': 'PG4', 'dir_pin': '!PC1', 'enable_pin': '!PA0', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z2': {'step_pin': 'PF9', 'dir_pin': '!PF10', 'enable_pin': '!PG2', 'rotation_distance': '4', 'microsteps': '32', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'interpolate': 'False', 'run_current': '0.6', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PC13', 'dir_pin': 'PF0', 'enable_pin': '!PF1', 'rotation_distance': '21.9459674016', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.75', 'heater_pin': 'PA1', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF4', 'min_temp': '10', 'max_temp': '270', 'max_power': '1.0', 'min_extrude_temp': '170', 'pressure_advance': '0.05', 'pressure_advance_smooth_time': '0.040', 'control': 'pid', 'pid_kp': '26.572', 'pid_ki': '2.036', 'pid_kd': '86.691'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'interpolate': 'false', 'run_current': '0.5', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PA2', 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF3', 'max_power': '1', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '55.196', 'pid_ki': '2.091', 'pid_kd': '364.295'}, 'probe': {'pin': 'PG15', 'x_offset': '0', 'y_offset': '0', 'speed': '10.0', 'samples': '5', 'samples_result': 'median', 'sample_retract_dist': '3.0', 'samples_tolerance': '0.006', 'samples_tolerance_retries': '6', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-1.500'}, 'fan': {'pin': 'PA8', 'kick_start_time': '0.5', 'off_below': '0.10'}, 'heater_fan hotend_fan': {'pin': 'PE5', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'controller_fan controller_fan': {'pin': 'PD12', 'kick_start_time': '0.5', 'heater': 'heater_bed'}, 'heater_fan exhaust_fan': {'pin': 'PD13', 'max_power': '1.0', 'shutdown_speed': '0.0', 'kick_start_time': '5.0', 'heater': 'heater_bed', 'heater_temp': '60', 'fan_speed': '1.0'}, 'output_pin caselight': {'pin': 'PD15', 'pwm': 'true', 'shutdown_value': '0', 'value': '1', 'cycle_time': '0.01'}, 'neopixel headlight': {'pin': 'PB0', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '0.0', 'initial_green': '0.2157', 'initial_blue': '1.0', 'initial_white': '0.0'}, 'temperature_sensor chamber_temp': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'sensor_pin': 'PF5', 'min_temp': '0', 'max_temp': '100', 'gcode_id': 'chamber_th'}, 'idle_timeout': {'timeout': '1800'}, 'safe_z_home': {'home_xy_position': '150,150', 'speed': '100', 'z_hop': '10'}, 'z_tilt': {'z_positions': '\n-50, 18\n150, 348\n350, 18', 'points': '\n30, 5\n150, 245\n270, 5', 'speed': '200', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE8, EXP1_2=PE7,\nEXP1_3=PE9, EXP1_4=PE10,\nEXP1_5=PE12, EXP1_6=PE13,\nEXP1_7=PE14, EXP1_8=PE15,\nEXP1_9=<GND>, EXP1_10=<5V>,\n\n\nEXP2_1=PA6, EXP2_2=PA5,\nEXP2_3=PB1, EXP2_4=PA4,\nEXP2_5=PB2, EXP2_6=PA7,\nEXP2_7=PC15, EXP2_8=<RST>,\nEXP2_9=<GND>, EXP2_10=<5V>'}, 'gcode_macro PRINT_START': {'gcode': '\nM117 Homing...\nG28\nATTACH_PROBE\nZ_TILT_ADJUST\nDOCK_PROBE\nG28\nM117 Printing...\n\n\n\n\n\n\n\nG0 X150 Y150 Z30 F3600'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END'}}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32f446xx_28003C001150535556323420-if00', 'baud': 250000, 'restart_method': 'command', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set allow_park = client.park_at_cancel|default(false)|lower == \'true\' %}\n{% set retract = client.cancel_retract|default(5.0)|abs %}\n\n{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)\nelse "X=" ~ client.park_at_cancel_x %}\n{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)\nelse "Y=" ~ client.park_at_cancel_y %}\n{% set custom_park = park_x|length > 0 or park_y|length > 0 %}\n\n\n{% if printer[\'gcode_macro RESUME\'].restore_idle_timeout > 0 %}\nSET_IDLE_TIMEOUT TIMEOUT={printer[\'gcode_macro RESUME\'].restore_idle_timeout}\n{% endif %}\n{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}\n_CLIENT_RETRACT LENGTH={retract}\nTURN_OFF_HEATERS\nM106 S0\n{client.user_cancel_macro|default("")}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n\nSET_PAUSE_NEXT_LAYER ENABLE=0\nSET_PAUSE_AT_LAYER ENABLE=0 LAYER=0\nCANCEL_PRINT_BASE', 'rename_existing': 'CANCEL_PRINT_BASE', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'tmc2209 stepper_x': {'uart_pin': 'PC4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PF13', 'dir_pin': 'PF12', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF14', 'endstop_pin': '^PG6', 'position_endstop': 299.0, 'position_min': 0.0, 'position_max': 299.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PD11', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PG0', 'dir_pin': 'PG1', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': [], 'enable_pin': '!PF15', 'endstop_pin': 'PG9', 'position_endstop': 300.0, 'position_min': 0.0, 'position_max': 303.5, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PC6', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PF11', 'dir_pin': '!PG3', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG5', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -4.5, 'position_max': 290.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PC7', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PG4', 'dir_pin': '!PC1', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA0'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF2', 'uart_address': 0, 'run_current': 0.6, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 32, 'step_pin': 'PF9', 'dir_pin': '!PF10', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PG2'}, 'tmc2209 extruder': {'uart_pin': 'PE4', 'uart_address': 0, 'run_current': 0.5, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF4', 'min_temp': 10.0, 'max_temp': 270.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 26.572, 'pid_ki': 2.036, 'pid_kd': 86.691, 'heater_pin': 'PA1', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 79.82432411074329, 'max_extrude_only_accel': 798.2432411074329, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PC13', 'pressure_advance': 0.05, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'PF0', 'rotation_distance': 21.9459674016, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 10.0]], 'enable_pin': '!PF1'}, 'heater_bed': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF3', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 55.196, 'pid_ki': 2.091, 'pid_kd': 364.295, 'heater_pin': 'PA2', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'probe': {'z_offset': -1.5, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': 'PG15', 'speed': 10.0, 'lift_speed': 10.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 5, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.006, 'samples_tolerance_retries': 6}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PA8'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE5', 'fan_speed': 1.0}, 'controller_fan controller_fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD12', 'fan_speed': 1.0, 'idle_speed': 1.0, 'idle_timeout': 30, 'heater': ['heater_bed']}, 'heater_fan exhaust_fan': {'heater': ['heater_bed'], 'heater_temp': 60.0, 'max_power': 1.0, 'kick_start_time': 5.0, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PD13', 'fan_speed': 1.0}, 'output_pin caselight': {'pwm': True, 'pin': 'PD15', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 1.0, 'maximum_mcu_duration': 0.0, 'value': 1.0, 'shutdown_value': 0.0}, 'neopixel headlight': {'pin': 'PB0', 'chain_count': 3, 'color_order': ['GRBW'], 'initial_red': 0.0, 'initial_green': 0.2157, 'initial_blue': 1.0, 'initial_white': 0.0}, 'temperature_sensor chamber_temp': {'sensor_type': 'ATC Semitec 104NT-4-R025H42G', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PF5', 'min_temp': 0.0, 'max_temp': 100.0, 'gcode_id': 'chamber_th'}, 'idle_timeout': {'timeout': 1800.0, 'gcode': "\n{% if 'heaters' in printer %}\n   TURN_OFF_HEATERS\n{% endif %}\nM84\n"}, 'safe_z_home': {'home_xy_position': [150.0, 150.0], 'z_hop': 10.0, 'z_hop_speed': 15.0, 'speed': 100.0, 'move_to_previous': False}, 'z_tilt': {'z_positions': [[-50.0, 18.0], [150.0, 348.0], [350.0, 18.0]], 'retries': 5, 'retry_tolerance': 0.0075, 'points': [[30.0, 5.0], [150.0, 245.0], [270.0, 5.0]], 'horizontal_move_z': 10.0, 'speed': 200.0}, 'board_pins': {'mcu': ['mcu'], 'aliases': [['EXP1_1', 'PE8'], ['EXP1_2', 'PE7'], ['EXP1_3', 'PE9'], ['EXP1_4', 'PE10'], ['EXP1_5', 'PE12'], ['EXP1_6', 'PE13'], ['EXP1_7', 'PE14'], ['EXP1_8', 'PE15'], ['EXP1_9', '<GND>'], ['EXP1_10', '<5V>'], ['EXP2_1', 'PA6'], ['EXP2_2', 'PA5'], ['EXP2_3', 'PB1'], ['EXP2_4', 'PA4'], ['EXP2_5', 'PB2'], ['EXP2_6', 'PA7'], ['EXP2_7', 'PC15'], ['EXP2_8', '<RST>'], ['EXP2_9', '<GND>'], ['EXP2_10', '<5V>']]}, 'gcode_macro print_start': {'gcode': '\nM117 Homing...\nG28\nATTACH_PROBE\nZ_TILT_ADJUST\nDOCK_PROBE\nG28\nM117 Printing...\n\n\n\n\n\n\n\nG0 X150 Y150 Z30 F3600', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set th = printer.toolhead %}\n{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}\n{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}\n{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}\n\nSAVE_GCODE_STATE NAME=STATE_PRINT_END\n\nM400\nG92 E0\nG1 E-2.0 F3600\n\nTURN_OFF_HEATERS\n\nG90\nG0 X{x_safe} Y{y_safe} Z{z_safe} F20000\nG0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600\nM107\n\nBED_MESH_CLEAR\nRESTORE_GCODE_STATE NAME=STATE_PRINT_END', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 300.0, 'max_accel': 3000.0, 'max_accel_to_decel': 1500.0, 'square_corner_velocity': 5.0, 'kinematics': 'corexy', 'max_z_velocity': 15.0, 'max_z_accel': 350.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}}}
2024-02-24 17:47:18,225 [printer.py:stop_tempstore_updates()] - Stopping tempstore
